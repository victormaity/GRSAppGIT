[{"testset":{"tests":[{"testcase":{"tag":"@TestCaseId(\"getDiseaseBriefingRecordREST_001\")","time":"2019-06-14 23:59:08","title":"Verify necessary fields are present in the response","steps":[{"date":"2019-06-14 23:59:08","title":"I am authenticated user accessing &quot;REST&quot; API","status":"passed"},{"date":"2019-06-14 23:59:08","StepAttachment":[{"mime":"TXT","content":"aHR0cHM6Ly9wcm9kZXUtYXBpLmNvcnRlbGxpcy5pbnQuY2xhcml2YXRlLmNvbS9hcGktd3Mvd3MvcnMvZGlzZWFzZWJyaWVmaW5ncy12Mi9kaXNlYXNlQnJpZWZpbmcvMQ=="},{"mime":"TXT","content":"{"diseaseBriefingRecordOutput":{"DiseaseInfo":"<Sections><Section sectionId=\"397\" modifiedDate=\"20181214085055\">  <Title>Facts about HIV and AIDS<\/Title>  <Body>    <para>The human immunodeficiency virus (HIV) is a retrovirus belonging to the Retroviridae family, lentivirus genus, which was first identified in 1983. Initially the virus was designated human T-cell lymphotrophic virus type III (HTLV-III) or lymphadenopathy-associated virus (LAV) (<REF id=\"1162638\">De Clercq, E., 2007<\/REF>). There are two main forms of the virus that cause human disease: HIV-1 and HIV-2. These forms are similar in their genetic structure and modes of transmission, although their DNA sequences differ by as much as 40% (<REF id=\"1199753\">Cohen, M.S. et al., 2008<\/REF>). HIV-2 has historically be considered less virulent (<REF id=\"2552673\">Azevedo-Pereira, J.M. and Santos-Costa, Q., 2016<\/REF>), progressing to AIDS less frequently and associated with lower mortality; however, a long-term study comparing HIV-1- and HIV-2-infected subjects in Guinea-Bissau suggests that HIV-2 is more pathogenic and deadly than previously believed (<REF id=\"2931416\">Esbjörnsson, J. et al., 2018<\/REF>).<\/para>    <para>Untreated, HIV causes the acquired immune deficiency syndrome (AIDS), a gradual deterioration of the immune system, leading to opportunistic infections and ultimately, death. The outlook for HIV-infected individuals has improved significantly with the introduction in 1996 of highly active antiretroviral therapy (HAART), which--if initiated early and taken correctly--can transform the disease from a life sentence to a chronic pathology (<REF id=\"1955205\">Le Douce, V. et al., 2012<\/REF>; <REF id=\"2209456\">Maartens, G. et al., 2014<\/REF>).<\/para>    <para>The World Health Organization (WHO) estimates that there were approximately 36.9 million adults and children living with HIV/AIDS worldwide in 2017, but that only 75% of HIV-positive individuals worldwide were aware of their status, and even fewer were receiving antiretroviral drug therapy (<a href=\"http://www.who.int/hiv/data/en/\">HIV/AIDS -- data and statistics (World Health Organization)<\/a>, consulted December 3, 2018). The Joint United Nations Programme on HIV/AIDS (UNAIDS)  has set the ambitious goal of tackling underdiagnosis and undertreatment of HIV, and thus of ending the global AIDS epidemic, by the year 2030 (<REF id=\"2552676\">Harries, A.D. et al., 2016<\/REF>; <REF id=\"2949697\">Medlock, J. et al., 2017<\/REF>). If this goal is successfully achieved, an estimated 73% of all people in the world with HIV will have undetectable viral levels. At this level of viral suppression, the trajectory of the AIDS epidemic would hit an inflection point, no longer reaching pandemic proportions (<REF id=\"2948271\">Fauci, A.S., 2017<\/REF>). The cost-benefit ratio of such an approach is significant: each U.S. dollar invested in a fast-track version of this HIV elimination strategy will reap USD 6.44 in economic benefits (<REF id=\"2944307\">Lamontagne, E. et al., 2018<\/REF>). <\/para>  <\/Body>  <References>    <Reference id=\"1162638\" medline_id=\"18049474\">      <Title>The design of drugs for HIV and HCV<\/Title>      <SourceTitle>Nature Reviews Drug Discovery<\/SourceTitle>      <PubMedTitle>Nat Rev Drug Discov<\/PubMedTitle>      <Volume>6<\/Volume>      <Issue>12<\/Issue>      <Page>1001<\/Page>      <Year>2007<\/Year>      <Authors>        <Author>De Clercq, E.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1199753\" medline_id=\"18382737\">      <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic<\/Title>      <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>      <PubMedTitle>J Clin Invest<\/PubMedTitle>      <Volume>118<\/Volume>      <Issue>4<\/Issue>      <Page>1244<\/Page>      <Year>2008<\/Year>      <Authors>        <Author>Cohen, M.S.<\/Author>        <Author>Hellmann, N.<\/Author>        <Author>Levy, J.A.<\/Author>        <Author>Decock, K.<\/Author>        <Author>Lange, J.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1955205\" medline_id=\"22294645\">      <Title>Achieving a cure for HIV infection: Do we have reasons to be optimistic?<\/Title>      <SourceTitle>Journal of Antimicrobial Chemotherapy<\/SourceTitle>      <PubMedTitle>J Antimicrob Chemother<\/PubMedTitle>      <Volume>67<\/Volume>      <Issue>5<\/Issue>      <Page>1063<\/Page>      <Year>2012<\/Year>      <Authors>        <Author>Le Douce, V.<\/Author>        <Author>Janossy, A.<\/Author>        <Author>Hallay, H.<\/Author>        <Author>Ali, S.<\/Author>        <Author>Riclet, R.<\/Author>        <Author>Rohr, O.<\/Author>        <Author>Schwartz, C.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2209456\" medline_id=\"24907868\">      <Title>HIV infection: Epidemiology, pathogenesis, treatment, and prevention<\/Title>      <SourceTitle>The Lancet<\/SourceTitle>      <PubMedTitle>Lancet<\/PubMedTitle>      <Volume>384<\/Volume>      <Issue>9939<\/Issue>      <Page>258<\/Page>      <Year>2014<\/Year>      <Authors>        <Author>Maartens, G.<\/Author>        <Author>Celum, C.<\/Author>        <Author>Lewin, S.R.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2552673\" medline_id=\"26936760\">      <Title>HIV interaction with human host: HIV-2 as a model of a less virulent infection<\/Title>      <SourceTitle>AIDS Reviews<\/SourceTitle>      <PubMedTitle>AIDS Rev<\/PubMedTitle>      <Volume>18<\/Volume>      <Issue>1<\/Issue>      <Page>44<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Azevedo-Pereira, J.M.<\/Author>        <Author>Santos-Costa, Q.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2552676\" medline_id=\"27703672\">      <Title>Ending the HIV/AIDS epidemic in low- and middle-income countries by 2030: Is it possible?<\/Title>      <SourceTitle>F1000Research<\/SourceTitle>      <PubMedTitle>F1000Res<\/PubMedTitle>      <Volume>5<\/Volume>      <Page>2328<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Harries, A.D.<\/Author>        <Author>Suthar, A.B.<\/Author>        <Author>Takarinda, K.C.<\/Author>        <Author>Tweya, H.<\/Author>        <Author>Kyaw, N.T.<\/Author>        <Author>Tayler-Smith, K.<\/Author>        <Author>Zachariah, R.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2931416\" medline_id=\"30392769\">      <Title>Long-term follow-up of HIV-2-related AIDS and mortality in Guinea-Bissau: A prospective open cohort study<\/Title>      <SourceTitle>The Lancet. HIV<\/SourceTitle>      <PubMedTitle>Lancet HIV<\/PubMedTitle>      <Volume>6<\/Volume>      <Issue>1<\/Issue>      <Page>E25<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Esbjörnsson, J.<\/Author>        <Author>Månsson, F.<\/Author>        <Author>Kvist, A.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2944307\" medline_id=\"30497785\">      <Title>The economic returns of ending the AIDS epidemic as a public health threat<\/Title>      <SourceTitle>Health Policy<\/SourceTitle>      <PubMedTitle>Health Policy<\/PubMedTitle>      <Volume>123<\/Volume>      <Issue>1<\/Issue>      <Page>104<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Lamontagne, E.<\/Author>        <Author>Over, M.<\/Author>        <Author>Stover, J.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2948271\" medline_id=\"29052689\">      <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic<\/Title>      <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>      <PubMedTitle>JAMA<\/PubMedTitle>      <Volume>318<\/Volume>      <Issue>16<\/Issue>      <Page>1535<\/Page>      <Year>2017<\/Year>      <Authors>        <Author>Fauci, A.S.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2949697\" medline_id=\"28320938\">      <Title>Effectiveness of UNAIDS targets and HIV vaccination across 127 countries<\/Title>      <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)<\/SourceTitle>      <PubMedTitle>Proc Natl Acad Sci U S A<\/PubMedTitle>      <Volume>114<\/Volume>      <Issue>15<\/Issue>      <Page>4017<\/Page>      <Year>2017<\/Year>      <Authors>        <Author>Medlock, J.<\/Author>        <Author>Pandey, A.<\/Author>        <Author>Parpia, A.S.<\/Author>        <Author>Tang, A.<\/Author>        <Author>Skrip, L.A.<\/Author>        <Author>Galvani, A.P.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"5848\" modifiedDate=\"20181213034904\">    <Title>The HIV Virus<\/Title>    <Body>      <para>The human immunodeficiency virus, or HIV, is a small (100 nm in diameter) spherical enveloped virus containing two copies of a 9-kb single-stranded RNA genome encoding 15 proteins. The mature virus particle is surrounded by a single membrane or envelope, which contains several spikes formed by a membrane protein complex, consisting of the transmembrane glycoprotein gp41, non-covalently associated with the protein gp120. The viral matrix (MA) protein lines the inside of the membrane whereas other proteins are associated with the core, containing the two 9-kb genomic RNA molecules, and whose main constituent is the capsid (CA) protein. There are two main types: HIV-1, which is found worldwide, and HIV-2, which was first detected in West Africa but has since been found in other parts of the world (e.g., Portugal, France and India) (<REF id=\"1689288\">Campbell-Yesufu, O.T. and Gandhi, R.T., 2011<\/REF>; <REF id=\"2947850\">Sharp, P.M. and Hahn, B.H., 2011<\/REF>; <REF id=\"2931416\">Esbjörnsson, J. et al., 2018<\/REF>). The types are distinguished on the basis of serological and sequence criteria and small differences in protein composition, such as the presence of an additional accessory protein Vpx, and the absence of other accessory proteins in HIV-2 (<REF id=\"2872874\">Mahdi, M. et al., 2018<\/REF>).<\/para>      <para>The host range of HIV is limited to human beings. Although chimpanzees can be infected, the clinical course of the disease in these apes is different and infection is not fatal. Other species can be infected by related viruses that cause AIDS-like syndromes; these include simian immunodeficiency virus (SIV), which infects African monkeys, and feline immunodeficiency virus (FIV), which infects cats. HIV-1 evolved following zoonotic transmission from nonhuman primates at the beginning of the 20th century (<REF id=\"2947850\">Sharp, P.M. and Hahn, B.H., 2011<\/REF>; <REF id=\"2947496\">Hemelaar, J. et al., 2019<\/REF>). The less prevalent HIV-2 likely originated from an SIV strain infecting sooty mangabeys (<REF id=\"2710609\">Schmitt, K. et al., 2017<\/REF>). The genetically related strains of HIV-1 causing the global AIDS pandemic belong to the group M (main). Other groups have been characterized (N, O), but are much less prevalent. The group M viruses are further subdivided into 9 clades (A-D, F-H, J and K) which differ in their viral DNA by approximately 15-20%. Clade B is most common in North America and Europe, although diversity in these populations is increasing (<REF id=\"2947851\">Siemieniuk, R.A. et al., 2013<\/REF>). The African continent has the widest diversity of HIV subtypes in circulation, with predominance of clades A, C and D as well as their recombinants (<REF id=\"2947852\">Kamali, A. et al., 2015<\/REF>). Clade C was responsible for 46.6% of all new HIV-1 infections diagnosed worldwide from 2010-2015 (<REF id=\"2947496\">Hemelaar, J. et al., 2019<\/REF>). Over the course of the global HIV pandemic, new variants of the retrovirus continue to emerge. In geographic areas in which several genetic forms of the virus coexist, the pivotal role of recombination as a driving force in the emergence of novel genetic forms of HIV has become evident (<REF id=\"2947496\">Hemelaar, J. et al., 2019<\/REF>). <FREETABLE id=\"296\"><![CDATA[  <TABLE WIDTH=\"483\" CELLSPACING=0 CELLPADDING=4 BORDER>      <TR>      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <B>Important RNA viruses and the diseases they produce in humans<\/B><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"150\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <B>Family/Characteristics<\/B><\/TD>      <TD WIDTH=\"143\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <B>Viruses<\/B><\/TD>      <TD WIDTH=\"190\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <B>Diseases<\/B><\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Orthomyxoviruses (Orthomyxoviridae)  Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; segmented genome)<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Influenza A and B virus<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Upper respiratory infection, croup<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Paramyxoviruses (Paramyxoviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; nonsegmented genome)<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Parainfluenza 1-3 virus<br><br>Respiratory syncytial virus<br><br>Measles virus<br><br>Mumps<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Upper respiratory infection, croup<br><br>Upper respiratory infection, croup<br><br>Measles<br><br>Aseptic meningitis<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Coronaviruses (Coronaviridae) Single-stranded RNA,enveloped (No DNA step in replication; positive-sense genome)<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Human coronaviruses<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Upper respiratory infection<\/TD>      <\/TR>            <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Rhabdoviruses (Rhabdoviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; nonsegmented genome)<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Rabies virus<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Rabies<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Picornaviruses (Picornaviridae) Single-stranded RNA, nonenveloped<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Rhinoviruses<br><br>Hepatitis A virus<br><br>Enteroviruses:<br> - Polioviruses<br>- Coxsackie A24 viruses<br>- Coxsackie B viruses<br>- Coxsackie B1-5 viruses<br>- Coxsackie A9 viruses<br>- Echoviruses<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Common cold<br><br>Hepatitis<br><br><br>Paralysis<br>Acute hemorrhagic conjunctivitis<br>Myocarditis, pericarditis<br>Aseptic meningitis<br>Aseptic meningitis<br>Aseptic meningitis, encephalitis<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Caliciviruses (Calciviridae) Single-stranded RNA, nonenveloped<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Norwalk virus<br><br><\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gastroenteritis<br><br><\/TD>      <\/TR><TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Hepeviruses (Hepeviridae) Single-stranded RNA, nonenveloped<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Hepatitis E<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Hepatitis<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Togaviruses (Togaviridae) Single-stranded RNA, enveloped (No DNA step in replication; positive-sense genome)<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Alphaviruses (Group A arboviruses)<br><br>Rubivirus<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Encephalitis, hemorrhagic fever, chikungunya<br><br>Rubella<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Flaviviruses (Flaviviridae) Single-stranded RNA, enveloped (No DNA step in replication; positive-sense genome)<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Group B arboviruses<br><br>Hepatitis C virus<br><br>Dengue virus<br><br>Zika virus<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Encephalitis, hemorrhagic fever<br><br>Hepatitis<br><br>Dengue fever<br><br>Zika<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bunyaviruses (Bunyaviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; segmented genome)<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Some arboviruses<br><br>Hantavirus<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Encephalitis, hemorrhagic fevers<br><br>Fever, renal involvement<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reoviruses (Reoviridae) Double-stranded RNA, nonenveloped<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Human rotaviruses<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gastroenteritis<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Arenaviruses (Arenaviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome;segmented genome)<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Lymphocytic choriomeningitis (LCM virus)<br><br>Lassa virus<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Meningitis<br><br><br>Hemorrhagic fever<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Retroviruses (Retroviridae) Single-stranded RNA, enveloped (DNA step in replication)<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      HTLV-I, HTLV-II<br><br>HIV-1, HIV-2<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      T cell leukemia, lymphoma, paresis<br><br>AIDS<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Filoviruses (Filoviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; nonsegmented genome)<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Marburg virus<br><br>Ebola virus<\/TD>      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Marburg disease<br><br>Ebola hemorrhagic fever<\/TD>      <\/TR>      <\/TABLE>]]><\/FREETABLE>      <\/para>    <\/Body>    <References>      <Reference id=\"1689288\" medline_id=\"21367732\">        <Title>Update on human immunodeficiency virus (HIV)-2 infection<\/Title>        <SourceTitle>Clinical Infectious Diseases<\/SourceTitle>        <PubMedTitle>Clin Infect Dis<\/PubMedTitle>        <Volume>52<\/Volume>        <Issue>6<\/Issue>        <Page>780<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Campbell-Yesufu, O.T.<\/Author>          <Author>Gandhi, R.T.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2710609\" medline_id=\"28750321\">        <Title>Modeling the evolution of SIV sooty mangabey progenitor virus towards HIV-2 using humanized mice<\/Title>        <SourceTitle>Virology<\/SourceTitle>        <PubMedTitle>Virology<\/PubMedTitle>        <Volume>510<\/Volume>        <Page>175<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Schmitt, K.<\/Author>          <Author>Kumar, D.M.<\/Author>          <Author>Curlin, J.<\/Author>          <Author>Remling-Mulder, L.<\/Author>          <Author>Stenglein, M.<\/Author>          <Author>O&apos;Connor, S.<\/Author>          <Author>Marx, P.<\/Author>          <Author>Akkina, R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2872874\" medline_id=\"29743354\">        <Title>Inhibitory effects of HIV-2 Vpx on replication of HIV-1<\/Title>        <SourceTitle>Journal of Virology<\/SourceTitle>        <PubMedTitle>J Virol<\/PubMedTitle>        <Volume>92<\/Volume>        <Issue>14<\/Issue>        <Year>2018<\/Year>        <Authors>          <Author>Mahdi, M.<\/Author>          <Author>Szojka, Z.<\/Author>          <Author>Mótyán, J.A.<\/Author>          <Author>Tozsér, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2931416\" medline_id=\"30392769\">        <Title>Long-term follow-up of HIV-2-related AIDS and mortality in Guinea-Bissau: A prospective open cohort study<\/Title>        <SourceTitle>The Lancet. HIV<\/SourceTitle>        <PubMedTitle>Lancet HIV<\/PubMedTitle>        <Volume>6<\/Volume>        <Issue>1<\/Issue>        <Page>E25<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Esbjörnsson, J.<\/Author>          <Author>Månsson, F.<\/Author>          <Author>Kvist, A.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947496\" medline_id=\"30509777\">        <Title>Global and regional molecular epidemiology of HIV-1, 1990-2015: A systematic review, global survey, and trend analysis<\/Title>        <SourceTitle>The Lancet. Infectious Diseases<\/SourceTitle>        <PubMedTitle>Lancet Infect Dis<\/PubMedTitle>        <Volume>19<\/Volume>        <Issue>2<\/Issue>        <Page>143<\/Page>        <Year>2019<\/Year>        <Authors>          <Author>Hemelaar, J.<\/Author>          <Author>Elangovan, R.<\/Author>          <Author>Yun, J.<\/Author>          <Author>Dickson-Tetteh, L.<\/Author>          <Author>Fleminger, I.<\/Author>          <Author>Kirtley, S.<\/Author>          <Author>Williams, B.<\/Author>          <Author>Gouws-Williams, E.<\/Author>          <Author>Ghys, P.D.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947850\" medline_id=\"22229120\">        <Title>Origins of HIV and the AIDS pandemic<\/Title>        <SourceTitle>Cold Spring Harbor Perspectives in Medicine<\/SourceTitle>        <PubMedTitle>Cold Spring Harb Perspect Med<\/PubMedTitle>        <Volume>1<\/Volume>        <Issue>1<\/Issue>        <Year>2011<\/Year>        <Authors>          <Author>Sharp, P.M.<\/Author>          <Author>Hahn, B.H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947851\" medline_id=\"24421804\">        <Title>Increasing HIV subtype diversity and its clinical implications in a sentinel North American population<\/Title>        <SourceTitle>The Canadian Journal of Infectious Diseases &amp; Medical Microbiology<\/SourceTitle>        <PubMedTitle>Can J Infect Dis Med Microbiol<\/PubMedTitle>        <Volume>24<\/Volume>        <Issue>2<\/Issue>        <Page>69<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Siemieniuk, R.A.<\/Author>          <Author>Beckthold, B.<\/Author>          <Author>Gill, M.J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947852\" medline_id=\"25602351\">        <Title>Creating an African HIV clinical research and prevention trials network: HIV prevalence, incidence and transmission<\/Title>        <SourceTitle>PLoS ONE<\/SourceTitle>        <PubMedTitle>PLoS One<\/PubMedTitle>        <Volume>10<\/Volume>        <Issue>1<\/Issue>        <Year>2015<\/Year>        <Authors>          <Author>Kamali, A.<\/Author>          <Author>Price, M.A.<\/Author>          <Author>Lakhi, S.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"2291\" modifiedDate=\"20190502091557\">    <Title>Transmission<\/Title>    <Body>      <para>HIV-1 transmission occurs most commonly through sexual intercourse, with heterosexual intercourse the route of transmission 85% of the time, and the likelihood of contagion closely correlates with the number of partners. AIDS can also be spread by blood transfusion and other forms of contact between infected blood, and the blood or the mucosa of another person, such as needle sharing in drug addicts. In the early years of the pandemic, transmission to hemophiliacs and polytransfused patients receiving blood from high-risk donors was documented; strict controls have since been introduced to minimize this route of infection. Vertical transmission also occurs: infection of the fetus or newborn from mothers with HIV is possible during pregnancy, childbirth or breastfeeding (<REF id=\"1135290\">Simon, V. et al., 2006<\/REF>). Within the hospital setting, outbreaks of HIV-1 infection have also been linked to nosocomial transmission; In 2016, a potential HIV outbreak in China was caused by lymphocyte immunotherapy involving a HIV-positive donor (<REF id=\"2989517\">Pan, X. et al., 2018<\/REF>). In each of these scenarios, the efficiency of disease transmission is highly dependent upon the concentration of the virus and of virus-infected cells within the infected host, or index case, as well as the susceptibility of the recipient (<REF id=\"1135290\">Simon, V. et al., 2006<\/REF>; <REF id=\"1199753\">Cohen, M.S. et al., 2008<\/REF>). <\/para>      <para>Results from a research collaboration led by scientists in Germany may help explain why the vast majority of HIV infections are transmitted via sexual intercourse. In screening a protein library derived from human semen, the scientists discovered a seminal fluid component that greatly enhanced HIV infection. This factor is an amyloid fibril formed in large numbers by naturally occurring fragments of prostatic acidic phosphatase (PAP), a protein secreted by the prostate gland. Structural analysis of these fibrils revealed that they can sequester HIV and facilitate its binding and fusion to target cells, thereby raising the viral titer by 50- to as high as 100,000-fold. Thus, the PAP fibrils have been named Semen-derived Enhancer of Virus Infection (SEVI). In vitro, incubation with physiological levels of SEVI enhanced HIV infection of macrophages, T cells and human tonsillar tissue. Beyond promoting cellular infection at the site of exposure, the presence of SEVI in co-cultures of T cells with infected dendritic or epithelial cells increased the incidence of intercellular infection. Studies in transgenic rats showed that animals injected with SEVI-treated HIV had five-fold higher viral cDNA levels than those animals injected with HIV alone. Notably, the scientists found that if PAP peptides do not assemble into aggregates or into amyloid fibers they are unable to enhance viral transmission. Thus, these peptides may present a novel target for HIV prevention (<REF id=\"1165021\">Münch, J. et al., 2007<\/REF>).<\/para>      <para>The relative reproduction number (R0) of HIV, an indicator of the ability of the virus to spread, is only slightly greater than 1 in most populations. In order for any infection to spread, the relative reproductive rate must be &gt;1 (meaning that each infected individual must infect more than one other person, on average). In healthy persons, this means that the chance of contracting HIV via heterosexual intercourse is approximately 1 in 1,000 per sexual act (<REF id=\"1065930\">Short, R.V., 2006<\/REF>). R0 is higher in high-risk groups such as injection-drug users, men who have sex with men, and female sex workers, as well as in healthy individuals living in populations (transmission networks) with a large concentration of high-risk subgroups (<REF id=\"2947861\">Williams, B.G. and Dye, C., 2018<\/REF>). <\/para>    <\/Body>    <References>      <Reference id=\"1065930\" medline_id=\"16627296\">        <Title>New ways of preventing HIV infection: Thinking simply, simply thinking<\/Title>        <SourceTitle>Philosophical Transactions - Royal Society. Biological Sciences<\/SourceTitle>        <PubMedTitle>Philos Trans R Soc Lond B Biol Sci<\/PubMedTitle>        <Volume>361<\/Volume>        <Issue>1469<\/Issue>        <Page>811<\/Page>        <Year>2006<\/Year>        <Authors>          <Author>Short, R.V.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1135290\" medline_id=\"16890836\">        <Title>HIV/AIDS epidemiology, pathogenesis, prevention, and treatment<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>368<\/Volume>        <Issue>9534<\/Issue>        <Page>489<\/Page>        <Year>2006<\/Year>        <Authors>          <Author>Simon, V.<\/Author>          <Author>Ho, D.D.<\/Author>          <Author>Abdool Karim, Q.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1165021\" medline_id=\"18083097\">        <Title>Semen-derived amyloid fibrils drastically enhance HIV infection<\/Title>        <SourceTitle>Cell<\/SourceTitle>        <PubMedTitle>Cell<\/PubMedTitle>        <Volume>131<\/Volume>        <Issue>6<\/Issue>        <Page>1059<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Münch, J.<\/Author>          <Author>Rücker, E.<\/Author>          <Author>Ständker, L.<\/Author>          <Author>Adermann, K.<\/Author>          <Author>Goffinet, C.<\/Author>          <Author>Schindler, M.<\/Author>          <Author>Wildum, S.<\/Author>          <Author>Chinnadurai, R.<\/Author>          <Author>Rajan, D.<\/Author>          <Author>Specht, A.<\/Author>          <Author>Giménez-Gallego, G.<\/Author>          <Author>Sánchez, P.C.<\/Author>          <Author>Fowler, D.M.<\/Author>          <Author>Koulov, A.<\/Author>          <Author>Kelly, J.W.<\/Author>          <Author>Mothes, W.<\/Author>          <Author>Grivel, J.C.<\/Author>          <Author>Margolis, L.<\/Author>          <Author>Keppler, O.T.<\/Author>          <Author>Forssmann, W.G.<\/Author>          <Author>Kirchhoff, F.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1199753\" medline_id=\"18382737\">        <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic<\/Title>        <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>        <PubMedTitle>J Clin Invest<\/PubMedTitle>        <Volume>118<\/Volume>        <Issue>4<\/Issue>        <Page>1244<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Cohen, M.S.<\/Author>          <Author>Hellmann, N.<\/Author>          <Author>Levy, J.A.<\/Author>          <Author>Decock, K.<\/Author>          <Author>Lange, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947861\" medline_id=\"29137859\">        <Title>Dynamics and control of infections on social networks of population types<\/Title>        <SourceTitle>Epidemics<\/SourceTitle>        <PubMedTitle>Epidemics<\/PubMedTitle>        <Volume>23<\/Volume>        <Page>11<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Williams, B.G.<\/Author>          <Author>Dye, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2989517\" medline_id=\"30457542\">        <Title>Outbreak of HIV infection linked to nosocomial transmission, China, 2016-2017<\/Title>        <SourceTitle>Emerging Infectious Diseases <\/SourceTitle>        <PubMedTitle>Emerg Infect Dis<\/PubMedTitle>        <Volume>24<\/Volume>        <Issue>12<\/Issue>        <Page>2141<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Pan, X.<\/Author>          <Author>Jiang, J.<\/Author>          <Author>Ma, Q.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"406\" modifiedDate=\"20181213035649\">    <Title>The Viral Life Cycle<\/Title>    <Body>      <para>The life cycle of the HIV virus is exceptionally well characterized (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014<\/REF>). It begins when HIV enters its host cell through membrane fusion. The viral gp120/gp41 membrane glycoprotein complex first binds to the cellular transmembrane protein CD4, present on T helper cells and macrophages. Binding induces a conformational change in gp120/gp41, leading to binding of yet another cellular transmembrane glycoprotein (&quot;coreceptor&quot;), typically a molecule belonging to the class of chemokine receptors. For primary virus strains transmitted from one patient to the next, this coreceptor is nearly always CCR5; evolution of the virus in the body of an infected patient gives rise to strains that recognize predominantly the coreceptor CXCR4 or that have dual or mixed tropism (<REF id=\"1789081\">Gilliam, B.L. et al., 2011<\/REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018<\/REF>). Other coreceptors have also been described.<\/para>      <para>Coreceptor binding induces another conformational change in gp120/gp41, which then leads to fusion of the viral and the host cell membrane, delivering the viral core into the cytoplasm (<REF id=\"1505539\">Tilton, J.C. and Doms, R.W., 2010<\/REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018<\/REF>). Peptides or peptidomimetics that inhibit the conformational changes in gp120/gp41, exemplified by enfuvirtide, have been developed. <\/para>      <para>After fusion, a poorly defined step called &quot;uncoating&quot; of this core exposes the viral nucleoprotein complex, which consists of HIV RNA and the proteins integrase (IN), reverse transcriptase (RT), matrix (MA) and Vpr. The latter protein targets the complex to nuclear pores. Inside the nucleus, RT reverse-transcribes the viral RNA into linear duplex DNA, starting at an annealed tRNA3Lys primer (which is present in the virion) near the 5&apos; end of the genomic RNA. After elongation, RT catalyses two DNA strand transfer reactions that are important for priming the synthesis of both minus and plus strands (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014<\/REF>). RT is a major target of antiviral drugs, which fall into two categories: nucleoside analogues such as AZT and ddI and non-nucleoside inhibitors such as nevirapine. Non-nucleoside inhibitors bind to and inactivate the polymerase, whereas nucleoside analogues inhibit elongation of the viral DNA strands.<FREETABLE id=\"291\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>      <TR>      <TD COLSPAN=4 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <B>Prokaryotic and eukaryotic DNA polymerases<\/B><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"110\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <B><\/B><\/TD>      <TD WIDTH=\"113\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <B><I>Direction of Synthesis<\/I><\/B><\/TD>      <TD WIDTH=\"110\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <B><I>Exonuclease Activity<\/I><\/B><\/TD>      <TD WIDTH=\"110\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <B><I>Actions<\/I><\/B><\/TD>      <\/TR>      <TR>      <TD COLSPAN=4 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <B><I>Prokaryotic<\/B><\/I><\/FONT><\/TD>            <\/TR>            <TR>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Polymerase I<\/TD>      <TD WIDTH=\"113\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      5' &#8594; 3'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      5' &#8594; 3' and 3'&#8594; 5'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gap filling after primer removal; DNA repair<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Polymerase II<\/TD>      <TD WIDTH=\"113\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      5' &#8594; 3' <\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      3' &#8594; 5'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gap filling after primer removal; DNA repair<\/TD>      <\/TR>            <TR>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Polymerase III<\/TD>      <TD WIDTH=\"113\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      5' &#8594; 3'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      5' &#8594; 3' and 3'&#8594; 5' <BR><\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Primary replication enzyme<BR><\/TD>      <\/TR>      <TR>      <TD COLSPAN=4 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <B><I>Eukaryotic<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Polymerase alpha<\/TD>      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      5' &#8594; 3'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      None<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Primary replication enzyme with polymerase delta<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Polymerase beta<\/TD>      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      5' &#8594; 3'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      None<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      DNA repair<\/TD>      <\/TR>             <TR>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Polymerase gamma<\/TD>      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      5' &#8594; 3'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      3' &#8594; 5'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Primary replication enzyme of mitochondria and chloroplasts<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Polymerase delta<\/TD>      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      5' &#8594; 3'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      3' &#8594; 5'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Primary replication enzyme with polymerase alpha<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Polymerase epsilon<\/TD>      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      5' &#8594; 3'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      3' &#8594; 5'<\/TD>      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      DNA repair; may also cooperate with polymerases alpha and delta in primary replication<\/TD>      <\/TR><\/TABLE>]]><\/FREETABLE>      <\/para>      <para>The zinc-finger protein IN then integrates a complete viral minus-strand of DNA and a plus-strand containing several gaps into a host chromosome, by first removing two 3&apos; nucleotides from each strand of the linear viral DNA, producing overhanging CA ends, joining these 3&apos; ends covalently to the 5&apos; ends of the host cell DNA, and removing unpaired nucleotides at the viral 5&apos; ends, which are joined with the host cell&apos;s 3&apos; ends (<REF id=\"2947863\">Choi, E. et al., 2018<\/REF>). <\/para>      <para>The gaps in the plus-strands are then probably repaired by host cell enzymes. Transcription of the integrated provirus by RNA polymerase II begins at a promoter in the 5&apos; long terminal repeat (LTR). Several start sites for cellular transcription factors are present upstream, but elongation by these factors is rather inefficient, and the viral protein Tat (transactivator) is required to enhance their processivity. Tat binds to the RNA hairpin Tar (trans-activating response element), and not to DNA, at the 5&apos; end of viral transcripts. <\/para>      <para>A single 9-kb RNA is produced, encoding (from 5&apos; to 3&apos;) the usual retroviral polyproteins Gag, Pol and Env, which has the following features: The TAR hairpin, the tRNA3Lys primer binding site, a packaging signal Psi that binds to the viral NC (nucleocapsid) protein and is responsible for its incorporation into a virion, a Gag-Pol frameshifting region that allows translation of the Gag-Pol polyprotein at a frequency of 5-10%, a REV response element that is the Rev-binding site and a polyadenylation signal at the 3&apos; end. There is a single major splice donor site and a number of splice acceptor sites. The 9-kb RNA and a set of spliced products are exported to the cytoplasm for translation or packaging.<\/para>      <para>Early mRNAs produced encode the proteins Rev, Tat and Nef. Later in infection, other less spliced transcripts are produced. The early/late switch is controlled by Rev; the presence of Rev is required to export unspliced RNAs that contain an REV-Responsive Element (RRE) to the cytoplasm. A total of nine open reading frames are encoded&lt;/A&gt; by the HIV-1 genome. Proteolysis of the usual retroviral gag, pol and env polyproteins gives rise to the proteins that are common to all retroviruses, like the protease (PR), RT, and IN from the pol region. However, HIV also produces six &quot;accessory&quot; proteins: Tat, Rev, Vpu, and the three structural proteins Vif, Nef and Vpr. Not all of these proteins are druggable targets, however (<REF id=\"1162632\">Flexner, C., 2007<\/REF>).<\/para>      <para>The env region encodes the gp160 precursor of the gp120/gp41 membrane glycoprotein complex, a protein produced in the endoplasmic reticulum (ER). The cellular receptor protein CD4 is also produced in the ER. To prevent this protein from sticking to gp160, retaining the complex in the ER, Vpu causes the degradation of CD4. After proteolysis of gp160 into gp120/gp41 in the late Golgi, gp120/gp41 is transported to the plasma membrane, where it is prevented from CD4 binding by the action of Nef, which induces internalization and degradation of plasma membrane CD4. In the plasma membrane gp120/gp41 probably localizes to specific domains known as &quot;glycolipid rafts&quot; (<REF id=\"655852\">Nguyen, D.H. and Hildreth, J.E., 2000<\/REF>). Virus assembly begins at these sites by an interaction between the intracellular domain of gp41, and the beginning of capsid formation by Gag and Gag-Pol polyproteins. A virus particle then buds from the plasma membrane. While the particle is budding, the viral protease PR (aided by Vif) cleaves the Gag and Gag-Pol polyproteins to IN, RT, p6, CA, NC, PR. &quot;Immature&quot; virus particles with uncleaved polyproteins are not infectious (<REF id=\"2947854\">Ghosh, A.K. et al., 2016<\/REF>).<\/para>      <para>The crystal structure of PR and of a number of PR-inhibitor complexes have been solved. In its active form, PR is a dimer; the active site contains a catalytically important aspartic acid from each of the monomers and is very similar to that of other retroviral aspartyl proteases. The lack of similar cellular proteases has made the activity of PR a major target for antiviral drugs (<REF id=\"2947854\">Ghosh, A.K. et al., 2016<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"655852\" medline_id=\"10708443\">        <Title>Evidence for budding of human immunodeficiency virus type 1 selectively from glycolipid-enriched membrane lipid rafts<\/Title>        <SourceTitle>Journal of Virology<\/SourceTitle>        <PubMedTitle>J Virol<\/PubMedTitle>        <Volume>74<\/Volume>        <Issue>7<\/Issue>        <Page>3264<\/Page>        <Year>2000<\/Year>        <Authors>          <Author>Nguyen, D.H.<\/Author>          <Author>Hildreth, J.E.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1162632\" medline_id=\"17932493\">        <Title>HIV drug development: The next 25 years<\/Title>        <SourceTitle>Nature Reviews Drug Discovery<\/SourceTitle>        <PubMedTitle>Nat Rev Drug Discov<\/PubMedTitle>        <Volume>6<\/Volume>        <Issue>12<\/Issue>        <Page>959<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Flexner, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1505539\" medline_id=\"19683546\">        <Title>Entry inhibitors in the treatment of HIV-1 infection<\/Title>        <SourceTitle>Antiviral Research<\/SourceTitle>        <PubMedTitle>Antiviral Res<\/PubMedTitle>        <Volume>85<\/Volume>        <Issue>1<\/Issue>        <Page>91<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Tilton, J.C.<\/Author>          <Author>Doms, R.W.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1789081\" medline_id=\"21284908\">        <Title>Clinical use of CCR5 inhibitors in HIV and beyond<\/Title>        <SourceTitle>Journal of Translational Medicine (Online)<\/SourceTitle>        <PubMedTitle>J Transl Med<\/PubMedTitle>        <Volume>9<\/Volume>        <Issue>Suppl. 1<\/Issue>        <Page>S9<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Gilliam, B.L.<\/Author>          <Author>Riedel, D.J.<\/Author>          <Author>Redfield, R.R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2229129\" medline_id=\"25151562\">        <Title>Antiretroviral therapy: Current drugs<\/Title>        <SourceTitle>Infectious Disease Clinics of North America<\/SourceTitle>        <PubMedTitle>Infect Dis Clin North Am<\/PubMedTitle>        <Volume>28<\/Volume>        <Issue>3<\/Issue>        <Page>371<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Pau, A.K.<\/Author>          <Author>George, J.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947854\" medline_id=\"26799988\">        <Title>Recent progress in the development of HIV-1 protease inhibitors for the treatment of HIV/AIDS<\/Title>        <SourceTitle>Journal of Medicinal Chemistry<\/SourceTitle>        <PubMedTitle>J Med Chem<\/PubMedTitle>        <Volume>59<\/Volume>        <Issue>11<\/Issue>        <Page>5172<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Ghosh, A.K.<\/Author>          <Author>Osswald, H.L.<\/Author>          <Author>Prato, G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947858\" medline_id=\"29932942\">        <Title>CCR5 revisited: How mechanisms of HIV entry govern AIDS pathogenesis<\/Title>        <SourceTitle>Journal of Molecular Biology<\/SourceTitle>        <PubMedTitle>J Mol Biol<\/PubMedTitle>        <Volume>430<\/Volume>        <Issue>17<\/Issue>        <Page>2557<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Brelot, A.<\/Author>          <Author>Chakrabarti, L.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947863\" medline_id=\"30416746\">        <Title>Recent advances in the discovery of small-molecule inhibitors of HIV-1 integrase<\/Title>        <SourceTitle>Future Science OA<\/SourceTitle>        <PubMedTitle>Future Sci OA<\/PubMedTitle>        <Volume>4<\/Volume>        <Issue>9<\/Issue>        <Year>2018<\/Year>        <Authors>          <Author>Choi, E.<\/Author>          <Author>Mallareddy, J.R.<\/Author>          <Author>Lu, D.<\/Author>          <Author>Kolluru, S.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"2911\" modifiedDate=\"20181212120011\">    <Title>Pathogenesis and Natural History<\/Title>    <Body>      <para>Lentivirus infections are characterized by the long interval between infection and the onset of clinical disease. For HIV, the time between the infection and the development of AIDS, which is in fact the last stage of disease (<REF id=\"1135290\">Simon, V. et al., 2006<\/REF>), can range from several months in children to some years (up to 10 or more) in adults. However, in spite of the frequent absence of symptoms during the early and chronic stages of infection, HIV-1 replicates in a dynamic fashion throughout the course of the disease (<REF id=\"1135290\">Simon, V. et al., 2006<\/REF>). The first cells to be infected are probably dendritic cells, followed by macrophages and monocytes. During the acute phase of infection the number of virus particles in the blood is high and HIV spreads rapidly, infecting large numbers of CD4+ cells in the lymphoid organs. Normal levels of CD4+ T helper cells are about 800-1200 cells per mm3 of blood. These numbers drop by 20-40% during the acute phase. Fourteen to 28 days after infection some patients may report flu-like symptoms and may develop a mononucleosis-like syndrome (<REF id=\"1678176\">Cohen, M.S. et al., 2011<\/REF>). HIV-specific cytotoxic T cells then limit the infection, and CD4+ counts return to near-normal levels. This is followed by a period of clinical latency, which may last several years and is characterized by HIV DNA integration into the host genome without virus production (<REF id=\"2798862\">Cary, D.C. et al., 2016<\/REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>).<\/para>      <para>HIV depletes infected as well as uninfected CD4+ cells; the latter may be due to induction of T cell apoptosis through a mechanism involving chronic antigenic stimulation (<REF id=\"655840\">Badley, A.D. et al., 2000<\/REF>). Other factors also contribute to this stimulation such as fixation of gp120 on target cells and enhanced production of cytoxic ligands by cells from the immune system, which results in the killing of uninfected CD4+ cells. Paradoxically, the concentration of CD8+ cells in the blood does not decrease, probably because these cells divide more rapidly than CD4+ cells do.<\/para>    <\/Body>    <References>      <Reference id=\"655840\" medline_id=\"11049971\">        <Title>Mechanisms of HIV-associated lymphocyte apoptosis<\/Title>        <SourceTitle>Blood<\/SourceTitle>        <PubMedTitle>Blood<\/PubMedTitle>        <Volume>96<\/Volume>        <Issue>9<\/Issue>        <Page>2951<\/Page>        <Year>2000<\/Year>        <Authors>          <Author>Badley, A.D.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1135290\" medline_id=\"16890836\">        <Title>HIV/AIDS epidemiology, pathogenesis, prevention, and treatment<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>368<\/Volume>        <Issue>9534<\/Issue>        <Page>489<\/Page>        <Year>2006<\/Year>        <Authors>          <Author>Simon, V.<\/Author>          <Author>Ho, D.D.<\/Author>          <Author>Abdool Karim, Q.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1678176\" medline_id=\"21767103\">        <Title>Prevention of HIV-1 infection with early antiretroviral therapy<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>385<\/Volume>        <Issue>6<\/Issue>        <Page>493<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Cohen, M.S.<\/Author>          <Author>Chen, Y.Q.<\/Author>          <Author>McCauley, M.<\/Author>          <Author>Gamble, T.<\/Author>          <Author>Hosseinipour, M.C.<\/Author>          <Author>Kumarasamy, N.<\/Author>          <Author>Hakim, J.G.<\/Author>          <Author>Kumwenda, J.<\/Author>          <Author>Grinsztejn, B.<\/Author>          <Author>Pilotto, J.H.<\/Author>          <Author>Godbole, S.V.<\/Author>          <Author>Mehendale, S.<\/Author>          <Author>Chariyalertsak, S.<\/Author>          <Author>Santos, B.R.<\/Author>          <Author>Mayer, K.H.<\/Author>          <Author>Hoffman, I.F.<\/Author>          <Author>Eshleman, S.H.<\/Author>          <Author>Piwowar-Manning, E.<\/Author>          <Author>Wang, L.<\/Author>          <Author>Makhema, J.<\/Author>          <Author>Mills, L.A.<\/Author>          <Author>de Bruyn, G.<\/Author>          <Author>Sanne, I.<\/Author>          <Author>Eron, J.<\/Author>          <Author>Gallant, J.<\/Author>          <Author>Havlir, D.<\/Author>          <Author>Swindells, S.<\/Author>          <Author>Ribaudo, H.<\/Author>          <Author>Elharrar, V.<\/Author>          <Author>Burns, D.<\/Author>          <Author>Taha, T.E.<\/Author>          <Author>Nielsen-Saines, K.<\/Author>          <Author>Celentano, D.<\/Author>          <Author>Essex, M.<\/Author>          <Author>Fleming, T.R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2798862\" medline_id=\"26731470\">        <Title>Molecular mechanisms of HIV latency<\/Title>        <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>        <PubMedTitle>J Clin Invest<\/PubMedTitle>        <Volume>126<\/Volume>        <Issue>2<\/Issue>        <Page>448<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Cary, D.C.<\/Author>          <Author>Fujinaga, K.<\/Author>          <Author>Peterlin, B.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2944306\" medline_id=\"30049419\">        <Title>HIV<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>392<\/Volume>        <Issue>10148<\/Issue>        <Page>685<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Ghosn, J.<\/Author>          <Author>Taiwo, B.<\/Author>          <Author>Seedat, S.<\/Author>          <Author>Autran, B.<\/Author>          <Author>Katlama, C.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"3253\" modifiedDate=\"20190502093726\">    <Title>Epidemiology<\/Title>    <Body>      <para>At the end of 2017, the World Health Organization estimated that there were approximately 36.9 million adults and children living with HIV/AIDS worldwide (<a href=\"http://www.who.int/hiv/data/en/\">HIV/AIDS -- data and statistics (World Health Organization)<\/a>, consulted December 3, 2018). Global prevalence currently stands at 0.8%. HIV-1 is far more prevalent, although there are an estimated one to two million individuals infected with HIV-2 (<REF id=\"2931416\">Esbjörnsson, J. et al., 2018<\/REF>). According to WHO, 1.8  million new infections with HIV occurred in 2017 (<a href=\"http://www.who.int/hiv/data/en/\">HIV/AIDS -- data and statistics (World Health Organization)<\/a>, consulted December 3, 2018), a decrease from previous years. In 2015, UNAIDS reports that there were 1.9 million (range 1.7 to 2.2 million) new infections (<a href=\"http://www.unaids.org/sites/default/files/media_asset/global-AIDS-update-2016_en.pdf\">Global AIDS update 2016 (UNAIDS, 2016)<\/a>), while GBD 2015 estimated that there were 2.45 million (range 2.24-2.68 million) new infections globally (<REF id=\"2529079\">Wang, H. et al., 2016<\/REF>). The global prevalence of HIV continues to increase--in spite of the aforementioned decrease in new infections--because of effective new drug therapies, which enable patients to live longer (<REF id=\"2209456\">Maartens, G. et al., 2014<\/REF>; <REF id=\"2529079\">Wang, H. et al., 2016<\/REF>). Nonetheless, UNAIDS has set the global goal of ending the global AIDS pandemic by 2030. In order to meet this goal, the agency has established a 90-90-90 goal to be achieved by 2020, which specifies that 90% of HIV-positive individuals worldwide must be aware of their status; 90% of those aware must be receiving sustained combination antiretroviral therapy; and 90% of those on treatment must be virologically suppressed (<REF id=\"2552675\">Badowski, M.E. et al., 2016<\/REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>). The potential impact of a fast-track version of this strategy (95-95-95 by 2030) is even more significant. In contrast with an estimated 49 million new HIV cases that would be diagnosed globally from 2015 to 2035 under current levels of diagnosis and treatment, 25 million of these new infections could be avoided if 95-95-95 goals are met. Moreover, an additional 6.3 million new infections could hypothetically be averted if a vaccine with at least 50% efficacy were introduced by 2020 (<REF id=\"2949697\">Medlock, J. et al., 2017<\/REF>).<\/para>      <para>The highest concentration of HIV-infected individuals continues to be in sub-Saharan Africa, which accounts for only 13% of the world&apos;s population overall, but is home to 70% of the world&apos;s HIV-infected individuals, including 56% of the world&apos;s HIV-infected children (<a href=\"http://kff.org/global-health-policy/fact-sheet/the-global-hivaids-epidemic/\">The global HIV/AIDS epidemic: Fact sheet (Kaiser Family Foundation)<\/a>, consulted December 3, 2018) and 82% of HIV-infected adolescents (age 10-19 years) (<REF id=\"2218070\">Idele, P. et al., 2014<\/REF>). According to GBD 2015, an estimated 1.85 million (range 1.66-2.05 million) people in this region were newly infected with HIV in 2015, equivalent to 75.4% of all new infections worldwide (<REF id=\"2529079\">Wang, H. et al., 2016<\/REF>). In Kenya, which has a population of 40 million, 1.2 million people of all ages were living with HIV in 2012 and an estimated 106,000 of these had acquired HIV infection within the preceding year, making Kenya&apos;s HIV epidemic the fourth largest worldwide. Nonetheless, HIV prevalence in that country declined significantly from 7.2% in 2007 to 5.6% in 2012 (<REF id=\"2228297\">Kimanga, D.O. et al., 2014<\/REF>). Unlike most parts of the world, where the HIV epidemic is now concentrated in certain high-risk population groups (i.e., injection drug users, men who have sex with men, sex workers), the HIV epidemic in sub-Saharan Africa is generalized, or self-sustaining in the population as a whole, albeit with certain subgroups at increased risk of infection (<REF id=\"1199753\">Cohen, M.S. et al., 2008<\/REF>). After sub-Saharan Africa, the hardest-hit regions of the world are the Caribbean, Eastern Europe and Central Asia (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)<\/a>).<\/para>      <para>As of 2017, there were approximately 2.2 million people living with HIV/AIDS in the combined UNAIDS region of Western and Central Europe and North America (<a href=\"http://kff.org/global-health-policy/fact-sheet/the-global-hivaids-epidemic/\">The global HIV/AIDS epidemic: Fact sheet (Kaiser Family Foundation)<\/a>, consulted December 3, 2018). The incidence of new HIV infections in the combined region in 2013 was estimated to be 88,000 (range 44,000 to 160,000). France and the United Kingdom each accounted for 8% of new infections in the region, while Canada, Germany, Italy and Spain each accounted for 4% of the total (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)<\/a>). Injection drug use accounted for 8% of new HIV infections in the U.S. in 2010 (<REF id=\"2218071\">Broz, D. et al., 2014<\/REF>).<\/para>      <para>CDC analysis of data obtained from the National HIV Behavioral Surveillance System shows that there was a difference in infection rates between blacks and whites (2.1% vs. 1.1%), but low socioeconomic status, and not race, remained the best determinant for infection after adjusting for other variables. Between 2007 to 2009, overall HIV incidence remained steady at approximately 50,000 new infections per year; however a significant increase was seen among those aged 13-29 and and the largest increase occurred in black men who have sex with men (<REF id=\"1689291\">Prejean, J. et al., 2011<\/REF>; <REF id=\"1689294\">Anonymous, 2011<\/REF>). Nearly 50% of all U.S. AIDS cases are concentrated in the southern states, which account for just 37% of the country&apos;s population (<REF id=\"2327612\">Reif, S.S. et al., 2014<\/REF>). Transgender women also have an extraordinarily high burden of HIV disease, both at the national level in the U.S. as well as globally. The pooled prevalence of HIV among transgender women worldwide is over 19% (<REF id=\"1957367\">Baral, S.D. et al., 2013<\/REF>). <\/para>      <para>More than two million people were living with HIV/AIDS in the WHO European region in 2017. Nearly 160,000 new HIV infections were diagnosed in the region as a whole in 2017, of which 130,000 were in the eastern part of the region. Prevalence and incidence rates continue to increase in the WHO European region as a whole, in spite of significant decreases in the rate of new diagnoses in the EU/EEA (3,130 in 28 countries in 2017) (<a href=\"http://ecdc.europa.eu/en/publications-data/hivaids-surveillance-europe-2018-2017-data\">HIV/AIDS surveillance in Europe 2018 - 2017 data (European Centre for Disease Prevention and Control, November 2018)<\/a>). An estimated total of 101,600 prevalent HIV infections as well as 4,363 new HIV diagnoses were reported in the U.K. in 2017. Public Health England announced in November 2018 that the 90-90-90 targets had been met, making that country one of the first to achieve the UNAID objective. In 2017, 92% of people living with HIV in the U.K. had been diagnosed; of those, 98% were on treatment; and of those, 97% were virally suppressed (<a href=\"http://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/759408/HIV_annual_report_2018.pdf\">Progress towards ending the HIV epidemic in the United Kingdom - 2018 report (Public Health England, November 2018)<\/a>). <\/para>      <para>The HIV epidemic in East Asia began later than in the rest of the world, and was initially associated with injecting drug use. Government intervention quickly stopped that trend, however, and sexual transmission, especially among men who have sex with men (MSM), is now the most common route (<REF id=\"2151003\">Suguimoto, S.P. et al., 2014<\/REF>). According to Japan&apos;s National Institute of Infectious Diseases, there were 1,056 incident cases of HIV infection (994 men and 62 women) in 2011, the fourth highest number since HIV surveillance began in that country in 1989. During the same year there were 473 new cases of AIDS reported, which is the highest number since surveillance began (<a href=\"http://www.nih.go.jp/niid/en/iasren/865-iasr/2649-tpc391.html\">HIV/AIDS in Japan, 2011 (Infectious Agents Surveillance Report, September 2012)<\/a>). In China, HIV is most common in three high-risk groups: injecting drug users, female sex workers and MSM. In 2010, HIV prevalence in these groups was 9.08%, 0.36% and 5.98%, respectively. Incidence of new HIV infections in these groups was 0.57, 0.02 and 0.98 per 100 person-years, respectively (<REF id=\"2134794\">Zhang, L. et al., 2013<\/REF>). In 2016, HIV prevalence in MSM was reported to be 10.2%, while incidence of new cases was 6.63% (<REF id=\"2989513\">Chen, Q. et al., 2018<\/REF>). HIV infections predominate Han Chinese, males, young and the middle-aged (<REF id=\"2989521\">Wang, L. et al., 2019<\/REF>). China is far from achieving the 90-90-90 target for 2020, as identified by the Joint United Nations Program on HIV and AIDS. In 2016, only 36% of PLHIV (people living with HIV) on ART achieved viral suppression (viral load &lt; 1000 copies/mL) (<REF id=\"2989515\">Da, W. et al., 2018<\/REF>).<\/para>      <para>For more epidemiology information, consult the Incidence and Prevalence Database (IPD): <a href=\"http://www.tdrdata.com/ipd/IPD_SearchIPDByKeyword_Excel.aspx?keyword=hiv\">IPD: HIV<\/a>.<\/para>    <\/Body>    <References>      <Reference id=\"1199753\" medline_id=\"18382737\">        <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic<\/Title>        <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>        <PubMedTitle>J Clin Invest<\/PubMedTitle>        <Volume>118<\/Volume>        <Issue>4<\/Issue>        <Page>1244<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Cohen, M.S.<\/Author>          <Author>Hellmann, N.<\/Author>          <Author>Levy, J.A.<\/Author>          <Author>Decock, K.<\/Author>          <Author>Lange, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1689291\" medline_id=\"21826193\">        <Title>Estimated HIV incidence in the United States, 2006-2009<\/Title>        <SourceTitle>PLoS ONE<\/SourceTitle>        <PubMedTitle>PLoS One<\/PubMedTitle>        <Volume>6<\/Volume>        <Issue>8<\/Issue>        <Page>e17502<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Prejean, J.<\/Author>          <Author>Song, R.<\/Author>          <Author>Hernandez, A.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1689294\" medline_id=\"21832975\">        <Title>Characteristics Associated with HIV Infection Among Heterosexuals in Urban Areas with High AIDS Prevalence - 24 Cities, United States, 2006-2007<\/Title>        <SourceTitle>MMWR. Morbidity and Mortality Weekly Report<\/SourceTitle>        <PubMedTitle>MMWR Morb Mortal Wkly Rep<\/PubMedTitle>        <Volume>60<\/Volume>        <Page>1045<\/Page>        <Year>2011<\/Year>        <Authors/>      <\/Reference>      <Reference id=\"1957367\" medline_id=\"23260128\">        <Title>Worldwide burden of HIV in transgender women: A systematic review and meta-analysis<\/Title>        <SourceTitle>The Lancet. Infectious Diseases<\/SourceTitle>        <PubMedTitle>Lancet Infect Dis<\/PubMedTitle>        <Volume>13<\/Volume>        <Issue>3<\/Issue>        <Page>214<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Baral, S.D.<\/Author>          <Author>Poteat, T.<\/Author>          <Author>Strömdahl, S.<\/Author>          <Author>Wirtz, A.L.<\/Author>          <Author>Guadamuz, T.E.<\/Author>          <Author>Beyrer, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2134794\" medline_id=\"24107261\">        <Title>HIV prevalence in China: Integration of surveillance data and a systematic review<\/Title>        <SourceTitle>The Lancet. Infectious Diseases<\/SourceTitle>        <PubMedTitle>Lancet Infect Dis<\/PubMedTitle>        <Volume>13<\/Volume>        <Issue>11<\/Issue>        <Page>955<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Zhang, L.<\/Author>          <Author>Chow, E.P.<\/Author>          <Author>Jing, J.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2151003\" medline_id=\"24664878\">        <Title>Changing patterns of HIV epidemic in 30 years in East Asia<\/Title>        <SourceTitle>Current HIV/AIDS Reports<\/SourceTitle>        <PubMedTitle>Curr HIV/AIDS Rep<\/PubMedTitle>        <Volume>11<\/Volume>        <Issue>2<\/Issue>        <Page>134<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Suguimoto, S.P.<\/Author>          <Author>Techasrivichien, T.<\/Author>          <Author>Musumari, P.M.<\/Author>          <Author>El-Saaidi, C.<\/Author>          <Author>Lukhele, B.W.<\/Author>          <Author>Ono-Kihara, M.<\/Author>          <Author>Kihara, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2209456\" medline_id=\"24907868\">        <Title>HIV infection: Epidemiology, pathogenesis, treatment, and prevention<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>384<\/Volume>        <Issue>9939<\/Issue>        <Page>258<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Maartens, G.<\/Author>          <Author>Celum, C.<\/Author>          <Author>Lewin, S.R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2218070\" medline_id=\"24918590\">        <Title>Epidemiology of HIV and AIDS among adolescents: Current status, inequities, and data gaps<\/Title>        <SourceTitle>Journal of Acquired Immune Deficiency Syndromes (JAIDS)<\/SourceTitle>        <PubMedTitle>J Acquir Immune Defic Syndr<\/PubMedTitle>        <Volume>66<\/Volume>        <Issue>Suppl. 2<\/Issue>        <Page>S144<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Idele, P.<\/Author>          <Author>Gillespie, A.<\/Author>          <Author>Porth, T.<\/Author>          <Author>Suzuki, C.<\/Author>          <Author>Mahy, M.<\/Author>          <Author>Kasedde, S.<\/Author>          <Author>Luo, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2218071\" medline_id=\"24990587\">        <Title>HIV infection and risk, prevention, and testing behaviors among injecting drug users - National HIV Behavioral Surveillance System, 20 U.S. cities, 2009<\/Title>        <SourceTitle>MMWR. Surveillance summaries<\/SourceTitle>        <PubMedTitle>MMWR Surveill Summ<\/PubMedTitle>        <Volume>63<\/Volume>        <Issue>6<\/Issue>        <Page>1<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Broz, D.<\/Author>          <Author>Wejnert, C.<\/Author>          <Author>Pham, H.T.<\/Author>          <Author>DiNenno, E.<\/Author>          <Author>Heffelfinger, J.D.<\/Author>          <Author>Cribbin, M.<\/Author>          <Author>Krishna, N.<\/Author>          <Author>Teshale, E.H.<\/Author>          <Author>Paz-Bailey, G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2228297\" medline_id=\"24445338\">        <Title>Prevalence and incidence of HIV infection, trends, and risk factors among persons aged 15-64 years in Kenya: Results from a nationally representative study<\/Title>        <SourceTitle>Journal of Acquired Immune Deficiency Syndromes (JAIDS)<\/SourceTitle>        <PubMedTitle>J Acquir Immune Defic Syndr<\/PubMedTitle>        <Volume>66<\/Volume>        <Issue>Suppl. 1<\/Issue>        <Page>S13<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Kimanga, D.O.<\/Author>          <Author>Ogola, S.<\/Author>          <Author>Umuro, M.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2327612\" medline_id=\"23944833\">        <Title>HIV/AIDS in the Southern USA: A disproportionate epidemic<\/Title>        <SourceTitle>AIDS Care<\/SourceTitle>        <PubMedTitle>AIDS Care<\/PubMedTitle>        <Volume>26<\/Volume>        <Issue>3<\/Issue>        <Page>351<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Reif, S.S.<\/Author>          <Author>Whetten, K.<\/Author>          <Author>Wilson, E.R.<\/Author>          <Author>McAllaster, C.<\/Author>          <Author>Pence, B.W.<\/Author>          <Author>Legrand, S.<\/Author>          <Author>Gong, W.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2529079\" medline_id=\"27470028\">        <Title>Estimates of global, regional, and national incidence, prevalence, and mortality of HIV, 1980-2015: The Global Burden of Disease Study 2015<\/Title>        <SourceTitle>The Lancet. HIV<\/SourceTitle>        <PubMedTitle>Lancet HIV<\/PubMedTitle>        <Volume>3<\/Volume>        <Issue>8<\/Issue>        <Page>e361<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Wang, H.<\/Author>          <Author>Wolock, T.M.<\/Author>          <Author>Carter, A.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2552675\" medline_id=\"27539455\">        <Title>New antiretroviral treatment for HIV<\/Title>        <SourceTitle>Infectious Diseases and Therapy<\/SourceTitle>        <PubMedTitle>Infect Dis Ther<\/PubMedTitle>        <Volume>5<\/Volume>        <Issue>3<\/Issue>        <Page>329<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Badowski, M.E.<\/Author>          <Author>Pérez, S.E.<\/Author>          <Author>Biagi, M.<\/Author>          <Author>Littler, J.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2931416\" medline_id=\"30392769\">        <Title>Long-term follow-up of HIV-2-related AIDS and mortality in Guinea-Bissau: A prospective open cohort study<\/Title>        <SourceTitle>The Lancet. HIV<\/SourceTitle>        <PubMedTitle>Lancet HIV<\/PubMedTitle>        <Volume>6<\/Volume>        <Issue>1<\/Issue>        <Page>E25<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Esbjörnsson, J.<\/Author>          <Author>Månsson, F.<\/Author>          <Author>Kvist, A.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2944306\" medline_id=\"30049419\">        <Title>HIV<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>392<\/Volume>        <Issue>10148<\/Issue>        <Page>685<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Ghosn, J.<\/Author>          <Author>Taiwo, B.<\/Author>          <Author>Seedat, S.<\/Author>          <Author>Autran, B.<\/Author>          <Author>Katlama, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2949697\" medline_id=\"28320938\">        <Title>Effectiveness of UNAIDS targets and HIV vaccination across 127 countries<\/Title>        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)<\/SourceTitle>        <PubMedTitle>Proc Natl Acad Sci U S A<\/PubMedTitle>        <Volume>114<\/Volume>        <Issue>15<\/Issue>        <Page>4017<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Medlock, J.<\/Author>          <Author>Pandey, A.<\/Author>          <Author>Parpia, A.S.<\/Author>          <Author>Tang, A.<\/Author>          <Author>Skrip, L.A.<\/Author>          <Author>Galvani, A.P.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2989513\" medline_id=\"30092072\">        <Title>Trends of HIV incidence and prevalence among men who have sex with men in Beijing, China: Nine consecutive cross-sectional surveys, 2008-2016<\/Title>        <SourceTitle>PLoS ONE<\/SourceTitle>        <PubMedTitle>PLoS One<\/PubMedTitle>        <Volume>13<\/Volume>        <Issue>8<\/Issue>        <Year>2018<\/Year>        <Authors>          <Author>Chen, Q.<\/Author>          <Author>Sun, Y.<\/Author>          <Author>Sun, W.<\/Author>          <Author>Hao, M.<\/Author>          <Author>Li, G.<\/Author>          <Author>Su, X.<\/Author>          <Author>Xin, R.<\/Author>          <Author>Lu, H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2989515\" medline_id=\"30161177\">        <Title>Evaluation of self-report adherence measures and their associations with detectable viral load among people living with HIV (PLHIV) in China<\/Title>        <SourceTitle>PLoS ONE<\/SourceTitle>        <PubMedTitle>PLoS One<\/PubMedTitle>        <Volume>13<\/Volume>        <Issue>8<\/Issue>        <Year>2018<\/Year>        <Authors>          <Author>Da, W.<\/Author>          <Author>Li, X.<\/Author>          <Author>Qiao, S.<\/Author>          <Author>Zhou, Y.<\/Author>          <Author>Shen, Z.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2989521\" medline_id=\"30651975\">        <Title>HIV infection in Xi&apos;an, China: Epidemic characterization, risk factors to false positives and potential utility of the sample-to-cutoff index to identify true positives using Architect HIV Ag/Ab combo<\/Title>        <SourceTitle>Antimicrobial Resistance and Infection Control<\/SourceTitle>        <PubMedTitle>Antimicrob Resist Infect Control<\/PubMedTitle>        <Volume>8<\/Volume>        <Page>9<\/Page>        <Year>2019<\/Year>        <Authors>          <Author>Wang, L.<\/Author>          <Author>Xiao, Y.<\/Author>          <Author>Tian, X.D.<\/Author>          <Author>Ruan, J.X.<\/Author>          <Author>Chen, W.<\/Author>          <Author>Yu, Y.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"3214\" modifiedDate=\"20190410091630\">    <Title>Morbidity and Mortality<\/Title>    <Body>      <para>Patients with more than 500 CD4+ cells per mm3 (CDC category 1) are usually asymptomatic. At counts of between 200 and 500 CD4+ cells per mm3 (category 2) some opportunistic infections such as herpes zoster and oral thrush, an overgrowth of <I>Candida albicans<\/I> in the mouth or on other mucous membranes, are frequently seen. Most AIDS-related opportunistic infections start when the CD4+ count falls below 200 cells per mm3 (category 3). These may involve <I>Pneumocystis jirovecii<\/I> pneumonia, toxoplasmosis, candidiasis, cryptosporidiosis, <I>Mycobacterium avium<\/I> complex, <BACKGROUNDER id=\"20\">Cytomegalovirus<\/BACKGROUNDER> retinitis often leading to blindness, and malignancies such as <BACKGROUNDER id=\"168\">Non-Hodgkin&apos;s Lymphoma<\/BACKGROUNDER>, <BACKGROUNDER id=\"164\">Hodgkin&apos;s Lymphoma<\/BACKGROUNDER>, invasive <BACKGROUNDER id=\"125\">Cervical Cancer<\/BACKGROUNDER> and Kaposi&apos;s sarcoma (<REF id=\"1635117\">Shiels, M.S. et al., 2011<\/REF>), as well as anal cancer (in MSM) and lung and liver cancers (in injection drug users) (<REF id=\"2317668\">Robbins, H.A. et al., 2015<\/REF>). Concomitant infection with <BACKGROUNDER id=\"37\">Hepatitis B<\/BACKGROUNDER> (HBV), <BACKGROUNDER id=\"38\">Hepatitis C<\/BACKGROUNDER> (HCV), <BACKGROUNDER id=\"118\">Malaria<\/BACKGROUNDER> or <BACKGROUNDER id=\"116\">Tuberculosis<\/BACKGROUNDER> also contributes to morbidity and mortality in a significant percentage of AIDS patients. An estimated 2-4 million HIV-positive people are coinfected with HBV (<REF id=\"1446956\">Lacombe, K. et al., 2010<\/REF>) and another 6.8 to 10.2 million are coinfected with HCV (<REF id=\"2308297\">Webster, D.P. et al., 2015<\/REF>). Noninfectious complications of AIDS and HIV include dyslipidemia (<REF id=\"1497895\">Tarr, P.E. et al., 2010<\/REF>), neurological complications (<REF id=\"1955209\">Manji, H. et al., 2013<\/REF>), cardiovascular disease, nephropathy and consequent kidney failure (<REF id=\"1642730\">Papeta, N. et al., 2011<\/REF>), wasting (e.g., <BACKGROUNDER id=\"102\">Cachexia<\/BACKGROUNDER>, sarcopenia and frailty) and--conversely-- obesity (<REF id=\"2944303\">Mankal, P.K. and Kotler, D.P., 2014<\/REF>).<\/para>      <para>The cumulative death toll over the first 30 years of the HIV pandemic was in excess of 35 million, according to WHO (<a href=\"http://www.who.int/en/news-room/fact-sheets/detail/hiv-aids\">HIV/AIDS key facts (World Health Organization, updated July 2018)<\/a>). UNAIDS estimated in 2014 that 39 million (range 35-43 million) people worldwide had died of AIDS-related illness since the start of the epidemic (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)<\/a>). A total of 1.5 million (range 1.4 to 1.7 million) people died of HIV/AIDS-related causes in 2013, a 35% decrease with respect to the peak year of 2005. Important reductions were achieved in sub-Saharan Africa, where AIDS-related deaths decreased by 39% between 2005 and 2013; however, the region still accounts for 79% of global AIDS-related mortalities. Mortality rates decreased by 54% in the Caribbean and by 31% in Latin America during the same period (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)<\/a>). According to an analysis of data collected for the Global Burden of Disease (GBD) study, global HIV mortality was 1.3 million (range 1.3 to 1.5 million) in 2013 (<REF id=\"2206340\">Murray, C.J. et al., 2014<\/REF>) and was 1.2 million (range 1.1 to 1.3 million) in 2015 (<REF id=\"2551327\">Wang, H.D. et al., 2016<\/REF>). Expressed in other terms, the impact of HIV/AIDS in 2013 was equivalent to 40.6 million YLDs, according to the GBD 2013 study (<REF id=\"2351164\">Vos, T. et al., 2015<\/REF>). According to WHO, 940,000 people died from HIV-related causes globally in 2017 (<a href=\"http://www.who.int/en/news-room/fact-sheets/detail/hiv-aids\">HIV/AIDS key facts (World Health Organization, updated July 2018)<\/a>).<\/para>      <para>In the D:A:D cohort study, which followed nearly 50,000 HIV/AIDS patients at 212 clinics in the U.S., Europe and Australia, the mortality rate in this population was 12.7 per 1,000 person-years over the period 1999-2011, equivalent to 308,719 person-years of follow-up. The leading causes of death were AIDS-related (29%), non-AIDS-defining cancers (15%), liver disease (13%) and cardiovascular disease (11%). AIDS-related causes of death decreased in significance over time, however, accounting for 34% of all deaths during 1999-2000 vs. 22% in 2009-2011, confirming the efficacy of antiretroviral drug therapy (<REF id=\"2312359\">Smith, C.J. et al., 2014<\/REF>).<\/para>      <para>Increased survival following a diagnosis of HIV has led to new challenges for physicians, who are now increasingly treating middle-aged and older patients with age-related disorders that are unrelated to HIV but which nonetheless occur at a higher rate than in the non-HIV-positive population; these include cardiovascular disease, cognitive impairment, osteopenia and osteoporosis, frailty, and malignancy (<REF id=\"2799389\">McGettrick, P. et al., 2018<\/REF>). The incidence of non-AIDS-defining cancers among HIV-positive individuals has increased in recent decades. This increase, which is the direct result of improved survival to older ages, where these cancers typically begin to develop, will require the development of new prevention and treatment strategies that are appropriate for the needs of this patient group (<REF id=\"1635117\">Shiels, M.S. et al., 2011<\/REF>).<\/para>      <para>Opportunistic infections are a main cause of mortality in HIV infected individuals. Pneumocystis pneumonia (PCP) is the most predominant opportunistic infection in the HIV-infected population, with a prevalence of about 22.4% in China. One study reported an in-hospital mortality rate of 17.3% among HIV-infected patients with PCP (<REF id=\"2989525\">Wu, L. et al., 2019<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"1339497\" medline_id=\"18800017\">        <Title>HIV, reproductive aging, and health implications in women: A literature review<\/Title>        <SourceTitle>Menopause (New York)<\/SourceTitle>        <PubMedTitle>Menopause<\/PubMedTitle>        <Volume>16<\/Volume>        <Issue>1<\/Issue>        <Page>199<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Conde, D.M.<\/Author>          <Author>Silva, E.T.<\/Author>          <Author>Amaral, W.N.<\/Author>          <Author>Finotti, M.F.<\/Author>          <Author>Ferreira, R.G.<\/Author>          <Author>Costa-Paiva, L.<\/Author>          <Author>Pinto-Neto, A.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1446956\" medline_id=\"19900950\">        <Title>HIV/hepatitis B virus co-infection: Current challenges and new strategies<\/Title>        <SourceTitle>Journal of Antimicrobial Chemotherapy<\/SourceTitle>        <PubMedTitle>J Antimicrob Chemother<\/PubMedTitle>        <Volume>65<\/Volume>        <Issue>1<\/Issue>        <Page>10<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Lacombe, K.<\/Author>          <Author>Bottero, J.<\/Author>          <Author>Lemoine, M.<\/Author>          <Author>Boyd, A.<\/Author>          <Author>Girard, P.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1497895\" medline_id=\"20350140\">        <Title>Dyslipidemia in HIV-infected individuals: From pharmacogenetics to pharmacogenomics<\/Title>        <SourceTitle>Pharmacogenomics (London)<\/SourceTitle>        <PubMedTitle>Pharmacogenomics<\/PubMedTitle>        <Volume>11<\/Volume>        <Issue>4<\/Issue>        <Page>587<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Tarr, P.E.<\/Author>          <Author>Rotger, M.<\/Author>          <Author>Telenti, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1635117\" medline_id=\"21483021\">        <Title>Cancer Burden in the HIV-infected population in the United States<\/Title>        <SourceTitle>Journal of the National Cancer Institute<\/SourceTitle>        <PubMedTitle>J Natl Cancer Inst<\/PubMedTitle>        <Volume>103<\/Volume>        <Issue>9<\/Issue>        <Page>753<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Shiels, M.S.<\/Author>          <Author>Pfeiffer, R.M.<\/Author>          <Author>Gail, M.H.<\/Author>          <Author>Hall, H.I.<\/Author>          <Author>Li, J.<\/Author>          <Author>Chaturvedi, A.K.<\/Author>          <Author>Bhatia, K.<\/Author>          <Author>Uldrick, T.S.<\/Author>          <Author>Yarchoan, R.<\/Author>          <Author>Goedert, J.J.<\/Author>          <Author>Engels, E.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1642730\" medline_id=\"21221512\">        <Title>The molecular pathogenesis of HIV-1 associated nephropathy: Recent advances<\/Title>        <SourceTitle>Journal of Molecular Medicine<\/SourceTitle>        <PubMedTitle>J Mol Med<\/PubMedTitle>        <Volume>89<\/Volume>        <Issue>5<\/Issue>        <Page>429<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Papeta, N.<\/Author>          <Author>Sterken, R.<\/Author>          <Author>Kiryluk, K.<\/Author>          <Author>Kalyesubula, R.<\/Author>          <Author>Gharavi, A.G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1955209\" medline_id=\"23378642\">        <Title>HIV, dementia and antiretroviral drugs: 30 years of an epidemic<\/Title>        <SourceTitle>Journal of Neurology, Neurosurgery and Psychiatry<\/SourceTitle>        <PubMedTitle>J Neurol Neurosurg Psychiatry<\/PubMedTitle>        <Volume>84<\/Volume>        <Issue>10<\/Issue>        <Page>1126<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Manji, H.<\/Author>          <Author>Jäger, H.R.<\/Author>          <Author>Winston, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2206340\" medline_id=\"25059949\">        <Title>Global, regional, and national incidence and mortality for HIV, tuberculosis, and malaria during 1990-2013: A systematic analysis for the Global Burden of Disease Study 2013<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>384<\/Volume>        <Issue>9947<\/Issue>        <Page>1005<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Murray, C.J.<\/Author>          <Author>Ortblad, K.F.<\/Author>          <Author>Guinovart, C.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2308297\" medline_id=\"25687730\">        <Title>Hepatitis C<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>385<\/Volume>        <Issue>9973<\/Issue>        <Page>1124<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Webster, D.P.<\/Author>          <Author>Klenerman, P.<\/Author>          <Author>Dusheiko, G.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2312359\" medline_id=\"25042234\">        <Title>Trends in underlying causes of death in people with HIV from 1999 to 2011 (D:A:D): a multicohort collaboration<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>384<\/Volume>        <Issue>9939<\/Issue>        <Page>241<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Smith, C.J.<\/Author>          <Author>Ryom, L.<\/Author>          <Author>Weber, R.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2317668\" medline_id=\"25663691\">        <Title>Excess cancers among HIV-infected people in the United States<\/Title>        <SourceTitle>Journal of the National Cancer Institute<\/SourceTitle>        <PubMedTitle>J Natl Cancer Inst<\/PubMedTitle>        <Volume>107<\/Volume>        <Issue>4<\/Issue>        <Page>dju503<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Robbins, H.A.<\/Author>          <Author>Pfeiffer, R.M.<\/Author>          <Author>Shiels, M.S.<\/Author>          <Author>Li, J.<\/Author>          <Author>Hall, H.I.<\/Author>          <Author>Engels, E.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2351164\" medline_id=\"26063472\">        <Title>Global, regional, and national incidence, prevalence, and years lived with disability for 301 acute and chronic diseases and injuries in 188 countries, 1990-2013: A systematic analysis for the Global Burden of Disease Study 2013<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>386<\/Volume>        <Issue>9995<\/Issue>        <Page>743<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Vos, T.<\/Author>          <Author>Barber, R.M.<\/Author>          <Author>Bell, B.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2551327\">        <Title>Global, regional, and national life expectancy, all-cause mortality, and cause-specific mortality for 249 causes of death, 1980-2015: A systematic analysis for the Global Burden of Disease Study 2015<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>388<\/Volume>        <Issue>10053<\/Issue>        <Page>1459<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Wang, H.D.<\/Author>          <Author>Naghavi, M.<\/Author>          <Author>Allen, C.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2799389\" medline_id=\"29443936\">        <Title>Ageing with HIV<\/Title>        <SourceTitle>Healthcare (Basel)<\/SourceTitle>        <PubMedTitle>Healthcare (Basel)<\/PubMedTitle>        <Volume>6<\/Volume>        <Issue>1<\/Issue>        <Page>E17<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>McGettrick, P.<\/Author>          <Author>Barco, E.A.<\/Author>          <Author>Mallon, P.W.G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2944303\" medline_id=\"25169559\">        <Title>From wasting to obesity, changes in nutritional concerns in HIV/AIDS<\/Title>        <SourceTitle>Endocrinology and Metabolism Clinics of North America<\/SourceTitle>        <PubMedTitle>Endocrinol Metab Clin North Am<\/PubMedTitle>        <Volume>43<\/Volume>        <Issue>3<\/Issue>        <Page>647<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Mankal, P.K.<\/Author>          <Author>Kotler, D.P.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2989525\" medline_id=\"30906778\">        <Title>A model to predict in-hospital mortality in HIV/AIDS patients with pneumocystis pneumonia in China: The clinical practice in real world<\/Title>        <SourceTitle>BioMed Research International<\/SourceTitle>        <PubMedTitle>Biomed Res Int<\/PubMedTitle>        <Volume>2019<\/Volume>        <Year>2019<\/Year>        <Authors>          <Author>Wu, L.<\/Author>          <Author>Zhang, Z.<\/Author>          <Author>Wang, Y.<\/Author>          <Author>Hao, Y.<\/Author>          <Author>Wang, F.<\/Author>          <Author>Gao, G.<\/Author>          <Author>Yang, D.<\/Author>          <Author>Xiao, J.<\/Author>          <Author>Zhao, H.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"2292\" modifiedDate=\"20181212115958\">    <Title>Cost<\/Title>    <Body>      <para>According to the Centers for Disease Control and Prevention (CDC), the total lifetime direct medical cost associated with HIV infection in persons of all ages infected with the virus in 2008 in the United States was USD 12.6 billion (range USD 9.5 to 15.7 billion) (<REF id=\"1955210\">Owusu-Edusei, K. Jr. et al., 2013<\/REF>). According to a study by researchers at Cornell University, the lifetime cost of treating a patient with HIV, calculated in 2004 U.S. dollars and estimating a life expectancy of 24.2 years from time of beginning anti-HIV care, is USD 618,900. The calculation was based on current standards of care, and reflects the substantial improvements in survival that are derived from effective antiretroviral therapy. Furthermore, the researchers determined that the treatment expense that could be avoided by preventing  HIV infection is USD 303,100 per individual (<REF id=\"1157336\">Schackman, B.R. et al., 2006<\/REF>). <\/para>      <para>A cost-of-illness study conducted in Bogotá, Colombia, determined that in that country, where the GDP per capita was USD 7,904 in 2014, the mean cost per patient was USD 11,505 +/- 18,658 per year. The total cost of the disease in that country was pegged at USD 1.43 billion in 2014 (<REF id=\"2944304\">Kuhlmann, J. et al., 2017<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"1157336\" medline_id=\"17063130\">        <Title>Lifetime cost and life expectancy for current human immunodeficiency virus care in the United States<\/Title>        <SourceTitle>Medical Care<\/SourceTitle>        <PubMedTitle>Med Care<\/PubMedTitle>        <Volume>44<\/Volume>        <Issue>11<\/Issue>        <Page>990<\/Page>        <Year>2006<\/Year>        <Authors>          <Author>Schackman, B.R.<\/Author>          <Author>Gebo, K.A.<\/Author>          <Author>Walensky, R.P.<\/Author>          <Author>Losina, E.<\/Author>          <Author>Muccio, T.<\/Author>          <Author>Sax, P.E.<\/Author>          <Author>Weinstein, M.C.<\/Author>          <Author>Seage, G.R. 3rd.<\/Author>          <Author>Moore, R.D.<\/Author>          <Author>Freedberg, K.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1955210\" medline_id=\"23403600\">        <Title>The estimated direct medical cost of selected sexually transmitted infections in the United States, 2008<\/Title>        <SourceTitle>Sexually Transmitted Diseases<\/SourceTitle>        <PubMedTitle>Sex Transm Dis<\/PubMedTitle>        <Volume>40<\/Volume>        <Issue>3<\/Issue>        <Page>197<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Owusu-Edusei, K. Jr.<\/Author>          <Author>Chesson, H.W.<\/Author>          <Author>Gift, T.L.<\/Author>          <Author>Tao, G.<\/Author>          <Author>Mahajan, R.<\/Author>          <Author>Ocfemia, M.C.<\/Author>          <Author>Kent, C.K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2944304\" medline_id=\"29254533\">        <Title>A cost-of-illness study of patients with HIV/AIDS in Bogotá, Colombia<\/Title>        <SourceTitle>Value in Health Regional Issues<\/SourceTitle>        <PubMedTitle>Value Health Reg Issues<\/PubMedTitle>        <Volume>14<\/Volume>        <Page>103<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Kuhlmann, J.<\/Author>          <Author>Keaei, M.<\/Author>          <Author>Conde, R.<\/Author>          <Author>Evers, S.M.A.A.<\/Author>          <Author>Gonzalez, J.<\/Author>          <Author>Govers, M.<\/Author>          <Author>Hiligsmann, M.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"398\" modifiedDate=\"20190502092113\">  <Title>Diagnosis<\/Title>  <Body>    <para>As described above (see Epidemiology), UNAID&apos;s program of 90-90-90 includes the goal--arguably the most critical of the three--that 90% of all HIV-positive individuals worldwide be aware of their status. This underlines the importance of robust programs for HIV screening and diagnosis (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>).  <\/para>    <para>In addition to specific questioning about drug use and sexual activities and the detection of symptoms of typical opportunistic infections, specific diagnosis of an HIV infection requires the detection of HIV-specific antibodies, antigens or both. Several tests are available and can be done reliably using plasma, serum, whole blood or saliva samples. Anti-HIV antibodies and p24 antigen can be simultanously detected by fourth-generation enzyme immunoassays (EIA); rapid third-generation EIA detects antibodies only. However, EIAs are unable to detect acute HIV infection, prior to the production of a sufficient level of antibodies (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>). Rapid antibody tests are similarly not useful for diagnosing HIV in infants younger than 18 months, due to the possible persistence of maternal antibodies (<REF id=\"1135290\">Simon, V. et al., 2006<\/REF>); in these situations, using an antigen/antibody detection system (such as the Architect HIV Ag/Ab Combo) may be more appropriate (<REF id=\"2989521\">Wang, L. et al., 2019<\/REF>).<\/para>    <para>Alternately, nucleic acid testing can be performed. Polymerase chain reaction (PCR) is used to quantify viral load, determine prognosis and establish correct antiviral therapy. Available tests include the branched chain DNA test (Quantiplex HIV RNA assay, Chiron), the HIV RNA polymerase chain reaction (PCR) test (Amplicor HIV-1, Roche) and the nucleic acid sequence-based amplification assay (Organon Technika/Advanced Bioscience Laboratories). Flow cytometry is used to monitor the number of CD4+ cells in the blood.<\/para>    <para>The duration of HIV infection at diagnosis can be determined using models of disease progression (<REF id=\"2989512\">Li, A.H. et al., 2018<\/REF>).<\/para>  <\/Body>  <References>    <Reference id=\"1135290\" medline_id=\"16890836\">      <Title>HIV/AIDS epidemiology, pathogenesis, prevention, and treatment<\/Title>      <SourceTitle>The Lancet<\/SourceTitle>      <PubMedTitle>Lancet<\/PubMedTitle>      <Volume>368<\/Volume>      <Issue>9534<\/Issue>      <Page>489<\/Page>      <Year>2006<\/Year>      <Authors>        <Author>Simon, V.<\/Author>        <Author>Ho, D.D.<\/Author>        <Author>Abdool Karim, Q.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2944306\" medline_id=\"30049419\">      <Title>HIV<\/Title>      <SourceTitle>The Lancet<\/SourceTitle>      <PubMedTitle>Lancet<\/PubMedTitle>      <Volume>392<\/Volume>      <Issue>10148<\/Issue>      <Page>685<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Ghosn, J.<\/Author>        <Author>Taiwo, B.<\/Author>        <Author>Seedat, S.<\/Author>        <Author>Autran, B.<\/Author>        <Author>Katlama, C.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2989512\" medline_id=\"30082524\">      <Title>Duration of human immunodeficiency virus infection at diagnosis among new human immunodeficiency virus cases in Dehong, Yunnan, China, 2008-2015<\/Title>      <SourceTitle>Chinese Medical Journal<\/SourceTitle>      <PubMedTitle>Chin Med J (Engl)<\/PubMedTitle>      <Volume>131<\/Volume>      <Issue>16<\/Issue>      <Page>1936<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Li, A.H.<\/Author>        <Author>Wu, Z.Y.<\/Author>        <Author>Jiang, Z.<\/Author>        <Author>McGoogan, J.M.<\/Author>        <Author>Zhao, Y.<\/Author>        <Author>Duan, S.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2989521\" medline_id=\"30651975\">      <Title>HIV infection in Xi&apos;an, China: Epidemic characterization, risk factors to false positives and potential utility of the sample-to-cutoff index to identify true positives using Architect HIV Ag/Ab combo<\/Title>      <SourceTitle>Antimicrobial Resistance and Infection Control<\/SourceTitle>      <PubMedTitle>Antimicrob Resist Infect Control<\/PubMedTitle>      <Volume>8<\/Volume>      <Page>9<\/Page>      <Year>2019<\/Year>      <Authors>        <Author>Wang, L.<\/Author>        <Author>Xiao, Y.<\/Author>        <Author>Tian, X.D.<\/Author>        <Author>Ruan, J.X.<\/Author>        <Author>Chen, W.<\/Author>        <Author>Yu, Y.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"4756\" modifiedDate=\"20190502093000\">    <Title>Screening<\/Title>    <Body>      <para>Routine HIV screening of all individuals in the United States aged 13-64 years has been recommended by the Centers for Disease Control and Prevention since 2006 (<a href=\"http://www.cdc.gov/mmwr/preview/mmwrhtml/rr5514a1.htm\">Revised recommendations for HIV testing of adults, adolescents, and pregnant women in health-care settings (Centers for Disease Control and Prevention, September 2006)<\/a>). In 2013, the U.S. Preventive Services Task Force issued a guideline containing a similar recommendation for routine screening of all individuals aged 15-65 years, as well as all pregnant women (<a href=\"http://www.uspreventiveservicestaskforce.org/uspstf13/hiv/hivdraftrec.htm\">Screening for HIV: U.S. Preventive Services Task Force recommendation statement (U.S. Preventive Services Task Force, April 2013)<\/a>). The recommendations are supported by evidence demonstrating the significant benefits to both patient and partner(s) of early diagnosis and treatment of HIV infection.<\/para>      <para>In European Union, the European Centre for Disease Prevention and Control has issued its own HIV screening recommendations. While acknowledging that each country must establish its own guidelines, there are certain high-risk population groups to whom screening should always be offered: men who have sex with men; immigrants (especially those from countries with high HIV endemicity); and injecting drug users. Enzyme immunoassay is the gold standard for screening and diagnosis, although rapid HIV (point-of-care) tests are an acceptable alternative and may increase the uptake among individuals who would otherwise be unwilling to be tested (<a href=\"http://ecdc.europa.eu/en/publications/publications/101129_gui_hiv_testing.pdf\">HIV testing: Increasing uptake and effectiveness in the European Union (European Centre for Disease Prevention and Control, December 2010)<\/a>). <\/para>    <\/Body>    <References/>  <\/Section>  <Section sectionId=\"404\" modifiedDate=\"20190502092931\">    <Title>Resistance Testing<\/Title>    <Body>      <para>After primary infection, as a consequence of mutations introduced by the reverse transcriptase, which is error-prone and generates a large number of mutations, viral heterogeneity increases and after a while patients are infected by different populations of HIV. Viruses evolving in patients, especially those who have received nonsuppressive therapy, may develop drug resistance due to mutations in the regions coding for the targets of therapy, such as protease, reverse transcriptase and gp41. Transmitted drug resistance may also occur.<\/para>      <para>Although resistance may be due to different factors (reduced absorption of the drug, activation, interactions with food or other drugs, poor compliance to drug schedules), the presence of HIV-resistant strains accounts for more than 70% of all HIV treatment failures. The success of highly active antiretroviral therapy (HAART) is significantly lower in patients who have previously taken anti-HIV drugs; if the previous therapy did not completely suppress viral replication, the resistant variants are likely to evolve into new variants resistant to one of more of the new combination drugs. Cross-resistance occurs when mutations conferring resistance to a particular drug also confer resistance to other drugs, usually of the same therapeutic class.<\/para>      <para>Recent trials have confirmed the benefit of resistance testing in directing drug selection for drug therapy. Resistance testing could help in determining the optimal drug cocktail to use or to substitute in case that ongoing therapy is failing (<REF id=\"1689287\">Hirsch, M.S. et al., 2008<\/REF>; <REF id=\"1689286\">Wainberg, M.A. et al., 2011<\/REF>). Testing may also improve patient outcome, reduce exposure to unnecessary side effects, and reduce costs associated with treatment. The International AIDS Society - USA has concluded that resistance testing should be used for patient management in several situations, such as newly diagnosed patients, virologic failure or pregnancy. <\/para>      <para>Different companies have developed methods for resistance testing, based on phenotyping and on genotyping. Phenotyping consists in the analysis of selected regions associated with mutations conferring drug resistance (RT and protease), which are amplified by PCR and integrated into an infectious strain of HIV-1. This assay measures the level of drug needed to block the virus. Monogram and Virco both offer phenotyping services for HIV.<\/para>      <para>Genotyping consists in the direct examination of PCR-amplified sequences or on methods based on the analysis of specific codons associated with resistance. The sequence is compared with sequences known to cause resistance. Genotyping results are generally available more quickly than phenotyping. However the results are more difficult to interpret because the physician must compare them against a growing database of characterized mutations. <\/para>      <para>Virtual phenotyping, available through Virco, involves genotyping the virus and then predicting phenotypic susceptibility based on large database of genotypic/phenotypic correlations.  <\/para>      <para>Genotyping and phenotyping are tests based on an evolving field, and interpretation requires analysis by someone with experience using these assays. The following table presents information on some commercially available drug resistance assays.<FREETABLE id=\"18\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>      <TR>      <TD COLSPAN=4 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Representative drug resistance assays available for analysis of HIV<\/B><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"100\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Company<\/B><\/TD>      <TD WIDTH=\"100\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Name of Test<\/B><\/TD>      <TD WIDTH=\"100\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Kind of Test<\/B><\/TD>      <TD WIDTH=\"143\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Analysis<\/B><\/TD>      <\/TR>      <TR>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Affymetrix<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      GeneChip HIV PRT<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Genotyping<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reverse transcriptase and protease<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ABI/Perkin Elmer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      HIV genotyping system<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Genotyping<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reverse transcriptase and protease<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Applied Sciences<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Genotyping test<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Genotyping<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reverse transcriptase and protease<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Chiron<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Genotyping test<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Genotyping<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reverse transcriptase and protease<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Innogenetics<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      INNO-LiPA<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Genotyping<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reverse transcriptase and protease<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Specialty Labs<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      GenotypeR Plus<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Genotyping<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reverse transcriptase and protease<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Stanford<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ABL<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Genotyping<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reverse transcriptase and protease<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Virco<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      VircoGEN<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Genotyping<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reverse transcriptase and protease<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Virco<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Antivirogram<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Phenotyping<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reverse transcriptase and protease<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Monogram<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      PhenoSense<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Phenotyping<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reverse transcriptase and protease; also gp41 and integrase<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Visible Genetics<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      TruGene<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Genotyping<\/TD>      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Reverse transcriptase and protease<\/TD>      <\/TR><\/TABLE>]]><\/FREETABLE>      <\/para>    <\/Body>    <References>      <Reference id=\"1689286\" medline_id=\"21848464\">        <Title>Development of antiretroviral drug resistance<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>365<\/Volume>        <Issue>7<\/Issue>        <Page>637<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Wainberg, M.A.<\/Author>          <Author>Zaharatos, G.J.<\/Author>          <Author>Brenner, B.G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1689287\" medline_id=\"18549313\">        <Title>Antiretroviral drug resistance testing in adult HIV-1 infection: 2008 recommendations of an International AIDS Society-USA panel<\/Title>        <SourceTitle>Clinical Infectious Diseases<\/SourceTitle>        <PubMedTitle>Clin Infect Dis<\/PubMedTitle>        <Volume>47<\/Volume>        <Issue>2<\/Issue>        <Page>266<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Hirsch, M.S.<\/Author>          <Author>Günthard, H.F.<\/Author>          <Author>Schapiro, J.M.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"2936\" modifiedDate=\"20181213032631\">  <Title>Prevention<\/Title>  <Body>    <para>While an effective AIDS vaccine is clearly needed in order to end the AIDS pandemic, no such product has yet been successfully developed. This means that alternative and effective prevention strategies must be consistently applied to reduce the rate of new HIV infections until an AIDS vaccine does become available (<REF id=\"2948271\">Fauci, A.S., 2017<\/REF>). Prevention packages should be individualized for specific regions and countries, based on the prevalent risk behaviors and patterns of transmission (<REF id=\"1199753\">Cohen, M.S. et al., 2008<\/REF>). Efforts to improve availability and ensure maximum usage of said methods is equally important, and will require the commitment of governments, NGOs and international agencies. <\/para>    <para>Despite the lack of an effective vaccine, progress has been made toward the prevention of HIV, as explained further in the following sections. Barrier methods were among the earliest prevention strategies, and are still useful. Used consistently, condoms can reduce HIV transmission in HIV-serodiscordant heterosexual couples by more than 70% (<REF id=\"2947853\">Giannou, F.K. et al., 2016<\/REF>). Male circumcision has been shown to reduce a man&apos;s risk of HIV acquisition from an infected female partner (<REF id=\"2947862\">Schenker, I., 2018<\/REF>). Topical microbicides show promise for HIV prevention in women. A vaginal gel containing the antiretroviral drug, tenofovir, prevented heterosexual acquisition of HIV in women in a trial conducted in South Africa (CAPRISA 004) (<REF id=\"1530496\">Karim, Q.A. et al., 2010<\/REF>). Preexposure prophylaxis (PrEP) can prevent HIV infection in men who have sex with men as well as in heterosexual men and women (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>). Based on findings of the HPTN 052 study, which showed that treating to undetectable levels in the infected partner reduced HIV transmission in serodiscordant couples by 96% (<REF id=\"1678176\">Cohen, M.S. et al., 2011<\/REF>), the Prevention Access Campaign was launched in 2016 (<REF id=\"2947855\">Anonymous, 2017<\/REF>). Modeling studies indicate that that universal testing and aggressive treatment of HIV-infected people could eventually extinguish the HIV epidemic (<REF id=\"1689284\">Granich, R.M. et al., 2009<\/REF>); this strategy, known as &quot;test and treat,&quot; has been incorporated into UNAID&apos;s 90-90-90 plan (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>).<\/para>    <para>Proven strategies available at this time for the prevention of HIV transmission include: <LI>rapid, routine HIV testing<\/LI>      <LI>education<\/LI>      <LI>sexual abstinence, monogamy, limiting the number of sexual partners<\/LI>      <LI>barrier methods (e.g., condoms)<\/LI>      <LI>provision of clean needles and syringes to drug users<\/LI>      <LI>programs to interrupt mother-to-infant transmission (e.g., caesarean delivery, antiretroviral therapy)<\/LI>      <LI>preexposure prophylaxis<\/LI>      <LI>medical male circumcision<\/LI>      <LI>treatment of the infected partner in serodiscordant couples<\/LI>    <\/para>  <\/Body>  <References>    <Reference id=\"1199753\" medline_id=\"18382737\">      <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic<\/Title>      <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>      <PubMedTitle>J Clin Invest<\/PubMedTitle>      <Volume>118<\/Volume>      <Issue>4<\/Issue>      <Page>1244<\/Page>      <Year>2008<\/Year>      <Authors>        <Author>Cohen, M.S.<\/Author>        <Author>Hellmann, N.<\/Author>        <Author>Levy, J.A.<\/Author>        <Author>Decock, K.<\/Author>        <Author>Lange, J.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1530496\">      <Title>Effectiveness and safety of tenofovir gel, an antiretroviral microbicide, for the prevention of HIV infection in women<\/Title>      <SourceTitle>Science<\/SourceTitle>      <PubMedTitle>Science<\/PubMedTitle>      <Volume>329<\/Volume>      <Issue>5996<\/Issue>      <Page>1168<\/Page>      <Year>2010<\/Year>      <Authors>        <Author>Karim, Q.A.<\/Author>        <Author>Karim, S.S.<\/Author>        <Author>Frohlich, J.A.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1678176\" medline_id=\"21767103\">      <Title>Prevention of HIV-1 infection with early antiretroviral therapy<\/Title>      <SourceTitle>New England Journal of Medicine<\/SourceTitle>      <PubMedTitle>N Engl J Med<\/PubMedTitle>      <Volume>385<\/Volume>      <Issue>6<\/Issue>      <Page>493<\/Page>      <Year>2011<\/Year>      <Authors>        <Author>Cohen, M.S.<\/Author>        <Author>Chen, Y.Q.<\/Author>        <Author>McCauley, M.<\/Author>        <Author>Gamble, T.<\/Author>        <Author>Hosseinipour, M.C.<\/Author>        <Author>Kumarasamy, N.<\/Author>        <Author>Hakim, J.G.<\/Author>        <Author>Kumwenda, J.<\/Author>        <Author>Grinsztejn, B.<\/Author>        <Author>Pilotto, J.H.<\/Author>        <Author>Godbole, S.V.<\/Author>        <Author>Mehendale, S.<\/Author>        <Author>Chariyalertsak, S.<\/Author>        <Author>Santos, B.R.<\/Author>        <Author>Mayer, K.H.<\/Author>        <Author>Hoffman, I.F.<\/Author>        <Author>Eshleman, S.H.<\/Author>        <Author>Piwowar-Manning, E.<\/Author>        <Author>Wang, L.<\/Author>        <Author>Makhema, J.<\/Author>        <Author>Mills, L.A.<\/Author>        <Author>de Bruyn, G.<\/Author>        <Author>Sanne, I.<\/Author>        <Author>Eron, J.<\/Author>        <Author>Gallant, J.<\/Author>        <Author>Havlir, D.<\/Author>        <Author>Swindells, S.<\/Author>        <Author>Ribaudo, H.<\/Author>        <Author>Elharrar, V.<\/Author>        <Author>Burns, D.<\/Author>        <Author>Taha, T.E.<\/Author>        <Author>Nielsen-Saines, K.<\/Author>        <Author>Celentano, D.<\/Author>        <Author>Essex, M.<\/Author>        <Author>Fleming, T.R.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1689284\" medline_id=\"19038438\">      <Title>Universal voluntary HIV testing with immediate antiretroviral therapy as a strategy for elimination of HIV transmission: a mathematical model<\/Title>      <SourceTitle>The Lancet<\/SourceTitle>      <PubMedTitle>Lancet<\/PubMedTitle>      <Volume>373<\/Volume>      <Issue>9657<\/Issue>      <Page>48<\/Page>      <Year>2009<\/Year>      <Authors>        <Author>Granich, R.M.<\/Author>        <Author>Gilks, C.F.<\/Author>        <Author>Dye, C.<\/Author>        <Author>De Cock, K.M.<\/Author>        <Author>Williams, B.G.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2944306\" medline_id=\"30049419\">      <Title>HIV<\/Title>      <SourceTitle>The Lancet<\/SourceTitle>      <PubMedTitle>Lancet<\/PubMedTitle>      <Volume>392<\/Volume>      <Issue>10148<\/Issue>      <Page>685<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Ghosn, J.<\/Author>        <Author>Taiwo, B.<\/Author>        <Author>Seedat, S.<\/Author>        <Author>Autran, B.<\/Author>        <Author>Katlama, C.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2947853\" medline_id=\"26488070\">      <Title>Condom effectiveness in reducing heterosexual HIV transmission: A systematic review and meta-analysis of studies on HIV serodiscordant couples<\/Title>      <SourceTitle>Expert Review of Pharmacoeconomics &amp; Outcomes Research<\/SourceTitle>      <PubMedTitle>Expert Rev Pharmacoecon Outcomes Res<\/PubMedTitle>      <Volume>16<\/Volume>      <Issue>4<\/Issue>      <Page>489<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Giannou, F.K.<\/Author>        <Author>Tsiara, C.G.<\/Author>        <Author>Nikolopoulos, G.K.<\/Author>        <Author>Talias, M.<\/Author>        <Author>Benetou, V.<\/Author>        <Author>Kantzanou, M.<\/Author>        <Author>Bonovas, S.<\/Author>        <Author>Hatzakis, A.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2947855\" medline_id=\"29096785\">      <Title>U=U taking off in 2017<\/Title>      <SourceTitle>The Lancet. HIV<\/SourceTitle>      <PubMedTitle>Lancet HIV<\/PubMedTitle>      <Volume>4<\/Volume>      <Issue>11<\/Issue>      <Page>e475<\/Page>      <Year>2017<\/Year>      <Authors/>    <\/Reference>    <Reference id=\"2947862\" medline_id=\"29969309\">      <Title>Cutting-edge success in preventing heterosexual HIV transmission in Africa: Voluntary medical male circumcision has reached 15 million men<\/Title>      <SourceTitle>AIDS Education and Prevention<\/SourceTitle>      <PubMedTitle>AIDS Educ Prev<\/PubMedTitle>      <Volume>30<\/Volume>      <Issue>3<\/Issue>      <Page>232<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Schenker, I.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2948271\" medline_id=\"29052689\">      <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic<\/Title>      <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>      <PubMedTitle>JAMA<\/PubMedTitle>      <Volume>318<\/Volume>      <Issue>16<\/Issue>      <Page>1535<\/Page>      <Year>2017<\/Year>      <Authors>        <Author>Fauci, A.S.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"399\" modifiedDate=\"20181220120037\">    <Title>Prophylactic HIV Vaccines<\/Title>    <Body>      <para>The development of a vaccine capable of protecting against HIV infection presents a series of unique difficulties, and has been challenging researchers since the virus was identified (<REF id=\"944030\">Markel, H., 2005<\/REF>). In contrast to other viruses for which vaccines have been successfully developed, HIV replication is controlled primarily by cellular, rather than humoral, immune responses. <\/para>      <para>The main obstacle to vaccine development is the rapid replication, compounded by the genetic diversity and high rate of mutation and recombination of this virus, which evolves rapidly in the host. Protective immunity elicited by a vaccine must exceed the efficacy of the natural immune response, which is unable to clear the virus, and should be effective against the many clades and strains existing both globally and within a single infected individual (<REF id=\"1024845\">Girard, M.P. et al., 2006<\/REF>; <REF id=\"1164361\">Montefiori, D. et al., 2007<\/REF>; <REF id=\"2947496\">Hemelaar, J. et al., 2019<\/REF>). In spite of the many recognized challenges, at least a moderately effective HIV vaccine is needed in order to achieve a durable end to the AIDS pandemic (<REF id=\"2948271\">Fauci, A.S., 2017<\/REF>).<\/para>      <para>Several potential HIV-1 vaccine strategies have been tested to date in clinical trials, including HIV-1 envelope (Env) gp120 subunit vaccines, adenovirus serotype 5 (Ad5) vectors expressing internal proteins (Gag/Pol/Nef), DNA vaccine prime plus Ad5 vector boost, canarypox ALVAC vector prime plus Env gp120 boost, and--most recently--mosaic HIV-1 vaccines. The latter are potentially the most promising, as they incorporate global mosaic antigens from various group M strains of the virus, and thus may circumvent the issue of viral diversity. The phase I/II APPROACH trial confirmed the safety and immunogenicity of a mosaic Ad26/Ad26 plus gp140 HIV-1 vaccine, consisting in priming with Ad26 vectors expressing bioinformatically optimised mosaic HIV-1 envelope (Env)/Gag/Pol immunogens and boosting with Ad26 vectors plus adjuvanted Env gp140 protein. The trial recruited 393 healthy, HIV-negative adults in Africa, Thailand and the U.S. who were randomly assigned to receive 1 of 7 vaccine combinations or placebo. All of the vaccine regimens triggered immunogenic responses in the study subjects, with good tolerability. In a parallel study in rhesus monkeys, two-thirds of animals given the candidate vaccine that was most immunogenic in humans were fully protected against repeated challenge with simian-HIV (<REF id=\"2869568\">Barouch, D.H. et al., 2018<\/REF>).<\/para>      <para>Information on candidate AIDS vaccines in active clinical and preclinical development appears in the following table.<COMPETITIVE id=\"78\">          <TABLE>            <TR>              <TD>Vaccines under investigation for the prevention or treatment of AIDS<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Description<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=197440&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-1 Immunogen<\/a>              <\/TD>              <TD>Immune Response BioPharma<\/TD>              <TD>Inactivated gp120 - depleted HIV - 1 immunogen (strain HHZ - 321 from Zaire) inactivated by beta - propiolactone and irradiation,  emulsified in mineral oil (Incomplete Freud&apos;s Adjuvant)<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795404&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ITV-1<\/a>              <\/TD>              <TD>Immunotech Laboratories<\/TD>              <TD>AIDS vaccine consisting of an inactivated purified extract of porcine pepsin recognizing HIV gp41 and gp120 proteins<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291052&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AIDSVAX gp120 B/E<\/a>              <\/TD>              <TD>Walter Reed Army Institute<\/TD>              <TD>HIV - 1 vaccine consisting of a recombinant CHO - produced fusion protein containing two different gp120 envelope antigens: MN derived from a T - cell tropic or syncytium - inducing HIV - 1 B subtype,  and A244,  derived from the macrophage - tropic CM244 HIV E subtype<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=877379&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC-HIV<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>Canarypox - based vaccine expressing HIV - 1 envelope glycoprotein (clade C),  glycoprotein gp41 (clade B),  gag (clade B) and protease (clade B) antigens<\/TD>              <TD>Phase II/III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789554&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">TV1.C gp120 Env/1086.C gp120 Env<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>Bivalent AIDS vaccine consisting of two recombinant HIV - 1 subtype C gp120 antigens,  TV1.C and 1086.C; expressed in CHO cells<\/TD>              <TD>Phase II/III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435169&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AGS-004<\/a>              <\/TD>              <TD>Argos Therapeutics<\/TD>              <TD>AIDS vaccine consisting of dendritic cells electroporated with autologous amplified HIV - 1 gag,  nef,  rev and vpr RNA antigens and CD40 ligand RNA<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=301127&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC E120TMG<\/a>              <\/TD>              <TD>Walter Reed Army Institute/ Sanofi Pasteur<\/TD>              <TD>AIDS vaccine consisting of a recombinant canarypox vector expressing HIV - 1 subtype E envelope gp120 - TM (from a primary isolate) and gag and pol/protease genes from HIV - 1 subtype B - (LAI),  under the control of vaccine virus H6 and I3L promoters,  respectively<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915290&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos.HIV<\/a>              <\/TD>              <TD>Crucell<\/TD>              <TD>Recombinant replication - deficient Ad26 vectored vaccine consisting of 3 Ad26 vectors,  one containing a mosaic insert of envelope (Env) sequence,  and 2 vectors containing mosaic inserts of Gag and Pol sequences<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925145&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos4.HIV<\/a>              <\/TD>              <TD>Crucell<\/TD>              <TD>Tetravalent human immunodeficiency virus (HIV) vaccine comprising a mixture of four replication - deficient adenoviral serotype 26 (rAd26) vectors encoding a mosaic synthetic cytoplasmic domain fragment (7aa) of HIV envelope protein C4 (C4D7/mos2SEnv),  and non - synthetic envelope glycoproteins mos1Env,  mos1GagPol and mos2GagPol,  respectively<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925146&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Clade C gp140<\/a>              <\/TD>              <TD>Crucell<\/TD>              <TD>HIV vaccine containing clade C gp140 protein mixed with aluminum phosphate adjuvant<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392675&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-LIPO-5<\/a>              <\/TD>              <TD>ANRS<\/TD>              <TD>AIDS vaccine consisting of a mixture of 5 lipopeptides containing CTL epitopes from HIV - 1 subtype B. Two peptides from Gag (aa 17 - 35; aa 253 - 284),  two peptides from Nef (aa 66 - 97; aa 116 - 145) and one peptide from Pol (aa 325 - 355). Each peptide is modified in the C - terminal position by the addition of a palmitoyl - lysylamide group [K(Palm) - NH2] to form the lipopeptide<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315937&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LC-002<\/a>              <\/TD>              <TD>Genetic Immunity<\/TD>              <TD>AIDS vaccine consisting of a DNA plasmid (pLWXu1) encoding for 15 HIV proteins and formulated into a mannosilated particle using the Genetic Immunity&apos;s immune amplification platform technology<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=429800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-HIV62B<\/a>              <\/TD>              <TD>GeoVax Labs/ National Institute Allergy Infect Dis<\/TD>              <TD>HIV vaccine comprising a non - replicating recombinant modified vaccinia Ankara (rMVA62B) encoding HIV - 1 HXB2 gag/pol,  and a truncated HIV - 1 ADA envelope (env) protein lacking the cytoplasmic tail<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=758734&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVAmos<\/a>              <\/TD>              <TD>Crucell<\/TD>              <TD>AIDS vaccine consisting of two recombinant modified vaccinia Ankara (MVA) viruses,  one encoding for the HIV - 1 mosaic 1 (M1) env,  gag and  pol genes,  and the other one encoding for the HIV - 1 mosaic 2 (M2) env,  gag and pol genes<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=736800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VAC-3S<\/a>              <\/TD>              <TD>InnaVirVax<\/TD>              <TD>Therapeutic HIV vaccine directed to the highly conserved gp41,  3S motif of HIV - 1<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=833319&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VIH-TriMix-ARNm<\/a>              <\/TD>              <TD>IDIBAPS<\/TD>              <TD>AIDS therapeutic vaccine consisting of the combination of mRNA,  rationally designed HIV antigens and TriMix<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=375612&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV014-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine composed of 4 adenoviral vectors (in a 3:1:1:1 ratio) that encode the HIV - 1 Gag/Pol polyprotein from clade B (AdtGagPol(B).11D) and HIV - 1 Env glycoproteins from clades A (Adgp140(A).11D),  B (Adtgp140dv12(B).11D),  and C (Adgp140(C).11D),  respectively<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=400981&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVDNA016-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>Multiclade,  multivalent HIV - 1 DNA vaccine composed of six plasmids respectively encoding Gag clade B (VRC - 4401),  Pol clade B (VRC - 4409),  Nef clade B (VRC - 4404),  Env clade A (VRC - 5736),  Env clade B (VRC - 5737) and Env clade C (VRC - 5738)<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=871553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp140<\/a>              <\/TD>              <TD>Crucell<\/TD>              <TD>Trimeric glycoprotein 140<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428304&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pGA2/JS7<\/a>              <\/TD>              <TD>GeoVax Labs/ National Institute Infectious Dis<\/TD>              <TD>DNA plasmid containing gag,  pro,  RT,  env,  tat,  rev,  vpu genes from HIV - 1 clade B<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=754344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad35-GRIN<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative<\/TD>              <TD>AIDS vaccine consisting of recombinant adenoviral - 35 vector encoding GRIN fusion protein based on gag,  RT,  integrase and nef (HIV - 1 subtype A)<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709822&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CEvac<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>HIV vaccine consisting of DNA encoding for HIV - 1 group M p24gag conserved elements (p24Core 1 and p24Core2)<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789679&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ChAdV63.HIVconsv<\/a>              <\/TD>              <TD>University of Oxford<\/TD>              <TD>HIV vaccine consisting of a replication - incompetent chimpanzee adenovirus (ChAdV - 63) encoding a chimeric fusion protein (HIVCON) comprising the most highly conserved regions of HIV - 1 Gag,  Pol,  Vif,  and Env<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-C<\/a>              <\/TD>              <TD>EuroVacc Foundation<\/TD>              <TD>HIV DNA - vaccine based on a representative Chinese subtype C isolate CN54<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805333&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-PT123<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of DNA plasmids encoding for the clade C ZM96 Gag and gp140 and CN54 Pol - Nef HIV - 1 genes<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=463084&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FIT-06<\/a>              <\/TD>              <TD>FIT Biotech<\/TD>              <TD>AIDS vaccine consisting of a DNA plasmid (GTU(R)) expressing HIV - 1 B - clade nef,  rev,  tat,  gag,  pol,  env and CTL epitopes<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1012613&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">INO-6145<\/a>              <\/TD>              <TD>Inovio Pharmaceuticals<\/TD>              <TD>Human immunodeficiency virus (HIV) vaccine comprising plasmid DNA encoding synthethic HIV - 1 - derived multiclade consensus Gag and Pol <\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=879292&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA HIV-B<\/a>              <\/TD>              <TD>ANRS<\/TD>              <TD>Recombinant modified Vaccinia virus ankara vectored vaccine,  encoding for full - length sequence of gag (aa 1 - 512),  fragments from pol (aa 172 - 219,  325 - 383,  461 - 519) and nef (66 - 147,  182 - 206) from HIV - 1 (isolate BRU/LAI)<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=439426&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.HIVconsv<\/a>              <\/TD>              <TD>University of Oxford<\/TD>              <TD>Modified vaccinia Ankara (MVA) virus encoding a chimeric fusion protein (HIVCON) comprising the most highly conserved regions of HIV Gag,  Pol,  Vif,  and Env<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=981286&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Mosaic gp140<\/a>              <\/TD>              <TD>Janssen<\/TD>              <TD>HIV - 1 mosaic M gp140 Env trimer<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709739&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-GP<\/a>              <\/TD>              <TD>Inovio Pharmaceuticals<\/TD>              <TD>Multi - subtype vaccine based on synthetic HIV - 1 immunogens targeting two env antigens as well as gag and pol antigens<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795545&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">THV-01<\/a>              <\/TD>              <TD>Theravectys<\/TD>              <TD>AIDS therapeutic live recombinant vaccine consisting of the combination of THV01 - 1 and THV01 - 2 lentiviral vectors encoding HIV antigens under the regulation of THV - PROM human promoter<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=471960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tat Oyi<\/a>              <\/TD>              <TD>Biosantech<\/TD>              <TD>AIDS vaccine consisting of a synthetic Tat variant of 101 residues (HIV - 1 Oyi strain)<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=882712&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">p55(gag)<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of plasmid DNA encoding the full length p55gag from HIV - 1 group M<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789680&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pSG2.HIVconsv<\/a>              <\/TD>              <TD>University of Oxford<\/TD>              <TD>HIV vaccine consisting of a DNA plasmid (pSG2) encoding a chimeric fusion protein (HIVCON) comprising the most highly conserved regions of HIV - 1 Gag,  Pol,  Vif,  and Env<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923551&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AD4-EnvC150<\/a>              <\/TD>              <TD>PaxVax/ National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of a replication - competent adenovirus type 4 vector encoding an optimized HIV clade C env protein (gp150 1086.C)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661464&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.ENVA.01 HIV-1<\/a>              <\/TD>              <TD>Crucell/ National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of recombinant adenovirus serotype 26 expressing HIV clade A Env antigen<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991353&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-EnvCN54<\/a>              <\/TD>              <TD>Imperial College<\/TD>              <TD>HIV vaccine consisting of live replication - competent adenovirus 4 vector encoding envelope glycoprotein derived from HIV - 1 clade C strain CN54<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923549&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-mGag<\/a>              <\/TD>              <TD>PaxVax/ National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of a replication - competent adenovirus type 4 vector encoding an optimized HIV Gag antigen (mosaic Gag)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661445&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad5.ENVA.48HIV-1<\/a>              <\/TD>              <TD>Crucell/ National Institute Allergy Infect Dis/ Beth Israel Deaconess Medical Center<\/TD>              <TD>Chimeric adenovirus serotype 5 (Ad5) with seven hexon variable regions (HVRs) derived from Ad48 HIV - 1 expressing the VRC EnvA antigen<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=861091&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BG505 SOSIP.664 gp140 trimers<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative<\/TD>              <TD>Multiepitope AIDS vaccine consisting of soluble cleaved gp140 trimers based on HIV - 1 BG505 subtype A T/F virus Env gene,  in which each monomer comprises an A501C mutated HIV - 1 gp120 and a T605C mutated HIV - 1 gp41 linked by a disulfide bond,  trimer - stabilizing I559P and T322N mutations in gp41 and gp120 regions,  respectively and MPER domain deletion,  expressed in HEK293 cells<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=899722&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CH505TF<\/a>              <\/TD>              <TD>Duke University<\/TD>              <TD>Human immunodeficiency virus vaccine comprising gp120 envelope glycoproteins<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=741669&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CN54gp140<\/a>              <\/TD>              <TD>Medical Research Council (MRC)/ Imperial College<\/TD>              <TD>HIV vaccine consisting of a recombinant trimeric envelope glycoprotein gp140 derived from HIV - 1 clade C strain CN54<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=687890&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DCV3<\/a>              <\/TD>              <TD>Hospital Clinic<\/TD>              <TD>AIDS vaccine consisting of autologous monocyte - derived dendritic cells pulsed ex vivo with autologous heat - inactivated HIV - 1<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923518&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA CON-S env<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of a DNA plasmid encoding for a group M consensus envelope gene with shortened consensus variable loops (CON - S) env gene <\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923534&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Mosaic env<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of a DNA plasmid encoding for a designed env gene (Mosaic env)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923514&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Nat-B env<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of a DNA plasmid encoding for Nat - B env gene<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=821845&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA.HTI/MVA.HTI<\/a>              <\/TD>              <TD>Aelix Therapeutics<\/TD>              <TD>HIV vaccine consisting of a prime vaccine composed of 298H plasmid vector encoding T - cell immunogen comprising 16 polypeptide segments p17 (aa 17 - 94),  p24 (aa 30 - 43,  61 - 71,  91 - 150,  164 - 177,  217 - 231),  p2p7plp6 (aa 63 - 89),  protease (aa 45 - 99),  reverse transcriptase (RT,  aa 34 - 50,  210 - 264,  309 - 342),  integrase (aa 210 - 243,  266 - 282),  Vif (aa 25 - 50,  166 - 184),  Nef (aa 56 - 68) derived from HIV - 1 genome and linked via alanine linkers and a boost vaccine composed of modified vaccinia virus Ankara (MVA) vector encoding HIVCAT T - cell immunogen (HIT) comprising 16 polypeptide segments -  p17 (aa 17 - 94),  p24 (aa 30 - 43,  61 - 71,  91 - 150,  164 - 177,  217 - 231),  p2p7plp6 (aa 63 - 89),  protease (aa 45 - 99),  reverse transcriptase (RT,  aa 34 - 50,  210 - 264,  309 - 342),  integrase (aa 210 - 243,  266 - 282),  Vif (aa 25 - 50,  166 - 184),  Nef (aa 56 - 68) derived from HIV - 1 genome and linked via alanine linkers,  both under the control of cytomegalovirus (CMV) promoter<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=900317&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FLSC<\/a>              <\/TD>              <TD>National Institutes of Health (NIH)/ Profectus BioSciences<\/TD>              <TD>AIDS vaccines comprising a full - lenght single - chain (FLSC) analogue of the gp120 - CD4 receptor complex consisting of HIV - 1 Bal gp120 protein joined to the D1and D2 domains of CD4 by a 20 - amino - acid linker<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719339&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV MAG pDNA<\/a>              <\/TD>              <TD>Profectus BioSciences<\/TD>              <TD>Therapeutic HIV DNA vaccine based on two plasmid vectors: ProfectusVax HIV - 1 gag/pol and ProfectusVax HIV - 1 nef/tat/vif, env and containing bupivacaine<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=783050&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIVAX<\/a>              <\/TD>              <TD>University of Miami (UM)/ GeneCure<\/TD>              <TD>AIDS vaccine consisting of a live attenuated replication - defective HIV - 1 strain pseudotyped with vesicular somatitis virus type G (VSV - G) envelope protein<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=927219&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LFn-p24B/C<\/a>              <\/TD>              <TD>Vaccine Technologies (VTI)<\/TD>              <TD>AIDS vaccine consisting of detoxified anthrax lethal factor (LFn) fused to HIV - 1 p24 of subtype B/C<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435114&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CMDR<\/a>              <\/TD>              <TD>Walter Reed Army Institute<\/TD>              <TD>AIDS vaccine consisting of a recombinant modified vaccinia ankara  - Chiang Mai vector encoding for the HIV - 1 (subtype CRF_A/E,  Thailand) env (clade E,  CM235 isolate),  gag (clade A,  CM240 isolate) and pol (clade E,  CM240 isolate) genes<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991354&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CN54<\/a>              <\/TD>              <TD>Imperial College<\/TD>              <TD>HIV vaccine consisting of live non - replicating modified vaccinia Ankara (MVA) vector encoding envelope glycoprotein derived from HIV - 1 clade C strain CN54<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037346&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv3<\/a>              <\/TD>              <TD>University North Carolina, Chapel Hill<\/TD>              <TD>AIDS vaccine consisting of non - replicating poxvirus - modified vaccinia Ankara (MVA) virus transduced with a codon - optimized self - amplifying mRNA (saRNA) encoding second - generation M3 mosaic of conserved epitopes derived from HIV - 1 Gag/Pol<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037349&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv4<\/a>              <\/TD>              <TD>University North Carolina, Chapel Hill<\/TD>              <TD>AIDS vaccine consisting of non - replicating poxvirus - modified vaccinia Ankara (MVA) virus transduced with a codon - optimized self - amplifying mRNA (saRNA) encoding second - generation M4 mosaic of conserved epitopes derived from HIV - 1 Gag/Pol<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=308599&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MYM-V101<\/a>              <\/TD>              <TD>Mymetics<\/TD>              <TD>AIDS vaccine consisting of influenza virosomes composed of enveloped virus - like particles displaying a trimeric recombinant HIV - 1 gp41 (rGp41) and the 35aa lipopeptide P1 containing MPER and galactosyl ceramide mucosal receptor binding motif<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805334&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NYVAC-HIV-PT1<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccines based on recombinant NYVAC vaccinia viruses encoding for the clade C ZM96 Gag and gp140 and CN54 Pol - Nef HIV - 1 genes<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=469002&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-G<\/a>              <\/TD>              <TD>Inovio Pharmaceuticals/ Walter Reed Army Institute<\/TD>              <TD>AIDS DNA vaccine consisting of SynCon immunogens targeting HIV - 1 clade A,  C and D gag,  pol and env proteins<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915203&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax DNA plasmid HIV-1 nef/tat/vif,env<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of a DNA plasmid encoding for nef,  tat,  vif and env<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915206&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax VSV IN HIV envC<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of a recombinant vesicular stomatitis virus (rVSV) encoding for the HIV envC gene<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=456307&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI DNA-C2<\/a>              <\/TD>              <TD>South African AIDS Vaccine Initiative/ University of Witwatersrand/ National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of two DNA plasmids expressing an HIV - 1 subtype C polyprotein comprising Gag - RT - Tat - Nef and an HIV - 1 subtype C truncated gp160 (gp150CT)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=409360&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI MVA-C<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative/ National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of recombinant modified vaccinia Ankara vector (MVA) expressing polyprotein Gag - RT - Tat - Nef and truncated Env from HIV - 1 subtype C<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=451282&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VLP-TBI-pcDNA-TCI<\/a>              <\/TD>              <TD>State Res Cent Virology Biotech VECTOR<\/TD>              <TD>AIDS vaccine consisting of virus - like particles containing a DNA plasmid encoding about 80 CD8+ CTL and CD4+ Th epitopes from HIV - 1 Env,  Gag,  Pol and Nef (pcDNA - TCI) as a core,  encapsulated within a spermidine - polyglucin - TBI protein conjugate (TBI protein containing T -  and B - cell epitopes from Env and Gag proteins)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455063&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-027-00-VP<\/a>              <\/TD>              <TD>GenVec/ National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of adenoviral type 35 vector encoding HIV Env Clade A<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455064&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-038-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of adenoviral type - 5 vector encoding Env clade A<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923291&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-053-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of adenoviral type - 5 vector encoding env clade C<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923293&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-054-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of adenoviral type - 5 vector encoding gag and pol<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1030241&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVRGP096-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of a stabilized variant of the HIV - Env trimer<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006783&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">eOD-GT8 60mer<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative<\/TD>              <TD>HIV vaccine consisting of self - assembling 60 - unit nanoparticles comprising an engineered outer domain (eOD) from HIV gp120 fused to a lumazine synthase protein via a G/S linker<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993174&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">env (A,B,C,A/E)/gag (C) DNA vaccine<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>HIV - 1 DNA vaccine composed of a polyvalent DNA plasmid expressing clade C gag and clades A,  B,  C and A/E envelope constructs<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993181&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120 (A,B,C,A/E) protein vaccine<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>HIV - 1 vaccine composed of gp 120 clade A,  B,  C and A/E recombinant proteins<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120-NefTat/AS01B<\/a>              <\/TD>              <TD>GlaxoSmithKline<\/TD>              <TD>HIV vaccine consisting of recombinant Nef and Tat regulatory proteins along with envelope glycoprotein gp120 derived from Clade C HIV isolate,  formulated with the AS01B adjuvant<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987944&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp145 C.6980<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>HIV vaccine consisting of recombinant oligomeric gp145 clade C Env protein 6980<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=745516&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rAd5 EnvB<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>AIDS vaccine consisting of recombinant adenovirus serotype 5 expressing Env B<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=467570&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rVSVIN-N4CT9-Gag1<\/a>              <\/TD>              <TD>Profectus BioSciences<\/TD>              <TD>AIDS vaccine consisting of a highly attenuated (G gene truncations and N gene translocations) recombinant vesicular stomatitis virus (rVSV) Indiana serotype encoding human immunodeficiency virus type 1 gag<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878268&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rcAd26.MOS1.HIV-Env<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative/ Beth Israel Deaconess Medical Center<\/TD>              <TD>HIV vaccine consisting of a recombinant replication - competent E3 -  adenoviral vector serotype 26 (AD26) encoding mosaic1envelope (Mos1Env) of HIV serotype1(HIV1) antigen,  consisting of a peptide of length15 aa overlapping with11aa covering the sequence mosaic Env protein<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357275&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">recombinant o-gp140/MF59 adjuvant<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative<\/TD>              <TD>HIV vaccine consisting of V2 - deleted oligomeric (o - gp140) envelope derived from the R5 HIV - 1 SF162 isolate,  adjuvanted in MF59<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027124&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027124<\/a>              <\/TD>              <TD>University of Pittsburgh<\/TD>              <TD>AIDS vaccine consisting of autologous dendritic cells matured with an optimized cocktail (a1DC) and loaded with a conserved HIV gag and pol peptide pool (a1DC + conserved HIV peptides)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027126&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027126<\/a>              <\/TD>              <TD>University of Pittsburgh<\/TD>              <TD>AIDS vaccine consisting of autologous dendritic cells matured with a standard prostaglandin E2 cocktail (pgDC) and loaded with a conserved HIV gag and pol peptide pool (pgDC + conserved HIV peptides)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027125&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027125<\/a>              <\/TD>              <TD>University of Pittsburgh<\/TD>              <TD>AIDS vaccine consisting of autologous dendritic cells matured with a standard prostaglandin E2 cocktail (pgDC) and loaded with autologous  - inactivated HIV (pgDC + inactivated whole autologous HIV)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027123&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027123<\/a>              <\/TD>              <TD>University of Pittsburgh<\/TD>              <TD>AIDS vaccine consisting of autologous dendritic cells matured with an optimized cocktail (a1DC) and loaded with autologous  - inactivated HIV (a1DC + inactivated whole autologous HIV)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=417670&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SHIV vaccine<\/a>              <\/TD>              <TD>IGXBio<\/TD>              <TD>AIDS vaccine consisting of a DNA plasmid encoding the genome of the simian human immunodeficiency virus (SHIV_KU2) with deletions of the reverse transcriptase,  integrase and vif genes,  substitiution of the 3&apos; long terminal repeat with SV40 poly A sequences and substitution of SIV env and gag - nef with HIV - 1 env and gag - nef<\/TD>              <TD>IND Filed<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1035036&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ConM SOSIP<\/a>              <\/TD>              <TD>Universiteit Van Amsterdam/ Imperial College<\/TD>              <TD>AIDS vaccine consisting of a native - like Env (SOSIP) BG505 trimer - derived based on a group M consensus sequence with two disulfide bond added (A501C - T605C and A73C - A561C) and the following mutations: I559P,  H66R,  A316W,  I535M,  Q543N and the TD8 mutations: E47D,  K49E,  V65K,  E106T,  I165L,  E429R,  R432Q,  and A500R; expressed in HEK293T cells<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038073&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-11<\/a>              <\/TD>              <TD>Enochian BioSciences<\/TD>              <TD>Preventive HIV vaccine consisting of genetically engineered autologous human stem cells (HSC)<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038088&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-12<\/a>              <\/TD>              <TD>Enochian BioSciences<\/TD>              <TD>Therapeutic HIV vaccine consisting of genetically engineered autologous human stem cells (HSC)<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1003524&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-BN HIV<\/a>              <\/TD>              <TD>Janssen Pharmaceuticals/ Bavarian Nordic<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1029754&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vacc-CRX<\/a>              <\/TD>              <TD>Bionor<\/TD>              <TD>AIDS vaccine targeting neutralizing epitopes<\/TD>              <TD>Preclinical<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"944030\" medline_id=\"16120854\">        <Title>The search for effective HIV vaccines<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>353<\/Volume>        <Issue>8<\/Issue>        <Page>753<\/Page>        <Year>2005<\/Year>        <Authors>          <Author>Markel, H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1024845\" medline_id=\"16530298\">        <Title>A review of vaccine research and development: The human immunodeficiency virus (HIV)<\/Title>        <SourceTitle>Vaccine<\/SourceTitle>        <PubMedTitle>Vaccine<\/PubMedTitle>        <Volume>24<\/Volume>        <Issue>19<\/Issue>        <Page>4062<\/Page>        <Year>2006<\/Year>        <Authors>          <Author>Girard, M.P.<\/Author>          <Author>Osmanov, S.K.<\/Author>          <Author>Kieny, M.P.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2869568\">        <Title>Evaluation of a mosaic HIV-1 vaccine in a multicentre, randomised, double-blind, placebo-controlled, phase 1/2a clinical trial (APPROACH) and in rhesus monkeys (NHP 13-19)<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>392<\/Volume>        <Issue>10143<\/Issue>        <Page>232<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Barouch, D.H.<\/Author>          <Author>Tomaka, F.L.<\/Author>          <Author>Wegmann, F.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947496\" medline_id=\"30509777\">        <Title>Global and regional molecular epidemiology of HIV-1, 1990-2015: A systematic review, global survey, and trend analysis<\/Title>        <SourceTitle>The Lancet. Infectious Diseases<\/SourceTitle>        <PubMedTitle>Lancet Infect Dis<\/PubMedTitle>        <Volume>19<\/Volume>        <Issue>2<\/Issue>        <Page>143<\/Page>        <Year>2019<\/Year>        <Authors>          <Author>Hemelaar, J.<\/Author>          <Author>Elangovan, R.<\/Author>          <Author>Yun, J.<\/Author>          <Author>Dickson-Tetteh, L.<\/Author>          <Author>Fleminger, I.<\/Author>          <Author>Kirtley, S.<\/Author>          <Author>Williams, B.<\/Author>          <Author>Gouws-Williams, E.<\/Author>          <Author>Ghys, P.D.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2948271\" medline_id=\"29052689\">        <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>318<\/Volume>        <Issue>16<\/Issue>        <Page>1535<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Fauci, A.S.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"405\" modifiedDate=\"20181211114602\">    <Title>Topical Microbicides<\/Title>    <Body>      <para>Worldwide, nearly half of the adults living with HIV/AIDS and, in the United States, one-fourth of individuals estimated to be living with HIV/AIDS, are women. More than 90% of new infections are spread through unprotected sex, and heterosexual contact represents the primary source of risk for women (<REF id=\"1376618\">Cutler, B. and Justman, J., 2008<\/REF>). Topical microbicides act as chemical, biological and/or physical barriers to virus entry in the host, and may constitute an effective method for preventing HIV infection and breaking the chain of transmission that can be controlled by women, even in settings where female disempowerment is a significant driver of disease transmission (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>). In the absence of an effective AIDS vaccine and in communities where use of condoms is low, effective topical microbicides (virucides) are the best alternative (<REF id=\"2798863\">Alexandre, K.B. et al., 2016<\/REF>; see also the <a href=\"http://www.ipmglobal.org\">International Partnership for Microbicides<\/a> web site). <\/para>      <para>Topical (intravaginal or intrarectal) microbicides may be formulated as gels, foams, films, tablets, suppositories or rings that can be inserted into the vagina or rectum, where the product is secreted. Microbicides can be broken down into three major groups: non-HIV-specific, moderately specific or highly specific to HIV (<REF id=\"2798863\">Alexandre, K.B. et al., 2016<\/REF>). <\/para>      <para>Nonspecific microbicides include buffering agents (e.g., BufferGel) and detergents or surfactants (e.g., spermicides such as nonoxynol-9, Savvy). Buffering agents alter the local pH, thereby inactivating the microorganism. Detergents act by solubilizing membrane proteins, which destroys the viral envelope. However, they may also disrupt the protective membranes of the vaginal epithelium, causing lesions that facilitate viral entry and actually increase the risk of infection. This was in fact observed in a study evaluating the HIV protective activity of nonoxynol-9 (<REF id=\"2798863\">Alexandre, K.B. et al., 2016<\/REF>). Another drawback of the nonspecific microbicides is their limited therapeutic window. <\/para>      <para>Products classified as moderately specific microbicides (e.g., Carraguard, PRO-2000) target the processes of viral adsorption and fusion, and have a somewhat wider therapeutic window. Due to their mechanism of action, they may prevent infection by other enveloped viruses such as <BACKGROUNDER id=\"39\">Herpes Simplex Virus<\/BACKGROUNDER>, in addition to HIV (<REF id=\"1078726\">Balzarini, J. and Van Damme, L., 2007<\/REF>). However, these products have not been successful at preventing HIV acquisition (<REF id=\"2798863\">Alexandre, K.B. et al., 2016<\/REF>).<\/para>      <para>Highly specific microbicides are based on compounds that target HIV replication at a step prior to virus integration into the target cell. They may act at the level of virus entry, reverse transcription of the viral RNA, or proviral DNA integration into the host cells. In vitro these compounds have been shown to block both virus-cell infection and cell-cell transmission of the virus (<REF id=\"1078726\">Balzarini, J. and Van Damme, L., 2007<\/REF>). In vivo in macaque monkeys, protection against SHIV challenge has been described with CCR5 inhibitors (<REF id=\"2798869\">Hartley, O. et al., 2018<\/REF>). <\/para>      <para>Positive results were reported in July 2010 from the CAPRISA 004 microbicide study, which evaluated a vaginal gel formulation of tenofovir disoproxil fumarate for the prevention of HIV infection in women. In the study, women using the tenofovir gel had 50% fewer HIV infections after one year of use compared to those using placebo; after 30 months of use, the incidence of HIV infection remained nearly 40% lower in the active treatment group (<REF id=\"1530496\">Karim, Q.A. et al., 2010<\/REF>). CAPRISA 004 was conducted by the Centre for the AIDS Programme of Research in South Africa (CAPRISA) with the support of the National Institute of Allergy and Infectious Diseases (NIAID). <\/para>      <para>The HIV reverse transcriptase inhibitor dapivirine has been formulated as a monthly vaginal ring for HIV prevention. In the ASPIRE trial, a phase III, randomized, double-blind, placebo-controlled trial enrolling 2,629 sexually active, HIV-seronegative women in four African countries, the incidence of HIV-1 infection in the dapivirine group was 27% lower than in the placebo group. In a post hoc analysis, higher rates of protection were observed among women over the age of 21 years; treatment adherence was also greater in this age group (<REF id=\"2467239\">Baeten, J.M. et al., 2016<\/REF>). In the DREAM study, womens&apos; risk of HIV acquisition was reduced by more than half through use of the dapivirine ring. The dapivirine ring is currently under regulatory review by the European Medicines Agency (EMA) through an Article 58 application. This procedure allows the EMA, in cooperation with WHO, to provide a scientific opinion on the safety, efficacy and quality of medicines that would be marketed exclusively outside of the European Union--specifically in low- and middle-income countries--for diseases of major public health interest.<\/para>      <para>Several pharmaceutical companies are responding to the call for microbicide development, as indicated in the table below. Approximately 50 different compounds are in various stages of development, according to one estimate (<REF id=\"1639462\">Hladik, F. and Doncel, G.F., 2010<\/REF>; see also <a href=\"http://www.mtnstopshiv.org\">Microbicide Trials Network<\/a>). <COMPETITIVE id=\"79\">          <TABLE>            <TR>              <TD>Microbicides in development for the prevention of HIV and other sexually transmitted infections<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Description<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=281553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine<\/a>              <\/TD>              <TD>International Partnership Microbicides<\/TD>              <TD>4 - [4 - (2, 4, 6 - Trimethylphenylamino)pyrimidin - 2 - ylamino]benzonitrile <\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=321981&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amphora<\/a>              <\/TD>              <TD>Evofem<\/TD>              <TD>Acid - buffering (pH 3.55) bioadhesive vaginal gel consisting of L - lactic acid,  citric acid,  potassium bitartrate (buffer salts),  benzoic acid (preservative),  xantham gum,  alginic acid (gelling agents),  glycerol (humectant) and water<\/TD>              <TD>Phase II/III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=675477&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DS-003<\/a>              <\/TD>              <TD>International Partnership Microbicides<\/TD>              <TD>2 - [1 - [2 - [4 - Methoxy - 7 - (2 - pyrazinyl) - 1H - pyrrolo[2, 3 - c]pyridin - 3 - yl]oxalyl]piperidin - 4 - ylidene] - 2 - phenylacetonitrile<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc<\/a>              <\/TD>              <TD>International Partnership Microbicides<\/TD>              <TD>Combination of dapivirine and maraviroc delivered through a vaginal ring<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=658522&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Griffithsin<\/a>              <\/TD>              <TD>Population Council<\/TD>              <TD>12.7 kD protein isolated from red algae Griffithsia sp.<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528<\/a>              <\/TD>              <TD>ImQuest BioSciences<\/TD>              <TD>1 - (Cyclopropylmethyl) - 6 - (3, 5 - dimethylbenzoyl) - 5 - isopropylpyrimidine - 2, 4(1H, 3H) - dione<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>Combination of vicriviroc and MK - 2048<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=773475&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5P12-RANTES<\/a>              <\/TD>              <TD>Orion Biotechnology<\/TD>              <TD>Fully recombinant human chemokine protein RANTES/CCL5 analog,  expressed in Pichia pastoris strain Bg08<\/TD>              <TD>Preclinical<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"1078726\" medline_id=\"17336656\">        <Title>Microbicide drug candidates to prevent HIV infection<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>369<\/Volume>        <Issue>9563<\/Issue>        <Page>787<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Balzarini, J.<\/Author>          <Author>Van Damme, L.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1376618\" medline_id=\"18992405\">        <Title>Vaginal microbicides and the prevention of HIV transmission<\/Title>        <SourceTitle>The Lancet. Infectious Diseases<\/SourceTitle>        <PubMedTitle>Lancet Infect Dis<\/PubMedTitle>        <Volume>8<\/Volume>        <Issue>11<\/Issue>        <Page>685<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Cutler, B.<\/Author>          <Author>Justman, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1530496\">        <Title>Effectiveness and safety of tenofovir gel, an antiretroviral microbicide, for the prevention of HIV infection in women<\/Title>        <SourceTitle>Science<\/SourceTitle>        <PubMedTitle>Science<\/PubMedTitle>        <Volume>329<\/Volume>        <Issue>5996<\/Issue>        <Page>1168<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Karim, Q.A.<\/Author>          <Author>Karim, S.S.<\/Author>          <Author>Frohlich, J.A.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1639462\">        <Title>Preventing mucosal HIV transmission with topical microbicides: Challenges and opportunities<\/Title>        <SourceTitle>Antiviral Research<\/SourceTitle>        <PubMedTitle>Antiviral Res<\/PubMedTitle>        <Volume>88<\/Volume>        <Page>S3<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Hladik, F.<\/Author>          <Author>Doncel, G.F.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2467239\" medline_id=\"26900902\">        <Title>Use of a vaginal ring containing dapivirine for HIV-1 prevention in women<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>375<\/Volume>        <Issue>22<\/Issue>        <Page>2121<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Baeten, J.M.<\/Author>          <Author>Palanee-Phillips, T.<\/Author>          <Author>Brown, E.R.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2798863\" medline_id=\"27429040\">        <Title>Progress and Perspectives on HIV-1 microbicide development<\/Title>        <SourceTitle>Virology<\/SourceTitle>        <PubMedTitle>Virology<\/PubMedTitle>        <Volume>497<\/Volume>        <Page>69<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Alexandre, K.B.<\/Author>          <Author>Mufhandu, H.T.<\/Author>          <Author>London, G.M.<\/Author>          <Author>Chakauya, E.<\/Author>          <Author>Khati, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2798869\" medline_id=\"29376550\">        <Title>Preventing HIV transmission through blockade of CCR5: Rationale, progress and perspectives<\/Title>        <SourceTitle>Swiss Medical Weekly<\/SourceTitle>        <PubMedTitle>Swiss Med Wkly<\/PubMedTitle>        <Volume>148<\/Volume>        <Page>w14580<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Hartley, O.<\/Author>          <Author>Martins, E.<\/Author>          <Author>Scurci, I.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2944306\" medline_id=\"30049419\">        <Title>HIV<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>392<\/Volume>        <Issue>10148<\/Issue>        <Page>685<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Ghosn, J.<\/Author>          <Author>Taiwo, B.<\/Author>          <Author>Seedat, S.<\/Author>          <Author>Autran, B.<\/Author>          <Author>Katlama, C.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"2964\" modifiedDate=\"20181213081941\">    <Title>Preexposure Prophylaxis<\/Title>    <Body>      <para>Preexposure prophylaxis (PrEP) involves the regular administration of suppressive antiretroviral therapy during periods of risk to healthy, non-HIV-infected individuals who are considered to be at high risk of exposure. This strategy has been successfully utilized to prevent mother-to-child transmission of HIV during pregnancy, childbirth and breastfeeding, as well as to prevent viral acquisition through sexual contact in men who have sex with men, heterosexual discordant couples, and individuals with multiple partners (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>). Like microbicides and vaccines, PrEP is useful in high-risk HIV-negative individuals who are not able to influence the behavior of their sexual partners, including women in the developing world. Although PrEP is ever more widely used as a method of preventing HIV infection (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>), use of this strategy remains suboptimal. Only 10% of individuals in the U.S. who are candidates for PrEP are using it, and in other countries this figure is even lower (<REF id=\"2948271\">Fauci, A.S., 2017<\/REF>).<\/para>      <para>The Pre-Exposure Prophylaxis Initiative (iPrEX) study evaluated the efficacy of a fixed-dose, single-tablet, coformulation of tenofovir disoproxil fumarate and emtricitabine (FTC-TDF) or placebo administered once daily to 1,251 and 1,248 randomized subjects, respectively. The iPrEx study was conducted in Peru, Ecuador, Brazil, Thailand, South Africa and the United States. The participants were HIV-seronegative men or transgender women who have sex with men. All individuals received testing for HIV infection, risk reduction counseling, condoms and management of sexually transmitted infections. Emergent infection with HIV was reported in 36 and 64 individuals in the active treatment and placebo group, respectively, indicating a relative reduction in the incidence of infection of 44% in the modified intention-to-treat population. The levels of HIV RNA in the plasma and T cell surface glycoprotein CD4+ T cell counts were found to be comparable among individuals with seroconversion in the two treatment cohorts. Similar time to seroconversion after RNA detection was also observed between the two cohorts. Safety evaluation revealed elevations in the concentration of creatinine in the serum of at least 1.1 times the upper limit of the normal range or &gt;1.5 times the baseline level in 2% and 1% of participants receiving the combination regimen and placebo, respectively. Increases in the levels of creatinine in the serum were resolved following discontinuation of treatment. Moderate nausea and unintentional weight loss of &gt;= 5% were observed more frequently in subjects treated with FTC-TDF than in those receiving placebo (<REF id=\"1572338\">Grant, R.M. et al., 2010<\/REF>). <\/para>      <para>Initially studied in MSM, the use of PrEP has since been extended to other at-risk groups. In the landmark HPTN 052 study, treating the infected partner reduced HIV transmission in serodiscordant couples by 96% (<REF id=\"1678176\">Cohen, M.S. et al., 2011<\/REF>). In July 2012, the FDA approved Truvada (tenofovir disoproxil fumarate/emtricitabine) for preexposure prophylaxis, to reduce the risk of HIV-1 infection among uninfected adults at high risk. The product was immediately made available for this new indication. In 2017, the combination was approved in Scotland, the first European country to give the nod to Truvada, in combination with safer sex practices, for pre-exposure prophylaxis to reduce the risk of sexually acquired HIV-1 infection in adults at high risk (<REF id=\"2649816\">Nandwani, R., 2017<\/REF>). Generic FTC-TDF combination formulations are now available in some countries, which should result in making PrEP a more widely accessible option (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>). <\/para>      <para>More recently, attention has turned to HIV entry inhibitors, particularly those targeting the chemokine receptor CCR5, which is required for binding and entry of the virus into the host cell. Although in earlier stages of development, CCR5 inhibitors are envisioned for both oral and topical administration in PrEP (<REF id=\"2798869\">Hartley, O. et al., 2018<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"1572338\" medline_id=\"21091279\">        <Title>Preexposure chemoprophylaxis for HIV prevention in men who have sex with men<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>363<\/Volume>        <Issue>27<\/Issue>        <Page>2587<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Grant, R.M.<\/Author>          <Author>Lama, J.R.<\/Author>          <Author>Anderson, P.L.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1678176\" medline_id=\"21767103\">        <Title>Prevention of HIV-1 infection with early antiretroviral therapy<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>385<\/Volume>        <Issue>6<\/Issue>        <Page>493<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Cohen, M.S.<\/Author>          <Author>Chen, Y.Q.<\/Author>          <Author>McCauley, M.<\/Author>          <Author>Gamble, T.<\/Author>          <Author>Hosseinipour, M.C.<\/Author>          <Author>Kumarasamy, N.<\/Author>          <Author>Hakim, J.G.<\/Author>          <Author>Kumwenda, J.<\/Author>          <Author>Grinsztejn, B.<\/Author>          <Author>Pilotto, J.H.<\/Author>          <Author>Godbole, S.V.<\/Author>          <Author>Mehendale, S.<\/Author>          <Author>Chariyalertsak, S.<\/Author>          <Author>Santos, B.R.<\/Author>          <Author>Mayer, K.H.<\/Author>          <Author>Hoffman, I.F.<\/Author>          <Author>Eshleman, S.H.<\/Author>          <Author>Piwowar-Manning, E.<\/Author>          <Author>Wang, L.<\/Author>          <Author>Makhema, J.<\/Author>          <Author>Mills, L.A.<\/Author>          <Author>de Bruyn, G.<\/Author>          <Author>Sanne, I.<\/Author>          <Author>Eron, J.<\/Author>          <Author>Gallant, J.<\/Author>          <Author>Havlir, D.<\/Author>          <Author>Swindells, S.<\/Author>          <Author>Ribaudo, H.<\/Author>          <Author>Elharrar, V.<\/Author>          <Author>Burns, D.<\/Author>          <Author>Taha, T.E.<\/Author>          <Author>Nielsen-Saines, K.<\/Author>          <Author>Celentano, D.<\/Author>          <Author>Essex, M.<\/Author>          <Author>Fleming, T.R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2649816\" medline_id=\"28416197\">        <Title>Pre-exposure prophylaxis is approved in Scotland<\/Title>        <SourceTitle>The Lancet. HIV<\/SourceTitle>        <PubMedTitle>Lancet HIV<\/PubMedTitle>        <Volume>4<\/Volume>        <Issue>6<\/Issue>        <Page>e238<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Nandwani, R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2798869\" medline_id=\"29376550\">        <Title>Preventing HIV transmission through blockade of CCR5: Rationale, progress and perspectives<\/Title>        <SourceTitle>Swiss Medical Weekly<\/SourceTitle>        <PubMedTitle>Swiss Med Wkly<\/PubMedTitle>        <Volume>148<\/Volume>        <Page>w14580<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Hartley, O.<\/Author>          <Author>Martins, E.<\/Author>          <Author>Scurci, I.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2944306\" medline_id=\"30049419\">        <Title>HIV<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>392<\/Volume>        <Issue>10148<\/Issue>        <Page>685<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Ghosn, J.<\/Author>          <Author>Taiwo, B.<\/Author>          <Author>Seedat, S.<\/Author>          <Author>Autran, B.<\/Author>          <Author>Katlama, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2948271\" medline_id=\"29052689\">        <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>318<\/Volume>        <Issue>16<\/Issue>        <Page>1535<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Fauci, A.S.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"3018\" modifiedDate=\"20190409081634\">    <Title>Male Circumcision<\/Title>    <Body>      <para>On the basis of studies conducted more than a decade ago, the practice of voluntary medical male circumcision--performed by a medical doctor under proper hygienic conditions--has become established as a method of reducing a man&apos;s risk of acquiring HIV  through heterosexual intercourse with an infected female partner (<REF id=\"2947862\">Schenker, I., 2018<\/REF>). In late 2006, the U.S. National Institutes of Health prematurely terminated two randomized controlled trials of adult male circumcision on the basis of the significant efficacy detected in an interim analysis. The studies, which enrolled 2,784 Kenyan men and 4,996 Ugandan men, demonstrated 53% and 51% reductions, respectively, in the incidence of new HIV infections among circumcised participants (<REF id=\"1083121\">Bailey, R.C. et al., 2007<\/REF>; <REF id=\"1083122\">Gray, R.H. et al., 2007<\/REF>). A previous study conducted in South Africa had also demonstrated a greater than 50% protective benefit (<REF id=\"1083116\">Auvert, B. et al., 2005<\/REF>). A study reported in early 2009 demonstrated that in addition to protecting against HIV, circumcision may reduce the incidence of <BACKGROUNDER id=\"39\">Herpes Simplex Virus<\/BACKGROUNDER> type 2 (HSV-2) infection as well as the prevalence of <BACKGROUNDER id=\"124\">Human Papillomavirus<\/BACKGROUNDER> (HPV) infection. The study enrolled more than 5,500 HIV-negative, uncircumcised adolescent boys and men (<REF id=\"1345730\">Tobian, A.A. et al., 2009<\/REF>). Circumcision of HIV-infected men does not prevent transmission of the infection to their HIV-negative female partners, however, according to a large trial also conducted in Uganda (<REF id=\"1394499\">Wawer, M.J. et al., 2009<\/REF>).<\/para>      <para>In 2006, a multinational campaign was launched with the aim of circumcising 27 million men in sub-Saharan Africa by 2021. It is estimated that by 2030, the practice of voluntary medical male circumcision will avert at least 500,000 HIV infections in Africa alone (<REF id=\"2947862\">Schenker, I., 2018<\/REF>). Between 2007 and 2017, with support from PEPFAR (the U.S. President&apos;s Emergency Fund for AIDS Relief), more than 15 million men and boys in 14 countries in sub-Saharan Africa underwent voluntary medical male circumcision (<REF id=\"2949342\">Davis, S.M. et al., 2018<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"1083116\" medline_id=\"16231970\">        <Title>Randomized, controlled intervention trial of male circumcision for reduction of HIV infection risk: The ANRS 1265 Trial<\/Title>        <SourceTitle>PLoS Medicine<\/SourceTitle>        <PubMedTitle>PLoS Med<\/PubMedTitle>        <Volume>2<\/Volume>        <Issue>11<\/Issue>        <Page>e298<\/Page>        <Year>2005<\/Year>        <Authors>          <Author>Auvert, B.<\/Author>          <Author>Taljaard, D.<\/Author>          <Author>Lagarde, E.<\/Author>          <Author>Sobngwi-Tambekou, J.<\/Author>          <Author>Sitta, R.<\/Author>          <Author>Puren, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1083121\" medline_id=\"17321310\">        <Title>Male circumcision for HIV prevention in young men in Kisumu, Kenya: A randomised controlled trial<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>369<\/Volume>        <Issue>9562<\/Issue>        <Page>643<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Bailey, R.C.<\/Author>          <Author>Moses, S.<\/Author>          <Author>Parker, C.B.<\/Author>          <Author>Agot, K.<\/Author>          <Author>Maclean, I.<\/Author>          <Author>Krieger, J.N.<\/Author>          <Author>Williams, C.F.<\/Author>          <Author>Campbell, R.T.<\/Author>          <Author>Ndinya-Achola, J.O.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1083122\" medline_id=\"17321311\">        <Title>Male circumcision for HIV prevention in men in Rakai, Uganda: A randomised trial<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>369<\/Volume>        <Issue>9562<\/Issue>        <Page>657<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Gray, R.H.<\/Author>          <Author>Kigozi, G.<\/Author>          <Author>Serwadda, D.<\/Author>          <Author>Makumbi, F.<\/Author>          <Author>Watya, S.<\/Author>          <Author>Nalugoda, F.<\/Author>          <Author>Kiwanuka, N.<\/Author>          <Author>Moulton, L.H.<\/Author>          <Author>Chaudhary, M.A.<\/Author>          <Author>Chen, M.Z.<\/Author>          <Author>Sewankambo, N.K.<\/Author>          <Author>Wabwire-Mangen, F.<\/Author>          <Author>Bacon, M.C.<\/Author>          <Author>Williams, C.F.<\/Author>          <Author>Opendi, P.<\/Author>          <Author>Reynolds, S.J.<\/Author>          <Author>Laeyendecker, O.<\/Author>          <Author>Quinn, T.C.<\/Author>          <Author>Wawer, M.J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1345730\" medline_id=\"19321868\">        <Title>Male circumcision for the prevention of HSV-2 and HPV infections and syphilis<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>360<\/Volume>        <Issue>13<\/Issue>        <Page>1298<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Tobian, A.A.<\/Author>          <Author>Serwadda, D.<\/Author>          <Author>Quinn, T.C.<\/Author>          <Author>Kigozi, G.<\/Author>          <Author>Gravitt, P.E.<\/Author>          <Author>Laeyendecker, O.<\/Author>          <Author>Charvat, B.<\/Author>          <Author>Ssempijja, V.<\/Author>          <Author>Riedesel, M.<\/Author>          <Author>Oliver, A.E.<\/Author>          <Author>Nowak, R.G.<\/Author>          <Author>Moulton, L.H.<\/Author>          <Author>Chen, M.Z.<\/Author>          <Author>Reynolds, S.J.<\/Author>          <Author>Wawer, M.J.<\/Author>          <Author>Gray, R.H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1394499\" medline_id=\"19616720\">        <Title>Circumcision in HIV-infected men and its effect on HIV transmission to female partners in Rakai, Uganda: A randomised controlled trial<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>374<\/Volume>        <Issue>9685<\/Issue>        <Page>229<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Wawer, M.J.<\/Author>          <Author>Makumbi, F.<\/Author>          <Author>Kigozi, G.<\/Author>          <Author>Serwadda, D.<\/Author>          <Author>Watya, S.<\/Author>          <Author>Nalugoda, F.<\/Author>          <Author>Buwembo, D.<\/Author>          <Author>Ssempijja, V.<\/Author>          <Author>Kiwanuka, N.<\/Author>          <Author>Moulton, L.H.<\/Author>          <Author>Sewankambo, N.K.<\/Author>          <Author>Reynolds, S.J.<\/Author>          <Author>Quinn, T.C.<\/Author>          <Author>Opendi, P.<\/Author>          <Author>Iga, B.<\/Author>          <Author>Ridzon, R.<\/Author>          <Author>Laeyendecker, O.<\/Author>          <Author>Gray, R.H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947862\" medline_id=\"29969309\">        <Title>Cutting-edge success in preventing heterosexual HIV transmission in Africa: Voluntary medical male circumcision has reached 15 million men<\/Title>        <SourceTitle>AIDS Education and Prevention<\/SourceTitle>        <PubMedTitle>AIDS Educ Prev<\/PubMedTitle>        <Volume>30<\/Volume>        <Issue>3<\/Issue>        <Page>232<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Schenker, I.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2949342\" medline_id=\"30173159\">        <Title>Progress in voluntary medical male circumcision for HIV prevention supported by the US president&apos;s emergency plan for AIDS relief through 2017: Longitudinal and recent cross-sectional programme data<\/Title>        <SourceTitle>BMJ Open<\/SourceTitle>        <PubMedTitle>BMJ Open<\/PubMedTitle>        <Volume>8<\/Volume>        <Issue>8<\/Issue>        <Year>2018<\/Year>        <Authors>          <Author>Davis, S.M.<\/Author>          <Author>Hines, J.Z.<\/Author>          <Author>Habel, M.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"3747\" modifiedDate=\"20181212115043\">    <Title>Prevention of Perinatal Transmission<\/Title>    <Body>      <para>Prevention of transmission of HIV from an infected pregnant woman to her unborn child has been one of the most successful methods developed to date for preventing future cases of HIV and AIDS. In the absence of appropriate prophylactic therapy, the likelihood of mother-to-infant transmission is between 15% and 40%. By 2016, however, as a result of the widespread implementation of prophylactic antiretroviral therapy in pregnant HIV-positive women, the global rate of perinatal infection was less than 5%. More than 95% of HIV-positive pregnant and breastfeeding women must be diagnosed, treated and monitored in order to reduce this number further. In high-income settings, where antiretroviral therapy is typically initiated prior to pregnancy, the rate of mother-to-infant transmission is already close to zero (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>). Each year, women living with HIV give birth to more than one million HIV-exposed but uninfected (HEU) infants, versus just 160,000 HIV-positive infants (<REF id=\"2947507\">Bengtson, A.M. et al., 2019<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"2944306\" medline_id=\"30049419\">        <Title>HIV<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>392<\/Volume>        <Issue>10148<\/Issue>        <Page>685<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Ghosn, J.<\/Author>          <Author>Taiwo, B.<\/Author>          <Author>Seedat, S.<\/Author>          <Author>Autran, B.<\/Author>          <Author>Katlama, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947507\" medline_id=\"30529212\">        <Title>Maternal immunisation to improve the health of HIV-exposed infants<\/Title>        <SourceTitle>The Lancet. Infectious Diseases<\/SourceTitle>        <PubMedTitle>Lancet Infect Dis<\/PubMedTitle>        <Volume>19<\/Volume>        <Issue>4<\/Issue>        <Page>e120<\/Page>        <Year>2019<\/Year>        <Authors>          <Author>Bengtson, A.M.<\/Author>          <Author>Sanfilippo, A.M.<\/Author>          <Author>Hughes, B.L.<\/Author>          <Author>Savitz, D.A.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"400\" modifiedDate=\"20190508024306\">  <Title>Treatment<\/Title>  <Body>    <para>Earlier treatment guidelines recommended treatment for patients on the basis of CD4 count and/or viral load. Since 2015, however, WHO has recommended immediate initiation of antiretroviral therapy for all individuals confirmed to be HIV-positive, regardless of CD4 cell count or age (<a href=\"http://www.who.int/hiv/pub/guidelines/earlyrelease-arv/en/\">Guideline on when to start antiretroviral therapy and on pre-exposure prophylaxis for HIV (World Health Organization, September 2015)<\/a>). This strategy, known as test and treat, is now standard in all major treatment guidelines (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>). Experimental evidence suggests that early initiation of antiretroviral drug therapy results in restriction of viral reservoirs, decreased inflammatory response and suppression of chronic, systemic immune activation (<REF id=\"2552671\">Krebs, S.J. and Ananworanich, J., 2016<\/REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>).<\/para>    <para>A growing number of antiretroviral agents and combinations are currently on the market. The availability of these drugs, at least in Western nations where patients are able to afford them, has changed AIDS from a death sentence to a potentially chronic disease. In resource-poor countries, however, antiretroviral drugs have been available only for a short period of time, and largely due to the intervention of the UNAIDS, World Bank and other supragovernmental organizations. Although significant inroads have been made, antiretroviral coverage remains inadequate in resource-poor countries and is hindered further by the lack of financial resources, trained healthcare workers and technology (<REF id=\"2948271\">Fauci, A.S., 2017<\/REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>). Of an estimated 36.9 million people worldwide living with HIV, 21.7 million were currently on antiretroviral therapy in 2017 (<a href=\"http://www.unaids.org/en/resources/fact-sheet\">Global HIV &amp; AIDS statistics - 2018 fact sheet (UNAIDS, 2018)<\/a>, consulted December 3, 2018). <\/para>    <para>Combination therapy using three or more anti-HIV drugs, termed HAART or cART, results in sustained reductions in viral load and increases in CD4 cell counts and is the state of the art in HIV treatment. In the decades since HAART first became available, treatment has been simplified and streamlined thanks to the development of long-acting, fixed-dose combination formulations. Many patients can now be treated with as little as one pill daily, versus up to ten pills daily in three divided doses prior to the introduction of these formulations (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>). In countries where it is standard therapy, HAART has had an enormous impact on the demographics of AIDS and HIV disease. In these countries the number of patients dying from AIDS has dropped markedly, while the population of individuals living with HIV has increased (<REF id=\"2552675\">Badowski, M.E. et al., 2016<\/REF>). <\/para>    <para>HAART has greatly reduced HIV-associated mortality and morbidity, but does not completely eliminate the virus from sanctuary reservoirs (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014<\/REF>). Viral load declines in a biphasic pattern with HAART, falling off by about 2-3 logs in the first month, and then by another 1-2 logs over the next two months, reaching stable levels of &lt;50 copies per mL of blood thereafter (<REF id=\"657419\">Kaufmann, G.R. and Cooper, D.A., 2000<\/REF>). HIV-1 persists indefinitely in resting memory CD4 T cells in patients on HAART (<REF id=\"2798862\">Cary, D.C. et al., 2016<\/REF>; <REF id=\"2849566\">Pitman, M.C. et al., 2018<\/REF>), and is capable of rebounding upon discontinuation of drug therapy (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>).<\/para>    <para>Drugs and drug combinations marketed for the treatment of HIV and AIDS are listed in the following table.<FREETABLE id=\"19\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>      <TR>      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Marketed anti-HIV drugs<\/B><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Drug name<\/B><\/TD>      <TD WIDTH=\"160\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Organization<\/B><\/TD>      <TD WIDTH=\"83\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Year and country of first launch<\/B><\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Nucleoside analogue reverse transcriptase inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=113563&p_type=L&p_origen=BGR&p_tsearch=A\">Zidovudine<\/a> (Retrovir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1987 (U.S., U.K.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=143041&p_type=L&p_origen=BGR&p_tsearch=A\">Didanosine<\/a> (Videx)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1991 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=137195&p_type=L&p_origen=BGR&p_tsearch=A\">Stavudine<\/a> (Zerit)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1994 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=184356&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine<\/a> (Epivir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Shire BioChem/ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1995 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=173602&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate<\/a> (Ziagen)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      GlaxoSmithKline/ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1999 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=201671&p_type=L&p_origen=BGR&p_tsearch=A\">Phosphazid<\/a> (Nikavir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AZT-Pharma<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1999 (Russian Federation)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=246665&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate<\/a> (Viread)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2001 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=190016&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine<\/a> (Emtriva)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Nonnucleoside reverse transcriptase inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=170581&p_type=L&p_origen=BGR&p_tsearch=A\">Nevirapine<\/a> (Viramune)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Hikma<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1996 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=196540&p_type=L&p_origen=BGR&p_tsearch=A\">Delavirdine mesilate<\/a> (Rescriptor)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1997 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207217&p_type=L&p_origen=BGR&p_tsearch=A\">Efavirenz<\/a> (Sustiva)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1998 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=290137&p_type=L&p_origen=BGR&p_tsearch=A\">Etravirine<\/a> (Intelence)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen-Cilag<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2008 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=336587&p_type=L&p_origen=BGR&p_tsearch=A\">Rilpivirine hydrochloride<\/a> (Edurant)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2011 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=431792&p_type=L&p_origen=BGR&p_tsearch=A\">Elsulfavirine sodium<\/a> (Elpida)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Viriom<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2017 (Russian Federation)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=748272&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine<\/a> (Pifeltro)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (U.S)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>HIV protease inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=168103&p_type=L&p_origen=BGR&p_tsearch=A\">Saquinavir mesilate<\/a> (Invirase)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Roche<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1995 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=199183&p_type=L&p_origen=BGR&p_tsearch=A\">Indinavir sulfate<\/a> (Crixivan)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck &#38; Co.<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1996 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207282&p_type=L&p_origen=BGR&p_tsearch=A\">Ritonavir<\/a> (Norvir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1996 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=211732&p_type=L&p_origen=BGR&p_tsearch=A\">Nelfinavir mesilate<\/a> (Viracept)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1997 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=257722&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate<\/a> (Reyataz)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=285394&p_type=L&p_origen=BGR&p_tsearch=A\">Fosamprenavir calcium<\/a> (Lexiva)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Vertex/ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=240094&p_type=L&p_origen=BGR&p_tsearch=A\">Tipranavir<\/a> (Aptivus)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Boehringer Ingelheim<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2005 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=310828&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir<\/a> (Prezista)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2006 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>HIV entry and fusion inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=217659&p_type=L&p_origen=BGR&p_tsearch=A\">Enfuvirtide<\/a> (Fuzeon)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Alexion/Roche<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=313738&p_type=L&p_origen=BGR&p_tsearch=A\">Maraviroc<\/a> (Selzentry)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2007 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=434971&p_type=L&p_origen=BGR&p_tsearch=A\">Albuvirtide<\/a> (Aikening)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Frontier Biotechnologies<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (China)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=204505&p_type=L&p_origen=BGR&p_tsearch=A\">Ibalizumab<\/a> (Trozargo)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      TaiMed Biologics/ Theratechnologies<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Integrase inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428015&p_type=L&p_origen=BGR&p_tsearch=A\">Raltegravir potassium<\/a> (Isentress)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2007 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=466915&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir sodium<\/a> (Tivicay)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=414415&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir<\/a> (Vitekta)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2015 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Pharmacoenhancing agents<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=644627&p_type=L&p_origen=BGR&p_tsearch=A\">Cobicistat<\/a> (Tybost)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2014 (U.K.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Combination products<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=258524&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/Zidovudine<\/a> (Combivir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1997 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=284325&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/zidovudine/abacavir sulfate<\/a> (Trizivir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2000 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291602&p_type=L&p_origen=BGR&p_tsearch=A\">Lopinavir/ritonavir<\/a> (Kaletra)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2000 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315122&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate/lamivudine<\/a> (Epzicom)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=344908&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine<\/a> (Truvada)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004 (U.S.) (treatment)<BR>2012 (U.S.) (prevention)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368895&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/efavirenz<\/a> (Atripla)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb/Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2006 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=676928&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/rilpivirine hydrochloride<\/a> (Complera)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2011 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=651752&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/GS-9350/Truvada<\/a> (Stribild)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2012 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=780137&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/Cobicistat<\/a> (Prezcobix)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2014 (Canada)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=725107&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/abacavir/ lamivudine<\/a> (Triumeq)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2014 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=845715&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate/cobicistat<\/a> (Evotaz)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2015 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=760199&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/cobicistat/tenofovir alafenamide/emtricitabine<\/a> (Genvoya)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2015 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868925&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/tenofovir alafenamide fumarate<\/a> (Descovy)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2016 (U.S., U.K.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=876185&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/rilpivirine hydrochloride/tenofovir alafenamide fumarate<\/a> (Odefsey)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead/Janssen<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2016 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=792693&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/cobicistat/emtricitabine/tenofovir alafenamide fumarate<\/a> (Symtuza)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen-Cilag<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2017 (U.K., Germany)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=880143&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/rilpivirine<\/a> (Juluca)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen/ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2017 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=902852&p_type=L&p_origen=BGR&p_tsearch=A\">Bictegravir/emtricitabine/tenofovir alafenamide fumarate<\/a> (Biktarvy)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=889785&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine/lamivudine/tenofovir disoproxil fumarate<\/a> (Delstrigo)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=994460&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/tenofovir disoproxil fumarate<\/a> (Cimduo)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Mylan<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=919756&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/lamivudine<\/a> (Dovato)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2019 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Immunoglobulins<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=335137&p_type=L&p_origen=BGR&p_tsearch=A\">Immunoglobulin, normal (human)<\/a> (Gamunex)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bayer<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004 (Canada)<\/TD>      <\/TR><\/TABLE>]]><\/FREETABLE>    <\/para>  <\/Body>  <References>    <Reference id=\"657419\" medline_id=\"11050451\">      <Title>Antiretroviral therapy of HIV-1 infection: Established treatment strategies and new therapeutic options<\/Title>      <SourceTitle>Current Opinion in Microbiology<\/SourceTitle>      <PubMedTitle>Curr Opin Microbiol<\/PubMedTitle>      <Volume>3<\/Volume>      <Issue>5<\/Issue>      <Page>508<\/Page>      <Year>2000<\/Year>      <Authors>        <Author>Kaufmann, G.R.<\/Author>        <Author>Cooper, D.A.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2229129\" medline_id=\"25151562\">      <Title>Antiretroviral therapy: Current drugs<\/Title>      <SourceTitle>Infectious Disease Clinics of North America<\/SourceTitle>      <PubMedTitle>Infect Dis Clin North Am<\/PubMedTitle>      <Volume>28<\/Volume>      <Issue>3<\/Issue>      <Page>371<\/Page>      <Year>2014<\/Year>      <Authors>        <Author>Pau, A.K.<\/Author>        <Author>George, J.M.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2552671\" medline_id=\"26599167\">      <Title>Immune activation during acute HIV infection and the impact of early antiretroviral therapy<\/Title>      <SourceTitle>Current Opinion in HIV and AIDS<\/SourceTitle>      <PubMedTitle>Curr Opin HIV AIDS<\/PubMedTitle>      <Volume>11<\/Volume>      <Issue>2<\/Issue>      <Page>163<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Krebs, S.J.<\/Author>        <Author>Ananworanich, J.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2552675\" medline_id=\"27539455\">      <Title>New antiretroviral treatment for HIV<\/Title>      <SourceTitle>Infectious Diseases and Therapy<\/SourceTitle>      <PubMedTitle>Infect Dis Ther<\/PubMedTitle>      <Volume>5<\/Volume>      <Issue>3<\/Issue>      <Page>329<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Badowski, M.E.<\/Author>        <Author>Pérez, S.E.<\/Author>        <Author>Biagi, M.<\/Author>        <Author>Littler, J.A.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2798862\" medline_id=\"26731470\">      <Title>Molecular mechanisms of HIV latency<\/Title>      <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>      <PubMedTitle>J Clin Invest<\/PubMedTitle>      <Volume>126<\/Volume>      <Issue>2<\/Issue>      <Page>448<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Cary, D.C.<\/Author>        <Author>Fujinaga, K.<\/Author>        <Author>Peterlin, B.M.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2849566\">      <Title>Barriers and strategies to achieve a cure for HIV<\/Title>      <SourceTitle>The Lancet<\/SourceTitle>      <PubMedTitle>Lancet<\/PubMedTitle>      <Volume>5<\/Volume>      <Issue>6<\/Issue>      <Page>e317<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Pitman, M.C.<\/Author>        <Author>Lau, J.S.Y.<\/Author>        <Author>McMahon, J.H.<\/Author>        <Author>Lewin, S.R.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2944306\" medline_id=\"30049419\">      <Title>HIV<\/Title>      <SourceTitle>The Lancet<\/SourceTitle>      <PubMedTitle>Lancet<\/PubMedTitle>      <Volume>392<\/Volume>      <Issue>10148<\/Issue>      <Page>685<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Ghosn, J.<\/Author>        <Author>Taiwo, B.<\/Author>        <Author>Seedat, S.<\/Author>        <Author>Autran, B.<\/Author>        <Author>Katlama, C.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2948271\" medline_id=\"29052689\">      <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic<\/Title>      <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>      <PubMedTitle>JAMA<\/PubMedTitle>      <Volume>318<\/Volume>      <Issue>16<\/Issue>      <Page>1535<\/Page>      <Year>2017<\/Year>      <Authors>        <Author>Fauci, A.S.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"412\" modifiedDate=\"20181213041351\">    <Title>Reverse Transcriptase Inhibitors<\/Title>    <Body>      <para>A unique characteristic of retroviruses is the retrotranscription of single-stranded viral RNA into double-stranded DNA, which is then integrated into the host cell&apos;s genome. The enzyme reverse transcriptase (RT), responsible for this activity, can be inhibited in two different ways. Elongation of the nascent viral DNA can be abrogated by the incorporation into the DNA of a nucleoside or nucleotide analogue that cannot be coupled to another nucleoside by the enzyme. Non-nucleoside inhibitors bind directly to an allosteric binding site on the enzyme that is exposed upon ligand binding, thereby inactivating it. Either way, HIV-1 replication is thwarted as a result of chain termination of HIV-1 proviral DNA (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014<\/REF>).<\/para>      <para>The discovery in 1985 of zidovudine, the first HIV reverse transcriptase inhibitor (RTI), marked a turning moment in AIDS research, as it was shown for the first time that replication the virus could be controlled with chemotherapy. In the intervening decades, RTIs have become established as a cornerstone of highly active antiretroviral therapy (<REF id=\"1505562\">Cihlar, T. and Ray, A.S., 2010<\/REF>; <REF id=\"1505496\">de Béthune, M.P., 2010<\/REF>; <REF id=\"2229129\">Pau, A.K. and George, J.M., 2014<\/REF>).<\/para>      <para>Information on reverse transcriptase inhibitors--including fixed-dose combination products incorporating an RTI--in development for the treatment of HIV is summarized in the next table.<COMPETITIVE id=\"81\">          <TABLE>            <TR>              <TD>Reverse transcriptase inhibitors in clinical and preclinical development<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Mechanism of Action<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1044377&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir/rilpivirine<\/a>              <\/TD>              <TD>ViiV Healthcare<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ HIV Integrase Inhibitors<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=281553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine<\/a>              <\/TD>              <TD>International Partnership Microbicides<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=817657&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">2838232<\/a>              <\/TD>              <TD>GlaxoSmithKline<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Maturation Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=351007&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Censavudine<\/a>              <\/TD>              <TD>Oncolys<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395968&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Islatravir<\/a>              <\/TD>              <TD>Merck &amp; Co.<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=419201&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rovafovir etalafenamide<\/a>              <\/TD>              <TD>Gilead<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir/levonorgestrel<\/a>              <\/TD>              <TD>Eastern Virginia Medical School<\/TD>              <TD>Progesterone Receptor Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ Signal Transduction Modulators/ DNA Polymerase Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949733&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Abacavir/lamivudine/lopinavir/ritonavir<\/a>              <\/TD>              <TD>Drugs for Neglected Diseases Initiative<\/TD>              <TD>HIV-1 Protease Inhibitors/ Tumor Necrosis Factor Receptor Superfamily Member 6 (CD95)/PLC-gamma-1 Interaction Inhibitors/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Alcohol Dehydrogenase Inhibitors/ HIV Protease Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ DNA Polymerase Inhibitors<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/levonorgestrel<\/a>              <\/TD>              <TD>International Partnership Microbicides<\/TD>              <TD>Progesterone Receptor Agonists/ Estrogen Receptor (ER) Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc<\/a>              <\/TD>              <TD>International Partnership Microbicides<\/TD>              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528<\/a>              <\/TD>              <TD>ImQuest BioSciences<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Entry Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=738992&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">KM-023<\/a>              <\/TD>              <TD>Kainos Medicine<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=965041&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8504<\/a>              <\/TD>              <TD>Merck &amp; Co.<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006618&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8583<\/a>              <\/TD>              <TD>Merck Sharp &amp; Dohme (MSD)<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719391&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PC-1005<\/a>              <\/TD>              <TD>Population Council<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ ICAM1 Expression Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=459875&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RO-0335<\/a>              <\/TD>              <TD>Viriom<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=874960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir disoproxil orotate<\/a>              <\/TD>              <TD>Dong-A ST<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ DNA Polymerase Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"1505496\" medline_id=\"19781578\">        <Title>Non-nucleoside reverse transcriptase inhibitors (NNRTIs), their discovery, development, and use in the treatment of HIV-1 infection: A review of the last 20 years (1989-2009)<\/Title>        <SourceTitle>Antiviral Research<\/SourceTitle>        <PubMedTitle>Antiviral Res<\/PubMedTitle>        <Volume>85<\/Volume>        <Issue>1<\/Issue>        <Page>75<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>de Béthune, M.P.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1505562\" medline_id=\"19887088\">        <Title>Nucleoside and nucleotide HIV reverse transcriptase inhibitors: 25 years after zidovudine<\/Title>        <SourceTitle>Antiviral Research<\/SourceTitle>        <PubMedTitle>Antiviral Res<\/PubMedTitle>        <Volume>85<\/Volume>        <Issue>1<\/Issue>        <Page>39<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Cihlar, T.<\/Author>          <Author>Ray, A.S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2229129\" medline_id=\"25151562\">        <Title>Antiretroviral therapy: Current drugs<\/Title>        <SourceTitle>Infectious Disease Clinics of North America<\/SourceTitle>        <PubMedTitle>Infect Dis Clin North Am<\/PubMedTitle>        <Volume>28<\/Volume>        <Issue>3<\/Issue>        <Page>371<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Pau, A.K.<\/Author>          <Author>George, J.M.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"411\" modifiedDate=\"20181213024734\">    <Title>Protease Inhibitors<\/Title>    <Body>      <para>HIV-1 protease inhibitors inhibit viral protein maturation, resulting in the production of noninfectious virus. Noncompetitive inhibitors block the virus-specific aspartyl protease (PR), which plays an important role in the maturation of the infectious virus particle. The newly formed virus particle contains uncleaved Gag and Gag-Pol polyproteins, and is not infectious. Cleavage of these polyproteins by PR results in the formation of mature (i.e., infectious) virus (<REF id=\"1505495\">Wensing, A.M. et al., 2010<\/REF>; <REF id=\"2947854\">Ghosh, A.K. et al., 2016<\/REF>). The first PR inhibitor, saquinavir, was launched in 1995; use of this drug in combination with reverse transcriptase inhibitors marked the beginning of HAART, now standard practice. PR inhibitors are initially very effective in reducing the viral load, but resistant mutants develop within weeks, and clearance of the virus cannot be attained. The second-generation protease inhibitor darunavir has a higher barrier to resistance (<REF id=\"2947854\">Ghosh, A.K. et al., 2016<\/REF>). Currently available protease inhibitors are effective only against HIV-1, whereas HIV-2 protease (PR2) is naturally resistant to most of these agents (<REF id=\"2947857\">Triki, D. et al., 2018<\/REF>).<COMPETITIVE id=\"80\">          <TABLE>            <TR>              <TD>HIV protease inhibitors in clinical and preclinical development<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Mechanism of Action<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949733&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Abacavir/lamivudine/lopinavir/ritonavir<\/a>              <\/TD>              <TD>Drugs for Neglected Diseases Initiative<\/TD>              <TD>HIV-1 Protease Inhibitors/ Tumor Necrosis Factor Receptor Superfamily Member 6 (CD95)/PLC-gamma-1 Interaction Inhibitors/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Alcohol Dehydrogenase Inhibitors/ HIV Protease Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ DNA Polymerase Inhibitors<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=399012&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PPL-100<\/a>              <\/TD>              <TD>TaiMed Biologics<\/TD>              <TD>HIV Protease Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"1505495\" medline_id=\"19853627\">        <Title>Fifteen years of HIV protease inhibitors: Raising the barrier to resistance<\/Title>        <SourceTitle>Antiviral Research<\/SourceTitle>        <PubMedTitle>Antiviral Res<\/PubMedTitle>        <Volume>85<\/Volume>        <Issue>1<\/Issue>        <Page>59<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Wensing, A.M.<\/Author>          <Author>van Maarseveen, N.M.<\/Author>          <Author>Nijhuis, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947854\" medline_id=\"26799988\">        <Title>Recent progress in the development of HIV-1 protease inhibitors for the treatment of HIV/AIDS<\/Title>        <SourceTitle>Journal of Medicinal Chemistry<\/SourceTitle>        <PubMedTitle>J Med Chem<\/PubMedTitle>        <Volume>59<\/Volume>        <Issue>11<\/Issue>        <Page>5172<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Ghosh, A.K.<\/Author>          <Author>Osswald, H.L.<\/Author>          <Author>Prato, G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947857\" medline_id=\"29636521\">        <Title>Exploration of the effect of sequence variations located inside the binding pocket of HIV-1 and HIV-2 proteases<\/Title>        <SourceTitle>Scientific Reports<\/SourceTitle>        <PubMedTitle>Sci Rep<\/PubMedTitle>        <Volume>8<\/Volume>        <Issue>1<\/Issue>        <Page>5789<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Triki, D.<\/Author>          <Author>Billot, T.<\/Author>          <Author>Visseaux, B.<\/Author>          <Author>Descamps, D.<\/Author>          <Author>Flatters, D.<\/Author>          <Author>Camproux, A.C.<\/Author>          <Author>Regad, L.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"2909\" modifiedDate=\"20181211121138\">    <Title>Viral Maturation Inhibitors<\/Title>    <Body>      <para>One of the newer classes of investigational antiretroviral agents are the so-called maturation inhibitors. These drugs have a mechanism of action differing from those of approved HIV drugs and potent activity against both wild-type HIV and strains resistant to current therapies, including inhibitors of reverse transcriptase and viral protease. Maturation inhibitors block viral replication by disrupting a late stage in Gag processing, a series of events required for the process of structural rearrangement that is known as virus maturation. During maturation, the immature virus particle makes the transition to a mature, infectious virion. Maturation inhibitors prevent this event by interrupting the conversion of the capsid precursor (p25) to a mature capsid protein (p24), resulting in the formation of defective, noninfectious virus particles (<REF id=\"761076\">Li, F. et al., 2003<\/REF>; <REF id=\"997796\">Sakalian, M. et al., 2006<\/REF>; <REF id=\"1505517\">Adamson, C.S. and Freed, E.O., 2010<\/REF>). <COMPETITIVE id=\"926\">          <TABLE>            <TR>              <TD>HIV maturation inhibitors in active development for the treatment of AIDS<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Mechanism of Action<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=817657&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">2838232<\/a>              <\/TD>              <TD>GlaxoSmithKline<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Maturation Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949705&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GSK-3640254<\/a>              <\/TD>              <TD>ViiV Healthcare<\/TD>              <TD>Viral Maturation Inhibitors<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"761076\" medline_id=\"14573704\">        <Title>PA-457: A potent HIV inhibitor that disrupts core condensation by targeting a late step in Gag processing<\/Title>        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)<\/SourceTitle>        <PubMedTitle>Proc Natl Acad Sci U S A<\/PubMedTitle>        <Volume>100<\/Volume>        <Issue>23<\/Issue>        <Page>13555<\/Page>        <Year>2003<\/Year>        <Authors>          <Author>Li, F.<\/Author>          <Author>Goila-Gaur, R.<\/Author>          <Author>Salzwedel, K.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"997796\" medline_id=\"16731910\">        <Title>3-O-(3&apos;,3&apos;-Dimethysuccinyl) betulinic acid inhibits maturation of the human immunodeficiency virus type 1 Gag precursor assembled in vitro<\/Title>        <SourceTitle>Journal of Virology<\/SourceTitle>        <PubMedTitle>J Virol<\/PubMedTitle>        <Volume>80<\/Volume>        <Issue>12<\/Issue>        <Page>5716<\/Page>        <Year>2006<\/Year>        <Authors>          <Author>Sakalian, M.<\/Author>          <Author>McMurtrey, C.P.<\/Author>          <Author>Deeg, F.J.<\/Author>          <Author>Maloy, C.W.<\/Author>          <Author>Li, F.<\/Author>          <Author>Wild, C.T.<\/Author>          <Author>Salzwedel, K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1505517\" medline_id=\"19782103\">        <Title>Novel approaches to inhibiting HIV-1 replication<\/Title>        <SourceTitle>Antiviral Research<\/SourceTitle>        <PubMedTitle>Antiviral Res<\/PubMedTitle>        <Volume>85<\/Volume>        <Issue>1<\/Issue>        <Page>119<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Adamson, C.S.<\/Author>          <Author>Freed, E.O.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"414\" modifiedDate=\"20181213021318\">    <Title>HIV Entry and Fusion Inhibitors<\/Title>    <Body>      <para>In order for HIV-1 to enter into a host cell, its envelope protein (Env) must first engage CD4, thereby anchoring the virus to the cell, and then bind to a chemokine coreceptor (CCR5 or CXCR4). This process triggers a series of conformational changes in the Env protein, eventually enabling fusion between the HIV virus and the host cell membrane (<REF id=\"1944780\">Henrich, T. and Kuritzkes, D.R., 2013<\/REF>; <REF id=\"2798861\">Hou, W. et al., 2015<\/REF>). The sequential processes of viral attachment, coreceptor binding and fusion provide multiple opportunities for therapeutic intervention (<REF id=\"1944780\">Henrich, T. and Kuritzkes, D.R., 2013<\/REF>; <REF id=\"2798866\">Iacob, S.A. and Iacob, D.G., 2017<\/REF>). <\/para>      <para>Unlike earlier AIDS drugs that work inside the cell and target viral enzymes involved in the replication of the virus, fusion inhibitors block the fusion of HIV with host cells before the virus enters the cell and begins its replication process. The viral genome gains access to the host cell&apos;s cytoplasm by fusing its membrane with the host cell&apos;s plasma membrane. Fusion is induced by a series of conformational changes in the gp120/gp41 protein. This process can be blocked by substances that bind to intermediate conformations of gp120/gp41, inhibiting transition to the full, fusion-active conformation (<REF id=\"974999\">Tamamura, H. et al., 2005<\/REF>; <REF id=\"1505539\">Tilton, J.C. and Doms, R.W., 2010<\/REF>). The first drug from this class of anti-HIV drugs, Roche&apos;s enfuvirtide, was launched in 2003. <\/para>      <para>The activity of CXCR4 antagonists is related to that of the fusion inhibitors: fusion between the viral envelope and the host cell membrane allows the virus to enter its host cell.  Fusion is induced by further gp120/gp41 conformational changes triggered by the binding of gp120/gp41 to chemokine receptors, or coreceptors. This binding can be blocked by chemokine antagonists. Note that the CXCR4 receptor is used by viruses that generally develop after years of HIV infection; &quot;primary&quot; virus strains that are transmitted from one patient to the next typically use another receptor, CCR5. <\/para>      <para>The turnover of plasma virions and of CD4+ lymphocytes is extremely rapid in asymptomatic patients, leading to the suggestion that a promising chemotherapic strategy would be to interfere with the infection by HIV of newly produced CD4+ cells. A breakthrough in the studies on the mechanism of HIV infection led to the identification of several chemokine receptors as potential HIV coreceptors. CCR5 and CXCR4 are the two major coreceptors for HIV-1: 60% of HIV strains bind exclusively to CCR5 receptors (i.e., R5-tropic strains), while 5% are purely CXCR4 receptor-binding. The remaining 35% use both CCR5 and CXCR4 (<REF id=\"1789081\">Gilliam, B.L. et al., 2011<\/REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018<\/REF>).<\/para>      <para>A 32-base pair deletion allele (CCR5-delta32) in the gene coding for CCR5 has been identified in some individuals of northern European descent. Homozygosity was associated with a significant degree of protection from HIV-1 infection, and the frequency of heterozygotes was very high in people who survived HIV infection for 10 years or more. Survival analysis showed that the progression of the disease is significantly slower in individuals carrying this deletion. This indicates that the presence of this allele confers a certain degree of resistance to HIV infection, and highlights the importance of CCR5 in viral acquisition. However, it should be noted that the CCR5 receptor is expressed on a variety of hematopoietic cells and is implicated in a plethora of biological processes. Ongoing studies are uncovering a growing number of roles for CCR5 in inflammatory, autoimmune and neoplastic diseases. As such, CCR5 receptor inhibition or gene editing, while preventing HIV entry, could have unforeseen and potentially significant off-target effects (<REF id=\"2947856\">Vangelista, L. and Vento, S., 2017<\/REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018<\/REF>).<\/para>      <para>In August 2007, the U.S. FDA approved Pfizer&apos;s maraviroc, a negative allosteric modulator of the CCR5 receptor and competitive CCR5 inhibitor, for use along with other antiretroviral agents for treatment-experienced patients infected with CCR5-tropic HIV-1. In the pivotal MOTIVATE trials, nearly twice as many treatment-experienced CCR5-tropic HIV-1 infected patients treated with maraviroc plus optimized background therapy (OBT) achieved undetectable viral loads at 24 weeks compared to those receiving placebo plus OBT. There were no significant increases in hepatotoxicity, malignancy or mortality in maraviroc&apos;s treatment arms, while there were slight increases in upper respiratory and herpes simplex virus infections as well as with ischemic events, consistent with the rate observed in treatment-experienced HIV/AIDs patients. The drug was launched in September 2007. Shortly thereafter, 48-week study results were reported, providing further evidence of the ability of maraviroc, given in addition to an optimized anti-HIV treatment regimen, to boost CD4 counts as compared to an optimized regimen alone (<REF id=\"1254596\">Gulick, R.M. et al., 2008<\/REF>). <\/para>      <para>Unlike protease inhibitors and reverse transcriptase inhibitors, whose activity and potency depend on viral factors, the activity of HIV entry inhibitors depends more directly on host cell factors: density of chemokine receptors, rate of virus-cell fusion, and variations in CCR5 processing. Viral factors mediating the rate and efficiency of virus-cell fusion may also come into play, but in the case of entry inhibitors, interindividual variability of response is much more closely dependent upon host factors (<REF id=\"752043\">Moore, J.P. and Doms, R.W., 2003<\/REF>). <\/para>      <para>More recently, the focus of investigators has turned to a new class of agents acting as HIV attachment (or post-attachment) inhibitors. These compounds bind to gp120 and prevent its attachment to CD4+ lymphocytes. There are several advantages to this approach, including the fact that because they target a viral protein rather than a host cell receptor, attachment inhibitors may have fewer unwanted effects on the host immune response (<REF id=\"1593326\">Hanna, G.J. et al., 2011<\/REF>; <REF id=\"1944780\">Henrich, T. and Kuritzkes, D.R., 2013<\/REF>). In March 2018, the FDA approved the first HIV post-attachment inhibitor, as well as the first monoclonal antibody (MAb) to be approved for HIV: the anti-CD4 MAb ibalizumab, indicated for the treatment of HIV-1 infection in heavily treatment-experienced adults with multidrug-resistant (MDR) HIV-1 infection failing their current antiretroviral regimen. Ibalizumab is a CD4-directed post-attachment HIV-1 inhibitor that binds to CD4+ receptors on host cells and blocks the HIV virus from infecting the cells (<REF id=\"2798866\">Iacob, S.A. and Iacob, D.G., 2017<\/REF>). The BLA was based on data from the phase III TMB-301 study, a single-arm, 24-week study of ibalizumab plus an optimized background regimen in treatment-experienced patients infected with MDR HIV-1 (NCT02475629). The primary efficacy endpoint--the proportion of patients achieving a 0.5 log10 (70%) or greater decrease in HIV-1 RNA 7 days after initiating ibalizumab therapy, day 14 of the study--was met by at least 80% of the study participants. Ibalizumab (Trogarzo) was launched in the U.S., its first market, in late April 2018.<\/para>      <para>The table below presents information on HIV entry and fusion inhibitors in active development for the treatment of HIV and AIDS.<COMPETITIVE id=\"83\">          <TABLE>            <TR>              <TD>HIV entry and fusion inhibitors in clinical and preclinical development<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Mechanism of Action<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leronlimab<\/a>              <\/TD>              <TD>CytoDyn<\/TD>              <TD>Anti-CD195 (CCR5)/ Signal Transduction Modulators/ Viral Entry Inhibitors<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=680262&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Fostemsavir<\/a>              <\/TD>              <TD>ViiV Healthcare<\/TD>              <TD>HIV Attachment Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc<\/a>              <\/TD>              <TD>International Partnership Microbicides<\/TD>              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528<\/a>              <\/TD>              <TD>ImQuest BioSciences<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Entry Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ HIV Integrase Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368000&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RPI-MN<\/a>              <\/TD>              <TD>ReceptoPharm<\/TD>              <TD>Viral Entry Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=773475&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5P12-RANTES<\/a>              <\/TD>              <TD>Orion Biotechnology<\/TD>              <TD>Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ Viral Entry Inhibitors<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931208&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cholesterol-PIE12-2-trimer with PEG32 fourth-arm spacer<\/a>              <\/TD>              <TD>Navigen<\/TD>              <TD>Viral Entry Inhibitors<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=474274&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HiviCide-1<\/a>              <\/TD>              <TD>NanoViricides<\/TD>              <TD>Viral Entry Inhibitors<\/TD>              <TD>Preclinical<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"752043\" medline_id=\"12960367\">        <Title>The entry of entry inhibitors: A fusion of science and medicine<\/Title>        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)<\/SourceTitle>        <PubMedTitle>Proc Natl Acad Sci U S A<\/PubMedTitle>        <Volume>100<\/Volume>        <Issue>19<\/Issue>        <Page>10598<\/Page>        <Year>2003<\/Year>        <Authors>          <Author>Moore, J.P.<\/Author>          <Author>Doms, R.W.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"974999\" medline_id=\"16250877\">        <Title>Development of anti-HIV agents targeting dynamic supramolecular mechanism: Entry and fusion inhibitors based on CXCR4/CCR5 antagonists and gp41-C34-remodeling peptides<\/Title>        <SourceTitle>Current HIV Research<\/SourceTitle>        <PubMedTitle>Curr HIV Res<\/PubMedTitle>        <Volume>3<\/Volume>        <Issue>4<\/Issue>        <Page>289<\/Page>        <Year>2005<\/Year>        <Authors>          <Author>Tamamura, H.<\/Author>          <Author>Otaka, A.<\/Author>          <Author>Fujii, N.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1254596\" medline_id=\"18832244\">        <Title>Maraviroc for previously treated patients with R5 HIV-1 infection<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>359<\/Volume>        <Issue>14<\/Issue>        <Page>1429<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Gulick, R.M.<\/Author>          <Author>Lalezari, J.<\/Author>          <Author>Goodrich, J.<\/Author>          <Author>Clumeck, N.<\/Author>          <Author>DeJesus, E.<\/Author>          <Author>Horban, A.<\/Author>          <Author>Nadler, J.<\/Author>          <Author>Clotet, B.<\/Author>          <Author>Karlsson, A.<\/Author>          <Author>Wohlfeiler, M.<\/Author>          <Author>Montana, J.B.<\/Author>          <Author>McHale, M.<\/Author>          <Author>Sullivan, J.<\/Author>          <Author>Ridgway, C.<\/Author>          <Author>Felstead, S.<\/Author>          <Author>Dunne, M.W.<\/Author>          <Author>van der Ryst, E.<\/Author>          <Author>Mayer, H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1505539\" medline_id=\"19683546\">        <Title>Entry inhibitors in the treatment of HIV-1 infection<\/Title>        <SourceTitle>Antiviral Research<\/SourceTitle>        <PubMedTitle>Antiviral Res<\/PubMedTitle>        <Volume>85<\/Volume>        <Issue>1<\/Issue>        <Page>91<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Tilton, J.C.<\/Author>          <Author>Doms, R.W.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1593326\" medline_id=\"21078951\">        <Title>Antiviral activity, pharmacokinetics, and safety of BMS-488043, a novel oral small-molecule HIV-1 attachment inhibitor, in HIV-1-infected subjects<\/Title>        <SourceTitle>Antimicrobial Agents &amp; Chemotherapy<\/SourceTitle>        <PubMedTitle>Antimicrob Agents Chemother<\/PubMedTitle>        <Volume>55<\/Volume>        <Issue>2<\/Issue>        <Page>722<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Hanna, G.J.<\/Author>          <Author>Lalezari, J.<\/Author>          <Author>Hellinger, J.A.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1789081\" medline_id=\"21284908\">        <Title>Clinical use of CCR5 inhibitors in HIV and beyond<\/Title>        <SourceTitle>Journal of Translational Medicine (Online)<\/SourceTitle>        <PubMedTitle>J Transl Med<\/PubMedTitle>        <Volume>9<\/Volume>        <Issue>Suppl. 1<\/Issue>        <Page>S9<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Gilliam, B.L.<\/Author>          <Author>Riedel, D.J.<\/Author>          <Author>Redfield, R.R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1944780\" medline_id=\"23290628\">        <Title>HIV-1 entry inhibitors: Recent development and clinical use<\/Title>        <SourceTitle>Current Opinion in Virology<\/SourceTitle>        <PubMedTitle>Curr Opin Virol<\/PubMedTitle>        <Volume>3<\/Volume>        <Issue>1<\/Issue>        <Page>51<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Henrich, T.<\/Author>          <Author>Kuritzkes, D.R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2798861\" medline_id=\"26259811\">        <Title>Molecular insights into the inhibition of HIV-1 infection using a CD4 domain-1-specific monoclonal antibody<\/Title>        <SourceTitle>Antiviral Research<\/SourceTitle>        <PubMedTitle>Antiviral Res<\/PubMedTitle>        <Volume>122<\/Volume>        <Page>101<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Hou, W.<\/Author>          <Author>Fang, C.<\/Author>          <Author>Liu, J.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2798866\" medline_id=\"29230203\">        <Title>Ibalizumab targeting CD4 receptors, an emerging molecule in HIV therapy<\/Title>        <SourceTitle>Frontiers in Microbiology<\/SourceTitle>        <PubMedTitle>Front Microbiol<\/PubMedTitle>        <Volume>8<\/Volume>        <Page>2323<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Iacob, S.A.<\/Author>          <Author>Iacob, D.G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947856\" medline_id=\"29375583\">        <Title>The expanding therapeutic perspective of CCR5 blockade<\/Title>        <SourceTitle>Frontiers in Immunology<\/SourceTitle>        <PubMedTitle>Front Immunol<\/PubMedTitle>        <Volume>8<\/Volume>        <Page>1981<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Vangelista, L.<\/Author>          <Author>Vento, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947858\" medline_id=\"29932942\">        <Title>CCR5 revisited: How mechanisms of HIV entry govern AIDS pathogenesis<\/Title>        <SourceTitle>Journal of Molecular Biology<\/SourceTitle>        <PubMedTitle>J Mol Biol<\/PubMedTitle>        <Volume>430<\/Volume>        <Issue>17<\/Issue>        <Page>2557<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Brelot, A.<\/Author>          <Author>Chakrabarti, L.A.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"1795\" modifiedDate=\"20181213111818\">    <Title>HIV Integrase Inhibitors<\/Title>    <Body>      <para>After fusion of the HIV virus with the host cell membrane, a poorly defined step called &quot;uncoating&quot; of this core exposes the viral nucleoprotein complex, which consists of RNA and the proteins integrase (IN), reverse transcriptase (RT), matrix (MA) and Vpr. <\/para>      <para>After reverse transcription, the zinc-finger protein IN facilitates the integration of viral DNA into the host genome, culminating in the establishment of both active and latent viral reservoirs (<REF id=\"1505558\">McColl, D.J. and Chen, X., 2010<\/REF>). Integrase integrates a complete viral minus-strand of DNA and a plus-strand containing several gaps into a host chromosome, by first removing two 3&apos; nucleotides from each strand of the linear viral DNA, producing overhanging CA ends, joining these 3&apos; ends covalently to the 5&apos; ends of the host cell DNA, and removing unpaired nucleotides at the viral 5&apos; ends, which are joined with the host cell&apos;s 3&apos; ends. The gaps in the plus-strands are then probably repaired by host cell enzymes. IN is a unique therapeutic target, as it is the viral protein with least similarity to its human counterpart; consequently, its inhibition is less likely to cause off-target adverse effects (<REF id=\"2947863\">Choi, E. et al., 2018<\/REF>).<\/para>      <para>In the fall of 2007, following accelerated approval from the FDA, Merck &amp; Co. launched raltegravir potassium (Isentress), the first integrase inhibitor to reach the market worldwide. Raltegravir works by preventing the integrase enzyme from inserting HIV DNA into human DNA. It is indicated for use in combination with other antiretroviral agents against HIV-1 infection in treatment-experienced adult patients who have evidence of viral replication and HIV-1 strains resistant to multiple antiretroviral agents. The FDA&apos;s decision was based on a 24-week analysis of clinical trials in which raltegravir, in combination with optimized background therapy in treatment-experienced patients, provided significant reductions in HIV RNA viral load and increases in CD4 cell counts. The use of other active agents with raltegravir is associated with a greater likelihood of treatment response. Raltegravir has also been approved in the U.S. and E.U. for use in treatment-naive patients. In 2010, the FDA approved Merck&apos;s labeling update for raltegravir, which incorporates 96-week data obtained in three studies enrolling treatment-experienced and -naive patients. The drawbacks of raltegravir are the need for twice-daily dosing and the potential for resistance (<REF id=\"2947863\">Choi, E. et al., 2018<\/REF>).<\/para>      <para>In 2013, the world&apos;s second integrase inhibitor, dolutegravir, was approved and launched in the U.S. A third HIV integrase inhibitor, elvitegravir, was launched for the first time in the U.S. in early 2015. Elvitegravir is indicated for use in combination with an HIV protease inhibitor, coadministered with ritonavir and with other antiretroviral drug(s), for the treatment of HIV-1 infection in antiretroviral treatment-experienced adults. In clinical trials, elvitegravir was effective in suppressing HIV among patients with drug-resistant strains of HIV. It can be taken once daily, but is extensively cross-resistant with raltegravir (<REF id=\"2947863\">Choi, E. et al., 2018<\/REF>). Dolutegravir is well tolerated and can be taken once daily without a pharmacological enhancer, and has relatively low cross-resistance with raltegravir (<REF id=\"2947863\">Choi, E. et al., 2018<\/REF>).<\/para>      <para>At this time, U.S. treatment guidelines recommend integrase inhibitor-based combination drug therapy. Other international guidelines increasingly favor this approach as well (<REF id=\"2944306\">Ghosn, J. et al., 2018<\/REF>).<\/para>      <para>HIV integrase inhibitors in active development for the treatment of HIV and AIDS are presented in the following table.<COMPETITIVE id=\"587\">          <TABLE>            <TR>              <TD>HIV integrase inhibitors in development for the treatment of AIDS<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Mechanism of Action<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=437811&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir<\/a>              <\/TD>              <TD>ViiV Healthcare<\/TD>              <TD>HIV Integrase Inhibitors<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1044377&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir/rilpivirine<\/a>              <\/TD>              <TD>ViiV Healthcare<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ HIV Integrase Inhibitors<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=854294&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bictegravir<\/a>              <\/TD>              <TD>Gilead<\/TD>              <TD>HIV Integrase Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ HIV Integrase Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=939977&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Sondashi Formula<\/a>              <\/TD>              <TD>Tropical Diseases Research Centre<\/TD>              <TD>HIV Integrase Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"1505558\" medline_id=\"19925830\">        <Title>Strand transfer inhibitors of HIV-1 integrase: Bringing IN a new era of antiretroviral therapy<\/Title>        <SourceTitle>Antiviral Research<\/SourceTitle>        <PubMedTitle>Antiviral Res<\/PubMedTitle>        <Volume>85<\/Volume>        <Issue>1<\/Issue>        <Page>101<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>McColl, D.J.<\/Author>          <Author>Chen, X.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2944306\" medline_id=\"30049419\">        <Title>HIV<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>392<\/Volume>        <Issue>10148<\/Issue>        <Page>685<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Ghosn, J.<\/Author>          <Author>Taiwo, B.<\/Author>          <Author>Seedat, S.<\/Author>          <Author>Autran, B.<\/Author>          <Author>Katlama, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2947863\" medline_id=\"30416746\">        <Title>Recent advances in the discovery of small-molecule inhibitors of HIV-1 integrase<\/Title>        <SourceTitle>Future Science OA<\/SourceTitle>        <PubMedTitle>Future Sci OA<\/PubMedTitle>        <Volume>4<\/Volume>        <Issue>9<\/Issue>        <Year>2018<\/Year>        <Authors>          <Author>Choi, E.<\/Author>          <Author>Mallareddy, J.R.<\/Author>          <Author>Lu, D.<\/Author>          <Author>Kolluru, S.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"4727\" modifiedDate=\"20181211121123\">    <Title>Pharmacoenhancing Agents<\/Title>    <Body>      <para>Protease inhibitors have a low systemic exposure and short half-life after oral administration due to their rapid metabolism by cytochrome P450 3A (CYP3A) enzymes in the intestine and liver. During the early days of protease inhibitor therapy, the mechanism-based inhibition of CYP3A enzymes by subtherapeutic doses of ritonavir was discovered by serendipity. In fact, the concomitant administration of ritonavir enhances plasma levels of other protease inhibitors that are metabolized by CYP3A enzymes, allowing reduced pill burden and dosing frequency. Apart from protease inhibitors, other important antiviral drugs that are CYP3A substrates can be combined with ritonavir, such as the integrase inhibitor elvitegravir and the chemokine CCR5 receptor antagonist maraviroc (<REF id=\"1572275\">Sevrioukova, I.F. and Poulos, T.L., 2010<\/REF>; <REF id=\"1831464\">Gras, J., 2012<\/REF>). As a class, these compounds are known as pharmacoenhancing or boosting agents.<\/para>      <para>Scientists at Gilead Sciences succeeded in improving ritonavir and discovered cobicistat, a pharmacoenhancer with no inherent anti-HIV activity. Cobicistat produces mechanism-based CYP3A inhibition similar to that of ritonavir, with better physicochemical properties that allow coformulation with antiretrovirals, reduced off-target drug interactions and improved tolerability (<REF id=\"1831464\">Gras, J., 2012<\/REF>; <REF id=\"2552672\">von Hentig, N., 2016<\/REF>).<\/para>      <para>In 2012, the U.S. FDA approved Stribild (elvitegravir/cobicistat/emtricitabine/tenofovir disoproxil fumarate), a once-daily combination product indicated for the treatment of HIV-1 infection in adults who are antiretroviral treatment-naive. Stribild is the first fixed-dose anti-HIV combination to incorporate the CYP3A4 inhibitor cobicistat. The incorporation of cobicistat enables the once-daily dosing of elvitegravir, an integrase inhibitor that is otherwise metabolized by the enzyme. The safety and efficacy of the combination product were demonstrated in phase III trials involving more than 1,700 HIV-positive patients (<REF id=\"1868512\">Sax, P.E. et al., 2012<\/REF>; <REF id=\"1868525\">DeJesus, E. et al., 2012<\/REF>). <\/para>      <para>Cobicistat has also been developed as a stand-alone product. In September 2013, the European Commission approved cobicistat as a boosting agent for the HIV protease inhibitors atazanavir (300 mg once daily) and darunavir (800 mg once daily) as part of antiretroviral combination therapy in adults with HIV-1 infection. It was launched in the U.K., its first market, in 2014.<\/para>      <para>The following table provides an overview of pharmacoenhancing agents under active development for the treatment of patients with HIV and AIDS. <COMPETITIVE id=\"1327\">          <TABLE>            <TR>              <TD>Pharmacoenhancing agents under active development for the treatment of patients with HIV and AIDS<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Mechanism of Action<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir/levonorgestrel<\/a>              <\/TD>              <TD>Eastern Virginia Medical School<\/TD>              <TD>Progesterone Receptor Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ Signal Transduction Modulators/ DNA Polymerase Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=230535&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vorinostat<\/a>              <\/TD>              <TD>Merck &amp; Co.<\/TD>              <TD>Histone Deacetylase 6 (HDAC6) Inhibitors/ Histone Deacetylase 1 (HDAC1) Inhibitors/ Apoptosis Inducers/ Histone Deacetylase 2 (HDAC2) Inhibitors/ Histone Deacetylase 3 (HDAC3) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Epigenetic Modifier Modulators<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=135177&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Deferiprone<\/a>              <\/TD>              <TD>Apotex<\/TD>              <TD>Cytochrome P450 CYP4F2 Inhibitors/ Chelating Agents<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=874960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir disoproxil orotate<\/a>              <\/TD>              <TD>Dong-A ST<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ DNA Polymerase Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"1572275\" medline_id=\"20937904\">        <Title>Structure and mechanism of the complex between cytochrome P4503A4 and ritonavir<\/Title>        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)<\/SourceTitle>        <PubMedTitle>Proc Natl Acad Sci U S A<\/PubMedTitle>        <Volume>107<\/Volume>        <Issue>43<\/Issue>        <Page>18422<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Sevrioukova, I.F.<\/Author>          <Author>Poulos, T.L.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1831464\">        <Title>Cobicistat<\/Title>        <SourceTitle>Drugs of the Future<\/SourceTitle>        <PubMedTitle>Drugs Fut<\/PubMedTitle>        <Volume>037<\/Volume>        <Issue>05<\/Issue>        <Page>0315<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Gras, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1868512\" medline_id=\"22748591\">        <Title>Co-formulated elvitegravir, cobicistat, emtricitabine, and tenofovir versus co-formulated efavirenz, emtricitabine, and tenofovir for initial treatment of HIV-1 infection: A randomised, double-blind, phase 3 trial, analysis of results after 48 weeks<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>379<\/Volume>        <Issue>9835<\/Issue>        <Page>2439<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Sax, P.E.<\/Author>          <Author>DeJesus, E.<\/Author>          <Author>Mills, A.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1868525\" medline_id=\"22748590\">        <Title>Co-formulated elvitegravir, cobicistat, emtricitabine, and tenofovir disoproxil fumarate versus ritonavir-boosted atazanavir plus co-formulated emtricitabine and tenofovir disoproxil fumarate for initial treatment of HIV-1 infection: A randomised, double-blind, phase 3, non-inferiority trial<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>379<\/Volume>        <Issue>9835<\/Issue>        <Page>2429<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>DeJesus, E.<\/Author>          <Author>Rockstroh, J.K.<\/Author>          <Author>Henry, K.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2552672\" medline_id=\"26730211\">        <Title>Clinical use of cobicistat as a pharmacoenhancer of human immunodeficiency virus therapy<\/Title>        <SourceTitle>HIV/AIDS (Auckland, N.Z.)<\/SourceTitle>        <PubMedTitle>HIV AIDS (Auckl)<\/PubMedTitle>        <Volume>8<\/Volume>        <Page>1<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>von Hentig, N.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"4730\" modifiedDate=\"20181211121119\">    <Title>Latency-Reversing Agents<\/Title>    <Body>      <para>Although antiretroviral drug therapy may keep HIV infection under control, it is unable to completely eliminate the virus. A reservoir persists within latently infected memory CD4+ T cells, where the virus is inaccessible to antiretroviral agents (<REF id=\"2798862\">Cary, D.C. et al., 2016<\/REF>). The latent virus may become reactivated at any time, particularly if HAART is discontinued or immune status is compromised. The complete inactivation and elimination of this reservoir continues to be the ultimate objective of drug researchers, who have not succeeded in achieving this goal using traditional antiretroviral agents (<REF id=\"2849566\">Pitman, M.C. et al., 2018<\/REF>). <\/para>      <para>In recent years, attention has turned to the histone deacetylase (HDAC) inhibitors. The chromatin remodeling HDAC enzymes, of which 18 are known to exist, play an important role in processes of cell proliferation, migration, differentiation and apoptosis; class 1 HDACs also promote HIV latency (<REF id=\"2798868\">Zaikos, T.D. et al., 2018<\/REF>).  <\/para>      <para>Alterations in the balance of nucleosomal histones within chromatin has been implicated in the maintenance of viral quiescence in latently infected cells, and HDAC inhibitors have been proposed as a class of agents capable of upsetting the balance that enables HIV to remain integrated and to persist within CD4+ T cells. Administration of these agents, particularly class 1-selective HDAC inhibitors, may induce the virus to reemerge so that it can then be eliminated with antiretroviral agents (<REF id=\"1944628\">Matalon, S. et al., 2011<\/REF>; <REF id=\"1995769\">Ververis , K. and Karagiannis, T.C., 2013<\/REF>; <REF id=\"2798868\">Zaikos, T.D. et al., 2018<\/REF>). <\/para>      <para>In an early proof-of-concept study, the HDAC inhibitor valproic acid was evaluated in a small group of HIV-positive volunteers. Subjects received HAART intensified with the HIV fusion inhibitor enfuvirtide for 4-6 weeks, after which time the HDAC inhibitor valproic acid was added to the treatment regimen for three months. At the end of the treatment period, a decline was confirmed in the frequency of replication-competent HIV in circulating resting CD4+ T cells in this patient group (<REF id=\"1945309\">Lehrman, G. et al., 2005<\/REF>). However, valproic acid has only weak activity as an inducer of viral emergence from the latent reservoir. Thus subsequent studies evaluated newer, more potent and selective HDAC inhibitors such as vorinostat, belinostat and givinostat (<REF id=\"1944628\">Matalon, S. et al., 2011<\/REF>). <\/para>      <para>Administered to a small group of 8 HIV-positive patients, a single dose of vorinostat was shown to be effective in inducing an increase in the expression of HIV RNA in circulating resting CD4+ T cells, supporting further evaluation of this strategy (<REF id=\"1874784\">Archin, N.M. et al., 2012<\/REF>). However, other researchers suggest that HDAC inhibitors alone may not be sufficiently effective in reducing the pool of latent virus (<REF id=\"1944629\">Sahu, G.K. and Cloyd, M.W., 2011<\/REF>; <REF id=\"2798862\">Cary, D.C. et al., 2016<\/REF>). <\/para>      <para>Other drug classes with potential as latency-reversing agents include bromodomain and extraterminal (BET) bromodomain inhibitors (BETis), protein kinase C (PKC) activators and MAP kinase agonists, as well as drugs that affect DNA methylation (e.g., 5-azacytidine) (<REF id=\"2798862\">Cary, D.C. et al., 2016<\/REF>).<COMPETITIVE id=\"1331\">          <TABLE>            <TR>              <TD>Latency-reversing agents under active development for the treatment of HIV and AIDS<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Mechanism of Action<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=932649&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">APH-0812<\/a>              <\/TD>              <TD>Aphios<\/TD>              <TD>Protein Kinase C (PKC) Activators/ Histone Deacetylase (HDAC) Inhibitors/ Epigenetic Modifier Modulators/ Signal Transduction Modulators<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"1874784\" medline_id=\"22837004\">        <Title>Administration of vorinostat disrupts HIV-1 latency in patients on antiretroviral therapy<\/Title>        <SourceTitle>Nature<\/SourceTitle>        <PubMedTitle>Nature<\/PubMedTitle>        <Volume>487<\/Volume>        <Issue>7408<\/Issue>        <Page>482<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Archin, N.M.<\/Author>          <Author>Liberty, A.L.<\/Author>          <Author>Kashuba, A.D.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1944628\" medline_id=\"21424110\">        <Title>Histone deacetylase inhibitors for purging HIV-1 from the latent reservoir<\/Title>        <SourceTitle>Molecular Medicine (Cambridge)<\/SourceTitle>        <PubMedTitle>Mol Med<\/PubMedTitle>        <Volume>17<\/Volume>        <Issue>5-6<\/Issue>        <Page>466<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Matalon, S.<\/Author>          <Author>Rasmussen, T.A.<\/Author>          <Author>Dinarello, C.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1944629\" medline_id=\"21838863\">        <Title>Latent HIV in primary T lymphocytes is unresponsive to histone deacetylase inhibitors<\/Title>        <SourceTitle>Virology Journal (Online)<\/SourceTitle>        <PubMedTitle>Virol J<\/PubMedTitle>        <Volume>8<\/Volume>        <Page>400<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Sahu, G.K.<\/Author>          <Author>Cloyd, M.W.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1945309\" medline_id=\"16099290\">        <Title>Depletion of latent HIV-1 infection in vivo: A proof-of-concept study<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>366<\/Volume>        <Issue>9485<\/Issue>        <Page>549<\/Page>        <Year>2005<\/Year>        <Authors>          <Author>Lehrman, G.<\/Author>          <Author>Hogue, I.B.<\/Author>          <Author>Palmer, S.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1995769\">        <Title>The potential role of HDAC inhibitors in de-silencing latent HIV virus<\/Title>        <SourceTitle>Drugs of the Future<\/SourceTitle>        <PubMedTitle>Drugs Fut<\/PubMedTitle>        <Volume>038<\/Volume>        <Issue>08<\/Issue>        <Page>0575<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Ververis , K.<\/Author>          <Author>Karagiannis, T.C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2798862\" medline_id=\"26731470\">        <Title>Molecular mechanisms of HIV latency<\/Title>        <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>        <PubMedTitle>J Clin Invest<\/PubMedTitle>        <Volume>126<\/Volume>        <Issue>2<\/Issue>        <Page>448<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Cary, D.C.<\/Author>          <Author>Fujinaga, K.<\/Author>          <Author>Peterlin, B.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2798868\" medline_id=\"29298886\">        <Title>Class 1-selective histone deacetylase (HDAC) inhibitors enhance HIV latency reversal while preserving the activity of HDAC isoforms necessary for maximal HIV gene expression<\/Title>        <SourceTitle>Journal of Virology<\/SourceTitle>        <PubMedTitle>J Virol<\/PubMedTitle>        <Volume>92<\/Volume>        <Issue>6<\/Issue>        <Year>2018<\/Year>        <Authors>          <Author>Zaikos, T.D.<\/Author>          <Author>Painter, M.M.<\/Author>          <Author>Kettinger, N.T.S.<\/Author>          <Author>Terry, V.H.<\/Author>          <Author>Collins, K.L.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2849566\">        <Title>Barriers and strategies to achieve a cure for HIV<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>5<\/Volume>        <Issue>6<\/Issue>        <Page>e317<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Pitman, M.C.<\/Author>          <Author>Lau, J.S.Y.<\/Author>          <Author>McMahon, J.H.<\/Author>          <Author>Lewin, S.R.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"415\" modifiedDate=\"20181211121114\">    <Title>Immunotherapeutic Strategies<\/Title>    <Body>      <para>With the adoption and widespread use of HAART (highly active antiretroviral therapy), AIDS-related mortality has decreased significantly in the developed world. Nonetheless, the many limitations of HAART --which include side effects, compliance issues, cost and the failure to completely eradicate the HIV virus-- have contributed in recent years to a resurgence of interest in the development of strategies to boost the host immune response in AIDS patients. Immunotherapeutic agents may be used as adjuncts to HAART and potentially as HAART-sparing treatments. No immunotherapeutic agents have yet been licensed specifically for the treatment of HIV, but research in this area is gathering momentum.<\/para>    <\/Body>    <References/>    <Section sectionId=\"416\" modifiedDate=\"20190521100200\">      <Title>Monoclonal Antibodies<\/Title>      <Body>        <para>Although monoclonal antibodies (MAbs) have long been used by virologists as research tools, the development of neutralizing humanized MAb as therapeutic agents for the treatment of prevention of viral infections has been much slower. Fortunately, advances in recent years have provided clearer insight into the mechanism of action of MAbs as well as methods for improving their therapeutic efficacy, and is now driving the development of MAb therapies for infectious diseases, including HIV and AIDS. <\/para>        <para>Antibodies have a dual functionality that makes them extremely attractive as immunotherapeutic agents, with potential in both the treatment and prevention of HIV-1. MAbs consist of a variable domain that targets a specific viral epitopes, together with a constant domain that is able to harness host effector functions via engaging host Fc receptors on immune cells (<REF id=\"3011908\">Caskey, M. et al., 2019<\/REF>).<\/para>        <para>Monoclonal antibodies are classified by their method of production. Murine MAbs are created by challenging mice with a desired antigen and then creating a hybridoma. Chimeric MAbs consist of both human (approximately 65%) and murine sequences. They are less immunogenic than murine MAbs and thus have longer serum half-lives. Human MAbs are almost entirely (95%) of human origin, and can be produced using transgenic mice or phage display libraries. They are the least immunogenic form. Several fully human or humanized versions of murine MAbs acting on a variety of retroviral targets are in development for the treatment of AIDS. <\/para>        <para>In 2018, the first anti-HIV MAb was approved for marketing worldwide: TaiMed Biologics&apos; anti-CD4 MAb ibalizumab, indicated for the treatment of HIV-1 infection in heavily treatment-experienced adults with multidrug-resistant HIV-1 infection failing their current antiretroviral regimen (see HIV Entry and Fusion Inhibitors, above). <COMPETITIVE id=\"84\">            <TABLE>              <TR>                <TD>Monoclonal antibodies in development for the treatment of AIDS<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Description<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leronlimab<\/a>                <\/TD>                <TD>CytoDyn<\/TD>                <TD>Humanized monoclonal IgG4 kappa antibody,  derived from murine PA14 antibody,  targeting human C - C chemokine receptor type 5 (CCR5),  expressed in SP2/0 myeloma cells<\/TD>                <TD>Pre-Registered<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795510&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117<\/a>                <\/TD>                <TD>Rockefeller University<\/TD>                <TD>Broadly neutralizing human monoclonal IgG1 lambda antibody against CD4 - binding site of HIV - 1 gp120<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701671&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">UB-421<\/a>                <\/TD>                <TD>United BioPharma<\/TD>                <TD>Humanized IgG1 monoclonal antibody targeting domain 1 of CD4<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701846&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-01<\/a>                <\/TD>                <TD>National Institute Allergy Infect Dis<\/TD>                <TD>Human monoclonal IgG1 kappa 3 antibody against the CD4 binding site region of HIV - 1 gp120 envelope glycoprotein,  purifed from HIV infected individuals<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=280344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cytolin<\/a>                <\/TD>                <TD>CytoDyn<\/TD>                <TD>Murine anti - human LFA - 1 monoclonal antibody<\/TD>                <TD>Phase I/II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915332&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGDM1400<\/a>                <\/TD>                <TD>International AIDS Vaccine Initiative<\/TD>                <TD>Broadly neutralizing fully human IgG1 monoclonal antibody (bnAb) derived from human monoclonal antibody (PGT145),  targeting V1 and V2 epitope regions of trimeric envelop (env) protein of human immunodeficiency virus type - 1 (HIV1)<\/TD>                <TD>Phase I/II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=742023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGT-121<\/a>                <\/TD>                <TD>International AIDS Vaccine Initiative<\/TD>                <TD>Broadly neutralizing fully human IgG1 monoclonal antibody (bnAb) targeting V3 glycan - dependent epitope region of HIV - 1 envelope glycoprotein gp120<\/TD>                <TD>Phase I/II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878049&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-07-523<\/a>                <\/TD>                <TD>International AIDS Vaccine Initiative<\/TD>                <TD>Human monoclonal IgG1neutralizing antibody targeting CD4 binding site region of HIV - 1 gp120 envelope glycoprotein<\/TD>                <TD>Phase I/II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=837370&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074<\/a>                <\/TD>                <TD>National Institutes of Health (NIH)/ Rockefeller University<\/TD>                <TD>Human monoclonal IgG1 lambda antibody targeting N - glycan V3 region of HIV - 1 glycoprotein (gp120)<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=999467&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074-LS<\/a>                <\/TD>                <TD>Rockefeller University<\/TD>                <TD>Human monoclonal IgG1 lambda antibody targeting N - glycan V3 region of HIV - 1 glycoprotein (gp120) harboring a LS substitution in the heavy chain<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=974250&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117-LS<\/a>                <\/TD>                <TD>Rockefeller University<\/TD>                <TD>Human monoclonal broadly neutralizing antibody,  derived from the 3BNC117 MAb,  with LS substitution on the heavy chain<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=901797&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MB-66<\/a>                <\/TD>                <TD>LeafBio<\/TD>                <TD>Vaginal film comprising anti - HIV VRC01 - N and anti - HSV HSV8 - N monoclonal antibodies<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=785468&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB080-00-AB<\/a>                <\/TD>                <TD>National Institute Allergy Infect Dis<\/TD>                <TD>Human monoclonal IgG1 kappa 3 antibody against the CD4 binding site region of HIV - 1 gp120 envelope glycoprotein,  harboring a M428L/N434S substitution in the Fc region<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006069&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB091-00-AB<\/a>                <\/TD>                <TD>National Institute Allergy Infect Dis<\/TD>                <TD>Human monoclonal antibody targeting the human immunodeficiency virus 1 (HIV - 1) CD4 binding site<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1009345&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB095-00-AB<\/a>                <\/TD>                <TD>National Institute Allergy Infect Dis<\/TD>                <TD>Human monoclonal antibody targeting the membrane proximal external region and proximal viral membrane lipid region of HIV - 1<\/TD>                <TD>Phase I<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"3011908\" medline_id=\"30936546\">          <Title>Broadly neutralizing anti-HIV-1 monoclonal antibodies in the clinic<\/Title>          <SourceTitle>Nature Medicine<\/SourceTitle>          <PubMedTitle>Nat Med<\/PubMedTitle>          <Volume>25<\/Volume>          <Issue>4<\/Issue>          <Page>547<\/Page>          <Year>2019<\/Year>          <Authors>            <Author>Caskey, M.<\/Author>            <Author>Klein, F.<\/Author>            <Author>Nussenzweig, M.C.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"417\" modifiedDate=\"20130205022126\">      <Title>Therapeutic AIDS Vaccines<\/Title>      <Body>        <para>The development of an effective prophylactic AIDS vaccine has been complicated by the many unique characteristics of the virus, as discussed in the <I>Prevention<\/I> section above. To date the vaccines studied in humans have shown little efficacy in protecting healthy subjects against infection. Somewhat more promising results have been obtained in the setting of therapeutic vaccination. Several approaches have been used to boost cell- and/or antibody-mediated immunity, including whole inactivated viral vaccines, protein subunits, synthetic peptides, DNA vaccines and viral vectors expressing HIV-1 (<REF id=\"975000\">Puls, R.L. and Emery, S., 2006<\/REF>). The most promising vaccines being studied at the moment are immunogens that produce a cytotoxic T lymphocyte (CTL) response, designed to contain the virus in infected individuals rather than to providing sterile protection for healthy subjects (<REF id=\"878006\">Letvin, N.L., 2005<\/REF>).<\/para>        <para>Another promising, potentially curative HIV vaccine approach is that of dendritic cell vaccines. Promising preliminary results have been obtained by Spanish investigators in a phase I/II trial using autologous, monocyte-derived dendritic cells. The vaccine has been shown in animal models and in patients with chronic HIV-1 infection to generate a host immune response leading to a decrease in plasma viral load (<REF id=\"1932194\">Garcia, F. et al., 2013<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"878006\" medline_id=\"15660510\">          <Title>Progress toward an HIV vaccine<\/Title>          <SourceTitle>Annual Review of Medicine<\/SourceTitle>          <PubMedTitle>Annu Rev Med<\/PubMedTitle>          <Volume>56<\/Volume>          <Page>213<\/Page>          <Year>2005<\/Year>          <Authors>            <Author>Letvin, N.L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"975000\" medline_id=\"16336205\">          <Title>Therapeutic vaccination against HIV: Current progress and future possibilities<\/Title>          <SourceTitle>Clinical Science (1979)<\/SourceTitle>          <PubMedTitle>Clin Sci (Lond)<\/PubMedTitle>          <Volume>110<\/Volume>          <Issue>1<\/Issue>          <Page>59<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Puls, R.L.<\/Author>            <Author>Emery, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1932194\">          <Title>A dendritic cell-based vaccine elicits T cell responses associated with control of HIV-1 replication<\/Title>          <SourceTitle>Science Translational Medicine<\/SourceTitle>          <PubMedTitle>Sci Transl Med<\/PubMedTitle>          <Volume>5<\/Volume>          <Issue>166<\/Issue>          <Page>166ra2<\/Page>          <Year>2013<\/Year>          <Authors>            <Author>Garcia, F.<\/Author>            <Author>Climent, N.<\/Author>            <Author>Guardo, A.C.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"2286\" modifiedDate=\"20121114125710\">      <Title>Cytokine Therapy<\/Title>      <Body>        <para>The use of cytokines to treat HIV, first described nearly three decades ago, has reemerged into the spotlight in recent years as experience has begun to reveal some of the shortcomings of antiretroviral therapy. <\/para>        <para>The immune system of patients with HIV infection do not produce enough interleukin-2 (IL-2), a substance that helps activate CD4+ cells to respond to various infections, including HIV. The drug aldesleukin (recombinant interleukin-2, marketed by Chiron as Proleukin) acts the same way in the body as IL-2 and has helped to increase CD4+ T-cells in HIV-infected patients. However, aldesleukin causes some serious side effects, perhaps because of its stimulation of various immune system cells. <\/para>        <para>The SILCAAT and ESPRIT trials were conducted in order to further elucidate the role of IL-2 in HIV therapy. The 1,695 patients in the SILCAAT study and the 4,111 patients in the ESPRIT study were randomized to treatment with antiretroviral therapy plus IL-2 or antiretroviral therapy alone. Patients had baseline CD4+ cell counts of 50-299/mm3 in SILCAAT and of at least 300/mm3 in ESPRIT. In both studies, the primary endpoint was opportunistic disease or death from any cause. The results of the two studies revealed that, in spite of significantly increasing in CD4+ cell counts as compared to antiretroviral therapy alone, treatment with IL-2 did not result in any clinical benefits in either study (<REF id=\"1414470\">Abrams, D. et al., 2009<\/REF>). <\/para>        <para>Interleukin-2 has to date been the most widely studied cytokine in the setting of HIV and AIDS; at least 15 clinical trials have been conducted to date of IL-2, usually in combination with antiretroviral therapy. However, many other cytokines are also believed to hold potential in this indication, either as adjuncts to antiviral therapy or as adjuncts to AIDS vaccines. Preclinical and clinical studies have provided promising evidence of the favorable therapeutic effects of IL-1, IL-7, IL-12, IL-15, IFN-alpha, IFN-gamma and the colony-stimulating factors G-CSF and GM-CSF, to name a few (<REF id=\"1021499\">Pett, S.L. and Kelleher, A.D., 2003<\/REF>). <\/para>        <para>The following table summarizes progress in the development of cytokines for the treatment of AIDS and AIDS-related complex. <COMPETITIVE id=\"671\">            <TABLE>              <TR>                <TD>Cytokines in development for the treatment of AIDS and AIDS-related complex<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Description<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=261662&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Peginterferon alfa-2a<\/a>                <\/TD>                <TD>National Institute Allergy Infect Dis<\/TD>                <TD>Mono(N2, N6 - dicarboxy - L - lysyl)interferon alfa - 2a,  diesters with polyethylene glycol monomethyl ether<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=769347&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALT-803<\/a>                <\/TD>                <TD>University of Minnesota<\/TD>                <TD>Fusion protein complex consisting of a superagonist human interleukin 15 (IL - l5) variant harboring N72D mutation,  fused to a dimeric IL - 15 receptor alpha sushi domain/IgG1 Fc complex; expressed in CHO cells<\/TD>                <TD>Phase I<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"1021499\" medline_id=\"15482104\">          <Title>Cytokine therapies in HIV-1 infection: Present and future<\/Title>          <SourceTitle>Expert Review of Anti-infective Therapy<\/SourceTitle>          <PubMedTitle>Expert Rev Anti Infect Ther<\/PubMedTitle>          <Volume>1<\/Volume>          <Issue>1<\/Issue>          <Page>83<\/Page>          <Year>2003<\/Year>          <Authors>            <Author>Pett, S.L.<\/Author>            <Author>Kelleher, A.D.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1414470\">          <Title>Interleukin-2 therapy in patients with HIV infection<\/Title>          <SourceTitle>New England Journal of Medicine<\/SourceTitle>          <PubMedTitle>N Engl J Med<\/PubMedTitle>          <Volume>361<\/Volume>          <Issue>16<\/Issue>          <Page>1548<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Abrams, D.<\/Author>            <Author>Losso, M.H.<\/Author>            <Author>Babilker, A.<\/Author>            <Author>Collins, G.<\/Author>            <Author>Cooper, D.A.<\/Author>            <Author>Darbyshire, J.<\/Author>            <Author>Emery, S.<\/Author>            <Author>Fox, L.<\/Author>            <Author>Gordin, F.<\/Author>            <Author>Lane, H.C.<\/Author>            <Author>Lundgren, J.D.<\/Author>            <Author>Mitsuyasu, R.<\/Author>            <Author>Neaton, J.D.<\/Author>            <Author>Phillips, A.<\/Author>            <Author>Routy, J.P.<\/Author>            <Author>Tambussi, G.<\/Author>            <Author>Wentworth, D.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"418\" modifiedDate=\"20131128025024\">      <Title>Immunomodulators<\/Title>      <Body>        <para>Immunomodulating agents are administered to HIV-infected patients in an attempt to boost native immune responses, slowing the infectious processes and reducing susceptibility to secondary infections. <\/para>        <para>Among the more promising immunomodulating agents are those acting on toll-like receptors. Toll-like receptors (TLRs) are the key recognition structures of the innate immune system that recognize molecules shared by pathogens but distinct from host molecules. When activated, they initiate the production of inflammatory cytokines, chemokines, tissue degrading enzymes and type I interferons (IFNs). TLR signaling is also involved in activation of the adaptive immune system via upregulation of costimulatory molecules of antigen presenting cells. TLRs therefore can link thus linking innate and acquired immune responses. <\/para>        <para>Due to its ability to detect double-stranded RNA, TLR3 is considered to be of interest as a target for the treatment of HIV infection. TLR3 agonists have been shown to inhibit HIV infection and replication in macrophages (<REF id=\"1944738\">Zhou, Y. et al., 2010<\/REF>). TLR3 agonists have also been proposed for use as adjuvants in anti-HIV vaccines (<REF id=\"1944739\">Stevceva, L., 2011<\/REF>).<\/para>        <para>Several immunomodulating agents are currently under clinical evaluation, as seen in the following table.<COMPETITIVE id=\"85\">            <TABLE>              <TR>                <TD>Immunomodulating agents in development for AIDS and HIV<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=197440&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-1 Immunogen<\/a>                <\/TD>                <TD>Immune Response BioPharma<\/TD>                <TD/>                <TD>Pre-Registered<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357687&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tubercin T-5<\/a>                <\/TD>                <TD>Artec<\/TD>                <TD/>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=132660&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Poly I:CLC<\/a>                <\/TD>                <TD>Oncovir<\/TD>                <TD>Toll-Like Receptor 3 (TLR3) Agonists/ Interferon Inducers/ Signal Transduction Modulators<\/TD>                <TD>Phase I/II<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"1944738\" medline_id=\"20636339\">          <Title>A critical function of toll-like receptor-3 in the induction of anti-human immunodeficiency virus activities in macrophages<\/Title>          <SourceTitle>Immunology<\/SourceTitle>          <PubMedTitle>Immunology<\/PubMedTitle>          <Volume>131<\/Volume>          <Issue>1<\/Issue>          <Page>40<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Zhou, Y.<\/Author>            <Author>Wang, X.<\/Author>            <Author>Liu, M.<\/Author>            <Author>Hu, Q.<\/Author>            <Author>Song, L.<\/Author>            <Author>Ye, L.<\/Author>            <Author>Zhou, D.<\/Author>            <Author>Ho, W.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1944739\" medline_id=\"22050755\">          <Title>Toll-like receptor agonists as adjuvants for HIV vaccines<\/Title>          <SourceTitle>Current Medicinal Chemistry<\/SourceTitle>          <PubMedTitle>Curr Med Chem<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>33<\/Issue>          <Page>5079<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Stevceva, L.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>  <\/Section>  <Section sectionId=\"419\" modifiedDate=\"20181211121105\">    <Title>Current HIV/AIDS Pipeline<\/Title>    <Body>      <para>Consult the tables below for an overview of all products mentioned in this review, including drugs, biologics and diagnostic agents that have been marketed or are under active development for this indication. Tables may also include drugs not covered in the preceding sections because their mechanism of action is unknown or not well characterized.<FREETABLE id=\"19\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>      <TR>      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Marketed anti-HIV drugs<\/B><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Drug name<\/B><\/TD>      <TD WIDTH=\"160\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Organization<\/B><\/TD>      <TD WIDTH=\"83\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Year and country of first launch<\/B><\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Nucleoside analogue reverse transcriptase inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=113563&p_type=L&p_origen=BGR&p_tsearch=A\">Zidovudine<\/a> (Retrovir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1987 (U.S., U.K.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=143041&p_type=L&p_origen=BGR&p_tsearch=A\">Didanosine<\/a> (Videx)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1991 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=137195&p_type=L&p_origen=BGR&p_tsearch=A\">Stavudine<\/a> (Zerit)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1994 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=184356&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine<\/a> (Epivir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Shire BioChem/ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1995 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=173602&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate<\/a> (Ziagen)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      GlaxoSmithKline/ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1999 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=201671&p_type=L&p_origen=BGR&p_tsearch=A\">Phosphazid<\/a> (Nikavir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AZT-Pharma<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1999 (Russian Federation)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=246665&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate<\/a> (Viread)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2001 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=190016&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine<\/a> (Emtriva)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Nonnucleoside reverse transcriptase inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=170581&p_type=L&p_origen=BGR&p_tsearch=A\">Nevirapine<\/a> (Viramune)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Hikma<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1996 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=196540&p_type=L&p_origen=BGR&p_tsearch=A\">Delavirdine mesilate<\/a> (Rescriptor)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1997 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207217&p_type=L&p_origen=BGR&p_tsearch=A\">Efavirenz<\/a> (Sustiva)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1998 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=290137&p_type=L&p_origen=BGR&p_tsearch=A\">Etravirine<\/a> (Intelence)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen-Cilag<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2008 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=336587&p_type=L&p_origen=BGR&p_tsearch=A\">Rilpivirine hydrochloride<\/a> (Edurant)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2011 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=431792&p_type=L&p_origen=BGR&p_tsearch=A\">Elsulfavirine sodium<\/a> (Elpida)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Viriom<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2017 (Russian Federation)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=748272&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine<\/a> (Pifeltro)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (U.S)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>HIV protease inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=168103&p_type=L&p_origen=BGR&p_tsearch=A\">Saquinavir mesilate<\/a> (Invirase)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Roche<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1995 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=199183&p_type=L&p_origen=BGR&p_tsearch=A\">Indinavir sulfate<\/a> (Crixivan)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck &#38; Co.<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1996 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207282&p_type=L&p_origen=BGR&p_tsearch=A\">Ritonavir<\/a> (Norvir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1996 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=211732&p_type=L&p_origen=BGR&p_tsearch=A\">Nelfinavir mesilate<\/a> (Viracept)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1997 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=257722&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate<\/a> (Reyataz)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=285394&p_type=L&p_origen=BGR&p_tsearch=A\">Fosamprenavir calcium<\/a> (Lexiva)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Vertex/ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=240094&p_type=L&p_origen=BGR&p_tsearch=A\">Tipranavir<\/a> (Aptivus)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Boehringer Ingelheim<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2005 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=310828&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir<\/a> (Prezista)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2006 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>HIV entry and fusion inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=217659&p_type=L&p_origen=BGR&p_tsearch=A\">Enfuvirtide<\/a> (Fuzeon)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Alexion/Roche<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=313738&p_type=L&p_origen=BGR&p_tsearch=A\">Maraviroc<\/a> (Selzentry)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2007 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=434971&p_type=L&p_origen=BGR&p_tsearch=A\">Albuvirtide<\/a> (Aikening)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Frontier Biotechnologies<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (China)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=204505&p_type=L&p_origen=BGR&p_tsearch=A\">Ibalizumab<\/a> (Trozargo)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      TaiMed Biologics/ Theratechnologies<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Integrase inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428015&p_type=L&p_origen=BGR&p_tsearch=A\">Raltegravir potassium<\/a> (Isentress)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2007 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=466915&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir sodium<\/a> (Tivicay)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=414415&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir<\/a> (Vitekta)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2015 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Pharmacoenhancing agents<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=644627&p_type=L&p_origen=BGR&p_tsearch=A\">Cobicistat<\/a> (Tybost)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2014 (U.K.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Combination products<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=258524&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/Zidovudine<\/a> (Combivir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1997 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=284325&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/zidovudine/abacavir sulfate<\/a> (Trizivir)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2000 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291602&p_type=L&p_origen=BGR&p_tsearch=A\">Lopinavir/ritonavir<\/a> (Kaletra)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2000 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315122&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate/lamivudine<\/a> (Epzicom)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=344908&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine<\/a> (Truvada)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004 (U.S.) (treatment)<BR>2012 (U.S.) (prevention)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368895&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/efavirenz<\/a> (Atripla)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb/Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2006 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=676928&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/rilpivirine hydrochloride<\/a> (Complera)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2011 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=651752&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/GS-9350/Truvada<\/a> (Stribild)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2012 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=780137&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/Cobicistat<\/a> (Prezcobix)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2014 (Canada)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=725107&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/abacavir/ lamivudine<\/a> (Triumeq)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2014 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=845715&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate/cobicistat<\/a> (Evotaz)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2015 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=760199&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/cobicistat/tenofovir alafenamide/emtricitabine<\/a> (Genvoya)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2015 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868925&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/tenofovir alafenamide fumarate<\/a> (Descovy)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2016 (U.S., U.K.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=876185&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/rilpivirine hydrochloride/tenofovir alafenamide fumarate<\/a> (Odefsey)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead/Janssen<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2016 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=792693&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/cobicistat/emtricitabine/tenofovir alafenamide fumarate<\/a> (Symtuza)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen-Cilag<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2017 (U.K., Germany)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=880143&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/rilpivirine<\/a> (Juluca)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Janssen/ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2017 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=902852&p_type=L&p_origen=BGR&p_tsearch=A\">Bictegravir/emtricitabine/tenofovir alafenamide fumarate<\/a> (Biktarvy)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=889785&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine/lamivudine/tenofovir disoproxil fumarate<\/a> (Delstrigo)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=994460&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/tenofovir disoproxil fumarate<\/a> (Cimduo)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Mylan<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=919756&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/lamivudine<\/a> (Dovato)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      ViiV Healthcare<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2019 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Immunoglobulins<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=335137&p_type=L&p_origen=BGR&p_tsearch=A\">Immunoglobulin, normal (human)<\/a> (Gamunex)<\/TD>      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bayer<\/TD>      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004 (Canada)<\/TD>      <\/TR><\/TABLE>]]><\/FREETABLE>        <COMPETITIVE id=\"767\">          <TABLE>            <TR>              <TD>Drugs and biologics in development for the treatment and prevention of HIV and AIDS<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Mechanism of Action<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=437811&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir<\/a>              <\/TD>              <TD>ViiV Healthcare<\/TD>              <TD>HIV Integrase Inhibitors<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1044377&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir/rilpivirine<\/a>              <\/TD>              <TD>ViiV Healthcare<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ HIV Integrase Inhibitors<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=281553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine<\/a>              <\/TD>              <TD>International Partnership Microbicides<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=197440&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-1 Immunogen<\/a>              <\/TD>              <TD>Immune Response BioPharma<\/TD>              <TD/>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795404&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ITV-1<\/a>              <\/TD>              <TD>Immunotech Laboratories<\/TD>              <TD/>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leronlimab<\/a>              <\/TD>              <TD>CytoDyn<\/TD>              <TD>Anti-CD195 (CCR5)/ Signal Transduction Modulators/ Viral Entry Inhibitors<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291052&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AIDSVAX gp120 B/E<\/a>              <\/TD>              <TD>Walter Reed Army Institute<\/TD>              <TD/>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=680262&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Fostemsavir<\/a>              <\/TD>              <TD>ViiV Healthcare<\/TD>              <TD>HIV Attachment Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357687&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tubercin T-5<\/a>              <\/TD>              <TD>Artec<\/TD>              <TD/>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=877379&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC-HIV<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase II/III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789554&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">TV1.C gp120 Env/1086.C gp120 Env<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase II/III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=447155&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tucidinostat<\/a>              <\/TD>              <TD>Shenzhen Chipscreen Biosciences<\/TD>              <TD>Histone Deacetylase 1 (HDAC1) Inhibitors/ Histone Deacetylase 10 (HDAC10) Inhibitors/ Histone Deacetylase 11 (HDAC11) Inhibitors/ Histone Deacetylase 2 (HDAC2) Inhibitors/ Histone Deacetylase 3 (HDAC3) Inhibitors/ Epigenetic Modifier Modulators<\/TD>              <TD>Phase II/III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=817657&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">2838232<\/a>              <\/TD>              <TD>GlaxoSmithKline<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Maturation Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795510&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117<\/a>              <\/TD>              <TD>Rockefeller University<\/TD>              <TD>Anti-gp120<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=818039&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ABX-464<\/a>              <\/TD>              <TD>Abivax<\/TD>              <TD>Rev (HIV-1) Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435169&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AGS-004<\/a>              <\/TD>              <TD>Argos Therapeutics<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=301127&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC E120TMG<\/a>              <\/TD>              <TD>Walter Reed Army Institute/ Sanofi Pasteur<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915290&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos.HIV<\/a>              <\/TD>              <TD>Crucell<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925145&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos4.HIV<\/a>              <\/TD>              <TD>Crucell<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=420655&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BIT-225<\/a>              <\/TD>              <TD>Biotron Ltd.<\/TD>              <TD>p7 Protein Ion Channel (HCV) Inhibitors/ Drugs Targeting Hepatitis C Virus (HCV) Proteins/ Drugs Targeting Human Immunodeficiency Virus 1 (HIV-1) Proteins/ Nucleocapsid p7 Protein (NCp7) Zinc Finger Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=854294&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bictegravir<\/a>              <\/TD>              <TD>Gilead<\/TD>              <TD>HIV Integrase Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=351007&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Censavudine<\/a>              <\/TD>              <TD>Oncolys<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925146&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Clade C gp140<\/a>              <\/TD>              <TD>Crucell<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392675&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-LIPO-5<\/a>              <\/TD>              <TD>ANRS<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395968&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Islatravir<\/a>              <\/TD>              <TD>Merck &amp; Co.<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315937&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LC-002<\/a>              <\/TD>              <TD>Genetic Immunity<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=321990&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Lexgenleucel-T<\/a>              <\/TD>              <TD>VIRxSYS<\/TD>              <TD>Env (HIV-1) Expression Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=429800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-HIV62B<\/a>              <\/TD>              <TD>GeoVax Labs/ National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=758734&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVAmos<\/a>              <\/TD>              <TD>Crucell<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=261662&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Peginterferon alfa-2a<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=419201&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rovafovir etalafenamide<\/a>              <\/TD>              <TD>Gilead<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=692914&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SB-728-T<\/a>              <\/TD>              <TD>Sangamo Therapeutics<\/TD>              <TD>CCR5 Expression Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir/levonorgestrel<\/a>              <\/TD>              <TD>Eastern Virginia Medical School<\/TD>              <TD>Progesterone Receptor Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ Signal Transduction Modulators/ DNA Polymerase Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90485&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Triptorelin<\/a>              <\/TD>              <TD>ISR Immune System Regulation Holding<\/TD>              <TD>Gonadotropin-Releasing Hormone Receptor (GNRHR) Receptor Agonists/ Signal Transduction Modulators<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701671&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">UB-421<\/a>              <\/TD>              <TD>United BioPharma<\/TD>              <TD>Anti-CD4<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=736800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VAC-3S<\/a>              <\/TD>              <TD>InnaVirVax<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=833319&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VIH-TriMix-ARNm<\/a>              <\/TD>              <TD>IDIBAPS<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701846&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-01<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>Anti-gp120<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=375612&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV014-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=400981&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVDNA016-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=230535&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vorinostat<\/a>              <\/TD>              <TD>Merck &amp; Co.<\/TD>              <TD>Histone Deacetylase 6 (HDAC6) Inhibitors/ Histone Deacetylase 1 (HDAC1) Inhibitors/ Apoptosis Inducers/ Histone Deacetylase 2 (HDAC2) Inhibitors/ Histone Deacetylase 3 (HDAC3) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Epigenetic Modifier Modulators<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=871553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp140<\/a>              <\/TD>              <TD>Crucell<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428304&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pGA2/JS7<\/a>              <\/TD>              <TD>GeoVax Labs/ National Institute Infectious Dis<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=932649&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">APH-0812<\/a>              <\/TD>              <TD>Aphios<\/TD>              <TD>Protein Kinase C (PKC) Activators/ Histone Deacetylase (HDAC) Inhibitors/ Epigenetic Modifier Modulators/ Signal Transduction Modulators<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949733&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Abacavir/lamivudine/lopinavir/ritonavir<\/a>              <\/TD>              <TD>Drugs for Neglected Diseases Initiative<\/TD>              <TD>HIV-1 Protease Inhibitors/ Tumor Necrosis Factor Receptor Superfamily Member 6 (CD95)/PLC-gamma-1 Interaction Inhibitors/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Alcohol Dehydrogenase Inhibitors/ HIV Protease Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ DNA Polymerase Inhibitors<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=754344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad35-GRIN<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=165188&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bryostatin 1<\/a>              <\/TD>              <TD>Aphios<\/TD>              <TD>Antimitotic Drugs/ Apoptosis Inducers/ Protein Kinase C (PKC) Modulators/ Signal Transduction Modulators<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709822&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CEvac<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=814698&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cal-1<\/a>              <\/TD>              <TD>Calimmune<\/TD>              <TD>CCR5 Expression Inhibitors<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789679&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ChAdV63.HIVconsv<\/a>              <\/TD>              <TD>University of Oxford<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=280344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cytolin<\/a>              <\/TD>              <TD>CytoDyn<\/TD>              <TD>Anti-CD11a/CD18 (LFA-1)/ Signal Transduction Modulators<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-C<\/a>              <\/TD>              <TD>EuroVacc Foundation<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805333&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-PT123<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=463084&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FIT-06<\/a>              <\/TD>              <TD>FIT Biotech<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949705&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GSK-3640254<\/a>              <\/TD>              <TD>ViiV Healthcare<\/TD>              <TD>Viral Maturation Inhibitors<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1021356&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Gammora<\/a>              <\/TD>              <TD>Zion Medical<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1012613&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">INO-6145<\/a>              <\/TD>              <TD>Inovio Pharmaceuticals<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=684732&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ixazomib citrate<\/a>              <\/TD>              <TD>Takeda<\/TD>              <TD>Proteasome Inhibitors<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=476530&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Lefitolimod<\/a>              <\/TD>              <TD>Mologen<\/TD>              <TD>Toll-Like Receptor 9 (TLR9) Agonists/ Signal Transduction Modulators<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=879292&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA HIV-B<\/a>              <\/TD>              <TD>ANRS<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=439426&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.HIVconsv<\/a>              <\/TD>              <TD>University of Oxford<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=981286&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Mosaic gp140<\/a>              <\/TD>              <TD>Janssen<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915332&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGDM1400<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative<\/TD>              <TD>Anti-gp120<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=742023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGT-121<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative<\/TD>              <TD>Anti-gp120<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709739&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-GP<\/a>              <\/TD>              <TD>Inovio Pharmaceuticals<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=132660&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Poly I:CLC<\/a>              <\/TD>              <TD>Oncovir<\/TD>              <TD>Toll-Like Receptor 3 (TLR3) Agonists/ Interferon Inducers/ Signal Transduction Modulators<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795545&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">THV-01<\/a>              <\/TD>              <TD>Theravectys<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=471960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tat Oyi<\/a>              <\/TD>              <TD>Biosantech<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878049&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-07-523<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative<\/TD>              <TD>Anti-gp120<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=882712&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">p55(gag)<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789680&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pSG2.HIVconsv<\/a>              <\/TD>              <TD>University of Oxford<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=837370&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074<\/a>              <\/TD>              <TD>National Institutes of Health (NIH)/ Rockefeller University<\/TD>              <TD>Anti-gp120<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=999467&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074-LS<\/a>              <\/TD>              <TD>Rockefeller University<\/TD>              <TD>Anti-gp120<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=974250&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117-LS<\/a>              <\/TD>              <TD>Rockefeller University<\/TD>              <TD>Anti-gp120<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923551&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AD4-EnvC150<\/a>              <\/TD>              <TD>PaxVax/ National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=769347&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALT-803<\/a>              <\/TD>              <TD>University of Minnesota<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661464&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.ENVA.01 HIV-1<\/a>              <\/TD>              <TD>Crucell/ National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991353&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-EnvCN54<\/a>              <\/TD>              <TD>Imperial College<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923549&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-mGag<\/a>              <\/TD>              <TD>PaxVax/ National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661445&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad5.ENVA.48HIV-1<\/a>              <\/TD>              <TD>Crucell/ National Institute Allergy Infect Dis/ Beth Israel Deaconess Medical Center<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=861091&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BG505 SOSIP.664 gp140 trimers<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=906491&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BMS-986197<\/a>              <\/TD>              <TD>ViiV Healthcare<\/TD>              <TD>Anti-CD4/ Anti-gp41<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=899722&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CH505TF<\/a>              <\/TD>              <TD>Duke University<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=741669&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CN54gp140<\/a>              <\/TD>              <TD>Medical Research Council (MRC)/ Imperial College<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=687890&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DCV3<\/a>              <\/TD>              <TD>Hospital Clinic<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923518&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA CON-S env<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923534&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Mosaic env<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923514&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Nat-B env<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=821845&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA.HTI/MVA.HTI<\/a>              <\/TD>              <TD>Aelix Therapeutics<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=675477&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DS-003<\/a>              <\/TD>              <TD>International Partnership Microbicides<\/TD>              <TD>Glycoprotein 120 (gp120) Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/levonorgestrel<\/a>              <\/TD>              <TD>International Partnership Microbicides<\/TD>              <TD>Progesterone Receptor Agonists/ Estrogen Receptor (ER) Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc<\/a>              <\/TD>              <TD>International Partnership Microbicides<\/TD>              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=135177&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Deferiprone<\/a>              <\/TD>              <TD>Apotex<\/TD>              <TD>Cytochrome P450 CYP4F2 Inhibitors/ Chelating Agents<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=900317&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FLSC<\/a>              <\/TD>              <TD>National Institutes of Health (NIH)/ Profectus BioSciences<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1001453&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GS-6207<\/a>              <\/TD>              <TD>Gilead<\/TD>              <TD>Capsid Protein p24 Assembly (HIV-1) Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=972399&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GS-9722<\/a>              <\/TD>              <TD>Gilead<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1014519&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GSK-3810109<\/a>              <\/TD>              <TD>GlaxoSmithKline<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=658522&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Griffithsin<\/a>              <\/TD>              <TD>Population Council<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719339&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV MAG pDNA<\/a>              <\/TD>              <TD>Profectus BioSciences<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=783050&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIVAX<\/a>              <\/TD>              <TD>University of Miami (UM)/ GeneCure<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528<\/a>              <\/TD>              <TD>ImQuest BioSciences<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Entry Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=738992&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">KM-023<\/a>              <\/TD>              <TD>Kainos Medicine<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=927219&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LFn-p24B/C<\/a>              <\/TD>              <TD>Vaccine Technologies (VTI)<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=901797&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MB-66<\/a>              <\/TD>              <TD>LeafBio<\/TD>              <TD>Anti-gp120<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=900637&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MGD-014<\/a>              <\/TD>              <TD>MacroGenics<\/TD>              <TD>Anti-CD3/ Signal Transduction Modulators<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ HIV Integrase Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=985113&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-4250<\/a>              <\/TD>              <TD>Merck &amp; Co.<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=965041&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8504<\/a>              <\/TD>              <TD>Merck &amp; Co.<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=853669&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8507<\/a>              <\/TD>              <TD>Merck &amp; Co.<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1015995&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8527<\/a>              <\/TD>              <TD>Merck &amp; Co.<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037890&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8558<\/a>              <\/TD>              <TD>Merck &amp; Co.<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006618&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8583<\/a>              <\/TD>              <TD>Merck Sharp &amp; Dohme (MSD)<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435114&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CMDR<\/a>              <\/TD>              <TD>Walter Reed Army Institute<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991354&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CN54<\/a>              <\/TD>              <TD>Imperial College<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037346&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv3<\/a>              <\/TD>              <TD>University North Carolina, Chapel Hill<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037349&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv4<\/a>              <\/TD>              <TD>University North Carolina, Chapel Hill<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=308599&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MYM-V101<\/a>              <\/TD>              <TD>Mymetics<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=781084&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MazF-T cells<\/a>              <\/TD>              <TD>TaKaRa Bio/ University of Pennsylvania<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805334&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NYVAC-HIV-PT1<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719391&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PC-1005<\/a>              <\/TD>              <TD>Population Council<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ ICAM1 Expression Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=399012&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PPL-100<\/a>              <\/TD>              <TD>TaiMed Biologics<\/TD>              <TD>HIV Protease Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=469002&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-G<\/a>              <\/TD>              <TD>Inovio Pharmaceuticals/ Walter Reed Army Institute<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915203&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax DNA plasmid HIV-1 nef/tat/vif,env<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915206&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax VSV IN HIV envC<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=459875&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RO-0335<\/a>              <\/TD>              <TD>Viriom<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368000&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RPI-MN<\/a>              <\/TD>              <TD>ReceptoPharm<\/TD>              <TD>Viral Entry Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=456307&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI DNA-C2<\/a>              <\/TD>              <TD>South African AIDS Vaccine Initiative/ University of Witwatersrand/ National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=409360&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI MVA-C<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative/ National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=850686&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SB-728mR-HSPC<\/a>              <\/TD>              <TD>Sangamo Therapeutics<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=939977&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Sondashi Formula<\/a>              <\/TD>              <TD>Tropical Diseases Research Centre<\/TD>              <TD>HIV Integrase Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=874960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir disoproxil orotate<\/a>              <\/TD>              <TD>Dong-A ST<\/TD>              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ DNA Polymerase Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=451282&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VLP-TBI-pcDNA-TCI<\/a>              <\/TD>              <TD>State Res Cent Virology Biotech VECTOR<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=986918&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVAAV070-00-GT<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>Anti-CD4<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455063&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-027-00-VP<\/a>              <\/TD>              <TD>GenVec/ National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455064&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-038-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923291&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-053-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923293&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-054-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=785468&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB080-00-AB<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>Anti-gp120<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006069&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB091-00-AB<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>Anti-gp41<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1009345&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB095-00-AB<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>Anti-gp41<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1030241&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVRGP096-00-VP<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=975954&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC01/PGDM1400-10E8v4<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD>Anti-gp120/ Anti-gp41<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=720406&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vesatolimod<\/a>              <\/TD>              <TD>Gilead<\/TD>              <TD>Toll-Like Receptor 7 (TLR7) Agonists/ Signal Transduction Modulators<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006783&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">eOD-GT8 60mer<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993174&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">env (A,B,C,A/E)/gag (C) DNA vaccine<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993181&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120 (A,B,C,A/E) protein vaccine<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120-NefTat/AS01B<\/a>              <\/TD>              <TD>GlaxoSmithKline<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987944&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp145 C.6980<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=774420&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rAAV1-PG9DP<\/a>              <\/TD>              <TD>Children&apos;s Hospital of Philadelphia<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=745516&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rAd5 EnvB<\/a>              <\/TD>              <TD>National Institute Allergy Infect Dis<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=467570&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rVSVIN-N4CT9-Gag1<\/a>              <\/TD>              <TD>Profectus BioSciences<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878268&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rcAd26.MOS1.HIV-Env<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative/ Beth Israel Deaconess Medical Center<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357275&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">recombinant o-gp140/MF59 adjuvant<\/a>              <\/TD>              <TD>International AIDS Vaccine Initiative<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=882449&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">882449<\/a>              <\/TD>              <TD>Fred Hutchinson Cancer Research Center<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027125&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027125<\/a>              <\/TD>              <TD>University of Pittsburgh<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027126&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027126<\/a>              <\/TD>              <TD>University of Pittsburgh<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027124&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027124<\/a>              <\/TD>              <TD>University of Pittsburgh<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027123&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027123<\/a>              <\/TD>              <TD>University of Pittsburgh<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868222&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NOV-1003<\/a>              <\/TD>              <TD>Novicol<\/TD>              <TD/>              <TD>Clinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=963159&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">963159<\/a>              <\/TD>              <TD>307th Hospital People&apos;s Liberation Army<\/TD>              <TD/>              <TD>Clinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=413821&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5(R)-Hydroxytriptolide<\/a>              <\/TD>              <TD>Shanghai Pharmaceuticals<\/TD>              <TD>NOS2 Expression Inhibitors<\/TD>              <TD>IND Filed<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=417670&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SHIV vaccine<\/a>              <\/TD>              <TD>IGXBio<\/TD>              <TD/>              <TD>IND Filed<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=773475&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5P12-RANTES<\/a>              <\/TD>              <TD>Orion Biotechnology<\/TD>              <TD>Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ Viral Entry Inhibitors<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=952917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AG-1105<\/a>              <\/TD>              <TD>American Gene Technologies International<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=990227&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AGT103-T<\/a>              <\/TD>              <TD>American Gene Technologies International<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=906488&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BMS-986173<\/a>              <\/TD>              <TD>Bristol-Myers Squibb<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=928135&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BiIA-SG<\/a>              <\/TD>              <TD>University of Hong Kong<\/TD>              <TD>Anti-CD4/ Anti-gp120<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=788997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CS-TATI-1<\/a>              <\/TD>              <TD/>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931208&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cholesterol-PIE12-2-trimer with PEG32 fourth-arm spacer<\/a>              <\/TD>              <TD>Navigen<\/TD>              <TD>Viral Entry Inhibitors<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1035036&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ConM SOSIP<\/a>              <\/TD>              <TD>Universiteit Van Amsterdam/ Imperial College<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038073&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-11<\/a>              <\/TD>              <TD>Enochian BioSciences<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038088&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-12<\/a>              <\/TD>              <TD>Enochian BioSciences<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=843471&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GI-2010<\/a>              <\/TD>              <TD>GlobeImmune<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915342&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GS-986<\/a>              <\/TD>              <TD>Gilead<\/TD>              <TD>Toll-Like Receptor 7 (TLR7) Agonists/ Signal Transduction Modulators<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=474274&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HiviCide-1<\/a>              <\/TD>              <TD>NanoViricides<\/TD>              <TD>Viral Entry Inhibitors<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=736650&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leukotoxin<\/a>              <\/TD>              <TD>Actinobac Biomed<\/TD>              <TD>Integrin alphaLbeta2 (LFA-1) Ligands/ Signal Transduction Modulators<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1003524&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-BN HIV<\/a>              <\/TD>              <TD>Janssen Pharmaceuticals/ Bavarian Nordic<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868061&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">T-169<\/a>              <\/TD>              <TD>TGV-Laboratories<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=954592&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VS-2-370<\/a>              <\/TD>              <TD>Virostatics<\/TD>              <TD>Cyclin-Dependent Kinase 6 (CDK6) Inhibitors/ Cyclin-Dependent Kinase 4 (CDK4) Inhibitors/ Cyclin-Dependent Kinase 9 (CDK9) Inhibitors/ Signal Transduction Modulators<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1029754&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vacc-CRX<\/a>              <\/TD>              <TD>Bionor<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1017477&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1017477<\/a>              <\/TD>              <TD>University of Pennsylvania<\/TD>              <TD>Drugs Targeting T-Cell Surface Glycoprotein CD4<\/TD>              <TD>Preclinical<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References/>  <\/Section><\/Section><Section sectionId=\"4636\" modifiedDate=\"20160801112125\">  <Title>Targets for Therapeutic Intervention<\/Title>  <Body>    <para>For an overview of validated therapeutic targets for this indication, consult the targetscape below. The targetscape shows an overall cellular and molecular landscape or comprehensive network of connections among the current therapeutic targets for the treatment of the condition and their biological actions. An arrow indicates a positive effect; a dash indicates a negative effect. Gray or lighter symbols are protein targets that are not validated (i.e., not under active development [UAD]). Pink text boxes with red borders indicate validated gene targets. Yellow text boxes are gene targets not UAD. Purple and pink text boxes indicate extracellular and intracellular effects, respectively. Green text boxes indicate a related disease/condition/symptom. For in-depth information on a specific target or mechanism of action, see the corresponding section in this report.<\/para>  <\/Body>  <References/><\/Section><\/Sections>","DiseaseTitle":"HIV and AIDS","Id":1,"LastReviewDate":"2019-05-22T00:00:00Z","DatePublished":"2001-07-25T00:00:00Z"}}"}],"title":"I pass a &quot;id = 1&quot; as parameter to &quot;getDiseaseBriefingRecordV2&quot; operation","status":"passed"},{"date":"2019-06-14 23:59:08","title":"response contains &quot;Id&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:08","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:08","title":"response contains &quot;DatePublished&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:08","title":"response contains &quot;LastReviewDate&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:08","title":"response contains &quot;DiseaseInfo&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:08","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"}],"status":"passed"}},{"testcase":{"tag":"@TestCaseId(\"getDiseaseBriefingRecordREST_001\")","time":"2019-06-14 23:59:09","title":"Verify necessary fields are present in the response","steps":[{"date":"2019-06-14 23:59:09","title":"I am authenticated user accessing &quot;REST&quot; API","status":"passed"},{"date":"2019-06-14 23:59:09","StepAttachment":[{"mime":"TXT","content":"aHR0cHM6Ly9wcm9kZXUtYXBpLmNvcnRlbGxpcy5pbnQuY2xhcml2YXRlLmNvbS9hcGktd3Mvd3MvcnMvZGlzZWFzZWJyaWVmaW5ncy12Mi9kaXNlYXNlQnJpZWZpbmcvMg=="},{"mime":"TXT","content":""}],"title":"I pass a &quot;id = 2&quot; as parameter to &quot;getDiseaseBriefingRecordV2&quot; operation","status":"passed"},{"date":"2019-06-14 23:59:09","title":"response contains &quot;Id&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:09","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:09","title":"response contains &quot;DatePublished&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:09","title":"response contains &quot;LastReviewDate&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:09","title":"response contains &quot;DiseaseInfo&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:09","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"}],"status":"passed"}},{"testcase":{"tag":"@TestCaseId(\"getDiseaseBriefingRecordREST_001\")","time":"2019-06-14 23:59:10","title":"Verify necessary fields are present in the response","steps":[{"date":"2019-06-14 23:59:10","title":"I am authenticated user accessing &quot;REST&quot; API","status":"passed"},{"date":"2019-06-14 23:59:10","StepAttachment":[{"mime":"TXT","content":"aHR0cHM6Ly9wcm9kZXUtYXBpLmNvcnRlbGxpcy5pbnQuY2xhcml2YXRlLmNvbS9hcGktd3Mvd3MvcnMvZGlzZWFzZWJyaWVmaW5ncy12Mi9kaXNlYXNlQnJpZWZpbmcvMw=="},{"mime":"TXT","content":""}],"title":"I pass a &quot;id = 3&quot; as parameter to &quot;getDiseaseBriefingRecordV2&quot; operation","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;Id&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;DatePublished&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;LastReviewDate&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;DiseaseInfo&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"}],"status":"passed"}},{"testcase":{"tag":"@TestCaseId(\"getDiseaseBriefingRecordREST_001\")","time":"2019-06-14 23:59:10","title":"Verify necessary fields are present in the response","steps":[{"date":"2019-06-14 23:59:10","title":"I am authenticated user accessing &quot;REST&quot; API","status":"passed"},{"date":"2019-06-14 23:59:10","StepAttachment":[{"mime":"TXT","content":"aHR0cHM6Ly9wcm9kZXUtYXBpLmNvcnRlbGxpcy5pbnQuY2xhcml2YXRlLmNvbS9hcGktd3Mvd3MvcnMvZGlzZWFzZWJyaWVmaW5ncy12Mi9kaXNlYXNlQnJpZWZpbmcvNA=="},{"mime":"TXT","content":"{"diseaseBriefingRecordOutput":{"DiseaseInfo":"<Sections><Section sectionId=\"130\" modifiedDate=\"20190219113008\">  <Title>Facts about Angina Pectoris<\/Title>  <Body>    <para>Angina pectoris, more commonly known simply as angina, is a condition characterized by recurring pain or discomfort in the chest occurring when the coronary circulation is unable to meet myocardial oxygen demand (<REF id=\"2123296\">Parikh, R. and Kadowitz, P.J., 2014<\/REF>; <REF id=\"2481629\">Winchester, D.E. and Pepine, C.J., 2015<\/REF>). Angina is the most common symptomatic manifestation of coronary artery disease (CAD)--also known as coronary heart disease or ischemic heart disease--, a condition that develops when the blood vessels leading to the heart become narrowed or completely blocked due to <BACKGROUNDER id=\"10\">Atherosclerosis<\/BACKGROUNDER> (<REF id=\"2480247\">Ohman, E.M., 2016<\/REF>; <REF id=\"2800530\">Ferrari, R. et al., 2018<\/REF>).<\/para>    <para>Angina is experienced as a sensation of squeezing or pressing pain, generally localized to the chest area under the breastbone. However, pain may also be experienced in the shoulders, arm, neck, jaw or back. In older adults or diabetes patients, presenting symptoms of angina may include fatigue, dyspnea, lightheadedness or breathlessness, rather than outright chest pain. In a similar fashion, symptoms in women may not coincide with those experienced by men: they may be more vague and less specific, and may include extreme fatigue, discomfort in the shoulder blades or dyspnea. Angina is usually provoked by physical exertion; other frequent triggers of angina pain include emotional stress, extreme heat or cold, heavy meals, alcohol and cigarette smoking. Symptoms often wane within a few minutes if the individual rests or takes medication (<REF id=\"2123296\">Parikh, R. and Kadowitz, P.J., 2014<\/REF>; <REF id=\"2481595\">Osler, W., 2015<\/REF>; <REF id=\"2480247\">Ohman, E.M., 2016<\/REF>); however, a significant proportion of patients have refractory angina, which is defined as chronic angina-type chest pain lasting three months or more that is associated with reversible myocardial ischemia that persists in spite of optimal medical, interventional and surgical management (<REF id=\"2927310\">Cheng, K. and de Silva, R., 2018<\/REF>).<\/para>  <\/Body>  <References>    <Reference id=\"2123296\" medline_id=\"24417454\">      <Title>Angina pectoris: Current therapy and future treatment options<\/Title>      <SourceTitle>Expert Review of Cardiovascular Therapy<\/SourceTitle>      <PubMedTitle>Expert Rev Cardiovasc Ther<\/PubMedTitle>      <Volume>12<\/Volume>      <Issue>2<\/Issue>      <Page>175<\/Page>      <Year>2014<\/Year>      <Authors>        <Author>Parikh, R.<\/Author>        <Author>Kadowitz, P.J.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2480247\" medline_id=\"27007960\">      <Title>Chronic stable angina<\/Title>      <SourceTitle>New England Journal of Medicine<\/SourceTitle>      <PubMedTitle>N Engl J Med<\/PubMedTitle>      <Volume>374<\/Volume>      <Issue>12<\/Issue>      <Page>1167<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Ohman, E.M.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2481595\" medline_id=\"26547477\">      <Title>Angina pectoris and arteriosclerosis<\/Title>      <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>      <PubMedTitle>JAMA<\/PubMedTitle>      <Volume>314<\/Volume>      <Issue>18<\/Issue>      <Page>1981<\/Page>      <Year>2015<\/Year>      <Authors>        <Author>Osler, W.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2481629\" medline_id=\"26740801\">      <Title>Angina treatments and prevention of cardiac events: An appraisal of the evidence<\/Title>      <SourceTitle>European Heart Journal - Supplement<\/SourceTitle>      <PubMedTitle>Eur Heart J - Suppl<\/PubMedTitle>      <Volume>17<\/Volume>      <Issue>Suppl. G<\/Issue>      <Page>G10<\/Page>      <Year>2015<\/Year>      <Authors>        <Author>Winchester, D.E.<\/Author>        <Author>Pepine, C.J.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2800530\" medline_id=\"28880025\">      <Title>Expert consensus document: A &apos;diamond&apos; approach to personalized treatment of angina<\/Title>      <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>      <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>      <Volume>15<\/Volume>      <Issue>2<\/Issue>      <Page>120<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Ferrari, R.<\/Author>        <Author>Camici, P.G.<\/Author>        <Author>Crea, F.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2927310\" medline_id=\"30310476\">      <Title>New advances in the management of refractory angina pectoris<\/Title>      <SourceTitle>European Cardiology<\/SourceTitle>      <PubMedTitle>Eur Cardiol<\/PubMedTitle>      <Volume>13<\/Volume>      <Issue>1<\/Issue>      <Page>70<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Cheng, K.<\/Author>        <Author>de Silva, R.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"4549\" modifiedDate=\"20190214073602\">    <Title>Classification<\/Title>    <Body>      <para>The two most commonly encountered forms of angina pectoris are stable and unstable. Stable angina, the most common form, emerges gradually and occurs in a regular or characteristic pattern, and tends to result from somewhat predictable causes. Unstable angina, also known as acute coronary syndrome, may emerge suddenly as a severe episode or as frequently recurring bouts of angina. In other instances, an established pattern of stable angina may suddenly change, becoming more severe and less predictable. The term unstable angina may also be used to describe a patient with symptoms mimicking those of myocardial infarction, but in whom laboratory tests do not support this diagnosis. Other, less common forms of angina include variant angina (also called vasospastic angina or Prinzmetal&apos;s angina) and microvascular angina.<\/para>    <\/Body>    <References/>  <\/Section>  <Section sectionId=\"137\" modifiedDate=\"20120917093709\">    <Title>Risk Factors<\/Title>    <Body>      <para>Nearly all risk factors for CAD can be considered risk factors for angina as well. Significant risk factors include smoking (see <BACKGROUNDER id=\"99\">Nicotine Addiction<\/BACKGROUNDER>), hyperlipidemia (see <BACKGROUNDER id=\"10\">Atherosclerosis<\/BACKGROUNDER>), <BACKGROUNDER id=\"8\">Arterial Hypertension<\/BACKGROUNDER>, <BACKGROUNDER id=\"23\">Diabetes<\/BACKGROUNDER>, age, gender, family history of CAD and chronic infections, especially by <I>Chlamydia pneumoniae<\/I>.<\/para>      <para>Although ischemia due to atherosclerotic obstruction of the coronary arteries is a frequent cause of angina, symptoms in different patients with comparable degrees of myocardial ischemia may vary widely, leading to the hypothesis that some other underlying elements may contribute to angina risk. Researchers evaluated 788 consecutive patients presenting at two Seattle, Washington (U.S.A.) hospitals using single-photon emission computed tomography stress perfusion imaging together with the Seattle Angina Questionnaire to determine angina frequency and tests to determine psychosocial characteristics of the individual. The results of their study confirmed that among patients with a similar burden of inducible ischemia, a history of coronary revascularization, current anxiety and current depression were significantly associated with more frequent angina (<REF id=\"1379894\">Arnold, S.V. et al., 2009<\/REF>). <\/para>    <\/Body>    <References>      <Reference id=\"1379894\" medline_id=\"19564560\">        <Title>Psychosocial modulators of angina response to myocardial ischemia<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>120<\/Volume>        <Issue>2<\/Issue>        <Page>126<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Arnold, S.V.<\/Author>          <Author>Spertus, J.A.<\/Author>          <Author>Ciechanowski, P.S.<\/Author>          <Author>Soine, L.A.<\/Author>          <Author>Jordan-Keith, K.<\/Author>          <Author>Caldwell, J.H.<\/Author>          <Author>Sullivan, M.D.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"138\" modifiedDate=\"20190604023753\">    <Title>Epidemiology<\/Title>    <Body>      <para>According to results of the Global Burden of Disease (GBD) 2010 study, the age-standardized prevalence of angina pectoris in 2010 was 20.3 per 100,000 in males and 15.9 per 100,000 in females. This was down from rates of 21.9 and 17.7 per 100,000, respectively, in 1990. The highest incidence rates were reported in Central Asia (35.18 and 25.21 per 100,000 in males and females, respectively) and Eastern Europe (33.20 and 23.78 per 100,000, respectively) (<REF id=\"2134781\">Moran, A.E. et al., 2014<\/REF>).<\/para>      <para>According to the American Heart Association, citing data from NHANES (2013-2016), the prevalence of angina pectoris was approximately 3.6% in U.S. adults aged 20 and older (<REF id=\"3005764\">Benjamin, E.J. et al., 2019<\/REF>). Based on an analysis of data from SEER and Medicare, the incidence of angina decreased significantly in the U.S. at a rate of -6.17% per year during the period 1992-2005 (<REF id=\"1983580\">Akushevich, I. et al., 2013<\/REF>), reaching a rate of 16.86 per 100,000 in males and 12.71 in females 2010, according to GBD 2010 (<REF id=\"2134781\">Moran, A.E. et al., 2014<\/REF>). Hospital visits for angina have also decreased in the U.S. over recent decades, from an average of 3.6 million/year from 1995-1998 to an average of 2.3 million/year from 2007-2010 (<REF id=\"2111619\">Will, J.C. et al., 2014<\/REF>). Based on NHANES data, the prevalence of self-reported angina in Americans aged 40 years and older from 2009-2012 averaged 3.4 million each year (people reporting angina symptoms on Rose Questionnaire); this was down from a prevalence of 4 million/year in 1988-1994. Additionally, there were an average of 4.5 million Americans with a medical history of angina each year from 2009-2012. Prevalence rates among non-Hispanic whites overall as well as most adults aged 65 years and older decreased significantly from 1988-2012; however, rates among non-Hispanic blacks showed no such decrease, possibly because risk factors (hypertension, hypercholesterolemia and diabetes) in blacks decreased less than in whites over the period in question (<REF id=\"2206303\">Will, J.C. et al., 2014<\/REF>).<\/para>      <para>According to the GBD study, the incidence of angina pectoris in western European males was 19.32 per 100,000 in 2010, down from 20.51 in 2005 and 25.11 in 1990. The rate in western European females was 14.48 per 100,000 in 2010 vs. 15.05 and 18.34 in 2005 and 1990, respectively. Even higher rates were reported in Eastern Europe, where the incidence in males and females was 33.20 and 23.78 per 100,000, respectively, in 2010 (<REF id=\"2134781\">Moran, A.E. et al., 2014<\/REF>).<\/para>      <para>Angina pectoris affects more than 353,000 individuals in Australia, where it is a leading cause of hospitalization (72,000 per year) and death (<REF id=\"2481626\">Wee, Y. et al., 2015<\/REF>).<\/para>      <para>According to the GBD 2010 study, the incidence of angina in Central Asia was 35.18 (males) and 25.21 (females) per 100,000. Rates in southeast Asia were 16.56 and 12.89 per 100,000 in males and females, respectively (<REF id=\"2134781\">Moran, A.E. et al., 2014<\/REF>). In South Korea, there were 160,395 hospital discharges with a primary or secondary diagnosis of unstable angina in 2009 (<REF id=\"2130137\">Kim, J. et al., 2013<\/REF>). The self-reported prevalence of angina in the Study on Global Ageing and Adult Health (SAGE) study was 8%, and symptom-based prevalence was 10%, in China (<REF id=\"2206306\">Wu, F. et al., 2013<\/REF>). According to the Nutrition and Health Survey in Taiwan (NAHSIT), the age-adjusted prevalence of definite angina decreased significantly from 1993-1996 to 2005-2008: from 5.6% to 3.5% (<REF id=\"2973823\">Tsai, C.C. et al., 2019<\/REF>).<\/para>      <para>Coronary artery disease is no longer a disease of wealthy countries, however. At this time more than 80% of all patients with CAD live in developing nations (<REF id=\"1610124\">Ruff, C.T. and Braunwald, E., 2011<\/REF>). The age-adjusted incidence rate in Iranian men and women was 582 and 580 per 100,000 person-years, respectively, in the Isfahan Cohort Study (<REF id=\"2206298\">Talaei, M. et al., 2013<\/REF>). Also in SAGE, angina prevalence in Ghana was shown to be 6% (<REF id=\"2206305\">Ayernor, P.K., 2012<\/REF>).<\/para>      <para>For more epidemiology information, consult the Incidence and Prevalence Database (IPD): <a href=\"http://www.tdrdata.com/ipd/IPD_SearchIPDByKeyword_Excel.aspx?keyword=angina pectoris (AP, stable angina)\">IPD: Angina pectoris (stable angina)<\/a>.<\/para>    <\/Body>    <References>      <Reference id=\"1610124\" medline_id=\"21173793\">        <Title>The evolving epidemiology of acute coronary syndromes<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>8<\/Volume>        <Issue>3<\/Issue>        <Page>140<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Ruff, C.T.<\/Author>          <Author>Braunwald, E.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1983580\" medline_id=\"23482353\">        <Title>Time trends of incidence of age-associated diseases in the US elderly population: Medicare-based analysis<\/Title>        <SourceTitle>Age and Ageing<\/SourceTitle>        <PubMedTitle>Age Ageing<\/PubMedTitle>        <Volume>42<\/Volume>        <Issue>4<\/Issue>        <Page>494<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Akushevich, I.<\/Author>          <Author>Kravchenko, J.<\/Author>          <Author>Ukraintseva, S.<\/Author>          <Author>Arbeev, K.<\/Author>          <Author>Yashin, A.I.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2111619\" medline_id=\"24425707\">        <Title>National trends in visits to physician offices and outpatient clinics for angina 1995 to 2010<\/Title>        <SourceTitle>Circulation Cardiovascular Quality and Outcomes<\/SourceTitle>        <PubMedTitle>Circ Cardiovasc Qual Outcomes<\/PubMedTitle>        <Volume>7<\/Volume>        <Issue>1<\/Issue>        <Page>110<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Will, J.C.<\/Author>          <Author>Loustalot, F.<\/Author>          <Author>Hong, Y.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2130137\" medline_id=\"23924508\">        <Title>Economic burden of acute coronary syndrome in South Korea: A national survey<\/Title>        <SourceTitle>BMC Cardiovascular Disorders (Online)<\/SourceTitle>        <PubMedTitle>BMC Cardiovasc Disord<\/PubMedTitle>        <Volume>13<\/Volume>        <Page>55<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Kim, J.<\/Author>          <Author>Lee, E.<\/Author>          <Author>Lee, T.<\/Author>          <Author>Sohn, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2134781\" medline_id=\"24573351\">        <Title>The global burden of ischemic heart disease in 1990 and 2010: The global burden of disease 2010 study<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>129<\/Volume>        <Issue>14<\/Issue>        <Page>1493<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Moran, A.E.<\/Author>          <Author>Forouzanfar, M.H.<\/Author>          <Author>Roth, G.A.<\/Author>          <Author>Mensah, G.A.<\/Author>          <Author>Ezzati, M.<\/Author>          <Author>Flaxman, A.<\/Author>          <Author>Murray, C.J.<\/Author>          <Author>Naghavi, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2206298\" medline_id=\"23432164\">        <Title>Incidence of cardiovascular diseases in an Iranian population: The Isfahan Cohort Study<\/Title>        <SourceTitle>Archives of Iranian Medicine<\/SourceTitle>        <PubMedTitle>Arch Iran Med<\/PubMedTitle>        <Volume>16<\/Volume>        <Issue>3<\/Issue>        <Page>138<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Talaei, M.<\/Author>          <Author>Sarrafzadegan, N.<\/Author>          <Author>Sadeghi, M.<\/Author>          <Author>Oveisgharan, S.<\/Author>          <Author>Marshall, T.<\/Author>          <Author>Thomas, G.N.<\/Author>          <Author>Iranipour, R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2206303\" medline_id=\"24847083\">        <Title>National trends in the prevalence and medical history of angina: 1988 to 2012<\/Title>        <SourceTitle>Circulation Cardiovascular Quality and Outcomes<\/SourceTitle>        <PubMedTitle>Circ Cardiovasc Qual Outcomes<\/PubMedTitle>        <Volume>7<\/Volume>        <Issue>3<\/Issue>        <Page>407<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Will, J.C.<\/Author>          <Author>Yuan, K.<\/Author>          <Author>Ford, E.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2206305\" medline_id=\"23661813\">        <Title>Diseases of ageing in Ghana<\/Title>        <SourceTitle>Ghana Medical Journal<\/SourceTitle>        <PubMedTitle>Ghana Med J<\/PubMedTitle>        <Volume>46<\/Volume>        <Issue>Suppl. 2<\/Issue>        <Page>18<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Ayernor, P.K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2206306\" medline_id=\"24069278\">        <Title>Prevalence of major chronic conditions among older Chinese adults: The study on Global AGEing and adult health (SAGE) wave 1<\/Title>        <SourceTitle>PLoS ONE<\/SourceTitle>        <PubMedTitle>PLoS One<\/PubMedTitle>        <Volume>8<\/Volume>        <Issue>9<\/Issue>        <Year>2013<\/Year>        <Authors>          <Author>Wu, F.<\/Author>          <Author>Guo, Y.<\/Author>          <Author>Kowal, P.<\/Author>          <Author>Jiang, Y.<\/Author>          <Author>Yu, M.<\/Author>          <Author>Li, X.<\/Author>          <Author>Zheng, Y.<\/Author>          <Author>Xu, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2481626\" medline_id=\"26648642\">        <Title>Medical management of chronic stable angina<\/Title>        <SourceTitle>Australian Prescriber<\/SourceTitle>        <PubMedTitle>Aust Prescr<\/PubMedTitle>        <Volume>38<\/Volume>        <Issue>4<\/Issue>        <Page>131<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Wee, Y.<\/Author>          <Author>Burns, K.<\/Author>          <Author>Bett, N.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2973823\" medline_id=\"30685101\">        <Title>A decline in the prevalence of angina pectoris: Data from the Nutrition and Health Survey in Taiwan<\/Title>        <SourceTitle>International Journal of Cardiology<\/SourceTitle>        <PubMedTitle>Int J Cardiol<\/PubMedTitle>        <Volume>280<\/Volume>        <Page>1<\/Page>        <Year>2019<\/Year>        <Authors>          <Author>Tsai, C.C.<\/Author>          <Author>Hsieh, I.C.<\/Author>          <Author>Jeng, C.<\/Author>          <Author>Ho, L.H.<\/Author>          <Author>Chu, P.H.<\/Author>          <Author>Chuang, S.Y.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"3005764\" medline_id=\"30700139\">        <Title>Heart disease and stroke statistics-2019 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>139<\/Volume>        <Issue>10<\/Issue>        <Page>e56<\/Page>        <Year>2019<\/Year>        <Authors>          <Author>Benjamin, E.J.<\/Author>          <Author>Muntner, P.<\/Author>          <Author>Alonso, A.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"139\" modifiedDate=\"20180316094917\">    <Title>Morbidity and Mortality<\/Title>    <Body>      <para>Although angina is not the same as <BACKGROUNDER id=\"134\">Myocardial Infarction<\/BACKGROUNDER>, it is a sign that a patient is at increased risk of myocardial infarction, severe cardiac arrhythmias, cardiac arrest and sudden cardiac death. Among patients diagnosed with unstable angina, the risk of progression to myocardial infarction may be as high as 20% during the first 30 days (<REF id=\"655853\">Klootwijk, P. and Hamm, C., 1999<\/REF>). In contrast, only 18% of myocardial infarctions are preceded by long-standing (stable) angina, according to the American Heart Association (<REF id=\"1941833\">Go, A.S. et al., 2013<\/REF>). Angina is also a risk factor for heart failure: in a study of patients surviving a first hospitalization for unstable angina, 5.2% developed heart failure after discharge, and the cumulative rate of heart failure at one year was 16% (<REF id=\"2206299\">Kaul, P. et al., 2013<\/REF>).<\/para>      <para>As a direct result of the processes of industrialization and urbanization, nearly 30% of all deaths worldwide are now due to coronary artery disease, of which angina is a principal feature (<REF id=\"1610124\">Ruff, C.T. and Braunwald, E., 2011<\/REF>). Coronary artery disease kills approximately 4.1 million Europeans each year (<REF id=\"2800530\">Ferrari, R. et al., 2018<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"655853\" medline_id=\"10374760\">        <Title>Acute coronary syndromes: Diagnosis<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>353<\/Volume>        <Issue>Suppl. 2<\/Issue>        <Page>SII10<\/Page>        <Year>1999<\/Year>        <Authors>          <Author>Klootwijk, P.<\/Author>          <Author>Hamm, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1610124\" medline_id=\"21173793\">        <Title>The evolving epidemiology of acute coronary syndromes<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>8<\/Volume>        <Issue>3<\/Issue>        <Page>140<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Ruff, C.T.<\/Author>          <Author>Braunwald, E.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1941833\" medline_id=\"23239837\">        <Title>Heart disease and stroke statistics - 2013 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>127<\/Volume>        <Issue>1<\/Issue>        <Page>e6<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Go, A.S.<\/Author>          <Author>Mozaffarian, D.<\/Author>          <Author>Roger, V.L.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2206299\" medline_id=\"23453107\">        <Title>Incidence of heart failure and mortality after acute coronary syndromes<\/Title>        <SourceTitle>American Heart Journal<\/SourceTitle>        <PubMedTitle>Am Heart J<\/PubMedTitle>        <Volume>165<\/Volume>        <Issue>3<\/Issue>        <Page>379<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Kaul, P.<\/Author>          <Author>Ezekowitz, J.A.<\/Author>          <Author>Armstrong, P.W.<\/Author>          <Author>Leung, B.K.<\/Author>          <Author>Savu, A.<\/Author>          <Author>Welsh, R.C.<\/Author>          <Author>Quan, H.<\/Author>          <Author>Knudtson, M.L.<\/Author>          <Author>McAlister, F.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2800530\" medline_id=\"28880025\">        <Title>Expert consensus document: A &apos;diamond&apos; approach to personalized treatment of angina<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>15<\/Volume>        <Issue>2<\/Issue>        <Page>120<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Ferrari, R.<\/Author>          <Author>Camici, P.G.<\/Author>          <Author>Crea, F.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"141\" modifiedDate=\"20140825115953\">    <Title>Cost<\/Title>    <Body>      <para>The economic burden associated with angina pectoris is significant. Costs are incurred by symptom management, lost productivity as well as risk of major cardiovascular event. A systematic review has been published in the literature, in which the direct (hospitalization, surgery and medications) and indirect (unemployment and disease-related work limitations) costs of angina were calculated based on data from studies published in the literature between 1990-2003. Revascularization procedures were found to be the most important determinant of direct costs, costing approximately USD 33,000 per patient per year. U.S. studies indicate that the direct costs of angina, including risk of revascularization and hospitalization, were in the range of USD 2,500-7,200 per patient per year during the period 1986-1995. On the national level, angina has been estimated to incur costs ranging from USD 17 billion to 49 billion each year. No figure could be calculated for the indirect cost of angina, due to sparse and variable data (<REF id=\"1284481\">Reynolds, M.W. et al., 2004<\/REF>).<\/para>      <para>In a Swedish study, the total annual direct per-patient cost associated with angina pectoris was shown to be EUR 13,875 during the first year of illness, and EUR 7,432 during the second year. Costs associated with medical services (i.e., anesthesia, surgery, postoperative care, intensive care, radiology and laboratory services) showed the greatest variation between years 1 and 2 (EUR 5,064 vs. 1,450). Costs associated with productive losses (EUR 3,652 and 4,516 for years 1 and 2, respectively) and disability pensions (EUR 2,477 and 1,713, respectively) were also significant (<REF id=\"2206301\">Mourad, G. et al., 2013<\/REF>).<\/para>      <para>In a study of the Korean National Health Insurance claims database, the total economic burden of acute coronary syndromes (ACS) including unstable angina was estimated at USD 918.2 million in 2009. This included USD 425.3 million in direct medical costs, USD 11.4 million in direct nonmedical costs, and USD 481.5 million associated with morbidity and mortality incurred by ACS (<REF id=\"2130137\">Kim, J. et al., 2013<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"1284481\" medline_id=\"15603244\">        <Title>A systematic review of the economic burden of chronic angina<\/Title>        <SourceTitle>American Journal of Managed Care<\/SourceTitle>        <PubMedTitle>Am J Manag Care<\/PubMedTitle>        <Volume>10<\/Volume>        <Issue>11, Suppl.<\/Issue>        <Page>S347<\/Page>        <Year>2004<\/Year>        <Authors>          <Author>Reynolds, M.W.<\/Author>          <Author>Frame, D.<\/Author>          <Author>Scheye, R.<\/Author>          <Author>Rose, M.E.<\/Author>          <Author>George, S.<\/Author>          <Author>Watson, J.B.<\/Author>          <Author>Hlatky, M.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2130137\" medline_id=\"23924508\">        <Title>Economic burden of acute coronary syndrome in South Korea: A national survey<\/Title>        <SourceTitle>BMC Cardiovascular Disorders (Online)<\/SourceTitle>        <PubMedTitle>BMC Cardiovasc Disord<\/PubMedTitle>        <Volume>13<\/Volume>        <Page>55<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Kim, J.<\/Author>          <Author>Lee, E.<\/Author>          <Author>Lee, T.<\/Author>          <Author>Sohn, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2206301\" medline_id=\"24107009\">        <Title>Societal costs of non-cardiac chest pain compared with ischemic heart disease - A longitudinal study<\/Title>        <SourceTitle>BMC Health Services Research (Online)<\/SourceTitle>        <PubMedTitle>BMC Health Serv Res<\/PubMedTitle>        <Volume>13<\/Volume>        <Page>403<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Mourad, G.<\/Author>          <Author>Alwin, J.<\/Author>          <Author>Strömberg, A.<\/Author>          <Author>Jaarsma, T.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"131\" modifiedDate=\"20160405123456\">  <Title>Diagnosis<\/Title>  <Body>    <para>A patient presenting with chest pain should undergo a complete physical examination as well as being asked about symptoms and their triggers, personal medical history and family history of cardiovascular disease. The nature of angina disease (stable or unstable) should be determined, and the patient should be stratified by risk (<REF id=\"1709919\">Palaniswamy, C. and Aronow, W.S., 2011<\/REF>; <REF id=\"2481626\">Wee, Y. et al., 2015<\/REF>).<\/para>    <para>Diagnostic tests that may assist in the diagnosis of angina include: <UL>        <LI>Electrocardiogram<\/LI>        <LI>Exercise stress test<\/LI>        <LI>Nuclear heart scan<\/LI>        <LI>Echocardiography<\/LI>        <LI>Magnetic resonance imaging<\/LI>        <LI>Positive emission tomography (PET) scanning<\/LI>        <LI>Chest x-ray<\/LI>        <LI>Cardiac catheterization<\/LI>        <LI>Coronary angiography<\/LI>      <\/UL>    <\/para>  <\/Body>  <References>    <Reference id=\"1709919\" medline_id=\"20861717\">      <Title>Treatment of stable angina pectoris<\/Title>      <SourceTitle>American Journal of Therapeutics<\/SourceTitle>      <PubMedTitle>Am J Ther<\/PubMedTitle>      <Volume>18<\/Volume>      <Issue>5<\/Issue>      <Page>e138<\/Page>      <Year>2011<\/Year>      <Authors>        <Author>Palaniswamy, C.<\/Author>        <Author>Aronow, W.S.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2481626\" medline_id=\"26648642\">      <Title>Medical management of chronic stable angina<\/Title>      <SourceTitle>Australian Prescriber<\/SourceTitle>      <PubMedTitle>Aust Prescr<\/PubMedTitle>      <Volume>38<\/Volume>      <Issue>4<\/Issue>      <Page>131<\/Page>      <Year>2015<\/Year>      <Authors>        <Author>Wee, Y.<\/Author>        <Author>Burns, K.<\/Author>        <Author>Bett, N.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"142\" modifiedDate=\"20181112081957\">    <Title>Biomarkers<\/Title>    <Body>      <para>Troponin I and troponin T are expressed exclusively in cardiac myocytes and are not detectable in whole blood of healthy individuals. Monoclonal antibody-based immunoassays for detecting cardiac-specific troponins may be useful in detecting myocardial injury as well as in risk stratification (<REF id=\"591126\">Braunwald, E. et al., 2000<\/REF>; <REF id=\"983295\">Achar, S.A. et al., 2005<\/REF>).<\/para>      <para>C-reactive protein testing may be useful for prognostic purposes, although this particular marker of systemic inflammation is not a precise indicator for angina (<REF id=\"910242\">Abrams, J., 2005<\/REF>). <\/para>    <\/Body>    <References>      <Reference id=\"591126\" medline_id=\"10973852\">        <Title>ACC/AHA guidelines for the management of patients with unstable angina and non-ST-segment elevation myocardial infarction: Executive summary and recommendations<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>102<\/Volume>        <Issue>10<\/Issue>        <Page>1193<\/Page>        <Year>2000<\/Year>        <Authors>          <Author>Braunwald, E.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"910242\" medline_id=\"15958808\">        <Title>Chronic stable angina<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>352<\/Volume>        <Issue>24<\/Issue>        <Page>2524<\/Page>        <Year>2005<\/Year>        <Authors>          <Author>Abrams, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"983295\" medline_id=\"16035692\">        <Title>Diagnosis of acute coronary syndrome<\/Title>        <SourceTitle>American Family Physician (1970)<\/SourceTitle>        <PubMedTitle>Am Fam Physician<\/PubMedTitle>        <Volume>72<\/Volume>        <Issue>1<\/Issue>        <Page>119<\/Page>        <Year>2005<\/Year>        <Authors>          <Author>Achar, S.A.<\/Author>          <Author>Kundu, S.<\/Author>          <Author>Norcross, W.A.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"3533\" modifiedDate=\"20120606081221\">    <Title>Differential Diagnosis<\/Title>    <Body>      <para>Not all types of chest discomfort are caused by angina. Conditions and disorders that should be considered in the differential diagnosis of angina include  <BACKGROUNDER id=\"33\">Gastroesophageal Reflux Disease<\/BACKGROUNDER> (GERD), gall bladder disease, other cardiovascular disorders such as pericarditis, musculoskeletal diseases affecting the chest wall (i.e., chest wall syndrome), shoulders and surrounding area, cervical arthritis, pulmonary infection or inflammation, or anxiety (<REF id=\"1284480\">Cohn, J.K. and Cohn, P.F., 2002<\/REF>; <REF id=\"1284484\">Ponka, D. and Kirlew, M., 2007<\/REF>; <REF id=\"1284463\">Verdon, F. et al., 2008<\/REF>). <\/para>    <\/Body>    <References>      <Reference id=\"1284463\" medline_id=\"18561039\">        <Title>Chest pain in daily practice: Occurrence, causes and management<\/Title>        <SourceTitle>Swiss Medical Weekly<\/SourceTitle>        <PubMedTitle>Swiss Med Wkly<\/PubMedTitle>        <Volume>138<\/Volume>        <Issue>23-24<\/Issue>        <Page>340<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Verdon, F.<\/Author>          <Author>Herzig, L.<\/Author>          <Author>Burnand, B.<\/Author>          <Author>Bischoff, T.<\/Author>          <Author>Pécoud, A.<\/Author>          <Author>Junod, M.<\/Author>          <Author>Mühlemann, N.<\/Author>          <Author>Favrat, B.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1284480\" medline_id=\"12147530\">        <Title>Cardiology patient pages: Chest pain<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>106<\/Volume>        <Issue>5<\/Issue>        <Page>530<\/Page>        <Year>2002<\/Year>        <Authors>          <Author>Cohn, J.K.<\/Author>          <Author>Cohn, P.F.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1284484\" medline_id=\"18077756\">        <Title>Top 10 differential diagnoses in family medicine: Chest pain<\/Title>        <SourceTitle>Canadian Family Physician<\/SourceTitle>        <PubMedTitle>Can Fam Physician<\/PubMedTitle>        <Volume>53<\/Volume>        <Issue>12<\/Issue>        <Page>2146<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Ponka, D.<\/Author>          <Author>Kirlew, M.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"132\" modifiedDate=\"20190430105406\">  <Title>Prevention<\/Title>  <Body>    <para>As with all cardiovascular disorders, prevention of angina is preferable to and more effective than treatment of established disease. Patients identified with cardiovascular risk factors should eat a healthy diet, maintain a healthy body weight and stay physically active. Control of risk factors such as hypertension, diabetes mellitus, obesity, arrhythmia, high LDL cholesterol and/or low HDL cholesterol, tobacco and alcohol use, stress and chronic obstructive pulmonary disease (COPD), all of which can predispose to angina, is a significant goal in prevention (<REF id=\"657418\">Diop, D. and Aghababian, R.V., 2001<\/REF>).<\/para>    <para>In 2019, the FDA approved the anti-proprotein convertase subtilisin/kexin-type 9 (PCSK9) monoclonal antibody alirocumab, marketed since 2015 for the treatment of hypercholesterolemia, for a new indication: to reduce the risk of heart attack, stroke and unstable angina requiring hospitalization in adults with established cardiovascular disease. Approval was based on data from ODYSSEY OUTCOMES (<REF id=\"2946284\">Schwartz, G.G. et al., 2018<\/REF>), which assessed the effect of adding alirocumab to maximally tolerated statins on CV outcomes in 18,924 patients who had an acute coronary syndrome within a year of enrolling in the trial. The trial met its primary endpoint showing that alirocumab led to a 15% reduced risk for major CV events (time to first heart attack, stroke, death from coronary heart disease or unstable angina requiring hospitalization). Patients who received the study drug experienced a 27% reduced risk of stroke, 14% reduced risk of nonfatal heart attack and 39% reduced risk of unstable angina requiring hospitalization. They also experienced a 15% reduced risk of death from any cause. <\/para>  <\/Body>  <References>    <Reference id=\"657418\" medline_id=\"11373977\">      <Title>Definition, classification, and pathophysiology of acute coronary ischemic syndromes<\/Title>      <SourceTitle>Emergency Medicine Clinics of North America<\/SourceTitle>      <PubMedTitle>Emerg Med Clin North Am<\/PubMedTitle>      <Volume>19<\/Volume>      <Issue>2<\/Issue>      <Page>259<\/Page>      <Year>2001<\/Year>      <Authors>        <Author>Diop, D.<\/Author>        <Author>Aghababian, R.V.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2946284\">      <Title>Alirocumab and cardiovascular outcomes after acute coronary syndrome<\/Title>      <SourceTitle>New England Journal of Medicine<\/SourceTitle>      <PubMedTitle>N Engl J Med<\/PubMedTitle>      <Volume>379<\/Volume>      <Issue>22<\/Issue>      <Page>2097<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Schwartz, G.G.<\/Author>        <Author>Steg, P.G.<\/Author>        <Author>Szarek, M.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>  <\/References><\/Section><Section sectionId=\"133\" modifiedDate=\"20190219112218\">  <Title>Treatment<\/Title>  <Body>    <para>Lifestyle modification, with the objective of eliminating or modifying cardiovascular risk factors, is important in the treatment as well as prevention of angina (<REF id=\"910242\">Abrams, J., 2005<\/REF>). Recommended lifestyle changes include control of comorbid hypertension, heart failure and/or diabetes, weight reduction, cholesterol reduction and smoking cessation. Patients should exercise regularly, but should avoid strenuous activities that are known to provoke attacks of angina (<REF id=\"655855\">Zanger, D.R. et al., 2000<\/REF>). An appropriate exercise plan should be devised with the aid of a physician.<\/para>  <\/Body>  <References>    <Reference id=\"655855\" medline_id=\"10643954\">      <Title>Contemporary management of angina: Part II. Medical management of chronic stable angina<\/Title>      <SourceTitle>American Family Physician (1970)<\/SourceTitle>      <PubMedTitle>Am Fam Physician<\/PubMedTitle>      <Volume>61<\/Volume>      <Issue>1<\/Issue>      <Page>129<\/Page>      <Year>2000<\/Year>      <Authors>        <Author>Zanger, D.R.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"910242\" medline_id=\"15958808\">      <Title>Chronic stable angina<\/Title>      <SourceTitle>New England Journal of Medicine<\/SourceTitle>      <PubMedTitle>N Engl J Med<\/PubMedTitle>      <Volume>352<\/Volume>      <Issue>24<\/Issue>      <Page>2524<\/Page>      <Year>2005<\/Year>      <Authors>        <Author>Abrams, J.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"2836\" modifiedDate=\"20180316105500\">    <Title>Pharmacotherapy<\/Title>    <Body>      <para>The objectives of antianginal drug therapy include the elimination of cardiac ischemia, reduction or complete elimination of angina attacks, prevention of myocardial infarction and improvement of long-term survival (<REF id=\"1709919\">Palaniswamy, C. and Aronow, W.S., 2011<\/REF>). In clinical guidelines, the distinction is made between first-choice (beta-blockers, calcium channel blockers, short-acting nitrates) and second-choice (ivabradine, nicorandil, ranolazine and trimetazidine) drugs for symptomatic angina. The latter group should be reserved for use by patients who have contraindications to first-choice agents, do not tolerate them, or remain symptomatic. Some patients may require double or even triple combination therapy (<REF id=\"2800530\">Ferrari, R. et al., 2018<\/REF>). Drug therapy should thus be tailored to the needs and characteristics of the individual patient, and should be monitored on an continuous individualized basis as well (<REF id=\"999477\">Fox, K. et al., 2006<\/REF>). The presence or absence of comorbid conditions should also be taken into consideration when selecting the most appropriate drug therapy (<REF id=\"2800530\">Ferrari, R. et al., 2018<\/REF>). <\/para>      <para>The principal drugs marketed for the treatment of angina pectoris are listed in the following table.<FREETABLE id=\"8\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>            <TR>      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Drugs marketed for the treatment of angina pectoris<\/B><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Drug name<\/B><\/TD>      <TD WIDTH=\"158\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Organization<\/B><\/TD>      <TD WIDTH=\"80\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Year of first launch<\/B><\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Vasodilators (nitrates)<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=113598&p_type=L&p_origen=BGR&p_tsearch=A\">Isosorbide dinitrate<\/a> (Sorbid)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1946<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91515&p_type=L&p_origen=BGR&p_tsearch=A\">Pentaerithrityl tetranitrate<\/a> (Peritrate)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1946<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91426&p_type=L&p_origen=BGR&p_tsearch=A\">Nitroglycerin<\/a> (Nitroderm)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanwa/Novartis<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1952<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91516&p_type=L&p_origen=BGR&p_tsearch=A\">Molsidomine<\/a> (Corvaton)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1971<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=133800&p_type=L&p_origen=BGR&p_tsearch=A\">Isosorbide 5-mononitrate<\/a> (Ismo)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Roche<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1981<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Calcium channel blockers<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=115395&p_type=L&p_origen=BGR&p_tsearch=A\">Verapamil hydrochloride<\/a> (Isoptin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Abbott<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1963<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=134801&p_type=L&p_origen=BGR&p_tsearch=A\">Diltiazem hydrochloride<\/a> (Cardizem)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Tanabe Seiyaku<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1974 <\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=133799&p_type=L&p_origen=BGR&p_tsearch=A\">Nifedipine<\/a> (Adalat)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bayer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1975<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91152&p_type=L&p_origen=BGR&p_tsearch=A\">Nicardipine hydrochloride<\/a> (Cardene)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Astellas Pharma<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1981<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90994&p_type=L&p_origen=BGR&p_tsearch=A\">Gallopamil hydrochloride<\/a> (Procorum)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1983<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90008&p_type=L&p_origen=BGR&p_tsearch=A\">Felodipine<\/a> (Plendil)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1988<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=158395&p_type=L&p_origen=BGR&p_tsearch=A\">Amlodipine besylate<\/a> (Istin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1990<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90251&p_type=L&p_origen=BGR&p_tsearch=A\">Nisoldipine<\/a> (Syscor)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bayer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1990<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90489&p_type=L&p_origen=BGR&p_tsearch=A\">Benidipine hydrochloride<\/a> (Coniel)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Kyowa Hakko<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1991<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91150&p_type=L&p_origen=BGR&p_tsearch=A\">Bepridil hydrochloride<\/a> (Vascor)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Akzo Nobel/Ortho-McNeil<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1991<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=130598&p_type=L&p_origen=BGR&p_tsearch=A\">Lacidipine<\/a> (Lacirex)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      GlaxoSmithKline<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1991<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=142671&p_type=L&p_origen=BGR&p_tsearch=A\">Barnidipine hydrochloride<\/a> (Hypoca)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Astellas Pharma<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1992<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=141583&p_type=L&p_origen=BGR&p_tsearch=A\">Efonidipine hydrochloride ethanol<\/a> (Landel)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Zeria/Nissan Chemical<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1994<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Non-cardioselective beta-adrenoceptor antagonists<\/B><\/I><\/FONT><\/TD>            <\/TR>     <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91327&p_type=L&p_origen=BGR&p_tsearch=A\">Propranolol hydrochloride<\/a> (Inderal)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1964<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=111907&p_type=L&p_origen=BGR&p_tsearch=A\">Alprenolol hydrochloride<\/a> (Aptine)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1967<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91390&p_type=L&p_origen=BGR&p_tsearch=A\">Oxprenolol hydrochloride<\/a> (Trasicor)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Novartis<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1968<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=131799&p_type=L&p_origen=BGR&p_tsearch=A\">Pindolol<\/a> (Visken)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Novartis/Shionogi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1970<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91502&p_type=L&p_origen=BGR&p_tsearch=A\">Acebutolol hydrochloride<\/a> (Sectral)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1973<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91506&p_type=L&p_origen=BGR&p_tsearch=A\">Timolol maleate<\/a> (Blocadren)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck &#38; Co. <\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1974<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91505&p_type=L&p_origen=BGR&p_tsearch=A\">Sotalol hydrochloride<\/a> (Sotalex)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1974<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91509&p_type=L&p_origen=BGR&p_tsearch=A\">Labetalol hydrochloride<\/a> (Normodyne)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      GlaxoSmithKline<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1977<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91330&p_type=L&p_origen=BGR&p_tsearch=A\">Nadolol<\/a> (Corgard)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1978<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91107&p_type=L&p_origen=BGR&p_tsearch=A\">Mepindolol sulfate<\/a> (Corindolan)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bayer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1981<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91514&p_type=L&p_origen=BGR&p_tsearch=A\">Celiprolol hydrochloride<\/a> (Celectol) <\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1982<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=125572&p_type=L&p_origen=BGR&p_tsearch=A\">Arotinolol hydrochloride<\/a> (Almarl)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sumitomo<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1985<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=279171&p_type=L&p_origen=BGR&p_tsearch=A\">Metoprolol succinate<\/a> (Toprol-XL)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1992<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90834&p_type=L&p_origen=BGR&p_tsearch=A\">Tilisolol hydrochloride<\/a> (Selecal)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Fujifilm Toyama Chemical/Nisshin Pharma<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1992<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Cardioselective beta1-adrenoceptor antagonists<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=137514&p_type=L&p_origen=BGR&p_tsearch=A\">Atenolol<\/a> (Tenormin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1975<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91304&p_type=L&p_origen=BGR&p_tsearch=A\">Metoprolol tartrate<\/a> (Lopressor)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1975<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90097&p_type=L&p_origen=BGR&p_tsearch=A\">Betaxolol hydrochloride<\/a> (Kerlone)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1983 <\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90488&p_type=L&p_origen=BGR&p_tsearch=A\">Bisoprolol fumarate<\/a> (Concor)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1986<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90701&p_type=L&p_origen=BGR&p_tsearch=A\">Carvedilol<\/a> (Coreg)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Roche<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1991<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Potassium channel activators<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=143960&p_type=L&p_origen=BGR&p_tsearch=A\">Nicorandil<\/a> (Ikorel)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Chugai<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1983<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>HMG-CoA reductase inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=180072&p_type=L&p_origen=BGR&p_tsearch=A\">Atorvastatin calcium<\/a> (Lipitor)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>I(f) inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=210860&p_type=L&p_origen=BGR&p_tsearch=A\">Ivabradine hydrochloride<\/a> (Procoralan)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Servier<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2005<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Late-stage sodium channel blockers<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=101796&p_type=L&p_origen=BGR&p_tsearch=A\">Ranolazine<\/a> (Ranexa)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2006<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Miscellaneous antiangina drugs<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271597&p_type=L&p_origen=BGR&p_tsearch=A\">Trimetazidine<\/a> (Vastarel)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Servier<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1978<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91520&p_type=L&p_origen=BGR&p_tsearch=A\">Amiodarone hydrochloride<\/a> (Cordarone)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sigma-Tau<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1981<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271635&p_type=L&p_origen=BGR&p_tsearch=A\">Linsidomine<\/a> (Corvasal)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1983<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=137513&p_type=L&p_origen=BGR&p_tsearch=A\">Atenolol/Nifedipine<\/a> (Tenordate)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1986<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Anticoagulants<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91527&p_type=L&p_origen=BGR&p_tsearch=A\">Warfarin sodium<\/a> (Coumadin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1950<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90088&p_type=L&p_origen=BGR&p_tsearch=A\">Dalteparin sodium<\/a> (Fragmin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1985<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=108318&p_type=L&p_origen=BGR&p_tsearch=A\">Enoxaparin sodium<\/a> (Clexane)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1987<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=113585&p_type=L&p_origen=BGR&p_tsearch=A\">Nadroparin calcium<\/a> (Fraxiparine)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1990<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=208310&p_type=L&p_origen=BGR&p_tsearch=A\">Fondaparinux sodium<\/a> (Arixtra)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      GlaxoSmithKline<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2007<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Antiplatelet drugs<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91341&p_type=L&p_origen=BGR&p_tsearch=A\">Acetylsalicylic acid<\/a> (Aspirin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bayer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1900<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=130762&p_type=L&p_origen=BGR&p_tsearch=A\">Abciximab<\/a> (ReoPro)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Centocor/Lilly<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1995<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=190747&p_type=L&p_origen=BGR&p_tsearch=A\">Eptifibatide<\/a> (Integrilin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Millennium/Merck & Co.<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1998<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=183737&p_type=L&p_origen=BGR&p_tsearch=A\">Tirofiban hydrochloride<\/a> (Aggrastat)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co. <\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1998<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=142672&p_type=L&p_origen=BGR&p_tsearch=A\">Clopidogrel bisulfate<\/a> (Plavix)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb/Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2002<\/TD>      <\/TR><\/TABLE>]]><\/FREETABLE>      <\/para>    <\/Body>    <References>      <Reference id=\"999477\" medline_id=\"16735367\">        <Title>Guidelines on the management of stable angina pectoris: Executive summary: The Task Force on the Management of Stable Angina Pectoris of the European Society of Cardiology<\/Title>        <SourceTitle>European Heart Journal<\/SourceTitle>        <PubMedTitle>Eur Heart J<\/PubMedTitle>        <Volume>27<\/Volume>        <Issue>11<\/Issue>        <Page>1341<\/Page>        <Year>2006<\/Year>        <Authors>          <Author>Fox, K.<\/Author>          <Author>Garcia, M.A.<\/Author>          <Author>Ardissino, D.<\/Author>          <Author>Buszman, P.<\/Author>          <Author>Camici, P.G.<\/Author>          <Author>Crea, F.<\/Author>          <Author>Daly, C.<\/Author>          <Author>De Backer, G.<\/Author>          <Author>Hjemdahl, P.<\/Author>          <Author>Lopez-Sendon, J.<\/Author>          <Author>Marco, J.<\/Author>          <Author>Morais, J.<\/Author>          <Author>Pepper, J.<\/Author>          <Author>Sechtem, U.<\/Author>          <Author>Simoons, M.<\/Author>          <Author>Thygesen, K.<\/Author>          <Author>Priori, S.G.<\/Author>          <Author>Blanc, J.J.<\/Author>          <Author>Budaj, A.<\/Author>          <Author>Camm, J.<\/Author>          <Author>Dean, V.<\/Author>          <Author>Deckers, J.<\/Author>          <Author>Dickstein, K.<\/Author>          <Author>Lekakis, J.<\/Author>          <Author>McGregor, K.<\/Author>          <Author>Metra, M.<\/Author>          <Author>Morais, J.<\/Author>          <Author>Osterspey, A.<\/Author>          <Author>Tamargo, J.<\/Author>          <Author>Zamorano, J.L.<\/Author>          <Author>Zamorano, J.L.<\/Author>          <Author>Andreotti, F.<\/Author>          <Author>Becher, H.<\/Author>          <Author>Dietz, R.<\/Author>          <Author>Fraser, A.<\/Author>          <Author>Gray, H.<\/Author>          <Author>Antolin, R.A.<\/Author>          <Author>Huber, K.<\/Author>          <Author>Kremastinos, D.T.<\/Author>          <Author>Maseri, A.<\/Author>          <Author>Nesser, H.J.<\/Author>          <Author>Pasierski, T.<\/Author>          <Author>Sigwart, U.<\/Author>          <Author>Tubaro, M.<\/Author>          <Author>Weis, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1709919\" medline_id=\"20861717\">        <Title>Treatment of stable angina pectoris<\/Title>        <SourceTitle>American Journal of Therapeutics<\/SourceTitle>        <PubMedTitle>Am J Ther<\/PubMedTitle>        <Volume>18<\/Volume>        <Issue>5<\/Issue>        <Page>e138<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Palaniswamy, C.<\/Author>          <Author>Aronow, W.S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2800530\" medline_id=\"28880025\">        <Title>Expert consensus document: A &apos;diamond&apos; approach to personalized treatment of angina<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>15<\/Volume>        <Issue>2<\/Issue>        <Page>120<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Ferrari, R.<\/Author>          <Author>Camici, P.G.<\/Author>          <Author>Crea, F.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>    <Section sectionId=\"144\" modifiedDate=\"20181115035956\">      <Title>Nitrates<\/Title>      <Body>        <para>Nitroglycerin is the drug most often used to treat chronic stable angina pectoris. At therapeutic doses, nitroglycerine and other nitrates predominantly dilate venous capacitance vessels; however, they also affect large and medium-sized coronary arteries and arterioles. In this fashion they redistribute blood flow and relieve coronary spasm and dynamic stenosis. Nitrates also induce the formation of nitric oxide (NO), and thus are able to produce coronary vasodilation even under conditions of impaired endogenous NO production, such as in coronary artery disease. The main drawback of their use is tolerance and resulting loss of antianginal effect, which may be circumvented by imposing drug-free intervals. Side effects are related to vasodilatation and include headache, flushing, palpitations, and hypotension; these are usually dose-dependent, for which the lowest possible dose should be prescribed. Nitrates may be short- or long-acting and are available in a range of formulations (oral, i.v., sublingual, spray, topical and buccal); they are often used in combination with beta blockers or calcium antagonists (<REF id=\"2800530\">Ferrari, R. et al., 2018<\/REF>; <REF id=\"2927309\">Tarkin, J.M. and Kaski, J.C., 2018<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"2800530\" medline_id=\"28880025\">          <Title>Expert consensus document: A &apos;diamond&apos; approach to personalized treatment of angina<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>15<\/Volume>          <Issue>2<\/Issue>          <Page>120<\/Page>          <Year>2018<\/Year>          <Authors>            <Author>Ferrari, R.<\/Author>            <Author>Camici, P.G.<\/Author>            <Author>Crea, F.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2927309\" medline_id=\"30310466\">          <Title>Nicorandil and long-acting nitrates: Vasodilator therapies for the management of chronic stable angina pectoris<\/Title>          <SourceTitle>European Cardiology<\/SourceTitle>          <PubMedTitle>Eur Cardiol<\/PubMedTitle>          <Volume>13<\/Volume>          <Issue>1<\/Issue>          <Page>23<\/Page>          <Year>2018<\/Year>          <Authors>            <Author>Tarkin, J.M.<\/Author>            <Author>Kaski, J.C.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"145\" modifiedDate=\"20180316102055\">      <Title>beta-Adrenoceptor Antagonists<\/Title>      <Body>        <para>Beta blockers inhibit beta1-adrenergic receptors located in heart muscle and/or beta2-receptors on vascular and bronchial smooth muscle cells. By reducing heart rate, depressing myocardial contractility and decreasing blood pressure, beta blockers simultaneously diminish myocardial oxygen demand and increase myocardial oxygen supply, particularly under conditions of emotional or physical stress (<REF id=\"1709919\">Palaniswamy, C. and Aronow, W.S., 2011<\/REF>; <REF id=\"2800530\">Ferrari, R. et al., 2018<\/REF>). They are a cornerstone in the treatment of unstable angina, effort angina and mixed effort and rest angina, although they are not useful for Prinzmetal&apos;s angina. Marketed beta blockers include cardioselective beta1-adrenoceptor antagonists and nonselective beta1/beta2-adrenoceptor antagonists. Due to their potential effects on bronchial smooth muscle, beta blockers are contraindicated in patients with asthma.<\/para>      <\/Body>      <References>        <Reference id=\"1709919\" medline_id=\"20861717\">          <Title>Treatment of stable angina pectoris<\/Title>          <SourceTitle>American Journal of Therapeutics<\/SourceTitle>          <PubMedTitle>Am J Ther<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>5<\/Issue>          <Page>e138<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Palaniswamy, C.<\/Author>            <Author>Aronow, W.S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2800530\" medline_id=\"28880025\">          <Title>Expert consensus document: A &apos;diamond&apos; approach to personalized treatment of angina<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>15<\/Volume>          <Issue>2<\/Issue>          <Page>120<\/Page>          <Year>2018<\/Year>          <Authors>            <Author>Ferrari, R.<\/Author>            <Author>Camici, P.G.<\/Author>            <Author>Crea, F.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"146\" modifiedDate=\"20181115035700\">      <Title>Ion Channel Modulators<\/Title>      <Body>        <para>Calcium channel blockers are a chemically heterogeneous class of drugs that selectively inhibit the opening of L-type calcium channels in vascular smooth muscle and myocardium, thereby producing vasodilation and decreasing peripheral vascular resistance (<REF id=\"2927302\">Sueta, D. et al., 2017<\/REF>). They have less predictable effects than beta-blockers, and thus are usually not indicated for first-line treatment of acute coronary syndromes (<REF id=\"1709919\">Palaniswamy, C. and Aronow, W.S., 2011<\/REF>). Calcium antagonists, together with nitrates, are especially effective in treating variant angina, a less common form of the disease caused by spasms of the coronary arteries. In about two-thirds of patients with variant angina, these spasms occur in a vessel affected by severe atherosclerosis, in a region of the vessel proximal to the blockage.<\/para>        <para>Nicorandil, a potassium (K+[ATP]) channel activator, has been marketed since 1983 for the treatment of angina pectoris. Nicorandil also activates nitric oxide (NO) signalling pathways, which triggers vascular smooth muscle cell relaxation (<REF id=\"2927309\">Tarkin, J.M. and Kaski, J.C., 2018<\/REF>). Vasodilators such as nicorandil are preferred over beta blockers for the treatment of patients with effort-induced angina (<REF id=\"2800530\">Ferrari, R. et al., 2018<\/REF>).<\/para>        <para>Ivabradine hydrochloride is a selective and specific I(f) inhibitor, indicated for the symptomatic treatment of chronic stable angina pectoris in patients with normal sinus rhythm who have a contraindication or intolerance to beta-blockers. Ivabradine is the first pure heart rate-lowering agent and acts by selective inhibition of the cardiac pacemaker I(f) current, which controls spontaneous diastolic depolarization in the sinus node and regulates heart rate (<REF id=\"983296\">Borer, J.S., 2004<\/REF>). Ivabradine&apos;s effects are selective to the sinus node; it has no effect on intracardiac conduction, myocardial contractility or ventricular repolarization. Unlike beta-blockers, ivabradine is free from sexual disturbances, respiratory side effects caused by constriction or spasm of the airways, bradycardia or rebound phenomena. Ivabradine has additive effects in combination with other antianginal drugs (except diltiazem and verapamil), and synergistic effects in combination with beta blockers (<REF id=\"2800530\">Ferrari, R. et al., 2018<\/REF>).<\/para>        <para>Ranolazine is a concentration-, voltage-, and frequency-dependent inhibitor of the late sodium current. By inhibiting late sodium efflux, ranolazine prevents intracellular calcium overload and its harmful effects. As a partial fatty acid oxidation inhibitor, it also promotes glucose oxidation, thus improving anaerobic metabolism under conditions of ischemia (<REF id=\"2800530\">Ferrari, R. et al., 2018<\/REF>). The drug is marketed in the U.S. and Europe as a second-line agent for the treatment of chronic stable angina (<REF id=\"2801469\">Rayner-Hartley, E. and Sedlak, T., 2016<\/REF>).<COMPETITIVE id=\"22\">            <TABLE>              <TR>                <TD>Ion channel modulators in development for angina<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=972903&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ivabradine/metoprolol<\/a>                <\/TD>                <TD>Servier<\/TD>                <TD>HCN [I(f)] Blockers/ beta1-Adrenoceptor Antagonists/ Signal Transduction Modulators<\/TD>                <TD>Clinical<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"983296\" medline_id=\"16265314\">          <Title>Drug insight: If inhibitors as specific heart-rate-reducing agents<\/Title>          <SourceTitle>Nature Clinical Practice Cardiovascular Medicine<\/SourceTitle>          <PubMedTitle>Nat Clin Pract Cardiovasc Med<\/PubMedTitle>          <Volume>1<\/Volume>          <Issue>2<\/Issue>          <Page>103<\/Page>          <Year>2004<\/Year>          <Authors>            <Author>Borer, J.S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1709919\" medline_id=\"20861717\">          <Title>Treatment of stable angina pectoris<\/Title>          <SourceTitle>American Journal of Therapeutics<\/SourceTitle>          <PubMedTitle>Am J Ther<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>5<\/Issue>          <Page>e138<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Palaniswamy, C.<\/Author>            <Author>Aronow, W.S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2800530\" medline_id=\"28880025\">          <Title>Expert consensus document: A &apos;diamond&apos; approach to personalized treatment of angina<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>15<\/Volume>          <Issue>2<\/Issue>          <Page>120<\/Page>          <Year>2018<\/Year>          <Authors>            <Author>Ferrari, R.<\/Author>            <Author>Camici, P.G.<\/Author>            <Author>Crea, F.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2801469\" medline_id=\"26979079\">          <Title>Ranolazine: A contemporary review<\/Title>          <SourceTitle>Journal of the American Heart Association<\/SourceTitle>          <PubMedTitle>J Am Heart Assoc<\/PubMedTitle>          <Volume>5<\/Volume>          <Issue>3<\/Issue>          <Year>2016<\/Year>          <Authors>            <Author>Rayner-Hartley, E.<\/Author>            <Author>Sedlak, T.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2927302\" medline_id=\"28123178\">          <Title>Clinical roles of calcium channel blockers in ischemic heart diseases<\/Title>          <SourceTitle>Hypertension Research, Clinical and Experimental<\/SourceTitle>          <PubMedTitle>Hypertens Res<\/PubMedTitle>          <Volume>40<\/Volume>          <Issue>5<\/Issue>          <Page>423<\/Page>          <Year>2017<\/Year>          <Authors>            <Author>Sueta, D.<\/Author>            <Author>Tabata, N.<\/Author>            <Author>Hokimoto, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2927309\" medline_id=\"30310466\">          <Title>Nicorandil and long-acting nitrates: Vasodilator therapies for the management of chronic stable angina pectoris<\/Title>          <SourceTitle>European Cardiology<\/SourceTitle>          <PubMedTitle>Eur Cardiol<\/PubMedTitle>          <Volume>13<\/Volume>          <Issue>1<\/Issue>          <Page>23<\/Page>          <Year>2018<\/Year>          <Authors>            <Author>Tarkin, J.M.<\/Author>            <Author>Kaski, J.C.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"5847\" modifiedDate=\"20181112082238\">      <Title>Antiplatelet Drugs<\/Title>      <Body>        <para>Aspirin is one of the few drugs that has been shown to improve survival in patients with angina pectoris, and its use is strongly recommended for all patients without contraindications (<REF id=\"1709919\">Palaniswamy, C. and Aronow, W.S., 2011<\/REF>). Aspirin blocks the synthesis of thromboxane A2, a potent vasoconstricting and platelet-activating agent. Its ability to improve both short- and long-term mortality and to decrease the frequency of fatal and nonfatal cardiac events in patients with angina and myocardial infarction is well documented (<REF id=\"655855\">Zanger, D.R. et al., 2000<\/REF>). Following atherosclerotic injury, proinflammatory cytokines (M-CSF, IL-1beta, IL-6) and C-reactive protein (CRP) are released by the vascular endothelium; aspirin has been shown to reduce cytokine and CRP levels under these conditions. This may explain at least part of the therapeutic effect of aspirin in the context of chronic stable angina (<REF id=\"552334\">Ikonomidis, I. et al., 1999<\/REF>).<\/para>        <para>Clopidogrel hydrogen sulfate, an inhibitor of ADP-mediated platelet aggregation, was shown in the CAPRIE trial to be at least as effective as aspirin in preventing death, myocardial infarction and stroke among patients with vascular disease (<REF id=\"657417\">Denktas, A.E. et al., 2001<\/REF>). The U.S. FDA approved the use of clopidogrel bisulfate in 2002 for the treatment of acute coronary syndrome (ACS), defined as unstable angina and non-Q wave myocardial infarction. Clopidogrel had already been approved for use in patients with a history of recent heart attack, recent stroke or established peripheral arterial disease. The approval was based on data from the CURE (Clopidogrel in Unstable angina to prevent Recurrent Events) study, in which 12,562 patients with ACS received either clopidogrel or placebo, plus standard therapy including aspirin. Clopidogrel was shown to significantly reduce the risk of heart attack, stroke or cardiovascular death by 20% in patients with mild heart attack or unstable angina. The drug was approved later in the year in the European Union for a similar indication. Administration of clopidogrel (75 mg/day) is recommended in all patients with contraindications to aspirin (<REF id=\"1709919\">Palaniswamy, C. and Aronow, W.S., 2011<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"552334\" medline_id=\"10458713\">          <Title>Increased proinflammatory cytokines in patients with chronic stable angina and their reduction by aspirin<\/Title>          <SourceTitle>Circulation<\/SourceTitle>          <PubMedTitle>Circulation<\/PubMedTitle>          <Volume>100<\/Volume>          <Issue>8<\/Issue>          <Page>793<\/Page>          <Year>1999<\/Year>          <Authors>            <Author>Ikonomidis, I.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"655855\" medline_id=\"10643954\">          <Title>Contemporary management of angina: Part II. Medical management of chronic stable angina<\/Title>          <SourceTitle>American Family Physician (1970)<\/SourceTitle>          <PubMedTitle>Am Fam Physician<\/PubMedTitle>          <Volume>61<\/Volume>          <Issue>1<\/Issue>          <Page>129<\/Page>          <Year>2000<\/Year>          <Authors>            <Author>Zanger, D.R.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"657417\" medline_id=\"11714089\">          <Title>New approaches to the pharmacological treatment of angina<\/Title>          <SourceTitle>Current Opinion in Pharmacology<\/SourceTitle>          <PubMedTitle>Curr Opin Pharmacol<\/PubMedTitle>          <Volume>1<\/Volume>          <Issue>2<\/Issue>          <Page>151<\/Page>          <Year>2001<\/Year>          <Authors>            <Author>Denktas, A.E.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1709919\" medline_id=\"20861717\">          <Title>Treatment of stable angina pectoris<\/Title>          <SourceTitle>American Journal of Therapeutics<\/SourceTitle>          <PubMedTitle>Am J Ther<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>5<\/Issue>          <Page>e138<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Palaniswamy, C.<\/Author>            <Author>Aronow, W.S.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"151\" modifiedDate=\"20180316103512\">      <Title>Anticoagulants<\/Title>      <Body>        <para>Anticoagulant therapy with unfractionated heparin or low-molecular-weight heparins is associated with a decreased risk of myocardial infarction and death in patients with acute coronary syndromes (<REF id=\"1129269\">Bates, E.R., 2007<\/REF>; <REF id=\"1284485\">Magee, K.D. et al., 2008<\/REF>) Thrombin inhibitors such as bivalirudin are in earlier development but hold the potential to replace unfractionated heparin in the management of acute coronary syndromes due to their more consistent dose-response effects. Direct thrombin inhibitors are expected to become the anticoagulant drugs of choice for use in low- as well as high-risk patients, including patients undergoing percutaneous coronary intervention (<REF id=\"1284483\">Lepor, N.E., 2007<\/REF>). ACC/AHA guidelines list the factor Xa inhibitor as alternative anticoagulant therapy inpatient with increased bleeding risk or in whom conservative therapy is indicated (<REF id=\"1284486\">Coons, J.C. and Battistone, S., 2008<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"1129269\" medline_id=\"17601395\">          <Title>New anticoagulant options for ST-elevation myocardial infarction and unstable angina pectoris/non-ST-elevation myocardial infarction<\/Title>          <SourceTitle>Current Cardiology Reports <\/SourceTitle>          <PubMedTitle>Curr Cardiol Rep<\/PubMedTitle>          <Volume>9<\/Volume>          <Issue>4<\/Issue>          <Page>289<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Bates, E.R.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1284483\" medline_id=\"17917621\">          <Title>Anticoagulation for acute coronary syndromes: From heparin to direct thrombin inhibitors<\/Title>          <SourceTitle>Reviews in Cardiovascular Medicine<\/SourceTitle>          <PubMedTitle>Rev Cardiovasc Med<\/PubMedTitle>          <Volume>8<\/Volume>          <Issue>Suppl. 3<\/Issue>          <Page>S9<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Lepor, N.E.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1284485\" medline_id=\"18425889\">          <Title>Heparin versus placebo for acute coronary syndromes<\/Title>          <SourceTitle>Cochrane Database of Systematic Reviews (CDROM)<\/SourceTitle>          <PubMedTitle>Cochrane Database Syst Rev<\/PubMedTitle>          <Issue>2<\/Issue>          <Year>2008<\/Year>          <Authors>            <Author>Magee, K.D.<\/Author>            <Author>Campbell, S.G.<\/Author>            <Author>Moher, D.<\/Author>            <Author>Rowe, B.H.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1284486\" medline_id=\"18577763\">          <Title>2007 Guideline update for unstable angina/non-ST-segment elevation myocardial infarction: Focus on antiplatelet and anticoagulant therapies<\/Title>          <SourceTitle>The Annals of Pharmacotherapy<\/SourceTitle>          <PubMedTitle>Ann Pharmacother<\/PubMedTitle>          <Volume>42<\/Volume>          <Issue>7<\/Issue>          <Page>989<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Coons, J.C.<\/Author>            <Author>Battistone, S.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"152\" modifiedDate=\"20180316103523\">      <Title>Angiogenesis Inducers<\/Title>      <Body>        <para>Therapeutic angiogenesis, the induction of new blood vessel growth from existing blood vessels, is a promising new strategy for revascularizing ischemic myocardial tissue via the formation of natural bypasses, or collaterals. <\/para>        <para>The most widely studied method of inducing therapeutic angiogenesis has been through the administration of growth factors, e.g., VEGF or bFGF, although preclinical studies have also demonstrated the feasibility of angiogenesis induction by activated macrophages, lipopolysaccharide, MCP-1, TNF-alpha and GM-CSF. Although the ultimate goal of angiogenesis induction for the treatment of CAD is the collateralization of the ischemic myocardium leading to a reduction of cardiac events, this efficacy is currently only measurable by assessment of surrogate endpoints, including reduction of angina, infarction and death (<REF id=\"640760\">Seiler, C. et al., 2001<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"640760\" medline_id=\"11673338\">          <Title>Promotion of collateral growth by a granulocyte-macrophage colony-stimulating factor in patients with coronary artery disease. A randomized, double-blinf, placebo-controlled study<\/Title>          <SourceTitle>Circulation<\/SourceTitle>          <PubMedTitle>Circulation<\/PubMedTitle>          <Volume>104<\/Volume>          <Issue>17<\/Issue>          <Page>2012<\/Page>          <Year>2001<\/Year>          <Authors>            <Author>Seiler, C.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>      <\/References>      <Section sectionId=\"154\" modifiedDate=\"20150219101748\">        <Title>Angiogenic Gene Therapy<\/Title>        <Body>          <para>One of the most promising new strategies being explored for angina is gene therapy. The use of gene therapy to stimulate angiogenesis may provide alternative routes for blood to flow into oxygen-deprived ischemic areas of the heart. In the setting of the heart, the vector delivery system chosen for a particular gene therapy assumes particular importance. Various vector and delivery systems have been evaluated including naked plasmid DNA, and adenovirus, combined with infusion via an intracoronary catheter, direct myocardial injection or variations thereof. Although the results obtained with angiogenic gene therapy have been less spectacular in the clinical setting than in preclinical studies, development in this area continues to be active (<REF id=\"1135293\">Gaffney, M.M. et al., 2007<\/REF>). <\/para>          <para>Angiogenic gene therapies under development for angina are highlighted in the table below.<COMPETITIVE id=\"399\">              <TABLE>                <TR>                  <TD>Angiogenic gene therapy being explored for angina<\/TD>                <\/TR>                <TR>                  <TD>Drug Name<\/TD>                  <TD>Organization<\/TD>                  <TD>Description<\/TD>                  <TD>Status<\/TD>                <\/TR>                <TR>                  <TD>                    <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=273108&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Alferminogene tadenovec<\/a>                  <\/TD>                  <TD>Taxus Cardium Pharmaceuticals Group<\/TD>                  <TD>Recombinant human adenovirus 5 (replication - deficient,  E1 - deleted) containing a human fibroblast growth factor - 4 cDNA sequence driven by a cytomegalovirus promoter<\/TD>                  <TD>Phase III<\/TD>                <\/TR>                <TR>                  <TD>                    <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=477717&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">EG-013<\/a>                  <\/TD>                  <TD>University of Eastern Finland (UEF)<\/TD>                  <TD>E1 - partial,  E3 - deleted adenovirus encoding proteolytically cleaved human mature vascular endothelial growth factor D (VEGF - D),  under the control of cytomegalovirus (CMV) promoter<\/TD>                  <TD>Phase I/II<\/TD>                <\/TR>                <TR>                  <TD>                    <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=630395&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">EG-011<\/a>                  <\/TD>                  <TD>Trizell<\/TD>                  <TD>E1 - E3 - deleted serotype 5 adenovirus vector carrying a short mature form of VEGFD (VEGF - DDELTANDELTAC or VEGF D*N*C)<\/TD>                  <TD>Phase I<\/TD>                <\/TR>              <\/TABLE>            <\/COMPETITIVE>          <\/para>        <\/Body>        <References>          <Reference id=\"1135293\" medline_id=\"17558439\">            <Title>Cardiovascular gene therapy: Current status and therapeutic potential<\/Title>            <SourceTitle>British Journal of Pharmacology<\/SourceTitle>            <PubMedTitle>Br J Pharmacol<\/PubMedTitle>            <Volume>152<\/Volume>            <Issue>2<\/Issue>            <Page>175<\/Page>            <Year>2007<\/Year>            <Authors>              <Author>Gaffney, M.M.<\/Author>              <Author>Hynes, S.O.<\/Author>              <Author>Barry, F.<\/Author>              <Author>O&apos;brien, T.<\/Author>            <\/Authors>          <\/Reference>        <\/References>      <\/Section>      <Section sectionId=\"5599\" modifiedDate=\"20181119030943\">        <Title>Angiogenic Cell Therapy<\/Title>        <Body>          <para>The angiogenic potential of bone marrow stem cells was first demonstrated in vitro and in vivo more than a decade ago. Unselected bone marrow stem cells used in early studies were nonspecific for this indication, however (<REF id=\"1997449\">Povsic, T.J. et al., 2013<\/REF>). Further studies identified CD34+ stem cells as the most promising phenotype for the induction of therapeutic neovascularization in the ischemic myocardium. CD34 is a cell surface marker expressed on endothelial, hematopoietic and vascular endothelial progenitor cells. Enriched CD34+ populations promoted neovascularization in hind limb and myocardial ischemia models more effectively than total (i.e., unselected) mononuclear cells in rats (<REF id=\"1042202\">Kawamoto, A. et al., 2006<\/REF>).<\/para>          <para>Building on the preclinical findings and on phase I and II studies indicating safety and efficacy, researchers at Baxter initiated the phase III RENEW study to evaluate the efficacy and safety of adult autologous hematopoietic progenitor cell antigen CD34 (CD34)+ stem cells to increase exercise capacity (NCT01508910). The study was designed to enroll up to 450 participants with chronic stable angina from clinical sites in the U.S. and Canada who would be randomized and treated with autologous CD34+ stem cells, placebo or unblinded standard of care. The primary objective was to evaluate the efficacy of treatment in improving functional capacity, as measured by a change in total exercise capacity at 12 months following treatment. Secondary objectives included reduced frequency of angina episodes at 12 months after treatment and the safety of targeted delivery of the cells. After stem cell mobilization, apheresis and cell processing, CD34+ stem cells were administered during a single treatment via 10 intramyocardial injections into targeted areas of the heart tissue (<REF id=\"1997449\">Povsic, T.J. et al., 2013<\/REF>). <\/para>          <para>A systematic review and meta-analysis of ten clinical trials enrolling 658 patients with chronic angina concluded that stem cell therapy decreases angina frequency and improves symptoms, exercise capacity and left ventricular ejection fraction compared with placebo. Of the studies analyzed, four used CD34+ cells, three used bone marrow mononuclear cells, two used CD133+ cells and one used adipose-derived stem cells; results were, not surprisingly, heterogeneous. Follow-up duration ranged from 6-24 months (<REF id=\"2927305\">Shah, R. et al., 2018<\/REF>). <\/para>        <\/Body>        <References>          <Reference id=\"1042202\" medline_id=\"17075009\">            <Title>CD34-positive cells exhibit increased potency and safety for therapeutic neovascularization after myocardial infarction compared with total mononuclear cells<\/Title>            <SourceTitle>Circulation<\/SourceTitle>            <PubMedTitle>Circulation<\/PubMedTitle>            <Volume>114<\/Volume>            <Issue>20<\/Issue>            <Page>2163<\/Page>            <Year>2006<\/Year>            <Authors>              <Author>Kawamoto, A.<\/Author>              <Author>Iwasaki, H.<\/Author>              <Author>Kusano, K.<\/Author>              <Author>Murayama, T.<\/Author>              <Author>Oyamada, A.<\/Author>              <Author>Silver, M.<\/Author>              <Author>Hulbert, C.<\/Author>              <Author>Gavin, M.<\/Author>              <Author>Hanley, A.<\/Author>              <Author>Ma, H.<\/Author>              <Author>Kearney, M.<\/Author>              <Author>Zak, V.<\/Author>              <Author>Asahara, T.<\/Author>              <Author>Losordo, D.W.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1997449\" medline_id=\"23708155\">            <Title>A phase 3, randomized, double-blinded, active-controlled, unblinded standard of care study assessing the efficacy and safety of intramyocardial autologous CD34+ cell administration in patients with refractory angina: Design of the RENEW study<\/Title>            <SourceTitle>American Heart Journal<\/SourceTitle>            <PubMedTitle>Am Heart J<\/PubMedTitle>            <Volume>165<\/Volume>            <Issue>6<\/Issue>            <Page>854<\/Page>            <Year>2013<\/Year>            <Authors>              <Author>Povsic, T.J.<\/Author>              <Author>Junge, C.<\/Author>              <Author>Nada, A.<\/Author>              <Author>et al.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"2927305\" medline_id=\"29664162\">            <Title>A comprehensive meta-analysis of stem cell therapy for chronic angina<\/Title>            <SourceTitle>Clinical Cardiology<\/SourceTitle>            <PubMedTitle>Clin Cardiol<\/PubMedTitle>            <Volume>41<\/Volume>            <Issue>4<\/Issue>            <Page>525<\/Page>            <Year>2018<\/Year>            <Authors>              <Author>Shah, R.<\/Author>              <Author>Latham, S.B.<\/Author>              <Author>Khan, S.A.<\/Author>              <Author>Shahreyar, M.<\/Author>              <Author>Hwang, I.<\/Author>              <Author>Jovin, I.S.<\/Author>            <\/Authors>          <\/Reference>        <\/References>      <\/Section>    <\/Section>    <Section sectionId=\"2877\" modifiedDate=\"20180316103530\">      <Title>Statins<\/Title>      <Body>        <para>HMG-CoA reductase inhibitors, popularly known as statins, are the most widely prescribed lipid-lowering drugs in the U.S. HMG-CoA reductase, the rate-limiting enzyme in endogenous cholesterol biosynthesis, catalyzes the reduction of HMG-CoA into mevalonic acid. Inhibition of this enzyme has proven to be an effective means for lowering serum triglycerides and LDL levels in humans. Faced with reduced endogenous cholesterol production, the cells of the body, especially those of the liver, react by increasing their uptake of cholesterol from the bloodstream, thus lowering the circulating LDL cholesterol level. <\/para>        <para>In the decades since the first member of the statin class, lovastatin, reached the market, these drugs have been extremely widely studied and have been shown to have a wide range of unexpected therapeutic effects (&quot;pleiotropic effects&quot;) above and beyond cholesterol reduction (<REF id=\"1003573\">Alegret, M. and Silvestre, J.S., 2006<\/REF>). Several treatment guidelines recommend the use of statins or other lipid-lowering drugs in the treatment of patients with chronic stable angina (<REF id=\"1709919\">Palaniswamy, C. and Aronow, W.S., 2011<\/REF>). <\/para>        <para>A review of six randomized, controlled intervention studies has led to the conclusion that high-intensity statin therapy (80 mg atorvastatin) is associated with a reduction in the risk of early recurrent ischemic events in patients who have had an index episode of acute coronary syndrome (ACS), as compared to moderate-intensity statin therapy or placebo. The benefits associated with statin therapy were attributed to antiinflammatory activity as well as LDL cholesterol reduction (<REF id=\"922945\">Schwartz, G.G. and Olsson, A.G., 2005<\/REF>). In 2004, the FDA approved a new indication for atorvastatin calcium: the treatment of adult patients without clinically evident coronary heart disease (CHD), but with multiple risk factors for CHD, to reduce the risk of myocardial infarction and to reduce the risk of revascularization procedures and angina.<\/para>      <\/Body>      <References>        <Reference id=\"922945\">          <Title>The case for intensive statin therapy after acute coronary syndromes<\/Title>          <SourceTitle>American Journal of Cardiology<\/SourceTitle>          <PubMedTitle>Am J Cardiol<\/PubMedTitle>          <Volume>96<\/Volume>          <Issue>5, Suppl. 1<\/Issue>          <Page>45<\/Page>          <Year>2005<\/Year>          <Authors>            <Author>Schwartz, G.G.<\/Author>            <Author>Olsson, A.G.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1003573\">          <Title>Pleiotropic effects of statins and related pharmacological experimental approaches<\/Title>          <SourceTitle>Methods and Findings in Experimental and Clinical Pharmacology<\/SourceTitle>          <PubMedTitle>Methods Find Exp Clin Pharmacol<\/PubMedTitle>          <Volume>28<\/Volume>          <Issue>9<\/Issue>          <Page>627<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Alegret, M.<\/Author>            <Author>Silvestre, J.S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1709919\" medline_id=\"20861717\">          <Title>Treatment of stable angina pectoris<\/Title>          <SourceTitle>American Journal of Therapeutics<\/SourceTitle>          <PubMedTitle>Am J Ther<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>5<\/Issue>          <Page>e138<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Palaniswamy, C.<\/Author>            <Author>Aronow, W.S.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"157\" modifiedDate=\"20180316103537\">      <Title>Current Angina Pipeline<\/Title>      <Body>        <para>Consult the tables below for an overview of all products mentioned in this review, including drugs, biologics and diagnostic agents that have been marketed or are under active development for this indication. Tables may also include drugs not covered in the preceding sections because their mechanism of action is unknown or not well characterized.<FREETABLE id=\"8\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>            <TR>      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Drugs marketed for the treatment of angina pectoris<\/B><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Drug name<\/B><\/TD>      <TD WIDTH=\"158\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Organization<\/B><\/TD>      <TD WIDTH=\"80\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Year of first launch<\/B><\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Vasodilators (nitrates)<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=113598&p_type=L&p_origen=BGR&p_tsearch=A\">Isosorbide dinitrate<\/a> (Sorbid)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1946<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91515&p_type=L&p_origen=BGR&p_tsearch=A\">Pentaerithrityl tetranitrate<\/a> (Peritrate)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1946<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91426&p_type=L&p_origen=BGR&p_tsearch=A\">Nitroglycerin<\/a> (Nitroderm)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanwa/Novartis<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1952<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91516&p_type=L&p_origen=BGR&p_tsearch=A\">Molsidomine<\/a> (Corvaton)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1971<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=133800&p_type=L&p_origen=BGR&p_tsearch=A\">Isosorbide 5-mononitrate<\/a> (Ismo)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Roche<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1981<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Calcium channel blockers<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=115395&p_type=L&p_origen=BGR&p_tsearch=A\">Verapamil hydrochloride<\/a> (Isoptin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Abbott<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1963<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=134801&p_type=L&p_origen=BGR&p_tsearch=A\">Diltiazem hydrochloride<\/a> (Cardizem)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Tanabe Seiyaku<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1974 <\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=133799&p_type=L&p_origen=BGR&p_tsearch=A\">Nifedipine<\/a> (Adalat)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bayer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1975<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91152&p_type=L&p_origen=BGR&p_tsearch=A\">Nicardipine hydrochloride<\/a> (Cardene)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Astellas Pharma<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1981<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90994&p_type=L&p_origen=BGR&p_tsearch=A\">Gallopamil hydrochloride<\/a> (Procorum)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1983<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90008&p_type=L&p_origen=BGR&p_tsearch=A\">Felodipine<\/a> (Plendil)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1988<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=158395&p_type=L&p_origen=BGR&p_tsearch=A\">Amlodipine besylate<\/a> (Istin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1990<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90251&p_type=L&p_origen=BGR&p_tsearch=A\">Nisoldipine<\/a> (Syscor)<\/TD>     <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bayer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1990<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90489&p_type=L&p_origen=BGR&p_tsearch=A\">Benidipine hydrochloride<\/a> (Coniel)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Kyowa Hakko<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1991<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91150&p_type=L&p_origen=BGR&p_tsearch=A\">Bepridil hydrochloride<\/a> (Vascor)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Akzo Nobel/Ortho-McNeil<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1991<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=130598&p_type=L&p_origen=BGR&p_tsearch=A\">Lacidipine<\/a> (Lacirex)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      GlaxoSmithKline<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1991<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=142671&p_type=L&p_origen=BGR&p_tsearch=A\">Barnidipine hydrochloride<\/a> (Hypoca)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Astellas Pharma<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1992<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=141583&p_type=L&p_origen=BGR&p_tsearch=A\">Efonidipine hydrochloride ethanol<\/a> (Landel)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Zeria/Nissan Chemical<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1994<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Non-cardioselective beta-adrenoceptor antagonists<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91327&p_type=L&p_origen=BGR&p_tsearch=A\">Propranolol hydrochloride<\/a> (Inderal)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1964<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=111907&p_type=L&p_origen=BGR&p_tsearch=A\">Alprenolol hydrochloride<\/a> (Aptine)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1967<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91390&p_type=L&p_origen=BGR&p_tsearch=A\">Oxprenolol hydrochloride<\/a> (Trasicor)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Novartis<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1968<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=131799&p_type=L&p_origen=BGR&p_tsearch=A\">Pindolol<\/a> (Visken)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Novartis/Shionogi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1970<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91502&p_type=L&p_origen=BGR&p_tsearch=A\">Acebutolol hydrochloride<\/a> (Sectral)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1973<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91506&p_type=L&p_origen=BGR&p_tsearch=A\">Timolol maleate<\/a> (Blocadren)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck &#38; Co. <\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1974<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91505&p_type=L&p_origen=BGR&p_tsearch=A\">Sotalol hydrochloride<\/a> (Sotalex)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1974<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91509&p_type=L&p_origen=BGR&p_tsearch=A\">Labetalol hydrochloride<\/a> (Normodyne)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      GlaxoSmithKline<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1977<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91330&p_type=L&p_origen=BGR&p_tsearch=A\">Nadolol<\/a> (Corgard)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1978<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91107&p_type=L&p_origen=BGR&p_tsearch=A\">Mepindolol sulfate<\/a> (Corindolan)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bayer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1981<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91514&p_type=L&p_origen=BGR&p_tsearch=A\">Celiprolol hydrochloride<\/a> (Celectol) <\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1982<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=125572&p_type=L&p_origen=BGR&p_tsearch=A\">Arotinolol hydrochloride<\/a> (Almarl)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sumitomo<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1985<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=279171&p_type=L&p_origen=BGR&p_tsearch=A\">Metoprolol succinate<\/a> (Toprol-XL)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1992<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90834&p_type=L&p_origen=BGR&p_tsearch=A\">Tilisolol hydrochloride<\/a> (Selecal)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Fujifilm Toyama Chemical/Nisshin Pharma<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1992<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Cardioselective beta1-adrenoceptor antagonists<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=137514&p_type=L&p_origen=BGR&p_tsearch=A\">Atenolol<\/a> (Tenormin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1975<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91304&p_type=L&p_origen=BGR&p_tsearch=A\">Metoprolol tartrate<\/a> (Lopressor)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1975<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90097&p_type=L&p_origen=BGR&p_tsearch=A\">Betaxolol hydrochloride<\/a> (Kerlone)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1983 <\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90488&p_type=L&p_origen=BGR&p_tsearch=A\">Bisoprolol fumarate<\/a> (Concor)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1986<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90701&p_type=L&p_origen=BGR&p_tsearch=A\">Carvedilol<\/a> (Coreg)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Roche<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1991<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Potassium channel activators<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=143960&p_type=L&p_origen=BGR&p_tsearch=A\">Nicorandil<\/a> (Ikorel)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Chugai<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1983<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>HMG-CoA reductase inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=180072&p_type=L&p_origen=BGR&p_tsearch=A\">Atorvastatin calcium<\/a> (Lipitor)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>I(f) inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=210860&p_type=L&p_origen=BGR&p_tsearch=A\">Ivabradine hydrochloride<\/a> (Procoralan)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Servier<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2005<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Late-stage sodium channel blockers<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=101796&p_type=L&p_origen=BGR&p_tsearch=A\">Ranolazine<\/a> (Ranexa)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Gilead<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2006<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Miscellaneous antiangina drugs<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271597&p_type=L&p_origen=BGR&p_tsearch=A\">Trimetazidine<\/a> (Vastarel)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Servier<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1978<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91520&p_type=L&p_origen=BGR&p_tsearch=A\">Amiodarone hydrochloride<\/a> (Cordarone)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sigma-Tau<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1981<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271635&p_type=L&p_origen=BGR&p_tsearch=A\">Linsidomine<\/a> (Corvasal)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1983<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=137513&p_type=L&p_origen=BGR&p_tsearch=A\">Atenolol/Nifedipine<\/a> (Tenordate)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1986<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Anticoagulants<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91527&p_type=L&p_origen=BGR&p_tsearch=A\">Warfarin sodium<\/a> (Coumadin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1950<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90088&p_type=L&p_origen=BGR&p_tsearch=A\">Dalteparin sodium<\/a> (Fragmin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1985<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=108318&p_type=L&p_origen=BGR&p_tsearch=A\">Enoxaparin sodium<\/a> (Clexane)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1987<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=113585&p_type=L&p_origen=BGR&p_tsearch=A\">Nadroparin calcium<\/a> (Fraxiparine)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1990<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=208310&p_type=L&p_origen=BGR&p_tsearch=A\">Fondaparinux sodium<\/a> (Arixtra)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      GlaxoSmithKline<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2007<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Antiplatelet drugs<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91341&p_type=L&p_origen=BGR&p_tsearch=A\">Acetylsalicylic acid<\/a> (Aspirin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bayer<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1900<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=130762&p_type=L&p_origen=BGR&p_tsearch=A\">Abciximab<\/a> (ReoPro)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Centocor/Lilly<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1995<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=190747&p_type=L&p_origen=BGR&p_tsearch=A\">Eptifibatide<\/a> (Integrilin)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Millennium/Merck & Co.<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1998<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=183737&p_type=L&p_origen=BGR&p_tsearch=A\">Tirofiban hydrochloride<\/a> (Aggrastat)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co. <\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1998<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"205\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=142672&p_type=L&p_origen=BGR&p_tsearch=A\">Clopidogrel bisulfate<\/a> (Plavix)<\/TD>      <TD WIDTH=\"158\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb/Sanofi<\/TD>      <TD WIDTH=\"80\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2002<\/TD>      <\/TR><\/TABLE>]]><\/FREETABLE>          <COMPETITIVE id=\"26\">            <TABLE>              <TR>                <TD>Drugs in development to treat angina pectoris<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=273108&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Alferminogene tadenovec<\/a>                <\/TD>                <TD>Taxus Cardium Pharmaceuticals Group<\/TD>                <TD>Angiogenesis Inducers<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=445346&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAR-407899<\/a>                <\/TD>                <TD>Sanofi<\/TD>                <TD>Rho Kinase Inhibitors/ Signal Transduction Modulators<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=477717&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">EG-013<\/a>                <\/TD>                <TD>University of Eastern Finland (UEF)<\/TD>                <TD>Angiogenesis Inducers<\/TD>                <TD>Phase I/II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=630395&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">EG-011<\/a>                <\/TD>                <TD>Trizell<\/TD>                <TD>Angiogenesis Inducers<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=421526&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CLBS-14<\/a>                <\/TD>                <TD>Caladrius Biosciences<\/TD>                <TD/>                <TD>Clinical<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=972903&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ivabradine/metoprolol<\/a>                <\/TD>                <TD>Servier<\/TD>                <TD>HCN [I(f)] Blockers/ beta1-Adrenoceptor Antagonists/ Signal Transduction Modulators<\/TD>                <TD>Clinical<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References/>    <\/Section>  <\/Section>  <Section sectionId=\"158\" modifiedDate=\"20181112082422\">    <Title>Surgery and Minimally Invasive Treatments<\/Title>    <Body>      <para>When drug therapy fails, several surgical options exist for the treatment of angina pectoris. The most common option is revascularization therapy, by either percutaneous coronary intervention (PCI, i.e., percutaneous transluminal coronary angioplasty with or without stenting), or coronary artery bypass graft (CABG) surgery (<REF id=\"2800530\">Ferrari, R. et al., 2018<\/REF>). PTCA involves the opening of clogged vessels through the use of a balloon, blade or laser inserted via a catheter into the coronary artery. CABG is a surgical procedure that involves the transplantation of a segment of a vein before and after a blockage, with the objective of redirecting blood flow around the blockage. Revascularization therapy is associated with improvements in symptom control, but does not reduce the risk of myocardial infarction or death from coronary artery disease (<REF id=\"910242\">Abrams, J., 2005<\/REF>). The relatively recent development of drug-eluting stents has significantly reduced, although not completely eliminated, the risk of restenosis, previously a major complication of stenting (<REF id=\"1284465\">Ramsdale, D.R. et al., 2008<\/REF>; <REF id=\"1284464\">Lee, M.S. et al., 2008<\/REF>). <\/para>      <para>Patients frequently report relief of angina symptoms after undergoing PCI. However, until 2017 no well-designed, randomized clinical trials had been conducted to substantiate this effect. In late 2017, investigators from the U.K. ORBITA trial reported the unexpected finding that PCI has a significant placebo effect in the setting of angina. ORBITA enrolled 230 patients at 5 U.K. centers who had severe (70% or greater) single-vessel stenoses and ischemic symptoms. After six weeks of high-dose drug therapy, patients were randomized to undergo PCI or placebo surgery (i.e., angiogram without stent). Patients were assessed by cardiopulmonary exercise testing, symptom questionnaire and dobutamine stress echocardiography before randomization and six weeks after surgery. Although the stents were shown to increase blood supply, there was no difference between the two groups in terms of the primary outcome measure: improvement in exercise time (<REF id=\"2738288\">Al-Lamee, R. et al., 2017<\/REF>). Further study is needed to discern the significance of these findings.<\/para>      <para>Transmyocardial laser revascularization (TMR) using PLC Medical Systems&apos; The Heart Laser System, a carbon dioxide heart laser, is a newer surgical procedure for CAD patients suffering from severe, stable angina that cannot be treated using other medical or surgical modalities. The procedure consists of creating channels in the left ventricular wall to promote perfusion into ischemic areas of the myocardium. It appears that this procedure allows oxygen-rich blood to flow into the heart muscle again in spite of arterial obstruction; it has also been suggested that the pain relief associated with the procedure may partially derive from the elimination of some nerves in the area of ischemic tissue. TMR was approved by the FDA some 10 years ago, during which time its safety and efficacy have become well established. TMR provides significant relief of angina pain compared to maximum medical therapy in patients with diffuse coronary disease that is not treatable using conventional revascularization techniques (<REF id=\"1284462\">Horvath, K.A., 2008<\/REF>). It has been used successfully as an adjunct to CABG (<REF id=\"1284457\">Allen, K.B., 2006<\/REF>), and more recently in combination with cell therapy using autologous bone marrow cells, promising preliminary clinical results being attained with the latter (<REF id=\"1284459\">Gowdak, L.H. et al., 2008<\/REF>). Current guidelines recommend the use of TMR as monotherapy in a subset of patients with refractory angina, and as an adjunct to CABG in patients who cannot be fully revascularized using surgical techniques (<REF id=\"1284458\">Bridges, C.R., 2006<\/REF>).<\/para>      <para>Spinal cord stimulation (SCS) was first described for the management of intractable angina pain in 1987 (<REF id=\"2750264\">Pan, X. et al., 2017<\/REF>). SCS involves the insertion of a specially designed electrode into the epidural space, such that it produces a prickling sensation in the area in which the patient generally experiences angina pain. When the patient notices an incipient attack of angina, he activates stimulation by passing a magnet over a subcutaneously implanted generator attached to the electrode (<REF id=\"655854\">Brodison, A. and Chauhan, A., 1999<\/REF>). A systematic review and meta-analysis of randomized controlled trials evaluating SCS in the treatment of patients with chronic refractory angina pectoris has concluded that there is strong evidence that the procedure can improve the functional status of these patients. Benefits included reduced angina frequency and nitroglycerin consumption, as well as increased exercise time, decreased pain scores and improvements in disease perception and treatment satisfaction. The investigators concluded that further study is needed, but that SCS is a potential alternative for the treatment of patients with refractory angina (<REF id=\"2750264\">Pan, X. et al., 2017<\/REF>). Another review and meta-analysis concurred that adjunctive therapy with SCS plus medical management may reap improvements in exercise duration, nitrate consumption and angina frequency in patients with chronic angina who are not candidates for PCI or revascularization (<REF id=\"2750263\">Imran, T.F. et al., 2017<\/REF>).<\/para>      <para>Enhanced external counterpulsation (EECP) is a noninvasive treatment for chronic stable angina pectoris that improves cardiac performance by modifying hemodynamics. The procedure involves the sequenced inflation of cuffs around the legs at the onset of diastole, preventing blood from becoming trapped in the vascular beds. EECP is performed daily, five days a week for seven weeks, resulting in reduction in angina class and improved quality of life, even in patients up to 90 years of age. Various mechanisms appear to contribute to the efficacy of EECP, including improved oxygen consumption, improved endothelial and ventricular function, promotion of collateralization, regression of atherosclerosis and peripheral training effects comparable to those achieved with exercise. Clinical response rates range from 70-80% in patients with chronic refractory angina and persist for periods of up to 3-5 years. EECP has also been shown safe in patients with comorbid heart failure (<REF id=\"1284460\">Manchanda, A. and Soran, O., 2007<\/REF>; <REF id=\"1284461\">Loh, P.H. et al., 2008<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"655854\" medline_id=\"10577633\">        <Title>Spinal-cord stimulation in management of angina<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>354<\/Volume>        <Issue>9192<\/Issue>        <Page>1748<\/Page>        <Year>1999<\/Year>        <Authors>          <Author>Brodison, A.<\/Author>          <Author>Chauhan, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"910242\" medline_id=\"15958808\">        <Title>Chronic stable angina<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>352<\/Volume>        <Issue>24<\/Issue>        <Page>2524<\/Page>        <Year>2005<\/Year>        <Authors>          <Author>Abrams, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1284457\" medline_id=\"16766255\">        <Title>Transmyocardial laser revascularization as an adjunct to coronary artery bypass grafting<\/Title>        <SourceTitle>Seminars in Thoracic and Cardiovascular Surgery<\/SourceTitle>        <PubMedTitle>Semin Thorac Cardiovasc Surg<\/PubMedTitle>        <Volume>18<\/Volume>        <Issue>1<\/Issue>        <Page>52<\/Page>        <Year>2006<\/Year>        <Authors>          <Author>Allen, K.B.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1284458\" medline_id=\"16766257\">        <Title>Guidelines for the clinical use of transmyocardial laser revascularization<\/Title>        <SourceTitle>Seminars in Thoracic and Cardiovascular Surgery<\/SourceTitle>        <PubMedTitle>Semin Thorac Cardiovasc Surg<\/PubMedTitle>        <Volume>18<\/Volume>        <Issue>1<\/Issue>        <Page>68<\/Page>        <Year>2006<\/Year>        <Authors>          <Author>Bridges, C.R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1284459\" medline_id=\"17669519\">        <Title>Transmyocardial laser revascularization plus cell therapy for refractory angina<\/Title>        <SourceTitle>International Journal of Cardiology<\/SourceTitle>        <PubMedTitle>Int J Cardiol<\/PubMedTitle>        <Volume>127<\/Volume>        <Issue>2<\/Issue>        <Page>295<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Gowdak, L.H.<\/Author>          <Author>Schettert, I.T.<\/Author>          <Author>Rochitte, C.E.<\/Author>          <Author>Rienzo, M.<\/Author>          <Author>Lisboa, L.A.<\/Author>          <Author>Dallan, L.A.<\/Author>          <Author>César, L.A.<\/Author>          <Author>Krieger, J.E.<\/Author>          <Author>Ramires, J.A.<\/Author>          <Author>de Oliveira, S.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1284460\" medline_id=\"17936150\">        <Title>Enhanced external counterpulsation and future directions: Step beyond medical management for patients with angina and heart failure<\/Title>        <SourceTitle>Journal of the American College of Cardiology<\/SourceTitle>        <PubMedTitle>J Am Coll Cardiol<\/PubMedTitle>        <Volume>50<\/Volume>        <Issue>16<\/Issue>        <Page>1523<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Manchanda, A.<\/Author>          <Author>Soran, O.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1284461\" medline_id=\"18404725\">        <Title>Enhanced external counterpulsation in the treatment of chronic refractory angina: A long-term follow-up outcome from the International Enhanced External Counterpulsation Patient Registry<\/Title>        <SourceTitle>Clinical Cardiology<\/SourceTitle>        <PubMedTitle>Clin Cardiol<\/PubMedTitle>        <Volume>31<\/Volume>        <Issue>4<\/Issue>        <Page>159<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Loh, P.H.<\/Author>          <Author>Cleland, J.G.<\/Author>          <Author>Louis, A.A.<\/Author>          <Author>Kennard, E.D.<\/Author>          <Author>Cook, J.F.<\/Author>          <Author>Caplin, J.L.<\/Author>          <Author>Barsness, G.W.<\/Author>          <Author>Lawson, W.E.<\/Author>          <Author>Soran, O.Z.<\/Author>          <Author>Michaels, A.D.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1284462\" medline_id=\"18435649\">        <Title>Transmyocardial laser revascularization<\/Title>        <SourceTitle>Journal of Cardiac Surgery<\/SourceTitle>        <PubMedTitle>J Card Surg<\/PubMedTitle>        <Volume>23<\/Volume>        <Issue>3<\/Issue>        <Page>266<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Horvath, K.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1284464\" medline_id=\"18688064\">        <Title>Clinical presentation of patients with in-stent restenosis in the drug-eluting stent era<\/Title>        <SourceTitle>Journal of Invasive Cardiology<\/SourceTitle>        <PubMedTitle>J Invasive Cardiol<\/PubMedTitle>        <Volume>20<\/Volume>        <Issue>8<\/Issue>        <Page>401<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Lee, M.S.<\/Author>          <Author>Pessegueiro, A.<\/Author>          <Author>Zimmer, R.<\/Author>          <Author>Jurewitz, D.<\/Author>          <Author>Tobis, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1284465\" medline_id=\"18829991\">        <Title>Late outcomes after drug-eluting stent implantation in &quot;real-world&quot; clinical practice<\/Title>        <SourceTitle>Journal of Invasive Cardiology<\/SourceTitle>        <PubMedTitle>J Invasive Cardiol<\/PubMedTitle>        <Volume>20<\/Volume>        <Issue>10<\/Issue>        <Page>493<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Ramsdale, D.R.<\/Author>          <Author>Rao, A.<\/Author>          <Author>Asghar, O.<\/Author>          <Author>Ramsdale, K.A.<\/Author>          <Author>McKay, E.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2738288\">        <Title>Percutaneous coronary intervention in stable angina (ORBITA): A double-blind, randomised controlled trial<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>391<\/Volume>        <Issue>10115<\/Issue>        <Page>31<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Al-Lamee, R.<\/Author>          <Author>Thompson, D.<\/Author>          <Author>Dehbi, H.-M.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2750263\" medline_id=\"27836302\">        <Title>Efficacy of spinal cord stimulation as an adjunct therapy for chronic refractory angina pectoris<\/Title>        <SourceTitle>International Journal of Cardiology<\/SourceTitle>        <PubMedTitle>Int J Cardiol<\/PubMedTitle>        <Volume>227<\/Volume>        <Page>535<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Imran, T.F.<\/Author>          <Author>Malapero, R.<\/Author>          <Author>Qavi, A.H.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2750264\" medline_id=\"27875377\">        <Title>Spinal cord stimulation for refractory angina pectoris: A systematic review and meta-analysis<\/Title>        <SourceTitle>The Clinical Journal of Pain<\/SourceTitle>        <PubMedTitle>Clin J Pain<\/PubMedTitle>        <Volume>33<\/Volume>        <Issue>6<\/Issue>        <Page>543<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Pan, X.<\/Author>          <Author>Bao, H.<\/Author>          <Author>Si, Y.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2800530\" medline_id=\"28880025\">        <Title>Expert consensus document: A &apos;diamond&apos; approach to personalized treatment of angina<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>15<\/Volume>        <Issue>2<\/Issue>        <Page>120<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Ferrari, R.<\/Author>          <Author>Camici, P.G.<\/Author>          <Author>Crea, F.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"4576\" modifiedDate=\"20160801091422\">  <Title>Targets for Therapeutic Intervention<\/Title>  <Body>    <para>For an overview of validated therapeutic targets for this indication, consult the targetscape below. The targetscape shows an overall cellular and molecular landscape or comprehensive network of connections among the current therapeutic targets for the treatment of the condition and their biological actions. An arrow indicates a positive effect; a dash indicates a negative effect. Gray or lighter symbols are protein targets that are not validated (i.e., not under active development [UAD]). Pink text boxes with red borders indicate validated gene targets. Yellow text boxes are gene targets not UAD. Purple and pink text boxes indicate extracellular and intracellular effects, respectively. Green text boxes indicate a related disease/condition/symptom. For in-depth information on a specific target or mechanism of action, see the corresponding section in this report.<\/para>  <\/Body>  <References/><\/Section><\/Sections>","DiseaseTitle":"Angina Pectoris","Id":4,"LastReviewDate":"2019-06-04T00:00:00Z","DatePublished":"2001-11-05T00:00:00Z"}}"}],"title":"I pass a &quot;id = 4&quot; as parameter to &quot;getDiseaseBriefingRecordV2&quot; operation","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;Id&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;DatePublished&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;LastReviewDate&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;DiseaseInfo&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:10","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"}],"status":"passed"}},{"testcase":{"tag":"@TestCaseId(\"getDiseaseBriefingRecordREST_001\")","time":"2019-06-14 23:59:11","title":"Verify necessary fields are present in the response","steps":[{"date":"2019-06-14 23:59:11","title":"I am authenticated user accessing &quot;REST&quot; API","status":"passed"},{"date":"2019-06-14 23:59:11","StepAttachment":[{"mime":"TXT","content":"aHR0cHM6Ly9wcm9kZXUtYXBpLmNvcnRlbGxpcy5pbnQuY2xhcml2YXRlLmNvbS9hcGktd3Mvd3MvcnMvZGlzZWFzZWJyaWVmaW5ncy12Mi9kaXNlYXNlQnJpZWZpbmcvNQ=="},{"mime":"TXT","content":""}],"title":"I pass a &quot;id = 5&quot; as parameter to &quot;getDiseaseBriefingRecordV2&quot; operation","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;Id&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;DatePublished&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;LastReviewDate&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;DiseaseInfo&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"}],"status":"passed"}},{"testcase":{"tag":"@TestCaseId(\"getDiseaseBriefingRecordREST_001\")","time":"2019-06-14 23:59:11","title":"Verify necessary fields are present in the response","steps":[{"date":"2019-06-14 23:59:11","title":"I am authenticated user accessing &quot;REST&quot; API","status":"passed"},{"date":"2019-06-14 23:59:11","StepAttachment":[{"mime":"TXT","content":"aHR0cHM6Ly9wcm9kZXUtYXBpLmNvcnRlbGxpcy5pbnQuY2xhcml2YXRlLmNvbS9hcGktd3Mvd3MvcnMvZGlzZWFzZWJyaWVmaW5ncy12Mi9kaXNlYXNlQnJpZWZpbmcvNg=="},{"mime":"TXT","content":""}],"title":"I pass a &quot;id = 6&quot; as parameter to &quot;getDiseaseBriefingRecordV2&quot; operation","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;Id&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;DatePublished&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;LastReviewDate&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;DiseaseInfo&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:11","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"}],"status":"passed"}},{"testcase":{"tag":"@TestCaseId(\"getDiseaseBriefingRecordREST_001\")","time":"2019-06-14 23:59:12","title":"Verify necessary fields are present in the response","steps":[{"date":"2019-06-14 23:59:12","title":"I am authenticated user accessing &quot;REST&quot; API","status":"passed"},{"date":"2019-06-14 23:59:12","StepAttachment":[{"mime":"TXT","content":"aHR0cHM6Ly9wcm9kZXUtYXBpLmNvcnRlbGxpcy5pbnQuY2xhcml2YXRlLmNvbS9hcGktd3Mvd3MvcnMvZGlzZWFzZWJyaWVmaW5ncy12Mi9kaXNlYXNlQnJpZWZpbmcvOA=="},{"mime":"TXT","content":"{"diseaseBriefingRecordOutput":{"DiseaseInfo":"<Sections><Section sectionId=\"589\" modifiedDate=\"20180416125851\">  <Title>Facts about Arterial Hypertension<\/Title>  <Body>    <para>Arterial hypertension, commonly referred to as high blood pressure, is an extremely common and highly preventable chronic condition in which blood pressure (BP) in the arteries is higher than normal. If not properly controlled, it represents a significant risk factor for several serious cardiovascular and renal conditions (<REF id=\"2121551\">James, P.A. et al., 2014<\/REF>; <REF id=\"2312463\">Rapsomaniki, E. et al., 2014<\/REF>). Due to its high prevalence--affecting 24% of men and 20% of women worldwide in 2015 (<REF id=\"2566298\">Zhou, B. et al., 2016<\/REF>)--as well as its role as an important albeit modifiable risk factor for deadly diseases such as stroke, heart disease and kidney failure, hypertension is considered an increasingly important public health challenge (<REF id=\"2815136\">Oparil, S. et al., 2018<\/REF>). In fact, data from the Global Burden of Disease 2016 study shows that high blood pressure was the second leading risk factor for men and the leading risk factor for women worldwide in 2016 (<REF id=\"2715069\">Abajobir, A.A. et al., 2017<\/REF>).<\/para>    <para>Hypertension may be a primary disease, called essential hypertension or idiopathic hypertension, or it may be caused by other diseases, in which case it is classified as secondary hypertension. Essential hypertension accounts for 90-95% of all cases of hypertension in adults, while the remaining 5-10% have secondary causes (<REF id=\"1876628\">Viera, A.J. and Neutze, D.M., 2010<\/REF>).<\/para>    <para>Isolated systolic hypertension (ISH), a form of hypertension in which systolic pressure is abnormally high but diastolic pressure is not, is a frequent and significant problem in the elderly (<REF id=\"2305457\">Mancia, G. and Giannattasio, C., 2015<\/REF>; <REF id=\"2345978\">Park, J.B. et al., 2015<\/REF>) but is also increasing in prevalence among younger and middle-aged adults (<REF id=\"2305459\">Yano, Y. et al., 2015<\/REF>). ISH places patients at risk of <BACKGROUNDER id=\"134\">Myocardial Infarction<\/BACKGROUNDER>, <BACKGROUNDER id=\"36\">Heart Failure<\/BACKGROUNDER>, ischemic and hemorrhagic <BACKGROUNDER id=\"58\">Stroke<\/BACKGROUNDER> and death, and is not effectively treatable with existing antihypertensive drugs (<REF id=\"2305457\">Mancia, G. and Giannattasio, C., 2015<\/REF>). <\/para>  <\/Body>  <References>    <Reference id=\"1876628\" medline_id=\"21166367\">      <Title>Diagnosis of secondary hypertension: An age-based approach<\/Title>      <SourceTitle>American Family Physician (1970)<\/SourceTitle>      <PubMedTitle>Am Fam Physician<\/PubMedTitle>      <Volume>82<\/Volume>      <Issue>12<\/Issue>      <Page>1471<\/Page>      <Year>2010<\/Year>      <Authors>        <Author>Viera, A.J.<\/Author>        <Author>Neutze, D.M.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2121551\" medline_id=\"24352797\">      <Title>2014 evidence-based guideline for the management of high blood pressure in adults: Report from the panel members appointed to the Eighth Joint National Committee (JNC 8)<\/Title>      <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>      <PubMedTitle>JAMA<\/PubMedTitle>      <Volume>311<\/Volume>      <Issue>5<\/Issue>      <Page>507<\/Page>      <Year>2014<\/Year>      <Authors>        <Author>James, P.A.<\/Author>        <Author>Oparil, S.<\/Author>        <Author>Carter, B.L.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2305457\" medline_id=\"25426565\">      <Title>Diagnostic and therapeutic problems of isolated systolic hypertension<\/Title>      <SourceTitle>Journal of Hypertension<\/SourceTitle>      <PubMedTitle>J Hypertens<\/PubMedTitle>      <Volume>33<\/Volume>      <Issue>1<\/Issue>      <Page>33<\/Page>      <Year>2015<\/Year>      <Authors>        <Author>Mancia, G.<\/Author>        <Author>Giannattasio, C.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2305459\" medline_id=\"25634830\">      <Title>Isolated systolic hypertension in young and middle-aged adults and 31-year risk for cardiovascular mortality: The Chicago heart association detection project in industry study<\/Title>      <SourceTitle>Journal of the American College of Cardiology<\/SourceTitle>      <PubMedTitle>J Am Coll Cardiol<\/PubMedTitle>      <Volume>65<\/Volume>      <Issue>4<\/Issue>      <Page>327<\/Page>      <Year>2015<\/Year>      <Authors>        <Author>Yano, Y.<\/Author>        <Author>Stamler, J.<\/Author>        <Author>Garside, D.B.<\/Author>        <Author>Daviglus, M.L.<\/Author>        <Author>Franklin, S.S.<\/Author>        <Author>Carnethon, M.R.<\/Author>        <Author>Liu, K.<\/Author>        <Author>Greenland, P.<\/Author>        <Author>Lloyd-Jones, D.M.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2312463\" medline_id=\"24881994\">      <Title>Blood pressure and incidence of twelve cardiovascular diseases: Lifetime risks, healthy life-years lost, and age-specific associations in 1·25 million people<\/Title>      <SourceTitle>The Lancet<\/SourceTitle>      <PubMedTitle>Lancet<\/PubMedTitle>      <Volume>383<\/Volume>      <Issue>9932<\/Issue>      <Page>1899<\/Page>      <Year>2014<\/Year>      <Authors>        <Author>Rapsomaniki, E.<\/Author>        <Author>Timmis, A.<\/Author>        <Author>George, J.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2345978\" medline_id=\"25503845\">      <Title>Systolic hypertension: An increasing clinical challenge in Asia<\/Title>      <SourceTitle>Hypertension Research, Clinical and Experimental<\/SourceTitle>      <PubMedTitle>Hypertens Res<\/PubMedTitle>      <Volume>38<\/Volume>      <Issue>4<\/Issue>      <Page>227<\/Page>      <Year>2015<\/Year>      <Authors>        <Author>Park, J.B.<\/Author>        <Author>Kario, K.<\/Author>        <Author>Wang, J.G.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2566298\" medline_id=\"27863813\">      <Title>Worldwide trends in blood pressure from 1975 to 2015: A pooled analysis of 1479 population-based measurement studies with 19·1 million participants<\/Title>      <SourceTitle>The Lancet<\/SourceTitle>      <PubMedTitle>Lancet<\/PubMedTitle>      <Volume>389<\/Volume>      <Issue>10064<\/Issue>      <Page>37<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Zhou, B.<\/Author>        <Author>Bentham, J.<\/Author>        <Author>Di Cesare, M.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2715069\" medline_id=\"28919119\">      <Title>Global, regional, and national comparative risk assessment of 84 behavioural, environmental and occupational, and metabolic risks or clusters of risks, 1990-2016: A systematic analysis for the Global Burden of Disease study 2016<\/Title>      <SourceTitle>The Lancet<\/SourceTitle>      <PubMedTitle>Lancet<\/PubMedTitle>      <Volume>390<\/Volume>      <Issue>10100<\/Issue>      <Page>1345<\/Page>      <Year>2017<\/Year>      <Authors>        <Author>Abajobir, A.A.<\/Author>        <Author>Abate, K.H.<\/Author>        <Author>Abbafati, C.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2815136\" medline_id=\"29565029\">      <Title>Hypertension<\/Title>      <SourceTitle>Nature Reviews. Disease Primers<\/SourceTitle>      <PubMedTitle>Nat Rev Dis Primers<\/PubMedTitle>      <Volume>4<\/Volume>      <Page>18014<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Oparil, S.<\/Author>        <Author>Acelajado, M.C.<\/Author>        <Author>Bakris, G.L.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"596\" modifiedDate=\"20171122085955\">    <Title>Pathophysiology<\/Title>    <Body>      <para>When the heart beats it produces a pressure wave in the arteries. The peak of this wave is called systolic pressure, while the lowest point between heartbeats is called diastolic pressure. Both systolic and diastolic measures are important in determining hypertension. Blood pressure is measured in units of millimeters of mercury (mmHg). Hypertension is defined by the World Health Organization (WHO) as a consistent systolic pressure of 140 or higher and diastolic pressure of 90 or higher (<a href=\"http://apps.who.int/iris/bitstream/10665/79059/1/WHO_DCO_WHD_2013.2_eng.pdf\">A global brief on hypertension: Silent killer, global public health crisis (World Health Organization, 2013)<\/a>). The Eighth Joint National Committee (JNC 8) specifies a higher cutoff point for systolic blood pressure (150 mmHg) in patients aged 60 years and older (<a href=\"http://jamanetwork.com/journals/jama/fullarticle/1791497\">2014 Evidence-based guideline for the management of high blood pressure in adults: Report from the panel members appointed to the Eighth Joint National Committee (JNC 8)<\/a>); in contrast, the American Heart Association and American College of Cardiology recently lowered the bar for hypertension to 130/80 mmHg (<a href=\"http://www.onlinejacc.org/content/accj/early/2017/11/04/j.jacc.2017.11.006.full.pdf\">2017 ACC/AHA/AAPA/ABC/ACPM/AGS/APhA/ASH/ASPC/NMA/PCNA Guideline for the prevention, detection, evaluation, and management of high blood pressure in adults (American College of Cardology/American Heart Association, November 2017)<\/a>).<\/para>      <para>Abnormally high blood pressure causes the heart to work harder than normal and leaves the heart and arteries more vulnerable to injury. If the condition is not treated and the heart is forced to work harder and harder for a prolonged period of time, it becomes enlarged and weakens. The arteries and arterioles become scarred, hardened and less elastic, a process called arteriosclerosis. The hardened and narrowed arteries are unable to supply an adequate amount of blood to the body&apos;s organs and tissues, meaning that they cannot function properly. Blood clots also become more easily lodged in the narrowed arteries, depriving a part of the body of its blood supply altogether.<\/para>    <\/Body>    <References/>  <\/Section>  <Section sectionId=\"597\" modifiedDate=\"20171122084604\">    <Title>Risk Factors<\/Title>    <Body>      <para>Among the many risk factors identified for arterial hypertension, the following are especially important:<UL>&lt;LI&gt;Age&lt;LI&gt;Family history of hypertension&lt;LI&gt;Race (risk is higher among people of black African descent than Caucasians)&lt;LI&gt;Gender (risk is higher among males until age 55, and is highest among women over age 75)&lt;LI&gt;<BACKGROUNDER id=\"47\">Obesity<\/BACKGROUNDER> and overweight&lt;LI&gt;Impaired glucose tolerance or <BACKGROUNDER id=\"23\">Diabetes<\/BACKGROUNDER>&lt;LI&gt;Current cigarette smoking or exposure to secondhand smoke (see <BACKGROUNDER id=\"99\">Nicotine Addiction<\/BACKGROUNDER>)&lt;LI&gt;Excessive alcohol consumption (see <BACKGROUNDER id=\"131\">Alcoholism<\/BACKGROUNDER>)&lt;LI&gt;Oral contraceptives and some other medications&lt;LI&gt;Sedentary or inactive lifestyle&lt;LI&gt;Salt sensitivity&lt;LI&gt;High sodium intake&lt;LI&gt;Low potassium intake&lt;LI&gt;<BACKGROUNDER id=\"173\">Chronic Kidney Disease<\/BACKGROUNDER>&lt;LI&gt;Untreated obstructive <BACKGROUNDER id=\"96\">Sleep Apnea<\/BACKGROUNDER> &lt;LI&gt;Psychosocial stress<\/UL>      <\/para>      <para>Increased age is one of the most important risk factors for hypertension (<REF id=\"1875548\">Pimenta, E. and Oparil, S., 2011<\/REF>). The prevalence of high blood pressure increases linearly with age, from an average of &lt;10% for younger adults (30-59 years) to &gt;65% among the elderly (60 years and older). The effect of age on blood pressure derives from a complex and cumulative interplay of genetic and environmental factors (<REF id=\"1877431\">Mohanlal, V. et al., 2012<\/REF>).<\/para>      <para>Obesity is another important risk factor for hypertension, as well as for progression from prehypertension to hypertension. Arterial pressure increases under conditions of weight gain, and adiposity is estimated to contribute to approximately 60-70% of hypertension in adults. Several mechanisms have been linked to obesity-related hypertension, including insulin resistance, sodium retention, altered vascular function and abnormal activity of the sympathetic nervous system (<REF id=\"1569589\">Kotchen, T.A., 2010<\/REF>; <REF id=\"1876559\">Guo, X. et al., 2011<\/REF>). Obesity is an important risk factor for isolated systolic hypertension, particularly in subjects of Asian ethnicity (<REF id=\"2345978\">Park, J.B. et al., 2015<\/REF>; <REF id=\"2322950\">Niu, J. and Seo, D.C., 2014<\/REF>).<\/para>      <para>Diabetes, especially uncontrolled diabetes, is an important risk factor for hypertension (<REF id=\"1876560\">Gee, M.E. et al., 2012<\/REF>) as well as resistant hypertension (<REF id=\"1794369\">Daugherty, S.L. et al., 2012<\/REF>). Common pathways contributing to diabetes and hypertension include insulin resistance, obesity, inflammation and oxidative stress (<REF id=\"1876561\">Cheung, B.M. and Li, C., 2012<\/REF>).<\/para>      <para>Smoking is a known risk factor for a variety of human diseases and conditions, although its role in hypertension is controversial. A study of Chinese men living in Inner Mongolia failed to confirm an association between current smoking and high blood pressure, and paradoxically detected an increased risk of hypertension upon smoking cessation (<REF id=\"2727179\">Li, G. et al., 2017<\/REF>). On the other hand, a study conducted by German researchers in 4,236 preschool children demonstrated that secondhand exposure to tobacco smoke through parental smoking increases the risk of children developing high blood pressure. Other risk factors for high blood pressure identified in this study included elevated body mass index, preterm birth or low birth weight and parental hypertension; in children with any of these risk factors, exposure to parental smoking had an additive detrimental effect (<REF id=\"1875546\">Simonetti, G.D. et al., 2011<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"1569589\" medline_id=\"20706196\">        <Title>Obesity-related hypertension: Epidemiology, pathophysiology, and clinical management<\/Title>        <SourceTitle>American Journal of Hypertension<\/SourceTitle>        <PubMedTitle>Am J Hypertens<\/PubMedTitle>        <Volume>23<\/Volume>        <Issue>11<\/Issue>        <Page>1170<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Kotchen, T.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1794369\" medline_id=\"22379110\">        <Title>Incidence and prognosis of resistant hypertension in hypertensive patients<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>125<\/Volume>        <Issue>13<\/Issue>        <Page>1635<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Daugherty, S.L.<\/Author>          <Author>Powers, J.D.<\/Author>          <Author>Magid, D.J.<\/Author>          <Author>Tavel, H.M.<\/Author>          <Author>Masoudi, F.A.<\/Author>          <Author>Margolis, K.L.<\/Author>          <Author>O&apos;Connor, P.J.<\/Author>          <Author>Selby, J.V.<\/Author>          <Author>Ho, P.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1875546\" medline_id=\"21220729\">        <Title>Determinants of blood pressure in preschool children: The role of parental smoking<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>123<\/Volume>        <Issue>3<\/Issue>        <Page>292<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Simonetti, G.D.<\/Author>          <Author>Schwertz, R.<\/Author>          <Author>Klett, M.<\/Author>          <Author>Hoffmann, G.F.<\/Author>          <Author>Schaefer, F.<\/Author>          <Author>Wühl, E.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1875548\" medline_id=\"22411292\">        <Title>Management of hypertension in the elderly<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>9<\/Volume>        <Issue>5<\/Issue>        <Page>286<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Pimenta, E.<\/Author>          <Author>Oparil, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876559\" medline_id=\"22199424\">        <Title>Prehypertension: A meta-analysis of the epidemiology, risk factors, and predictors of progression<\/Title>        <SourceTitle>Texas Heart Institute Journal<\/SourceTitle>        <PubMedTitle>Tex Heart Inst J<\/PubMedTitle>        <Volume>38<\/Volume>        <Issue>6<\/Issue>        <Page>643<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Guo, X.<\/Author>          <Author>Zou, L.<\/Author>          <Author>Zhang, X.<\/Author>          <Author>Li, J.<\/Author>          <Author>Zheng, L.<\/Author>          <Author>Sun, Z.<\/Author>          <Author>Hu, J.<\/Author>          <Author>Wong, N.D.<\/Author>          <Author>Sun, Y.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876560\" medline_id=\"22281410\">        <Title>Prevalence, awareness, treatment, and control of hypertension among Canadian adults with diabetes, 2007 to 2009<\/Title>        <SourceTitle>Canadian Journal of Cardiology<\/SourceTitle>        <PubMedTitle>Can J Cardiol<\/PubMedTitle>        <Volume>28<\/Volume>        <Issue>3<\/Issue>        <Page>367<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Gee, M.E.<\/Author>          <Author>Janssen, I.<\/Author>          <Author>Pickett, W.<\/Author>          <Author>McAlister, F.A.<\/Author>          <Author>Bancej, C.M.<\/Author>          <Author>Joffres, M.<\/Author>          <Author>Johansen, H.<\/Author>          <Author>Campbell, N.R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876561\" medline_id=\"22281657\">        <Title>Diabetes and hypertension: Is there a common metabolic pathway?<\/Title>        <SourceTitle>Current Atherosclerosis Reports<\/SourceTitle>        <PubMedTitle>Curr Atheroscler Rep<\/PubMedTitle>        <Volume>14<\/Volume>        <Issue>2<\/Issue>        <Page>160<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Cheung, B.M.<\/Author>          <Author>Li, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1877431\" medline_id=\"22585275\">        <Title>Role of dietary therapies in the prevention and treatment of hypertension<\/Title>        <SourceTitle>Nature Reviews. Nephrology<\/SourceTitle>        <PubMedTitle>Nat Rev Nephrol<\/PubMedTitle>        <Volume>8<\/Volume>        <Issue>7<\/Issue>        <Page>413<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Mohanlal, V.<\/Author>          <Author>Parsa, A.<\/Author>          <Author>Weir, M.R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2322950\" medline_id=\"24552844\">        <Title>Central obesity and hypertension in Chinese adults: A 12-year longitudinal examination<\/Title>        <SourceTitle>Preventive Medicine<\/SourceTitle>        <PubMedTitle>Prev Med<\/PubMedTitle>        <Volume>62<\/Volume>        <Page>113<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Niu, J.<\/Author>          <Author>Seo, D.C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2345978\" medline_id=\"25503845\">        <Title>Systolic hypertension: An increasing clinical challenge in Asia<\/Title>        <SourceTitle>Hypertension Research, Clinical and Experimental<\/SourceTitle>        <PubMedTitle>Hypertens Res<\/PubMedTitle>        <Volume>38<\/Volume>        <Issue>4<\/Issue>        <Page>227<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Park, J.B.<\/Author>          <Author>Kario, K.<\/Author>          <Author>Wang, J.G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2727179\" medline_id=\"29017534\">        <Title>The association between smoking and blood pressure in men: A cross-sectional study<\/Title>        <SourceTitle>BMC Public Health (Online)<\/SourceTitle>        <PubMedTitle>BMC Public Health<\/PubMedTitle>        <Volume>17<\/Volume>        <Issue>1<\/Issue>        <Page>797<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Li, G.<\/Author>          <Author>Wang, H.<\/Author>          <Author>Wang, K.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>    <Section sectionId=\"598\" modifiedDate=\"20120823090714\">      <Title>Genetics<\/Title>      <Body>        <para>Available evidence suggests that genes account for between one-third and one-half of the interindividual variability in blood pressure values, although each individual gene studied to date has been found to have only a relatively minor impact, leading to the current theory that hypertension is a complex disorder involving the interplay of multiple genetic and environmental factors (<REF id=\"1876635\">Armani, C. et al., 2011<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"1876635\" medline_id=\"21861838\">          <Title>Susceptibility genes in hypertension<\/Title>          <SourceTitle>Current Pharmaceutical Design<\/SourceTitle>          <PubMedTitle>Curr Pharm Des<\/PubMedTitle>          <Volume>17<\/Volume>          <Issue>28<\/Issue>          <Page>2973<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Armani, C.<\/Author>            <Author>Botto, N.<\/Author>            <Author>Andreassi, M.G.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>  <\/Section>  <Section sectionId=\"599\" modifiedDate=\"20181115031416\">    <Title>Epidemiology<\/Title>    <Body>      <para>Hypertension is the most common cardiovascular condition in the world, affecting nearly 40% of the world&apos;s population (<a href=\"http://whqlibdoc.who.int/publications/2011/9789240686458_eng.pdf\">Global status report on noncommunicable diseases 2010 (World Health Organization, April 2011)<\/a>). In 2008, an estimated 978 million adults worldwide had uncontrolled hypertension. In the U.S., 103.3 million adults meet the ACC/AHA diagnostic criteria for hypertension (<REF id=\"2786330\">Benjamin, E.J. et al., 2018<\/REF>). A pooled analysis of 1,479 studies conducted from 1975-2015 and involving more than 19 million participants indicates that in 2015, the global age-standardized prevalence of high blood pressure was 24.1% in men and 20.1% of women. The absolute number of adults worldwide with elevated blood pressure increased from 594 million in 1975 to 1.13 billion in 2015. The greatest increases were observed in low- and middle-income countries (<REF id=\"2566298\">Zhou, B. et al., 2016<\/REF>).<\/para>      <para>Hypertension awareness and control are also considered in epidemiology. In the Prospective Urban Rural Epidemiology (PURE) study, a cross-sectional study of nearly 154,000 adults from three high-income, ten middle-income and four low-income countries, the overall prevalence of hypertension was 40.8%; of those individuals, 46.5% were aware of their diagnosis. Of those with hypertension awareness, 87.5% were receiving treatment, and 32.5% of those treated were controlled (<REF id=\"2047341\">Chow, C.K. et al., 2013<\/REF>). Based on data from NHANES survey (2015-2016), the overall prevalence of hypertension among U.S. adults during the period was 29% (30.2% in men and 27.7% in women), albeit less than half (48.3%) of those had controlled disease. Higher rates of uncontrolled hypertension were reported in men, non-Hispanic blacks and younger patients (<a href=\"http://www.cdc.gov/nchs/data/databriefs/db289.pdf\">Hypertension prevalence and control among adults: United States, 2015-2016. NCHS Data Brief No. 289 (Centers for Disease Control and Prevention, October 2017)<\/a>). Hypertension control is also a challenge for the elderly. CDC reported in September 2016 that approximately 70% of Americans aged 65 and older have high blood pressure, and that almost half of those do not have their illness under control (<a href=\"http://www.cdc.gov/vitalsigns/blood-pressure/index.html\">Vital signs: Blood pressure control (Centers for Disease Control and Prevention)<\/a>, consulted October 20, 2017). Among Medicare recipients, nonadherence to antihypertensive drug therapy is the principle cause of poor control. More than 26% of Medicare Part D beneficiaries reported treatment nonadherence in 2014 (<REF id=\"2545186\">Ritchey, M. et al., 2016<\/REF>). Resistant hypertension is another important consideration in epidemiology. Estimates of the prevalence in the U.S. of true treatment-resistant hypertension--i.e., hypertension that persists in spite of treatment with antihypertensive drugs from three or more drug classes, or that is controlled only through the use of four or more agents including a diuretic--range from 2% (<REF id=\"1794369\">Daugherty, S.L. et al., 2012<\/REF>) to 12.8% (<REF id=\"1944030\">Persell, S.D., 2011<\/REF>). Risk factors for resistant hypertension include older age, obesity, male gender, and African American or non-black Hispanic race. Given the increasing prevalence of obesity and the aging of the U.S. population, the prevalence of resistant hypertension is expected to increase in coming years (<REF id=\"1944032\">Roberie, D.R. and Elliott, W.J., 2012<\/REF>).<\/para>      <para>Based on an analysis of Canadian health administration databases, the age-standardized prevalence of diagnosed hypertension in that country increased from 12.5% in 1998-1999 to 19.6% in 2007-2008. Incidence decreased during the same period, from 2.7 to 2.4 per 100 per year. Approximately 6 million Canadians had elevated blood pressure in 2007-2008, equivalent to 23% of the country&apos;s population (<REF id=\"1876571\">Robitaille, C. et al., 2012<\/REF>).<\/para>      <para>Widely varying epidemology has beehn reported in Europe. In the 2011 Health Survey for England, 32% of men and 28% of women were hypertensive, nearly the same rates reported in 1994. However, only 13% of hypertensive adults were untread in 2011, vs. 21% in 1994 (<REF id=\"2298869\">Falaschetti, E. et al., 2014<\/REF>). A prevalence of 34% was reported in the Canton of Geneva, Switzerland, and remained constant over the decade from 1999 to 2009 (<REF id=\"1946577\">Guessous, I. et al., 2012<\/REF>). The prevalence of hypertension in Latvian adults was shown to be nearly 45%, including 53% of men and 40% of women, in a population-based cross-sectional study (<REF id=\"1944035\">Erglis, A. et al., 2012<\/REF>). Among urban dwellers in Lithuania, 58.7% of men and 51% of women have high blood pressure and/or are on antihypertensive medications (<REF id=\"1944036\">Reklaitiene, R. et al., 2012<\/REF>). Among the adult population of Madrid, Spain, the prevalence of hypertension is nearly 30%, with low levels of awareness, treatment and control (<REF id=\"1876648\">Ortiz Marrón, H. et al., 2011<\/REF>). In Portugal, a country with one of the highest median blood pressure levels in Europe, the overall incidence rate in the urban population of Porto has been determined to be 47.3% per 1,000 person-years (<REF id=\"1946575\">Pereira, M. et al., 2012<\/REF>). In contrast, a much lower prevalence of 20% was reported in a study of rural populations in Sweden (<REF id=\"1879339\">Lindblad, U. et al., 2012<\/REF>).<\/para>      <para>In a multinational study of noncommunicable diseases in major cities in China, Japan and Korea, the prevalence of hypertension in these three countries was 24.5%, 15.2% and 17.6%, respectively (<REF id=\"2727174\">Ma, D. et al., 2017<\/REF>). In China, where rapid economic development has led to equally rapid changes in diet and lifestyle, the condition is now the leading preventable risk factor for death in adults (<REF id=\"1432077\">He, J. et al., 2005<\/REF>). According to a review of and meta-analysis of published studied conducted at the provincial level between 2003-2012, the prevalence of hypertension in mainland China was 26.7% in adults over 20 years (28.9% in men and 24.5% in women), equivalent to 265 million individuals, although fewer than half of those (44.6%) were aware of their condition and even fewer (35.2%) were taking antihypertensive medication. Just 11.2% of hypertensive adults in China had achieved good blood pressure control (<REF id=\"2345300\">Li, D. et al., 2015<\/REF>). In rural areas of northern China, the prevalence of hypertension increased by 30% between 1991 and 2011, from 39.9% to 51.7% (<REF id=\"2130444\">Wang, J. et al., 2014<\/REF>). Data from the China Health and Nutrition Survey show that the incidence of hypertension increased from 2.9 per 1,000 person-years in 1991-1997 to 5.3 in 2004-2009. Only 7.6% of those with incident hypertension in 2009 reported controlled disease (<REF id=\"2318995\">Liang, Y. et al., 2014<\/REF>). In 2010, the prevalence of hypertension in China had increased to 335.8 million adults (33.6% overall; 35.3% in men and 32.0% in women) (<REF id=\"2534036\">Bundy, J.D. and He, J., 2016<\/REF>), and the trend shows no sign of abating. In the population-based PEACE epidemiology study, which enrolled 1.7 million community-dwelling adults aged 35-75 years from all 31 provinces in mainland China, the prevalence of arterial hypertension was 44.7% (2014-2017). Of those, fewer than one third were being treated, and fewer than one in twelve had their blood pressure controlled (<REF id=\"2732218\">Lu, J. et al., 2017<\/REF>). According to findings of the Korean National Health and Nutrition Examination Survey (KNHANES 2010), approximately 7.5 million adults aged 30 and older in that country have hypertension, equivalent to nearly 29% of the adult population (<REF id=\"2112124\">Hong, K.S. et al., 2013<\/REF>). The prevalence of hypertension in India, based on a systematic review and meta-analysis of published studies, is estimated to be 33% and 25% in urban and rural dwellers, respectively. Of those with hypertension, just 42% of urban and 25% of rural dwellers were aware of their status (<REF id=\"2215868\">Anchala, R. et al., 2014<\/REF>). In the POSEIDON study, the point prevalence of hypertension among more than 200,000 Indians seeking medical care on a single day was 14.5% (<REF id=\"2416204\">Salvi, S. et al., 2015<\/REF>). The prevalence of hypertension in Thailand is reported to be approximately 21% (<REF id=\"1944033\">Aekplakorn, W. et al., 2012<\/REF>). Awareness is a special challenge in Asia, where studies indicate that 50-80% of patients with hypertension are unaware of their condition (<REF id=\"2345978\">Park, J.B. et al., 2015<\/REF>).<\/para>      <para>Traditionally a problem associated with a western lifestyle, hypertension is also a growing problem in low- and middle-income countries (LMIC), where the incidence is increasing rapidly (<REF id=\"2178516\">Lloyd-Sherlock, P. et al., 2014<\/REF>; <REF id=\"2728688\">Irazola, V.E. et al., 2016<\/REF>). As of 2012, approximately 639 million people with hypertension resided in developing countries, defined by the World Bank as countries with a per-capita income of USD 12,195 or less. By 2050, approximately three-quarters of the world&apos;s hypertensive population was expected to live in developing countries (<REF id=\"1944094\">Ibrahim, M.M. and Damasceno, A., 2012<\/REF>). In the semi-urban population of Mangalore, India, the prevalence of hypertension and prehypertension in the community was 41% and 40%, respectively. More than half of hypertensive individuals were unaware of their status (<REF id=\"2449808\">Adhikari, P. et al., 2015<\/REF>). On the African continent, the prevalence of hypertension in adults may be nearing 35-45% (<REF id=\"2659813\">Keates, A.K. et al., 2017<\/REF>). Hypertension prevalence in sub-Saharan Africa increased from 80 million in 2000 to a projected 150 million by 2025 (<REF id=\"2157807\">van de Vijver, S. et al., 2013<\/REF>). In Nigeria, the overall prevalence of hypertension is estimated at 28.9%, including 29.5% in men and 25.0% in women (<REF id=\"2304336\">Adeloye, D. et al., 2015<\/REF>). The overall prevalence of hypertension in Ethiopia is estimated at approximately 19%, including 22% of men and 15% of women. Awareness in this population is low (<REF id=\"1944056\">Nshisso, L.D. et al., 2012<\/REF>). In the sub-Saharan African country of Malawi, a very poor and predominantly rural country, the prevalence of hypertension (2013-2016) was found to be 16% and 14% among urban men and women, respectively, and was 13% and 14% among rural men and women. Among those with hypertension, 58% were undiagnosed, and among those on medication, only 37% had their disease controlled (<REF id=\"2777652\">Price, A.J. et al., 2018<\/REF>). In an NHLBI-sponsored epidemiology study conducted in urban and rural communities in LMIC in Africa, Asia and South America, the prevalence of hypertension in adults (35-74 years) ranged from 19.2% in Peru to 54.9% in South Africa (<REF id=\"2728688\">Irazola, V.E. et al., 2016<\/REF>).<\/para>      <para>Isolated systolic hypertension (ISH) is the most common form of hypertension, affecting 29.4% and 36.3% of untreated and treated older (&gt;=60 years) U.S. adults, respectively. If JNC8 diagnostic criteria are applied (see <I>Diagnosis<\/I>), however, this rate decreases to 16.3% and 20.5%, respectively (<REF id=\"2178504\">Shimbo, D. et al., 2014<\/REF>). Like other forms of arterial hypertension, the prevalence of ISH is increasing in low- and middle-income countries. According to a study funded by WHO and the Bill and Melinda Gates Foundation, mean systolic blood pressure (SBP) increased in men and women living in Oceania, east Africa and south and southeast Asia between 1980 and 2008; over the same period, mean SBP decreased in men and women living in high-income nations (<REF id=\"1611216\">Danaei, G. et al., 2011<\/REF>). The prevalence of ISH throughout all of Asia ranges from 3.9-12.5% and shows an age-dependent pattern of distribution (<REF id=\"2345978\">Park, J.B. et al., 2015<\/REF>).<\/para>      <para>Prehypertension is also prevalent in the countries in which it has been studied, ranging from approximately 23% in Korea to approximately 45% in India. Worldwide, the prevalence of prehypertension is reported to be approximately 31%, and approximately two-thirds of those have at least one other cardiovascular risk factor (obesity, diabetes or dyslipidemia) (<REF id=\"1876636\">Zhang, W. and Li, N., 2011<\/REF>; <REF id=\"1876559\">Guo, X. et al., 2011<\/REF>). According to AHA, 28.2% of U.S. adults had prehypertension in 2011-2012 (<REF id=\"2786330\">Benjamin, E.J. et al., 2018<\/REF>). In a meta-analysis of 26 published studies involving 250,741 individuals in 13 countries, the overall pooled prevalence of prehypertension was 36%, being higher among men (40%) than women (33%) (<REF id=\"1876559\">Guo, X. et al., 2011<\/REF>). Among urban-dwelling adults in China, the prevalence of prehypertension is 40.5%, again being more common in men (47.7%) than women (33.6%) (<REF id=\"1946569\">Meng, X.J. et al., 2012<\/REF>).<\/para>      <para>The prevalence of high blood pressure in children and adolescents has increased significantly over a short time period, partly because of an increased prevalence of obesity and overweight. According to the American Heart Association, 11% of U.S. children and adolescents (8-17 years) had either high blood pressure or borderline high blood pressure in 2011-2012 (<REF id=\"2786330\">Benjamin, E.J. et al., 2018<\/REF>). In spite of this high rate of prevalence, hypertension is frequently underdiagnosed in the pediatric population. A cohort study of more than 14,000 patients aged 3-18 years revealed that while 507 (3.6%) were determined to have high blood pressure, this had been documented in the medical records of only 26% of the hypertensive subgroup. Underdiagnosis increased with decreasing age and height; diagnosis of hypertension was made more often in those children with other obesity-related diagnoses or with greater magnitude and frequency of abnormal BP readings (<REF id=\"1185935\">Hansen, M.L. et al., 2007<\/REF>). Although normal blood pressure ranges have not yet been established for the pediatric population, investigators at Thomas Jefferson University in the U.S. observe that 3% or more of asymptomatic children and adolescents have hypertension, while another 3% of more have prehypertension (<REF id=\"1515789\">Falkner, B., 2010<\/REF>). Furthermore, primary hypertension --once thought to be rare in children-- is now five times more common than secondary hypertension in this population (<REF id=\"1876674\">Stephens, M.M. et al., 2012<\/REF>). The condition is becoming more prevalent among children in other countries as well. Among children and adolescents (7-17 years) in Shandong, China, the prevalence of relatively high BP increased from 19.3% in boys and 14.7% in girls in 2000 to 26% in boys and 20% in girls in 2010. This was paralleled by an increase in the prevalence of overweight and obesity (<REF id=\"1946572\">Zhang, Y.X. et al., 2012<\/REF>). <\/para>      <para>For more epidemiology information, consult the Incidence and Prevalence Database (IPD): <a href=\"http://www.tdrdata.com/ipd/IPD_SearchIPDByKeyword_Excel.aspx?keyword=hypertension\">IPD: Hypertension<\/a>.<\/para>    <\/Body>    <References>      <Reference id=\"1185935\" medline_id=\"17712071\">        <Title>Underdiagnosis of hypertension in children and adolescents<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>298<\/Volume>        <Issue>8<\/Issue>        <Page>874<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Hansen, M.L.<\/Author>          <Author>Gunn, P.W.<\/Author>          <Author>Kaelber, D.C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1432077\" medline_id=\"16162883\">        <Title>Major causes of death among men and women in China<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>353<\/Volume>        <Issue>11<\/Issue>        <Page>1124<\/Page>        <Year>2005<\/Year>        <Authors>          <Author>He, J.<\/Author>          <Author>Gu, D.<\/Author>          <Author>Wu, X.<\/Author>          <Author>Reynolds, K.<\/Author>          <Author>Duan, X.<\/Author>          <Author>Yao, C.<\/Author>          <Author>Wang, J.<\/Author>          <Author>Chen, C.S.<\/Author>          <Author>Chen, J.<\/Author>          <Author>Wildman, R.P.<\/Author>          <Author>Klag, M.J.<\/Author>          <Author>Whelton, P.K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1515789\" medline_id=\"19421783\">        <Title>Hypertension in children and adolescents: Epidemiology and natural history<\/Title>        <SourceTitle>Pediatric Nephrology<\/SourceTitle>        <PubMedTitle>Pediatr Nephrol<\/PubMedTitle>        <Volume>25<\/Volume>        <Issue>7<\/Issue>        <Page>1219<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Falkner, B.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1611216\" medline_id=\"21295844\">        <Title>National, regional, and global trends in systolic blood pressure since 1980: Systematic analysis of health examination surveys and epidemiological studies with 786 country-years and 5·4 million participants<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>377<\/Volume>        <Issue>9765<\/Issue>        <Page>568<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Danaei, G.<\/Author>          <Author>Finucane, M.M.<\/Author>          <Author>Lin, J.K.<\/Author>          <Author>Singh, G.M.<\/Author>          <Author>Paciorek, C.J.<\/Author>          <Author>Cowan, M.J.<\/Author>          <Author>Farzadfar, F.<\/Author>          <Author>Stevens, G.A.<\/Author>          <Author>Lim, S.S.<\/Author>          <Author>Riley, L.M.<\/Author>          <Author>Ezzati, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1794369\" medline_id=\"22379110\">        <Title>Incidence and prognosis of resistant hypertension in hypertensive patients<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>125<\/Volume>        <Issue>13<\/Issue>        <Page>1635<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Daugherty, S.L.<\/Author>          <Author>Powers, J.D.<\/Author>          <Author>Magid, D.J.<\/Author>          <Author>Tavel, H.M.<\/Author>          <Author>Masoudi, F.A.<\/Author>          <Author>Margolis, K.L.<\/Author>          <Author>O&apos;Connor, P.J.<\/Author>          <Author>Selby, J.V.<\/Author>          <Author>Ho, P.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876559\" medline_id=\"22199424\">        <Title>Prehypertension: A meta-analysis of the epidemiology, risk factors, and predictors of progression<\/Title>        <SourceTitle>Texas Heart Institute Journal<\/SourceTitle>        <PubMedTitle>Tex Heart Inst J<\/PubMedTitle>        <Volume>38<\/Volume>        <Issue>6<\/Issue>        <Page>643<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Guo, X.<\/Author>          <Author>Zou, L.<\/Author>          <Author>Zhang, X.<\/Author>          <Author>Li, J.<\/Author>          <Author>Zheng, L.<\/Author>          <Author>Sun, Z.<\/Author>          <Author>Hu, J.<\/Author>          <Author>Wong, N.D.<\/Author>          <Author>Sun, Y.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876571\" medline_id=\"22105752\">        <Title>Diagnosed hypertension in Canada: Incidence, prevalence and associated mortality<\/Title>        <SourceTitle>CMAJ. Canadian Medical Association Journal<\/SourceTitle>        <PubMedTitle>CMAJ<\/PubMedTitle>        <Volume>184<\/Volume>        <Issue>1<\/Issue>        <Page>E49<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Robitaille, C.<\/Author>          <Author>Dai, S.<\/Author>          <Author>Waters, C.<\/Author>          <Author>Loukine, L.<\/Author>          <Author>Bancej, C.<\/Author>          <Author>Quach, S.<\/Author>          <Author>Ellison, J.<\/Author>          <Author>Campbell, N.<\/Author>          <Author>Tu, K.<\/Author>          <Author>Reimer, K.<\/Author>          <Author>Walker, R.<\/Author>          <Author>Smith, M.<\/Author>          <Author>Blais, C.<\/Author>          <Author>Quan, H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876636\" medline_id=\"22121474\">        <Title>Prevalence, risk factors, and management of prehypertension<\/Title>        <SourceTitle>International Journal of Hypertension<\/SourceTitle>        <PubMedTitle>Int J Hypertens<\/PubMedTitle>        <Volume>2011<\/Volume>        <Page>605359<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Zhang, W.<\/Author>          <Author>Li, N.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876648\" medline_id=\"22392464\">        <Title>Prevalence, degree of control and treatment of hypertension in the adult population of Madrid, Spain<\/Title>        <SourceTitle>Revista Española de Salud Publica<\/SourceTitle>        <PubMedTitle>Rev Esp Salud Publica<\/PubMedTitle>        <Volume>85<\/Volume>        <Issue>4<\/Issue>        <Page>329<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Ortiz Marrón, H.<\/Author>          <Author>Vaamonde Martín, R.J.<\/Author>          <Author>Zorrilla Torrás, B.<\/Author>          <Author>Arrieta Blanco, F.<\/Author>          <Author>Casado López, M.<\/Author>          <Author>Medrano Albero, M.J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876674\" medline_id=\"22408373\">        <Title>Therapeutic options for the treatment of hypertension in children and adolescents<\/Title>        <SourceTitle>Clinical Medicine Insights Circulatory Respiratory and Pulmonary Medicine<\/SourceTitle>        <PubMedTitle>Clin Med Insights Circ Respir Pulm Med<\/PubMedTitle>        <Volume>6<\/Volume>        <Page>13<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Stephens, M.M.<\/Author>          <Author>Fox, B.A.<\/Author>          <Author>Maxwell, L.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1879339\" medline_id=\"22643153\">        <Title>Prevalence, awareness, treatment, and control of hypertension: Rule of thirds in the Skaraborg project<\/Title>        <SourceTitle>Scandinavian Journal of Primary Health Care<\/SourceTitle>        <PubMedTitle>Scand J Prim Health Care<\/PubMedTitle>        <Volume>30<\/Volume>        <Issue>2<\/Issue>        <Page>88<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Lindblad, U.<\/Author>          <Author>Ek, J.<\/Author>          <Author>Eckner, J.<\/Author>          <Author>Larsson, C.A.<\/Author>          <Author>Shan, G.<\/Author>          <Author>Råstam, L.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1944030\" medline_id=\"21502568\">        <Title>Prevalence of resistant hypertension in the United States, 2003-2008<\/Title>        <SourceTitle>Hypertension<\/SourceTitle>        <PubMedTitle>Hypertension<\/PubMedTitle>        <Volume>57<\/Volume>        <Issue>6<\/Issue>        <Page>1076<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Persell, S.D.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1944032\" medline_id=\"22596184\">        <Title>What is the prevalence of resistant hypertension in the United States?<\/Title>        <SourceTitle>Current Opinion in Cardiology<\/SourceTitle>        <PubMedTitle>Curr Opin Cardiol<\/PubMedTitle>        <Volume>27<\/Volume>        <Issue>4<\/Issue>        <Page>386<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Roberie, D.R.<\/Author>          <Author>Elliott, W.J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1944033\" medline_id=\"22828082\">        <Title>Changes in prevalence, awareness, treatment and control of hypertension in Thai population, 2004-2009: Thai National Health Examination Survey III-IV<\/Title>        <SourceTitle>Journal of Hypertension<\/SourceTitle>        <PubMedTitle>J Hypertens<\/PubMedTitle>        <Volume>30<\/Volume>        <Issue>9<\/Issue>        <Page>1734<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Aekplakorn, W.<\/Author>          <Author>Sangthong, R.<\/Author>          <Author>Kessomboon, P.<\/Author>          <Author>Putwatana, P.<\/Author>          <Author>Inthawong, R.<\/Author>          <Author>Taneepanichskul, S.<\/Author>          <Author>Sritara, P.<\/Author>          <Author>Sangwatanaroj, S.<\/Author>          <Author>Chariyalertsak, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1944035\" medline_id=\"22885365\">        <Title>A population-based cross-sectional study of cardiovascular risk factor in Latvia<\/Title>        <SourceTitle>Medicina (Kaunas)<\/SourceTitle>        <PubMedTitle>Medicina (Kaunas)<\/PubMedTitle>        <Volume>48<\/Volume>        <Issue>6<\/Issue>        <Page>310<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Erglis, A.<\/Author>          <Author>Dzerve, V.<\/Author>          <Author>Pahomova-Strautina, J.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1944036\" medline_id=\"22937997\">        <Title>Trends in prevalence, awareness, treatment, and control of hypertension, and the risk of mortality among middle-aged Lithuanian urban population in 1983-2009<\/Title>        <SourceTitle>BMC Cardiovascular Disorders (Online)<\/SourceTitle>        <PubMedTitle>BMC Cardiovasc Disord<\/PubMedTitle>        <Volume>12<\/Volume>        <Page>68<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Reklaitiene, R.<\/Author>          <Author>Tamosiunas, A.<\/Author>          <Author>Virviciute, D.<\/Author>          <Author>Baceviciene, M.<\/Author>          <Author>Luksiene, D.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1944056\">        <Title>Prevalence of hypertension and diabetes among Ethiopian adults<\/Title>        <SourceTitle>Diabetes and Metabolic Syndrome<\/SourceTitle>        <PubMedTitle>Diabetes Metab Syndr<\/PubMedTitle>        <Volume>6<\/Volume>        <Issue>1<\/Issue>        <Page>36<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Nshisso, L.D.<\/Author>          <Author>Reese, A.<\/Author>          <Author>Gelaye, B.<\/Author>          <Author>Lemma, S.<\/Author>          <Author>Berhane, Y.<\/Author>          <Author>Williams, M.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1944094\">        <Title>Hypertension in developing countries<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>380<\/Volume>        <Issue>9841<\/Issue>        <Page>611<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Ibrahim, M.M.<\/Author>          <Author>Damasceno, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1946569\" medline_id=\"22293448\">        <Title>Epidemiology of prehypertension and associated risk factors in urban adults from 33 communities in China - The CHPSNE study<\/Title>        <SourceTitle>Circulation Journal<\/SourceTitle>        <PubMedTitle>Circ J<\/PubMedTitle>        <Volume>76<\/Volume>        <Issue>4<\/Issue>        <Page>900<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Meng, X.J.<\/Author>          <Author>Dong, G.H.<\/Author>          <Author>Wang, D.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1946572\" medline_id=\"22621758\">        <Title>Prevalent trends in relatively high blood pressure among children and adolescents in Shandong, China<\/Title>        <SourceTitle>Annals of Human Biology<\/SourceTitle>        <PubMedTitle>Ann Hum Biol<\/PubMedTitle>        <Volume>39<\/Volume>        <Issue>3<\/Issue>        <Page>259<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Zhang, Y.X.<\/Author>          <Author>Zhao, J.S.<\/Author>          <Author>Sun, G.Z.<\/Author>          <Author>Lin, M.<\/Author>          <Author>Chu, Z.H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1946575\" medline_id=\"23190867\">        <Title>Incidence of hypertension in a prospective cohort study of adults from Porto, Portugal<\/Title>        <SourceTitle>BMC Cardiovascular Disorders (Online)<\/SourceTitle>        <PubMedTitle>BMC Cardiovasc Disord<\/PubMedTitle>        <Volume>12<\/Volume>        <Page>114<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Pereira, M.<\/Author>          <Author>Lunet, N.<\/Author>          <Author>Paulo, C.<\/Author>          <Author>Severo, M.<\/Author>          <Author>Azevedo, A.<\/Author>          <Author>Barros, H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1946577\" medline_id=\"22761919\">        <Title>1999-2009 Trends in prevalence, unawareness, treatment and control of hypertension in Geneva, Switzerland<\/Title>        <SourceTitle>PLoS ONE<\/SourceTitle>        <PubMedTitle>PLoS One<\/PubMedTitle>        <Volume>7<\/Volume>        <Issue>6<\/Issue>        <Year>2012<\/Year>        <Authors>          <Author>Guessous, I.<\/Author>          <Author>Bochud, M.<\/Author>          <Author>Theler, J.M.<\/Author>          <Author>Gaspoz, J.M.<\/Author>          <Author>Pechère-Bertschi, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2047341\" medline_id=\"24002282\">        <Title>Prevalence, awareness, treatment, and control of hypertension in rural and urban communities in high-, middle-, and low-income countries<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>310<\/Volume>        <Issue>9<\/Issue>        <Page>959<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Chow, C.K.<\/Author>          <Author>Teo, K.K.<\/Author>          <Author>Rangarajan, S.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2112124\" medline_id=\"24324935\">        <Title>Stroke statistics in Korea: Part I. Epidemiology and risk factors. A report from the Korean stroke society and clinical research center for stroke<\/Title>        <SourceTitle>Journal of Stroke<\/SourceTitle>        <PubMedTitle>J Stroke<\/PubMedTitle>        <Volume>15<\/Volume>        <Issue>1<\/Issue>        <Page>2<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Hong, K.S.<\/Author>          <Author>Bang, O.Y.<\/Author>          <Author>Kang, D.W.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2130444\" medline_id=\"23739160\">        <Title>Trends of hypertension prevalence, awareness, treatment and control in rural areas of northern China during 1991-2011<\/Title>        <SourceTitle>Journal of Human Hypertension<\/SourceTitle>        <PubMedTitle>J Hum Hypertens<\/PubMedTitle>        <Volume>28<\/Volume>        <Issue>1<\/Issue>        <Page>25<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Wang, J.<\/Author>          <Author>Ning, X.<\/Author>          <Author>Yang, L.<\/Author>          <Author>Lu, H.<\/Author>          <Author>Tu, J.<\/Author>          <Author>Jin, W.<\/Author>          <Author>Zhang, W.<\/Author>          <Author>Su, T.C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2157807\" medline_id=\"24570798\">        <Title>Status report on hypertension in Africa - Consultative review for the 6th Session of the African Union Conference of Ministers of Health on NCD&apos;s.<\/Title>        <SourceTitle>The Pan African Medical Journal<\/SourceTitle>        <PubMedTitle>Pan Afr Med J<\/PubMedTitle>        <Volume>16<\/Volume>        <Page>38<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>van de Vijver, S.<\/Author>          <Author>Akinyi, H.<\/Author>          <Author>Oti, S.<\/Author>          <Author>Olajide, A.<\/Author>          <Author>Agyemang, C.<\/Author>          <Author>Aboderin, I.<\/Author>          <Author>Kyobutungi, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2178504\">        <Title>Prevalence and characteristics of systolic blood pressure thresholds in individuals 60 years or older<\/Title>        <SourceTitle>JAMA Internal Medicine<\/SourceTitle>        <PubMedTitle>JAMA Intern Med<\/PubMedTitle>        <Volume>174<\/Volume>        <Issue>8<\/Issue>        <Page>1397<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Shimbo, D.<\/Author>          <Author>Tanner, R.M.<\/Author>          <Author>Muntner, P.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2178516\" medline_id=\"24505082\">        <Title>Hypertension among older adults in low- and middle-income countries: Prevalence, awareness and control<\/Title>        <SourceTitle>International Journal of Epidemiology<\/SourceTitle>        <PubMedTitle>Int J Epidemiol<\/PubMedTitle>        <Volume>43<\/Volume>        <Issue>1<\/Issue>        <Page>116<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Lloyd-Sherlock, P.<\/Author>          <Author>Beard, J.<\/Author>          <Author>Minicuci, N.<\/Author>          <Author>Ebrahim, S.<\/Author>          <Author>Chatterji, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2215868\" medline_id=\"24621804\">        <Title>Hypertension in India: A systematic review and meta-analysis of prevalence, awareness, and control of hypertension<\/Title>        <SourceTitle>Journal of Hypertension<\/SourceTitle>        <PubMedTitle>J Hypertens<\/PubMedTitle>        <Volume>32<\/Volume>        <Issue>6<\/Issue>        <Page>1170<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Anchala, R.<\/Author>          <Author>Kannuri, N.K.<\/Author>          <Author>Pant, H.<\/Author>          <Author>Khan, H.<\/Author>          <Author>Franco, O.H.<\/Author>          <Author>Di Angelantonio, E.<\/Author>          <Author>Prabhakaran, D.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2298869\" medline_id=\"24881995\">        <Title>Hypertension management in England: A serial cross-sectional study from 1994 to 2011<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>383<\/Volume>        <Issue>9932<\/Issue>        <Page>1912<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Falaschetti, E.<\/Author>          <Author>Mindell, J.<\/Author>          <Author>Knott, C.<\/Author>          <Author>Poulter, N.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2304336\" medline_id=\"25380154\">        <Title>An estimate of the prevalence of hypertension in Nigeria: A systematic review and meta-analysis<\/Title>        <SourceTitle>Journal of Hypertension<\/SourceTitle>        <PubMedTitle>J Hypertens<\/PubMedTitle>        <Volume>33<\/Volume>        <Issue>2<\/Issue>        <Page>230<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Adeloye, D.<\/Author>          <Author>Basquill, C.<\/Author>          <Author>Aderemi, A.V.<\/Author>          <Author>Thompson, J.Y.<\/Author>          <Author>Obi, F.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2318995\" medline_id=\"24833472\">        <Title>Trends in incidence of hypertension in Chinese adults, 1991-2009: The China Health and Nutrition Survey<\/Title>        <SourceTitle>International Journal of Cardiology<\/SourceTitle>        <PubMedTitle>Int J Cardiol<\/PubMedTitle>        <Volume>175<\/Volume>        <Issue>1<\/Issue>        <Page>96<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Liang, Y.<\/Author>          <Author>Liu, R.<\/Author>          <Author>Du, S.<\/Author>          <Author>Qiu, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2345300\" medline_id=\"25771229\">        <Title>Hypertension burden and control in mainland China: Analysis of nationwide data 2003-2012<\/Title>        <SourceTitle>International Journal of Cardiology<\/SourceTitle>        <PubMedTitle>Int J Cardiol<\/PubMedTitle>        <Volume>184<\/Volume>        <Page>637<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Li, D.<\/Author>          <Author>Lv, J.<\/Author>          <Author>Liu, F.<\/Author>          <Author>Liu, P.<\/Author>          <Author>Yang, X.<\/Author>          <Author>Feng, Y.<\/Author>          <Author>Chen, G.<\/Author>          <Author>Hao, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2345978\" medline_id=\"25503845\">        <Title>Systolic hypertension: An increasing clinical challenge in Asia<\/Title>        <SourceTitle>Hypertension Research, Clinical and Experimental<\/SourceTitle>        <PubMedTitle>Hypertens Res<\/PubMedTitle>        <Volume>38<\/Volume>        <Issue>4<\/Issue>        <Page>227<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Park, J.B.<\/Author>          <Author>Kario, K.<\/Author>          <Author>Wang, J.G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2416204\" medline_id=\"26566749\">        <Title>Symptoms and medical conditions in 204 912 patients visiting primary health-care practitioners in India: A 1-day point prevalence study (the POSEIDON study)<\/Title>        <SourceTitle>The Lancet Global Health<\/SourceTitle>        <PubMedTitle>Lancet Glob Health<\/PubMedTitle>        <Volume>3<\/Volume>        <Page>e776<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Salvi, S.<\/Author>          <Author>Apte, K.<\/Author>          <Author>Madas, S.<\/Author>          <Author>Barne, M.<\/Author>          <Author>Chhowala, S.<\/Author>          <Author>Sethi, T.<\/Author>          <Author>Aggarwal, K.<\/Author>          <Author>Agrawal, A.<\/Author>          <Author>Gogtay, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2449808\" medline_id=\"26674015\">        <Title>Prevalence of hypertension in boloor diabetes study (BDS-II) and its risk factors<\/Title>        <SourceTitle>Journal of Clinical and Diagnostic Research: JCDR<\/SourceTitle>        <PubMedTitle>J Clin Diagn Res<\/PubMedTitle>        <Volume>9<\/Volume>        <Issue>11<\/Issue>        <Page>IC01<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Adhikari, P.<\/Author>          <Author>Pemminati, S.<\/Author>          <Author>Pathak, R.<\/Author>          <Author>Kotian, M.S.<\/Author>          <Author>Ullal, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2534036\" medline_id=\"27372527\">        <Title>Hypertension and related cardiovascular disease burden in China<\/Title>        <SourceTitle>Annals of Global Health<\/SourceTitle>        <PubMedTitle>Ann Glob Health<\/PubMedTitle>        <Volume>82<\/Volume>        <Issue>2<\/Issue>        <Page>227<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Bundy, J.D.<\/Author>          <Author>He, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2545186\" medline_id=\"27632693\">        <Title>Vital signs: Disparities in antihypertensive medication nonadherence among Medicare Part D beneficiaries - United States, 2014<\/Title>        <SourceTitle>MMWR. Morbidity and Mortality Weekly Report<\/SourceTitle>        <PubMedTitle>MMWR Morb Mortal Wkly Rep<\/PubMedTitle>        <Volume>65<\/Volume>        <Issue>36<\/Issue>        <Page>967<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Ritchey, M.<\/Author>          <Author>Chang, A.<\/Author>          <Author>Powers, C.<\/Author>          <Author>Loustalot, F.<\/Author>          <Author>Schieb, L.<\/Author>          <Author>Ketcham, M.<\/Author>          <Author>Durthaler, J.<\/Author>          <Author>Hong, Y.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2566298\" medline_id=\"27863813\">        <Title>Worldwide trends in blood pressure from 1975 to 2015: A pooled analysis of 1479 population-based measurement studies with 19·1 million participants<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>389<\/Volume>        <Issue>10064<\/Issue>        <Page>37<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Zhou, B.<\/Author>          <Author>Bentham, J.<\/Author>          <Author>Di Cesare, M.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2659813\" medline_id=\"28230175\">        <Title>Cardiovascular disease in Africa: Epidemiological profile and challenges<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>14<\/Volume>        <Issue>5<\/Issue>        <Page>273<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Keates, A.K.<\/Author>          <Author>Mocumbi, A.O.<\/Author>          <Author>Ntsekhe, M.<\/Author>          <Author>Sliwa, K.<\/Author>          <Author>Stewart, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2727174\" medline_id=\"28623056\">        <Title>The prevalence and risk factor control associated with noncommunicable diseases in China, Japan, and Korea<\/Title>        <SourceTitle>Journal of Epidemiology<\/SourceTitle>        <PubMedTitle>J Epidemiol<\/PubMedTitle>        <Volume>27<\/Volume>        <Issue>12<\/Issue>        <Page>568<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Ma, D.<\/Author>          <Author>Sakai, H.<\/Author>          <Author>Wakabayashi, C.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2728688\" medline_id=\"27102022\">        <Title>Hypertension prevalence, awareness, treatment, and control in selected LMIC communities: Results from the NHLBI/UHG network of Centers of Excellence for Chronic Diseases<\/Title>        <SourceTitle>Global Heart<\/SourceTitle>        <PubMedTitle>Glob heart<\/PubMedTitle>        <Volume>11<\/Volume>        <Issue>1<\/Issue>        <Page>47<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Irazola, V.E.<\/Author>          <Author>Gutierrez, L.<\/Author>          <Author>Bloomfield, G.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2732218\">        <Title>Prevalence, awareness, treatment, and control of hypertension in China: Data from 1.7 million adults in a population-based screening study (China PEACE Million Persons Project)<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>390<\/Volume>        <Issue>10112<\/Issue>        <Page>2549<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Lu, J.<\/Author>          <Author>Lu, Y.<\/Author>          <Author>Wang, X.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2777652\" medline_id=\"29371076\">        <Title>Prevalence of obesity, hypertension, and diabetes, and cascade of care in sub-Saharan Africa: A cross-sectional, population-based study in rural and urban Malawi<\/Title>        <SourceTitle>The Lancet Diabetes and Endocrinology<\/SourceTitle>        <PubMedTitle>Lancet Diabetes Endocrinol<\/PubMedTitle>        <Volume>6<\/Volume>        <Issue>3<\/Issue>        <Page>208<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Price, A.J.<\/Author>          <Author>Crampin, A.C.<\/Author>          <Author>Amberbir, A.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2786330\" medline_id=\"29386200\">        <Title>Heart disease and stroke statistics - 2018 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>137<\/Volume>        <Page>e67<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Benjamin, E.J.<\/Author>          <Author>Virani, S.S.<\/Author>          <Author>Callaway, C.W.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"601\" modifiedDate=\"20180430103501\">    <Title>Morbidity and Mortality<\/Title>    <Body>      <para>Hypertension is sometimes called the &quot;silent killer&quot; as it has no specific signs and is often asymptomatic until the point where a serious condition results. Quality-adjusted life expectancy (QALE), an epidemiological measure combining mortality and health-related quality of life, is known to be reduced by 6.3 years in subjects with hypertension as compared to those without (<REF id=\"1946576\">Jia, H. et al., 2013<\/REF>).<\/para>      <para>Hypertension is the single most important risk factor for <BACKGROUNDER id=\"58\">Stroke<\/BACKGROUNDER>, and also contributes significantly to <BACKGROUNDER id=\"134\">Myocardial Infarction<\/BACKGROUNDER>, <BACKGROUNDER id=\"36\">Heart Failure<\/BACKGROUNDER>, renal disease and mortality. According to the World Health Organization (WHO), at least 7.5 million people worldwide die each year as a result of having high blood pressure; this represents nearly 13% of the total annual deaths and 57 million DALYs (3.7% of total) (<a href=\"http://whqlibdoc.who.int/publications/2011/9789240686458_eng.pdf\">Global status report on noncommunicable diseases 2010 (World Health Organization, April 2011)<\/a>). According to findings of the Global Burden of Disease (GBD) 2016 study, hypertensive heart disease (high systolic blood pressure) was the cause of 212.1 million (range 191.5 million to 230.7 million) DALYs worldwide that year, making it the number one risk factor for global disease burden in women and the second most important risk factor in men (<REF id=\"2715069\">Abajobir, A.A. et al., 2017<\/REF>). Also according to the WHO, a 5-mmHg increase in diastolic blood pressure increases the risk of stroke by 35-40%. Blood pressure contributes to both hemorrhagic and ischemic stroke, although the association is somewhat more pronounced in the case of the former. High blood pressure is one of the three major risk factors for coronary heart disease (CHD death or nonfatal myocardial infarction), which is the most common cause of death in developed countries. In the case of both CHD and stroke, no baseline level of blood pressure has been identified below which risks do not continue to decline. Hypertension is furthermore an important risk factor for atrial fibrillation, which itself contributes to increased risk of stroke; the risk of cardiovascular complications increases abruptly in patients with both conditions (<REF id=\"1876558\">Manolis, A.J. et al., 2012<\/REF>). In the U.K. CALIBER study (1997-2010), the lifetime risk at age 30 years of developing cardiovascular disease was 63.3% in subjects with arterial hypertension, vs. 46.1% in those with normal blood pressure (<REF id=\"2312463\">Rapsomaniki, E. et al., 2014<\/REF>).<\/para>      <para>The American Heart Association estimates that in the year 2015, there were 78,862 deaths attributable to hypertension in the U.S. In addition, there were more than 427,631 any-mention deaths for high blood pressure that same year. According to AHA, the 2015 age-adjusted death rate primarily attributable to high blood pressure was 21.0 per 100,000 (<REF id=\"2786330\">Benjamin, E.J. et al., 2018<\/REF>). According to the 2010 GBD study, hypertensive heart disease caused an estimated 44,700 (range 34,800-59,600) deaths in the U.S. in 2010 (<REF id=\"2032788\">Murray, C.J. et al., 2013<\/REF>). In Japan, high blood pressure is the cause of more than 100,000 deaths each year. Only smoking kills more people in that country (<REF id=\"2208068\">Anonymous, 2014<\/REF>). In China, hypertension and high-normal blood pressure are responsible for 2.3 million cardiovascular deaths each year (<REF id=\"1946092\">Hu, S.S. et al., 2012<\/REF>).<\/para>      <para>Because of the rate at which global populations are aging, prevalence continues to rise even as incidence decreases, with the result that hypertension, an age-related disorder, will continue to be an important source of morbidity and mortality well into the future (<REF id=\"1876556\">Arima, H. et al., 2011<\/REF>; <REF id=\"1876571\">Robitaille, C. et al., 2012<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"1876556\" medline_id=\"22157565\">        <Title>Mortality patterns in hypertension<\/Title>        <SourceTitle>Journal of Hypertension<\/SourceTitle>        <PubMedTitle>J Hypertens<\/PubMedTitle>        <Volume>29<\/Volume>        <Issue>Suppl. 1<\/Issue>        <Page>S3<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Arima, H.<\/Author>          <Author>Barzi, F.<\/Author>          <Author>Chalmers, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876558\" medline_id=\"22186358\">        <Title>Hypertension and atrial fibrillation: Diagnostic approach, prevention and treatment. Position paper of the working group &apos;hypertension arrhythmias and thrombosis&apos; of the European society of hypertension<\/Title>        <SourceTitle>Journal of Hypertension<\/SourceTitle>        <PubMedTitle>J Hypertens<\/PubMedTitle>        <Volume>30<\/Volume>        <Issue>2<\/Issue>        <Page>239<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Manolis, A.J.<\/Author>          <Author>Rosei, E.A.<\/Author>          <Author>Coca, A.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876571\" medline_id=\"22105752\">        <Title>Diagnosed hypertension in Canada: Incidence, prevalence and associated mortality<\/Title>        <SourceTitle>CMAJ. Canadian Medical Association Journal<\/SourceTitle>        <PubMedTitle>CMAJ<\/PubMedTitle>        <Volume>184<\/Volume>        <Issue>1<\/Issue>        <Page>E49<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Robitaille, C.<\/Author>          <Author>Dai, S.<\/Author>          <Author>Waters, C.<\/Author>          <Author>Loukine, L.<\/Author>          <Author>Bancej, C.<\/Author>          <Author>Quach, S.<\/Author>          <Author>Ellison, J.<\/Author>          <Author>Campbell, N.<\/Author>          <Author>Tu, K.<\/Author>          <Author>Reimer, K.<\/Author>          <Author>Walker, R.<\/Author>          <Author>Smith, M.<\/Author>          <Author>Blais, C.<\/Author>          <Author>Quan, H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1946092\" medline_id=\"22840574\">        <Title>Outline of the report on cardiovascular disease in China, 2010<\/Title>        <SourceTitle>Biomedical and Environmental Sciences<\/SourceTitle>        <PubMedTitle>Biomed Environ Sci<\/PubMedTitle>        <Volume>25<\/Volume>        <Issue>3<\/Issue>        <Page>251<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Hu, S.S.<\/Author>          <Author>Kong, L.Z.<\/Author>          <Author>Gao, R.L.<\/Author>          <Author>Zhu, M.L.<\/Author>          <Author>Wang, W.<\/Author>          <Author>Wang, Y.J.<\/Author>          <Author>Wu, Z.S.<\/Author>          <Author>Chen, W.W.<\/Author>          <Author>Liu, M.B.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1946576\" medline_id=\"23337225\">        <Title>The effects of diabetes, hypertension, asthma, heart disease, and stroke on quality-adjusted life expectancy<\/Title>        <SourceTitle>Value in Health<\/SourceTitle>        <PubMedTitle>Value Health<\/PubMedTitle>        <Volume>16<\/Volume>        <Issue>1<\/Issue>        <Page>140<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Jia, H.<\/Author>          <Author>Zack, M.M.<\/Author>          <Author>Thompson, W.W.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2032788\" medline_id=\"23842577\">        <Title>The state of US health, 1990-2010: Burden of diseases, injuries, and risk factors<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>310<\/Volume>        <Issue>6<\/Issue>        <Page>591<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Murray, C.J.<\/Author>          <Author>Abraham, J.<\/Author>          <Author>Ali, M.K.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2208068\">        <Title>Chapter 1. Epidemiology of hypertension<\/Title>        <SourceTitle>Hypertension Research, Clinical and Experimental<\/SourceTitle>        <PubMedTitle>Hypertens Res<\/PubMedTitle>        <Volume>37<\/Volume>        <Page>260<\/Page>        <Year>2014<\/Year>        <Authors/>      <\/Reference>      <Reference id=\"2312463\" medline_id=\"24881994\">        <Title>Blood pressure and incidence of twelve cardiovascular diseases: Lifetime risks, healthy life-years lost, and age-specific associations in 1·25 million people<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>383<\/Volume>        <Issue>9932<\/Issue>        <Page>1899<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Rapsomaniki, E.<\/Author>          <Author>Timmis, A.<\/Author>          <Author>George, J.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2715069\" medline_id=\"28919119\">        <Title>Global, regional, and national comparative risk assessment of 84 behavioural, environmental and occupational, and metabolic risks or clusters of risks, 1990-2016: A systematic analysis for the Global Burden of Disease study 2016<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>390<\/Volume>        <Issue>10100<\/Issue>        <Page>1345<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Abajobir, A.A.<\/Author>          <Author>Abate, K.H.<\/Author>          <Author>Abbafati, C.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2786330\" medline_id=\"29386200\">        <Title>Heart disease and stroke statistics - 2018 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>137<\/Volume>        <Page>e67<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Benjamin, E.J.<\/Author>          <Author>Virani, S.S.<\/Author>          <Author>Callaway, C.W.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"602\" modifiedDate=\"20190510012332\">    <Title>Cost<\/Title>    <Body>      <para>According to the National Heart, Lung and Blood Institute, the estimated direct and indirect costs of hypertension in the U.S. in 2014-15 (annual average) was USD 55.9 billion (<REF id=\"3005764\">Benjamin, E.J. et al., 2019<\/REF>). The most significant drivers of direct cost are physician visits and drugs/medical durables, while lost productivity due to premature mortality accounts for the greatest part of indirect costs (<REF id=\"1468712\">Lloyd-Jones, D. et al., 2010<\/REF>). By 2035, the American Heart Association predicts that the total direct cost of high blood pressure will increase to USD 220.9 billion (<REF id=\"2786330\">Benjamin, E.J. et al., 2018<\/REF>).<\/para>      <para>Suboptimal treatment of hypertension is also associated with significant costs, both on the personal and societal level. According to an analysis of data from the 2006 Medical Expenditure Panel Survey, nearly 20% of the U.S. adult population in the year 2006 was estimated to have high blood pressure, although only approximately two-thirds of those were receiving appropriate treatment. The cost of inappropriate antihypertensive therapy was estimated to be approximately USD 234.60 per person; extrapolated to the entire U.S. hypertensive population, the national cost (direct expenditures) of suboptimal treatment of hypertension was roughly USD 13 billion (<REF id=\"1436040\">Balu, S., 2009<\/REF>).<\/para>      <para>Among U.S. adults (18-64 years of age) in the Medicaid population, total annual healthcare costs were estimated to range from USD 5,458 to USD 19,821 per beneficiary with hypertension over the period 2000-2016. Disease-related cost per patient was estimated at USD 687 (<REF id=\"2833325\">Chapel, J.M. et al., 2017<\/REF>). According to data from the Medical Expenditure Panel Survey (2003-2014), annual individual healthcare expenditure for U.S. patients with hypertension is nearly USD 2000 greater than for normotensive peers (<REF id=\"2847628\">Kirkland, E.B. et al., 2018<\/REF>).<\/para>      <para>In 2015, the global market for antihypertensive drugs generated revenues in excess of USD 28 billion. In spite of the high and increasing prevalence of hypertension worldwide, this figure is actually expected to decrease in coming years as a result of the dual pressures of generic drug competition and cost-containment initiatives on the part of healthcare providers. As a result, global sales for antihypertensive drugs in 2020 are predicted to be approximately USD 25 billion (<REF id=\"2641123\">Ali, M.A. et al., 2017<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"1436040\" medline_id=\"19695408\">        <Title>Estimated annual direct expenditures in the United States as a result of inappropriate hypertension treatment according to national treatment guidelines<\/Title>        <SourceTitle>Clinical Therapeutics<\/SourceTitle>        <PubMedTitle>Clin Ther<\/PubMedTitle>        <Volume>31<\/Volume>        <Issue>7<\/Issue>        <Page>1581<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Balu, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1468712\" medline_id=\"20177011\">        <Title>Executive summary: Heart disease and stroke statistics-2010 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>121<\/Volume>        <Issue>7<\/Issue>        <Page>948<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Lloyd-Jones, D.<\/Author>          <Author>Adams, R.J.<\/Author>          <Author>Brown, T.M.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2641123\" medline_id=\"28280260\">        <Title>Trends in the market for antihypertensive drugs<\/Title>        <SourceTitle>Nature Reviews Drug Discovery<\/SourceTitle>        <PubMedTitle>Nat Rev Drug Discov<\/PubMedTitle>        <Volume>16<\/Volume>        <Issue>5<\/Issue>        <Page>309<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Ali, M.A.<\/Author>          <Author>Rizvi, S.<\/Author>          <Author>Syed, B.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2786330\" medline_id=\"29386200\">        <Title>Heart disease and stroke statistics - 2018 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>137<\/Volume>        <Page>e67<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Benjamin, E.J.<\/Author>          <Author>Virani, S.S.<\/Author>          <Author>Callaway, C.W.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2833325\" medline_id=\"29153115\">        <Title>Prevalence and medical costs of chronic diseases among adult medicaid beneficiaries<\/Title>        <SourceTitle>American Journal of Preventive Medicine<\/SourceTitle>        <PubMedTitle>Am J Prev Med<\/PubMedTitle>        <Volume>53<\/Volume>        <Issue>6S2<\/Issue>        <Page>S143<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Chapel, J.M.<\/Author>          <Author>Ritchey, M.D.<\/Author>          <Author>Zhang, D.<\/Author>          <Author>Wang, G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2847628\" medline_id=\"29848493\">        <Title>Trends in healthcare expenditures among US adults with hypertension: National estimates, 2003-2014<\/Title>        <SourceTitle>Journal of the American Heart Association<\/SourceTitle>        <PubMedTitle>J Am Heart Assoc<\/PubMedTitle>        <Volume>7<\/Volume>        <Issue>11<\/Issue>        <Year>2018<\/Year>        <Authors>          <Author>Kirkland, E.B.<\/Author>          <Author>Heincelman, M.<\/Author>          <Author>Bishu, K.G.<\/Author>          <Author>Schumann, S.O.<\/Author>          <Author>Schreiner, A.<\/Author>          <Author>Axon, R.N.<\/Author>          <Author>Mauldin, P.D.<\/Author>          <Author>Moran, W.P.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"3005764\" medline_id=\"30700139\">        <Title>Heart disease and stroke statistics-2019 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>139<\/Volume>        <Issue>10<\/Issue>        <Page>e56<\/Page>        <Year>2019<\/Year>        <Authors>          <Author>Benjamin, E.J.<\/Author>          <Author>Muntner, P.<\/Author>          <Author>Alonso, A.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"590\" modifiedDate=\"20180416011735\">  <Title>Diagnosis<\/Title>  <Body>    <para>Blood pressure is measured using a mercury sphygmomanometer, a device that records both systolic and diastolic blood pressure. A diagnosis of hypertension is reached when the average of two or more diastolic blood pressure readings is 90 mmHg or higher on at least two subsequent visits, or when the average of two or more systolic blood pressure readings is 140 mmHg or higher on at least two subsequent visits. Twenty-four-hour or home BP monitoring may be useful for obtaining a realistic measurement and for avoiding &quot;white-coat hypertension&quot; caused by patient anxiety in the clinical setting (<REF id=\"1875547\">Ruilope, L.M., 2011<\/REF>) and in fact is recommended in some treatment guidelines (<a href=\"http://www.nice.org.uk/guidance/cg127\">Hypertension in adults: Diagnosis and management (National Institute for Health and Clinical Excellence, updated November 2016)<\/a>). The opposite condition, known as &quot;masked hypertension,&quot; is characterized by normal blood pressure in the doctor&apos;s office but elevated home and ambulatory BP. It is harder to detect but can also be diagnosed on the basis of 24-hour blood pressure monitoring (<REF id=\"1807656\">Mancia, G. et al., 2006<\/REF>). White-coat and masked hypertension affect one in three and one in eleven patients, respectively (<REF id=\"1807560\">Mearns, B.M., 2012<\/REF>). Finally, 24-hour ambulatory BP monitoring is required to distinguish between white-coat hypertension and authentic resistant hypertension (<REF id=\"1876573\">Oliveras, A. and Sierra Ade, L., 2012<\/REF>; <REF id=\"2815136\">Oparil, S. et al., 2018<\/REF>).<\/para>    <para>Although the 90/140 mmHg cutoff has been recommended by the U.S. Joint National Committee for more than 20 years, this body recently released new guidelines (<a href=\"http://jamanetwork.com/journals/jama/fullarticle/1791497\">2014 Evidence-based guideline for the management of high blood pressure in adults: Report from the panel members appointed to the Eighth Joint National Committee (JNC 8)<\/a>) that, among other new developments, recommends increasing the systolic BP threshhold to 150 mmHg in patients over 60 years of age. This new cutoff applies to initiation of drug therapy as well as a treatment goal (<REF id=\"2178504\">Shimbo, D. et al., 2014<\/REF>). The lower goal of 90/140 continues to apply to patients aged 30-59, including those with diabetes and chronic kidney disease. In contrast, the American Heart Association/American College of Cardiology&apos;s 2017 guideline on hypertension (see <a href=\"http://www.onlinejacc.org/content/accj/early/2017/11/04/j.jacc.2017.11.006.full.pdf\">2017 ACC/AHA/AAPA/ABC/ACPM/AGS/APhA/ASH/ASPC/NMA/PCNA Guideline for the prevention, detection, evaluation, and management of high blood pressure in adults (American College of Cardology/American Heart Association, November 2017)<\/a>) has defined a lower threshhold, considering that a person is hypertensive when they have persistently elevated blood pressures at or above 130 systolic or 80 diastolic.<\/para>    <para>Although hypertension is a primary condition in 90-95% of all cases, certain patient profiles may support the existence of a secondary cause that should be identified: sudden onset of hypertension before age 20 or after age 50; extremely high blood pressure with evidence of severe end-organ disease; and resistant or refractory hypertension (<REF id=\"1876629\">Kallistratos, M.S. et al., 2010<\/REF>; <REF id=\"2815136\">Oparil, S. et al., 2018<\/REF>). Particularly in these patients, a complete medical history should also be obtained, including family history, lifestyle factors, current and previous use of medications, as well as a complete physical examination and laboratory tests to identify potential secondary causes, which include renal parenchymal disease, renal artery stenosis, primary aldosteronism and <BACKGROUNDER id=\"162\">Cushing&apos;s Syndrome<\/BACKGROUNDER> (<REF id=\"1876633\">Sukor, N., 2011<\/REF>; <REF id=\"2815136\">Oparil, S. et al., 2018<\/REF>). Various blood and urine tests may be indicated for the identification of diabetes, high levels of cholesterol, catecholamines or mineralocorticoids, and other potential risk factors. Electrocardiogram (ECG), cardiac magnetic resonance (CMR) and computerized tomography (CT) scans are useful for obtaining information indicative of left ventricular hypertrophy, previous myocardial infarction, ischemia or possible renal causes of hypertension (<REF id=\"1876628\">Viera, A.J. and Neutze, D.M., 2010<\/REF>; <REF id=\"1876575\">Maceira, A.M. and Mohiaddin, R.H., 2012<\/REF>). Renovascular hypertension can develop as a result of various conditions, although the most common causes are fibromuscular dysplasia and atherosclerotic renovascular disease (<REF id=\"1876629\">Kallistratos, M.S. et al., 2010<\/REF>).<\/para>  <\/Body>  <References>    <Reference id=\"1807560\">      <Title>Hypertension: Tackling challenges in the diagnosis and management of hypertension in 2012<\/Title>      <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>      <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>      <Volume>9<\/Volume>      <Issue>5<\/Issue>      <Page>253<\/Page>      <Year>2012<\/Year>      <Authors>        <Author>Mearns, B.M.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1807656\" medline_id=\"16567588\">      <Title>Long-term risk of mortality associated with selective and combined elevation in office, home, and ambulatory blood pressure<\/Title>      <SourceTitle>Hypertension<\/SourceTitle>      <PubMedTitle>Hypertension<\/PubMedTitle>      <Volume>47<\/Volume>      <Issue>5<\/Issue>      <Page>846<\/Page>      <Year>2006<\/Year>      <Authors>        <Author>Mancia, G.<\/Author>        <Author>Facchetti, R.<\/Author>        <Author>Bombelli, M.<\/Author>        <Author>Grassi, G.<\/Author>        <Author>Sega, R.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1875547\" medline_id=\"22027655\">      <Title>Current challenges in the clinical management of hypertension<\/Title>      <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>      <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>      <Volume>9<\/Volume>      <Issue>5<\/Issue>      <Page>267<\/Page>      <Year>2011<\/Year>      <Authors>        <Author>Ruilope, L.M.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1876573\" medline_id=\"22257056\">      <Title>New developments in the diagnosis and management of resistant hypertension<\/Title>      <SourceTitle>Current Medicinal Chemistry<\/SourceTitle>      <PubMedTitle>Curr Med Chem<\/PubMedTitle>      <Volume>19<\/Volume>      <Issue>8<\/Issue>      <Page>1210<\/Page>      <Year>2012<\/Year>      <Authors>        <Author>Oliveras, A.<\/Author>        <Author>Sierra Ade, L.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1876575\" medline_id=\"22559053\">      <Title>Cardiovascular magnetic resonance in systemic hypertension<\/Title>      <SourceTitle>Journal of Cardiovascular Magnetic Resonance<\/SourceTitle>      <PubMedTitle>J Cardiovasc Magn Reson<\/PubMedTitle>      <Volume>14<\/Volume>      <Page>28<\/Page>      <Year>2012<\/Year>      <Authors>        <Author>Maceira, A.M.<\/Author>        <Author>Mohiaddin, R.H.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1876628\" medline_id=\"21166367\">      <Title>Diagnosis of secondary hypertension: An age-based approach<\/Title>      <SourceTitle>American Family Physician (1970)<\/SourceTitle>      <PubMedTitle>Am Fam Physician<\/PubMedTitle>      <Volume>82<\/Volume>      <Issue>12<\/Issue>      <Page>1471<\/Page>      <Year>2010<\/Year>      <Authors>        <Author>Viera, A.J.<\/Author>        <Author>Neutze, D.M.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1876629\" medline_id=\"21169184\">      <Title>Diagnostic modalities of the most common forms of secondary hypertension<\/Title>      <SourceTitle>HJC Hellenic Journal of Cardiology<\/SourceTitle>      <PubMedTitle>Hellenic J Cardiol<\/PubMedTitle>      <Volume>51<\/Volume>      <Issue>6<\/Issue>      <Page>518<\/Page>      <Year>2010<\/Year>      <Authors>        <Author>Kallistratos, M.S.<\/Author>        <Author>Giannakopoulos, A.<\/Author>        <Author>German, V.<\/Author>        <Author>Manolis, A.J.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1876633\" medline_id=\"21746730\">      <Title>Secondary hypertension: A condition not to be missed<\/Title>      <SourceTitle>Postgraduate Medical Journal<\/SourceTitle>      <PubMedTitle>Postgrad Med J<\/PubMedTitle>      <Volume>87<\/Volume>      <Issue>1032<\/Issue>      <Page>706<\/Page>      <Year>2011<\/Year>      <Authors>        <Author>Sukor, N.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2178504\">      <Title>Prevalence and characteristics of systolic blood pressure thresholds in individuals 60 years or older<\/Title>      <SourceTitle>JAMA Internal Medicine<\/SourceTitle>      <PubMedTitle>JAMA Intern Med<\/PubMedTitle>      <Volume>174<\/Volume>      <Issue>8<\/Issue>      <Page>1397<\/Page>      <Year>2014<\/Year>      <Authors>        <Author>Shimbo, D.<\/Author>        <Author>Tanner, R.M.<\/Author>        <Author>Muntner, P.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2815136\" medline_id=\"29565029\">      <Title>Hypertension<\/Title>      <SourceTitle>Nature Reviews. Disease Primers<\/SourceTitle>      <PubMedTitle>Nat Rev Dis Primers<\/PubMedTitle>      <Volume>4<\/Volume>      <Page>18014<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Oparil, S.<\/Author>        <Author>Acelajado, M.C.<\/Author>        <Author>Bakris, G.L.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"3251\" modifiedDate=\"20180416011827\">    <Title>Screening<\/Title>    <Body>      <para>The U.S. Preventive Services Task Force recommends screening for high blood pressure in all adults aged 18 years and older (<a href=\"http://www.uspreventiveservicestaskforce.org/Page/Document/UpdateSummaryFinal/high-blood-pressure-in-adults-screening\">Screening for high blood pressure in adults: U.S. Preventive Services Task Force recommendation statement (USPSTF, October 2015)<\/a>). However, hypertension and prehypertension are also becoming significant health issues in the young. For this reason, the Fourth Report from the National High Blood Pressure Education Program Working Group has recommended that blood pressure screening for children should start at age three (<REF id=\"1876674\">Stephens, M.M. et al., 2012<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"1876674\" medline_id=\"22408373\">        <Title>Therapeutic options for the treatment of hypertension in children and adolescents<\/Title>        <SourceTitle>Clinical Medicine Insights Circulatory Respiratory and Pulmonary Medicine<\/SourceTitle>        <PubMedTitle>Clin Med Insights Circ Respir Pulm Med<\/PubMedTitle>        <Volume>6<\/Volume>        <Page>13<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Stephens, M.M.<\/Author>          <Author>Fox, B.A.<\/Author>          <Author>Maxwell, L.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"591\" modifiedDate=\"20170608125552\">  <Title>Prevention<\/Title>  <Body>    <para>Prevention of hypertension is an important goal on both the personal and societal level. Even healthy individuals with few risk factors should take steps to decrease their blood pressure by getting more exercise, reducing sodium intake and maintaining a healthy weight. Other risk factors listed above (cigarette smoking, alcohol consumption) should be reduced or avoided, and coexisting medical conditions should be properly controlled (<REF id=\"1157332\">Kaplan, N.M. and Opie, L.H., 2006<\/REF>). Individuals with prehypertension should make a special effort to prevent progression to outright hypertension, through lifestyle modification and, when warranted, with drug therapy (<REF id=\"1876636\">Zhang, W. and Li, N., 2011<\/REF>).<\/para>    <para>Increased intake of fruits and vegetables, detectable by testing plasma vitamin C concentrations, was associated with lower systolic blood pressure in a large population-based study. Among the nearly 21,000 participants in the European Prospective Investigation into Cancer-Norfolk study, those in the highest quartiles of vitamin C levels had a 22% lower risk of hypertension. These results support the argument that a diet rich in fruits and vegetables may help to prevent high blood pressure (<REF id=\"1698654\">Myint, P.K. et al., 2011<\/REF>). The DASH dietary pattern, which is rich in fruits and vegetables and low in total and saturated fats, has been shown effective in reducing blood pressure in subjects with prehypertension, although the benefits are maintained only as long as the dietary pattern is adhered to. Added benefit is obtained from reducing salt in the diet as well as following the DASH diet (<REF id=\"1876636\">Zhang, W. and Li, N., 2011<\/REF>). In Asian patients specifically, reducing salt intake has been found effective in reducing systolic blood pressure, thus decreasing the risk of systolic hypertension (<REF id=\"2345978\">Park, J.B. et al., 2015<\/REF>).<\/para>    <para>The angiotensin receptor blocker candesartan was administered to subjects with prehypertension in the multicenter Trial of Preventing Hypertension (TROPHY) to assess the ability of pharmacologic treatment to head off the development of hypertension. Study subjects (n = 809) had systolic pressure of 130-139 mmHg and diastolic pressure of 89 mmHg or less, or systolic pressure of up to 139 mmHg and diastolic pressure of 85-89 mmHg. They were randomized to placebo or candesartan 16 mg/day for two years and afterwards all subjects received placebo for two years. During the double-blind phase, hypertension developed in 154 placebo-treated subjects and in 53 of those given candesartan; there was a relative risk reduction of 66.3% in the candesartan group. After two additional years of placebo treatment, incident hypertension was noted in 240 and 208 patients in the placebo and candesartan groups, respectively; the relative risk reduction was 15.6%. Candesartan was well tolerated (<REF id=\"974001\">Julius, S. et al., 2006<\/REF>). <\/para>    <para>The PREVER trial (NCT00970931) evaluated the potential benefits of early antihypertensive drug therapy in 1,250 individuals (age 30-70 years) with prehypertension. Patients in the 18-month study were randomized to treatment with chlorthalidone (12.5 mg) plus amiloride (2.5 mg) or identical placebo. The primary efficacy endpoints were incidence of hypertension, adverse events, development or worsening of microalbuminuria, and development or worsening of left ventricular hypertrophy in EKG. Secondary outcome measures included fatal or nonfatal cardiovascular events (myocardial infarction, stroke, heart failure, atherosclerosis) and death (<REF id=\"1876630\">Fuchs, F.D. et al., 2011<\/REF>; <REF id=\"2597937\">Fuchs, S.C. et al., 2016<\/REF>).<\/para>  <\/Body>  <References>    <Reference id=\"974001\" medline_id=\"16537662\">      <Title>Feasibility of treating prehypertension with an angiotensin-receptor blocker<\/Title>      <SourceTitle>New England Journal of Medicine<\/SourceTitle>      <PubMedTitle>N Engl J Med<\/PubMedTitle>      <Volume>354<\/Volume>      <Issue>16<\/Issue>      <Page>1685<\/Page>      <Year>2006<\/Year>      <Authors>        <Author>Julius, S.<\/Author>        <Author>Nesbitt, S.D.<\/Author>        <Author>Egan, B.M.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1157332\" medline_id=\"16413880\">      <Title>Controversies in hypertension<\/Title>      <SourceTitle>The Lancet<\/SourceTitle>      <PubMedTitle>Lancet<\/PubMedTitle>      <Volume>367<\/Volume>      <Issue>9505<\/Issue>      <Page>168<\/Page>      <Year>2006<\/Year>      <Authors>        <Author>Kaplan, N.M.<\/Author>        <Author>Opie, L.H.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1698654\" medline_id=\"21768529\">      <Title>Association between plasma vitamin C concentrations and blood pressure in the European prospective investigation into cancer-norfolk population-based study<\/Title>      <SourceTitle>Hypertension<\/SourceTitle>      <PubMedTitle>Hypertension<\/PubMedTitle>      <Volume>58<\/Volume>      <Issue>3<\/Issue>      <Page>372<\/Page>      <Year>2011<\/Year>      <Authors>        <Author>Myint, P.K.<\/Author>        <Author>Luben, R.N.<\/Author>        <Author>Wareham, N.J.<\/Author>        <Author>Khaw, K.T.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1876630\" medline_id=\"21375762\">      <Title>Prevention of hypertension in patients with pre-hypertension: Protocol for the PREVER-prevention trial<\/Title>      <SourceTitle>Trials (Online)<\/SourceTitle>      <PubMedTitle>Trials<\/PubMedTitle>      <Volume>12<\/Volume>      <Page>65<\/Page>      <Year>2011<\/Year>      <Authors>        <Author>Fuchs, F.D.<\/Author>        <Author>Fuchs, S.C.<\/Author>        <Author>Moreira, L.B.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1876636\" medline_id=\"22121474\">      <Title>Prevalence, risk factors, and management of prehypertension<\/Title>      <SourceTitle>International Journal of Hypertension<\/SourceTitle>      <PubMedTitle>Int J Hypertens<\/PubMedTitle>      <Volume>2011<\/Volume>      <Page>605359<\/Page>      <Year>2011<\/Year>      <Authors>        <Author>Zhang, W.<\/Author>        <Author>Li, N.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2345978\" medline_id=\"25503845\">      <Title>Systolic hypertension: An increasing clinical challenge in Asia<\/Title>      <SourceTitle>Hypertension Research, Clinical and Experimental<\/SourceTitle>      <PubMedTitle>Hypertens Res<\/PubMedTitle>      <Volume>38<\/Volume>      <Issue>4<\/Issue>      <Page>227<\/Page>      <Year>2015<\/Year>      <Authors>        <Author>Park, J.B.<\/Author>        <Author>Kario, K.<\/Author>        <Author>Wang, J.G.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2597937\" medline_id=\"27965209\">      <Title>Effectiveness of chlorthalidone plus amiloride for the prevention of hypertension: The PREVER-prevention randomized clinical trial<\/Title>      <SourceTitle>Journal of the American Heart Association<\/SourceTitle>      <PubMedTitle>J Am Heart Assoc<\/PubMedTitle>      <Volume>5<\/Volume>      <Issue>12<\/Issue>      <Year>2016<\/Year>      <Authors>        <Author>Fuchs, S.C.<\/Author>        <Author>Poli-de-Figueiredo, C.E.<\/Author>        <Author>Figueiredo Neto, J.A.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>  <\/References><\/Section><Section sectionId=\"592\" modifiedDate=\"20171218102509\">  <Title>Treatment<\/Title>  <Body>    <para>The goal of any treatment for hypertension is the reduction in overall risk of cardiovascular and renal events and hence the reduction in morbidity and mortality. Selection of the appropriate drug therapy and subsequent monitoring are extremely important. In most patients, the goal of blood pressure-lowering treatment has been a blood pressure of less than 140/90 mmHg, although a lower goal of less than 130/80 mmHg was recommended for patients with comorbid diabetes or chronic kidney disease (<REF id=\"985018\">Choi, K.L. and Bakris, G.L., 2005<\/REF>; <REF id=\"988865\">Whitworth, J.A., 2003<\/REF>). However, ACC/AHA 2017 treatment guidelines present a new definition of elevated BP (130/80 mmHg) and state that pharmacotherapy is indicated for patients with this or higher BP and with preexisting CVD, diabetes or CKD. In all other patients, antihypertensive drug therapy is indicated in those with an SBP of 140 mmHg or higher or a DBP of 90 mmHg or higher (<a href=\"http://www.onlinejacc.org/content/accj/early/2017/11/04/j.jacc.2017.11.006.full.pdf\">2017 ACC/AHA/AAPA/ABC/ACPM/AGS/APhA/ASH/ASPC/NMA/PCNA Guideline for the prevention, detection, evaluation, and management of high blood pressure in adults (American College of Cardology/American Heart Association, November 2017)<\/a>). These recommendations are supported by the findings of a large randomized clinical trial known as SPRINT (Systolic blood pressure intervention trial), in which intensive antihypertensive drug therapy, targeting a goal of &lt;120 mmHg, was shown to significantly reduce CVD risk as well as all-cause mortality. The SPRINT study enrolled a diverse population of individuals with elevated SBP (130-180 mmHg on 0 or 1 antihypertensive medication class, 130-170 mmHg on up to 2 classes, 130-160 mmHg on up to 3 classes, and 130-150 mmHg on up to 4 classes) and at least one CVD risk factor (history of coronary heart disease, estimated glomerular filtration rate of 20-59 ml/min/1.73 m2, 10-year CVD risk greater than or equal to 15%, or age 75 years or older) (<REF id=\"2743335\">Soliman, E.Z. et al., 2017<\/REF>; <REF id=\"2743339\">Berlowitz, D.R. et al., 2017<\/REF>; <REF id=\"2743341\">Bress, A.P. et al., 2016<\/REF>). Among elderly (75 years and older) participants in the SPRINT trial, treatment to an SBP target of &lt;120 mmHg also resulted in significantly lower rates of fatal and nonfatal major cardiovascular events and death as compared to an SBP target of &lt;140 mmHg (<REF id=\"2743340\">Williamson, J.D. et al., 2016<\/REF>). <\/para>  <\/Body>  <References>    <Reference id=\"985018\" medline_id=\"16202692\">      <Title>Hypertension treatment guidelines: Practical implications<\/Title>      <SourceTitle>Seminars in Nephrology<\/SourceTitle>      <PubMedTitle>Semin Nephrol<\/PubMedTitle>      <Volume>25<\/Volume>      <Issue>4<\/Issue>      <Page>198<\/Page>      <Year>2005<\/Year>      <Authors>        <Author>Choi, K.L.<\/Author>        <Author>Bakris, G.L.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"988865\" medline_id=\"14597836\">      <Title>2003 World Health Organization (WHO)/International Society of Hypertension (ISH) statement on management of hypertension<\/Title>      <SourceTitle>Journal of Hypertension<\/SourceTitle>      <PubMedTitle>J Hypertens<\/PubMedTitle>      <Volume>21<\/Volume>      <Issue>11<\/Issue>      <Page>1983<\/Page>      <Year>2003<\/Year>      <Authors>        <Author>Whitworth, J.A.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2743335\" medline_id=\"28512184\">      <Title>Effect of intensive blood pressure lowering on left ventricular hypertrophy in patients with hypertension: SPRINT (systolic blood pressure intervention trial)<\/Title>      <SourceTitle>Circulation<\/SourceTitle>      <PubMedTitle>Circulation<\/PubMedTitle>      <Volume>136<\/Volume>      <Issue>5<\/Issue>      <Page>440<\/Page>      <Year>2017<\/Year>      <Authors>        <Author>Soliman, E.Z.<\/Author>        <Author>Ambrosius, W.T.<\/Author>        <Author>Cushman, W.C.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2743339\" medline_id=\"28834483\">      <Title>Effect of intensive blood-pressure treatment on patient-reported outcomes<\/Title>      <SourceTitle>New England Journal of Medicine<\/SourceTitle>      <PubMedTitle>N Engl J Med<\/PubMedTitle>      <Volume>377<\/Volume>      <Issue>8<\/Issue>      <Page>733<\/Page>      <Year>2017<\/Year>      <Authors>        <Author>Berlowitz, D.R.<\/Author>        <Author>Foy, C.G.<\/Author>        <Author>Kazis, L.E.<\/Author>        <Author>e al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2743340\" medline_id=\"27195814\">      <Title>Intensive vs standard blood pressure control and cardiovascular disease outcomes in adults aged greater than or equal to 75 years: A randomized clinical trial<\/Title>      <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>      <PubMedTitle>JAMA<\/PubMedTitle>      <Volume>315<\/Volume>      <Issue>24<\/Issue>      <Page>2673<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Williamson, J.D.<\/Author>        <Author>Supiano, M.A.<\/Author>        <Author>Applegate, W.B.<\/Author>        <Author>et al.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2743341\" medline_id=\"26562046\">      <Title>Generalizability of SPRINT results to the U.S. adult population<\/Title>      <SourceTitle>Journal of the American College of Cardiology<\/SourceTitle>      <PubMedTitle>J Am Coll Cardiol<\/PubMedTitle>      <Volume>67<\/Volume>      <Issue>5<\/Issue>      <Page>463<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Bress, A.P.<\/Author>        <Author>Tanner, R.M.<\/Author>        <Author>Hess, R.<\/Author>        <Author>Colantonio, L.D.<\/Author>        <Author>Shimbo, D.<\/Author>        <Author>Muntner, P.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"603\" modifiedDate=\"20180416014827\">    <Title>Lifestyle Modification<\/Title>    <Body>      <para>Dietary modification, exercise and general maintenance of a healthy lifestyle are typically the first recommendations made to individuals identified with high blood pressure. All hypertensive patients should be encouraged to reduce sodium intake, lose weight (if needed), stop smoking, limit alcohol intake and exercise regularly. Other dietary measures, including decreasing intake of saturated fats and increasing that of fruits and vegetables, will contribute to reduce vascular risk (<REF id=\"2815136\">Oparil, S. et al., 2018<\/REF>).<\/para>      <para>The U.S. Department of Health and Human Services recommends a daily salt intake of 3.75 g (1,500 mg sodium/day) for all adults aged 40 years and older, African Americans and those with diabetes, hypertension or chronic renal disease. Together this population of so-called &quot;salt-sensitive&quot; individuals makes up 70% of the adult U.S. population. In spite of these recommendations, however, data from the 2005-2006 NHANES survey show that the average estimated consumption by noninstitutionalized U.S. adults is 8.7 g salt/day (equivalent to 3,466 mg sodium/day). Salt added during food processing and in restaurant food accounts for the vast majority (80%) of salt intake (<REF id=\"1877431\">Mohanlal, V. et al., 2012<\/REF>). The European Society of Hypertension/European Society of Cardiology, following WHO recommendations, has set a higher limit of 5 g/day salt (<REF id=\"1876666\">Strazzullo, P. et al., 2012<\/REF>).<\/para>      <para>Increasing dietary intake of potassium, another micronutrient that is abundant in fruits and vegetables, also has a beneficial effect on blood pressure, particularly in elderly individuals, African Americans and patients with hypertension (<REF id=\"1877431\">Mohanlal, V. et al., 2012<\/REF>).<\/para>      <para>The DASH (Dietary Approaches to Stop Hypertension) trial illustrated that it is possible to reduce systolic and diastolic blood pressure by 11.4/5.5 mmHg simply by eating a diet rich in fruits, vegetables and low-fat dairy products and low in total and saturated fat. The DASH diet is also low in cholesterol, red meat, sweets and sugar-sweetened products, and is rich in potassium, calcium, magnesium, fiber and protein (<REF id=\"1877431\">Mohanlal, V. et al., 2012<\/REF>; <REF id=\"2815136\">Oparil, S. et al., 2018<\/REF>). The NHLBI-sponsored DASH-Sodium study demonstrated that blood pressure could be reduced even further--in both hypertensive and normotensive subjects--by reducing sodium levels to a target of 50 mmol/day. The BP reduction obtained by the low-sodium version of the DASH diet was equivalent to or better than that obtained through drug monotherapy (<REF id=\"659627\">Sacks, F.M. et al., 2001<\/REF>). Greater benefit is also obtained through addition of a weight management (exercise and weight loss) program to the DASH dietary pattern (<REF id=\"1876625\">Blumenthal, J.A. et al., 2010<\/REF>). However, certain special populations should exercise caution when initiating the DASH diet, which may have to be modified to meet their special needs; this includes patients with chronic kidney disease, chronic liver disease, chronic heart failure, celiac disease, lactose intolerance and uncontrolled type 2 diabetes (<REF id=\"1876567\">Tyson, C.C. et al., 2012<\/REF>).<\/para>      <para>Other dietary patterns that have also been shown to have beneficial effects on blood pressure are vegetarian/vegan diets (<REF id=\"1877431\">Mohanlal, V. et al., 2012<\/REF>) and the Mediterranean diet (<REF id=\"1879333\">Barceló, F. et al., 2009<\/REF>), as well as increased intake of long-chain omega-3 fatty acids through increased consumption of fatty fish and other dietary sources (<REF id=\"1708454\">Liu, J.C. et al., 2011<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"659627\" medline_id=\"11136953\">        <Title>Effects on blood pressure of reduced dietary sodium and the Dietary Approaches to Stop Hypertension (DASH) diet<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>344<\/Volume>        <Issue>1<\/Issue>        <Page>3<\/Page>        <Year>2001<\/Year>        <Authors>          <Author>Sacks, F.M.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1708454\" medline_id=\"21753804\">        <Title>Long-chain omega-3 fatty acids and blood pressure<\/Title>        <SourceTitle>American Journal of Hypertension<\/SourceTitle>        <PubMedTitle>Am J Hypertens<\/PubMedTitle>        <Volume>24<\/Volume>        <Issue>10<\/Issue>        <Page>1121<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Liu, J.C.<\/Author>          <Author>Conklin, S.M.<\/Author>          <Author>Manuck, S.B.<\/Author>          <Author>Yao, J.K.<\/Author>          <Author>Muldoon, M.F.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876567\" medline_id=\"22846984\">        <Title>The Dietary Approaches to Stop Hypertension (DASH) eating pattern in special populations<\/Title>        <SourceTitle>Current Hypertension Reports<\/SourceTitle>        <PubMedTitle>Curr Hypertens Rep<\/PubMedTitle>        <Volume>14<\/Volume>        <Issue>5<\/Issue>        <Page>388<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Tyson, C.C.<\/Author>          <Author>Nwankwo, C.<\/Author>          <Author>Lin, P.H.<\/Author>          <Author>Svetkey, L.P.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876625\" medline_id=\"20101007\">        <Title>Effects of the DASH diet alone and in combination with exercise and weight loss on blood pressure and cardiovascular biomarkers in men and women with high blood pressure: The ENCORE study<\/Title>        <SourceTitle>Archives of Internal Medicine<\/SourceTitle>        <PubMedTitle>Arch Intern Med<\/PubMedTitle>        <Volume>170<\/Volume>        <Issue>2<\/Issue>        <Page>126<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Blumenthal, J.A.<\/Author>          <Author>Babyak, M.A.<\/Author>          <Author>Hinderliter, A.<\/Author>          <Author>Watkins, L.L.<\/Author>          <Author>Craighead, L.<\/Author>          <Author>Lin, P.H.<\/Author>          <Author>Caccia, C.<\/Author>          <Author>Johnson, J.<\/Author>          <Author>Waugh, R.<\/Author>          <Author>Sherwood, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1876666\" medline_id=\"22867091\">        <Title>Recommending salt intake reduction to the hypertensive patient: More than just lip service<\/Title>        <SourceTitle>High Blood Pressure and Cardiovascular Prevention: The Official Journal of the Italian Society of Hypertension<\/SourceTitle>        <PubMedTitle>High Blood Press Cardiovasc Prev<\/PubMedTitle>        <Volume>19<\/Volume>        <Issue>2<\/Issue>        <Page>59<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Strazzullo, P.<\/Author>          <Author>D&apos;Elia, L.<\/Author>          <Author>Cairella, G.<\/Author>          <Author>Scalfi, L.<\/Author>          <Author>Schiano di Cola, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1877431\" medline_id=\"22585275\">        <Title>Role of dietary therapies in the prevention and treatment of hypertension<\/Title>        <SourceTitle>Nature Reviews. Nephrology<\/SourceTitle>        <PubMedTitle>Nat Rev Nephrol<\/PubMedTitle>        <Volume>8<\/Volume>        <Issue>7<\/Issue>        <Page>413<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Mohanlal, V.<\/Author>          <Author>Parsa, A.<\/Author>          <Author>Weir, M.R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1879333\" medline_id=\"19805640\">        <Title>Mediterranean-style diet effect on the structural properties of the erythrocyte cell membrane of hypertensive patients: The prevencion con dieta mediterranea study<\/Title>        <SourceTitle>Hypertension<\/SourceTitle>        <PubMedTitle>Hypertension<\/PubMedTitle>        <Volume>54<\/Volume>        <Issue>5<\/Issue>        <Page>1143<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Barceló, F.<\/Author>          <Author>Perona, J.S.<\/Author>          <Author>Prades, J.<\/Author>          <Author>Funari, S.S.<\/Author>          <Author>Gomez-Gracia, E.<\/Author>          <Author>Conde, M.<\/Author>          <Author>Estruch, R.<\/Author>          <Author>Ruiz-Gutiérrez, V.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2815136\" medline_id=\"29565029\">        <Title>Hypertension<\/Title>        <SourceTitle>Nature Reviews. Disease Primers<\/SourceTitle>        <PubMedTitle>Nat Rev Dis Primers<\/PubMedTitle>        <Volume>4<\/Volume>        <Page>18014<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Oparil, S.<\/Author>          <Author>Acelajado, M.C.<\/Author>          <Author>Bakris, G.L.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"604\" modifiedDate=\"20190514104448\">    <Title>Pharmacotherapy<\/Title>    <Body>      <para>The cut-off point for initiating drug therapy for hypertension in a patient without preexisting cardiovascular disease (CVD) is generally considered to be 140/90 mmHg, although the 2017 U.S. ACC/AHA guideline specifies that in patients with preexisting cardiovascular disease, or in those without a CVD event but with 10% or greater risk of a CVD event within 10 years, antihypertensive drug therapy should be at blood pressure levels of 130/90 mmHg (<REF id=\"2815136\">Oparil, S. et al., 2018<\/REF>). Benefits of antihypertensive drug therapy are especially significant in the elderly, diabetics and other high-risk patients, although treatment of all degrees of hypertension has been shown consistently to result in reduced risk of stroke, CHD and all-cause mortality. The HOT (Hypertension Optimal Treatment) study, the largest intervention trial conducted at that time in the area of hypertension, confirmed that reducing diastolic blood pressure from 105 mmHg to 83 mmHg incurs a 30% reduction in the risk of cardiovascular events. The study included nearly 19,000 patients treated for more than 71,000 patient years. This study also provided the best evidence to date regarding optimal blood pressure targets: the lowest rate of cardiovascular events was achieved with systolic and diastolic pressure levels of 138.5 mmHg and 82.6 mmHg, respectively (<REF id=\"485752\">Hansson, L. et al., 1998<\/REF>). Good long-term adherence to drug therapy is vital, however. Studies have shown that all benefits of antihypertensive drug therapy are quickly lost after discontinuation of therapy (<REF id=\"1257708\">Holman, R.R. et al., 2008<\/REF>; <REF id=\"1875547\">Ruilope, L.M., 2011<\/REF>). <\/para>      <para>The prevalence of <BACKGROUNDER id=\"145\">Metabolic Syndrome<\/BACKGROUNDER> is higher among patients with essential hypertension, and particularly among those with uncontrolled hypertension, as compared to the general population. Furthermore, among those with hypertension, the prevalence of metabolic syndrome varies by age and gender (<REF id=\"1509815\">Redon, J. et al., 2009<\/REF>). The risk of cardiovascular and renal events is significantly elevated in subjects with hypertension in the context of metabolic syndrome (<REF id=\"1358058\">Redon, J. et al., 2008<\/REF>), underlining the importance of treatment. Given the increased cardiovascular risk in the setting of metabolic syndrome, 130/85 mmHg is specified by the European Society of Hypertension (ESH) guidelines as the threshold for antihypertensive drug therapy in the absence of diabetes, although in patients without organ damage and blood pressure &lt;140/90 mmHg, nonpharmacological interventions should be used as first-line therapy. The treatment goal is &lt;130/80 mmHg (<REF id=\"1509815\">Redon, J. et al., 2009<\/REF>).<\/para>      <para>A wide variety of options are available for the treatment of hypertension, as indicated in the following table.<FREETABLE>27<\/FREETABLE>      <\/para>    <\/Body>    <References>      <Reference id=\"485752\" medline_id=\"9635947\">        <Title>Effects of intensive blood-pressure lowering and low-dose aspirin in patients with hypertension: Principal results of the hypertension optimal treatment (HOT) randomised trial<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>351<\/Volume>        <Issue>9118<\/Issue>        <Page>1755<\/Page>        <Year>1998<\/Year>        <Authors>          <Author>Hansson, L.<\/Author>          <Author>zanchetti, A.<\/Author>          <Author>Carruthers, S.G.<\/Author>          <Author>Dahlöf, B.<\/Author>          <Author>Elmfeldt, D.<\/Author>          <Author>Julius, S.<\/Author>          <Author>Ménard, J.<\/Author>          <Author>Rahn, K.H.<\/Author>          <Author>Wedel, H.<\/Author>          <Author>Westerling, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1257708\" medline_id=\"18784091\">        <Title>Long-term follow-up after tight control of blood pressure in type 2 diabetes<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>359<\/Volume>        <Issue>15<\/Issue>        <Page>1565<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Holman, R.R.<\/Author>          <Author>Paul, S.K.<\/Author>          <Author>Bethel, M.A.<\/Author>          <Author>Neil, H.A.<\/Author>          <Author>Matthews, D.R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1358058\" medline_id=\"18806611\">        <Title>The metabolic syndrome in hypertension: European society of hypertension position statement<\/Title>        <SourceTitle>Journal of Hypertension<\/SourceTitle>        <PubMedTitle>J Hypertens<\/PubMedTitle>        <Volume>26<\/Volume>        <Issue>10<\/Issue>        <Page>1891<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Redon, J.<\/Author>          <Author>Cifkova, R.<\/Author>          <Author>Laurent, S.<\/Author>          <Author>Nilsson, P.<\/Author>          <Author>Narkiewicz, K.<\/Author>          <Author>Erdine, S.<\/Author>          <Author>Mancia, G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1509815\" medline_id=\"19413186\">        <Title>Hypertension in the metabolic syndrome: Summary of the new position statement of the European Society of Hypertension<\/Title>        <SourceTitle>Polskie Archiwum Medycyny Wewnetrznej<\/SourceTitle>        <PubMedTitle>Pol Arch Med Wewn<\/PubMedTitle>        <Volume>119<\/Volume>        <Issue>4<\/Issue>        <Page>255<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Redon, J.<\/Author>          <Author>Cífková, R.<\/Author>          <Author>Narkiewicz, K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1875547\" medline_id=\"22027655\">        <Title>Current challenges in the clinical management of hypertension<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>9<\/Volume>        <Issue>5<\/Issue>        <Page>267<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Ruilope, L.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2815136\" medline_id=\"29565029\">        <Title>Hypertension<\/Title>        <SourceTitle>Nature Reviews. Disease Primers<\/SourceTitle>        <PubMedTitle>Nat Rev Dis Primers<\/PubMedTitle>        <Volume>4<\/Volume>        <Page>18014<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Oparil, S.<\/Author>          <Author>Acelajado, M.C.<\/Author>          <Author>Bakris, G.L.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>    <Section sectionId=\"605\" modifiedDate=\"20120824015734\">      <Title>Diuretics<\/Title>      <Body>        <para>Diuretics work by flushing excess sodium and water from the body. They are inexpensive, effective and well tolerated by most patients. Early use of higher-dose diuretics was associated with unwanted side effects (potassium depletion, reduced glucose tolerance, ventricular ectopic beats and erectile dysfunction), but at the currently recommended lower dose levels and with the introduction of potassium-sparing diuretics, most of these adverse events can be avoided. On the basis of their ability to decrease morbidity and mortality and their low cost, thiazide-type diuretics are considered useful as first-line antihypertensive agents (<REF id=\"1876569\">Sica, D.A. et al., 2011<\/REF>). Data obtained over several decades of clinical usage indicates that thiazide diuretics are safe, effective and generally well tolerated, and continue to have a role in the treatment of hypertension, either as monotherapy or in combination regimens (<REF id=\"1431455\">Moser, M. and Feig, P.U., 2009<\/REF>; <REF id=\"1877428\">Slim, H.B. et al., 2011<\/REF>). Loop diuretics, on the other hand, should not be prescribed for first-line use due to a lack of outcome data (<REF id=\"1876569\">Sica, D.A. et al., 2011<\/REF>). <\/para>        <para>The Antihypertensive and Lipid-Lowering Treatment to Prevent Heart Attack Trial (ALLHAT), conducted from February 1994 through March 2002, compared several drugs for use in starting treatment for high blood pressure and found thiazide-type diuretics to be more effective, and less expensive, in treating high blood pressure and preventing cardiovascular disease. The ALLHAT study is the largest study to date evaluating different types of antihypertensive drugs. More than 33,000 participants from 623 clinical sites in North America were randomly assigned to receive the diuretic chlorthalidone, the calcium channel blocker amlodipine or the ACE inhibitor lisinopril. Researchers found the diuretic to be the preferred first-step treatment of hypertension because it provided better control of hypertension, more effectively reduced complications from hypertension, specifically heart failure, and was 10 to 20 times less expensive than the other study medications (<REF id=\"707284\">Furberg, C.D. et al., 2002<\/REF>).<\/para>        <para>A population-based case-control study of 380 hypertensive patients who had sustained a first ischemic stroke, as well as 2,790 other hypertensive patients without a history of stroke, has appeared in the literature. The results indicated that the adjusted risk of ischemic stroke was consistently lower among subjects treated with a diuretic than those taking a beta-blocker, calcium channel blocker or ACE inhibitor as single-drug therapy. This was true both in subjects with and without a history of cardiovascular disease (<REF id=\"659630\">Klungel, O.H. et al., 2001<\/REF>).<\/para>        <para>Diuretics have also been shown to be the most effective class of antihypertensive drugs for preventing the subsequent development of <BACKGROUNDER id=\"36\">Heart Failure<\/BACKGROUNDER> in at-risk patients (<REF id=\"1655367\">Sciarretta, S. et al., 2011<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"659630\" medline_id=\"11146696\">          <Title>Antihypertensive drug therapies and the risk of ischemic stroke<\/Title>          <SourceTitle>Archives of Internal Medicine<\/SourceTitle>          <PubMedTitle>Arch Intern Med<\/PubMedTitle>          <Volume>161<\/Volume>          <Issue>1<\/Issue>          <Page>37<\/Page>          <Year>2001<\/Year>          <Authors>            <Author>Klungel, O.H.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"707284\" medline_id=\"12479763\">          <Title>Major outcomes in high-risk hypertensive patients randomized to angiotensin-converting enzyme inhibitor or calcium channel blocker vs diuretic. The Antihypertensive and Lipid-Lowering treatment to prevent Heart Attack Trial (ALLHAT)<\/Title>          <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>          <PubMedTitle>JAMA<\/PubMedTitle>          <Volume>288<\/Volume>          <Issue>23<\/Issue>          <Page>2981<\/Page>          <Year>2002<\/Year>          <Authors>            <Author>Furberg, C.D.<\/Author>            <Author>Wright, J.T. Jr.<\/Author>            <Author>Davis, B.R.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1431455\" medline_id=\"19901136\">          <Title>Fifty years of thiazide diuretic therapy for hypertension<\/Title>          <SourceTitle>Archives of Internal Medicine<\/SourceTitle>          <PubMedTitle>Arch Intern Med<\/PubMedTitle>          <Volume>169<\/Volume>          <Issue>20<\/Issue>          <Page>1851<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Moser, M.<\/Author>            <Author>Feig, P.U.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1655367\" medline_id=\"21059964\">          <Title>Antihypertensive treatment and development of heart failure in hypertension: A Bayesian network meta-analysis of studies in patients with hypertension and high cardiovascular risk<\/Title>          <SourceTitle>Archives of Internal Medicine<\/SourceTitle>          <PubMedTitle>Arch Intern Med<\/PubMedTitle>          <Volume>171<\/Volume>          <Issue>5<\/Issue>          <Page>384<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Sciarretta, S.<\/Author>            <Author>Palano, F.<\/Author>            <Author>Tocci, G.<\/Author>            <Author>Baldini, R.<\/Author>            <Author>Volpe, M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1876569\" medline_id=\"21896142\">          <Title>Thiazide and loop diuretics<\/Title>          <SourceTitle>Journal of Clinical Hypertension (Greenwich)<\/SourceTitle>          <PubMedTitle>J Clin Hypertens (Greenwich)<\/PubMedTitle>          <Volume>13<\/Volume>          <Issue>9<\/Issue>          <Page>639<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Sica, D.A.<\/Author>            <Author>Carter, B.<\/Author>            <Author>Cushman, W.<\/Author>            <Author>Hamm, L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1877428\" medline_id=\"21550576\">          <Title>Older blood pressure medications-do they still have a place?<\/Title>          <SourceTitle>American Journal of Cardiology<\/SourceTitle>          <PubMedTitle>Am J Cardiol<\/PubMedTitle>          <Volume>108<\/Volume>          <Issue>2<\/Issue>          <Page>308<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Slim, H.B.<\/Author>            <Author>Black, H.R.<\/Author>            <Author>Thompson, P.D.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"606\" modifiedDate=\"20180416013508\">      <Title>Beta-adrenoceptor Antagonists<\/Title>      <Body>        <para>Beta blockers are safe, inexpensive and effective and are used extensively in the treatment of all degrees of hypertension and in patients of all ages. In addition to affecting the regulation of circulation by reducing myocardial contractility and cardiac output, these agents also reduce the secretion of renin, with a resulting decrease in the levels of angiotensin II. Beginning with the introduction of propranolol in the mid-1960s, approximately 30 beta blockers are now available for the treatment of hypertension. They are available as nonselective agents, which block both beta1- and beta2-adrenoceptors, and cardioselective agents, which have higher affinity for beta1-receptors. In spite of the plethora of newer treatment options available, beta blockers continue to be recommended for the treatment of hypertension in many national guidelines. They are especially indicated for the treatment of patients with heart failure with reduced left ventricular ejection fraction or post-myocardial infarction (<REF id=\"1876576\">Poirier, L. and Lacourcière, Y., 2012<\/REF>; <REF id=\"2815136\">Oparil, S. et al., 2018<\/REF>).<\/para>        <para>A 2007 Cochrane review was undertaken with the objective of reevaluating the role of beta blockers as first-line therapy for hypertension relative to other antihypertensive drug classes. The reviewers analyzed data from 13 trials comparing beta blockers to placebo, calcium channel blockers, diuretics or renin-angiotensin system (RAS) inhibitors. They concluded that first-line status is no longer warranted for the beta blocker class, which was associated with a higher rate of all-cause mortality as compared to calcium channel blockers, a relatively weak effect on stroke reduction and complete lack of effect on coronary heart disease. Furthermore, there was a noticeable trend toward worse outcomes with beta blockers as compared to calcium channel blockers, RAS inhibitors and thiazide diuretics in the trials reviewed (<REF id=\"1157134\">Wiysonge, C.S. et al., 2007<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"1157134\" medline_id=\"17253471\">          <Title>Beta-blockers for hypertension<\/Title>          <SourceTitle>Cochrane Database of Systematic Reviews (CDROM)<\/SourceTitle>          <PubMedTitle>Cochrane Database Syst Rev<\/PubMedTitle>          <Issue>1<\/Issue>          <Year>2007<\/Year>          <Authors>            <Author>Wiysonge, C.S.<\/Author>            <Author>Bradley, H.<\/Author>            <Author>Mayosi, B.M.<\/Author>            <Author>Maroney, R.<\/Author>            <Author>Mbewu, A.<\/Author>            <Author>Opie, L.H.<\/Author>            <Author>Volmink, J.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1876576\" medline_id=\"22595449\">          <Title>The evolving role of beta-adrenergic receptor blockers in managing hypertension<\/Title>          <SourceTitle>Canadian Journal of Cardiology<\/SourceTitle>          <PubMedTitle>Can J Cardiol<\/PubMedTitle>          <Volume>28<\/Volume>          <Issue>3<\/Issue>          <Page>334<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Poirier, L.<\/Author>            <Author>Lacourcière, Y.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2815136\" medline_id=\"29565029\">          <Title>Hypertension<\/Title>          <SourceTitle>Nature Reviews. Disease Primers<\/SourceTitle>          <PubMedTitle>Nat Rev Dis Primers<\/PubMedTitle>          <Volume>4<\/Volume>          <Page>18014<\/Page>          <Year>2018<\/Year>          <Authors>            <Author>Oparil, S.<\/Author>            <Author>Acelajado, M.C.<\/Author>            <Author>Bakris, G.L.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"607\" modifiedDate=\"20130121040741\">      <Title>Imidazoline I1 Receptor Agonists<\/Title>      <Body>        <para>Centrally acting imidazoline I1 receptors have been proposed as a target for antihypertensive drugs. Agonism of central I1 receptors with drugs such as moxonidine and rilmenidine produces peripheral sympathoinhibition, vasodilation and decreased peripheral vascular resistance. These drugs lower left ventricular end-diastolic and end-systolic volume and reduce left ventricular hypertrophy without significantly affecting heart rate, stroke volume, cardiac output or pulmonary artery pressure. They have a favorable safety profile and have been shown to be equiactive to other drug classes in the treatment of hypertension (<REF id=\"659631\">Van Zwieten, P.A. and Peters, S.L., 1999<\/REF>). <\/para>      <\/Body>      <References>        <Reference id=\"659631\" medline_id=\"10415946\">          <Title>Central I1 -imidazoline receptors as targets of centrally acting antihypertensive drugs. Clinical pharmacology of moxonidine and rilmenidine<\/Title>          <SourceTitle>Annals of the New York Academy of Sciences<\/SourceTitle>          <PubMedTitle>Ann N Y Acad Sci<\/PubMedTitle>          <Volume>881<\/Volume>          <Page>420<\/Page>          <Year>1999<\/Year>          <Authors>            <Author>Van Zwieten, P.A.<\/Author>            <Author>Peters, S.L.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"608\" modifiedDate=\"20180416010054\">      <Title>The Renin-Angiotensin System<\/Title>      <Body>        <para>The renin-angiotensin system (RAS) is a coordinated hormonal cascade that regulates blood pressure and electrolyte and fluid balance (&quot;pressure-volume homeostasis&quot;) under normal and various pathophysiological conditions (<REF id=\"2815136\">Oparil, S. et al., 2018<\/REF>).<\/para>        <para>During the first step of the renin-angiotensin cascade, the circulating and biologically inactive glycoprotein angiotensinogen is cleaved by active renin in the plasma to give the decapeptide angiotensin I (Ang I). The latter intermediate is further transformed by angiotensin-converting enzyme (ACE), providing the active octapeptide angiotensin II (Ang II), which is responsible for multiple physiological effects such as vasoconstriction, stimulation of aldosterone release and renal reabsorption of sodium. Ang II is regarded as a major mediator of hypertensive disorders, and the renin-angiotensin system is a prime target for intervention in the treatment of arterial hypertension (<REF id=\"1529649\">Paulis, L. and Unger, T., 2010<\/REF>).<\/para>        <para>Blockade of the renin-angiotensin system, whether via administration of angiotensin I-converting enzyme (ACE) inhibitors, angiotensin AT1 receptor blockers (ARBs), renin inhibitors or a combination thereof, has over the years been recognized as one of the most successful therapeutic approaches yet attempted in the field of medicine (<REF id=\"1151085\">Azizi, M. and Wuerzner, G., 2007<\/REF>; <REF id=\"1737279\">Unger, T. et al., 2011<\/REF>). <\/para>      <\/Body>      <References>        <Reference id=\"1151085\" medline_id=\"17868792\">          <Title>Rationale for combining blockers of the renin-angiotensin system<\/Title>          <SourceTitle>Seminars in Nephrology<\/SourceTitle>          <PubMedTitle>Semin Nephrol<\/PubMedTitle>          <Volume>27<\/Volume>          <Issue>5<\/Issue>          <Page>544<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Azizi, M.<\/Author>            <Author>Wuerzner, G.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1529649\" medline_id=\"20567239\">          <Title>Novel therapeutic targets for hypertension<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>7<\/Volume>          <Issue>8<\/Issue>          <Page>431<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Paulis, L.<\/Author>            <Author>Unger, T.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1737279\" medline_id=\"21951628\">          <Title>Therapeutic perspectives in hypertension: Novel means for renin-angiotensin-aldosterone system modulation and emerging device-based approaches<\/Title>          <SourceTitle>European Heart Journal<\/SourceTitle>          <PubMedTitle>Eur Heart J<\/PubMedTitle>          <Volume>32<\/Volume>          <Issue>22<\/Issue>          <Page>2739<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Unger, T.<\/Author>            <Author>Paulis, L.<\/Author>            <Author>Sica, D.A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2815136\" medline_id=\"29565029\">          <Title>Hypertension<\/Title>          <SourceTitle>Nature Reviews. Disease Primers<\/SourceTitle>          <PubMedTitle>Nat Rev Dis Primers<\/PubMedTitle>          <Volume>4<\/Volume>          <Page>18014<\/Page>          <Year>2018<\/Year>          <Authors>            <Author>Oparil, S.<\/Author>            <Author>Acelajado, M.C.<\/Author>            <Author>Bakris, G.L.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>      <\/References>      <Section sectionId=\"609\" modifiedDate=\"20121218020642\">        <Title>ACE Inhibitors<\/Title>        <Body>          <para>Angiotensin-converting enzyme (ACE) is produced in the endothelium of somatic tissues and is a pivotal member of the renin-angiotensin system. It mediates various local and systemic effects within the cardiovascular system by removing the carboxy terminal dipeptide from the decapeptide Ang I to generate Ang II. Blockade of ACE normalizes abnormally high systemic vascular tone, reversed cardiac myocyte hypertrophy and fibrosis. Captopril, the original member of the ACE-inhibitor class, was introduced in 1980 and has become a classic in the field of rational drug design. Nearly 20 ACE inhibitors are now available for clinical use. ACE inhibitors are recommended as first-line treatment for hypertensive patients with type 1 diabetes or with diabetic nephropathy due to their favorable effects on renal function (<REF id=\"659626\">Carretero, O.A. and Oparil, S., 2000<\/REF>; <REF id=\"831897\">López-Sendón, J. et al., 2004<\/REF>). They are also used in the treatment of heart failure. ACE inhibitors are generally safe and well tolerated, with persistent dry cough as the most troublesome side effect (<REF id=\"1876570\">Powers, B. et al., 2011<\/REF>).<\/para>          <para>A comparative effectiveness analysis by the Agency for Healthcare Research and Quality has concluded that there are no overall differences between ACE inhibitors and the relatively newer angiotensin receptor blockers in terms of blood pressure reduction, mortality rates and major cardiovascular events (<REF id=\"1876570\">Powers, B. et al., 2011<\/REF>). <\/para>        <\/Body>        <References>          <Reference id=\"659626\" medline_id=\"10653838\">            <Title>Essential hypertension: Part II: Treatment<\/Title>            <SourceTitle>Circulation<\/SourceTitle>            <PubMedTitle>Circulation<\/PubMedTitle>            <Volume>101<\/Volume>            <Issue>4<\/Issue>            <Page>446<\/Page>            <Year>2000<\/Year>            <Authors>              <Author>Carretero, O.A.<\/Author>              <Author>Oparil, S.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"831897\" medline_id=\"15302105\">            <Title>Expert consensus document on angiotensin converting enzyme inhibitors in cardiovascular disease. The Task Force on ACE-inhibitors of the European Society of Cardiology<\/Title>            <SourceTitle>European Heart Journal<\/SourceTitle>            <PubMedTitle>Eur Heart J<\/PubMedTitle>            <Volume>25<\/Volume>            <Issue>16<\/Issue>            <Page>1454<\/Page>            <Year>2004<\/Year>            <Authors>              <Author>López-Sendón, J.<\/Author>              <Author>Swedberg, K.<\/Author>              <Author>McMurray, J.<\/Author>              <Author>et al.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1876570\" medline_id=\"22088101\">            <Title>Updates on the treatment of essential hypertension: A summary of AHRQ&apos;s comparative effectiveness review of angiotensin-converting enzyme inhibitors, angiotensin II receptor blockers, and direct renin inhibitors<\/Title>            <SourceTitle>Journal of Managed Care Pharmacy<\/SourceTitle>            <PubMedTitle>J Manag Care Pharm<\/PubMedTitle>            <Volume>17<\/Volume>            <Issue>Suppl. 8<\/Issue>            <Page>S1<\/Page>            <Year>2011<\/Year>            <Authors>              <Author>Powers, B.<\/Author>              <Author>Greene, L.<\/Author>              <Author>Balfe, L.M.<\/Author>            <\/Authors>          <\/Reference>        <\/References>      <\/Section>      <Section sectionId=\"610\" modifiedDate=\"20180416010338\">        <Title>ACE2 Modulators<\/Title>        <Body>          <para>More than a decade ago, scientists at Millennium conducted a genomics-based search for the gene determining why some patients respond better than others to this widely used class of antihypertensive agents. They discovered a variant of the gene encoding ACE which they designated <I>ACE2<\/I>. Unlike ACE, which is expressed ubiquitously in most tissues, <I>ACE2<\/I> is expressed most highly in the kidneys, epithelium, lungs and heart. The ACE2 protein has regions of substantial homology to ACE and, like the latter, has been confirmed to cleave Ang I and other key vasoactive peptides. However, the activity of ACE2 is distinct. This was confirmed by tests demonstrating that neither lisinopril nor captopril was capable of blocking ACE2 conversion of Ang I (<REF id=\"591520\">Donoghue, M. et al., 2000<\/REF>; <REF id=\"1879336\">Clarke, N.E. and Turner, A.J., 2012<\/REF>). <\/para>          <para>The principal role of ACE2 is degradation of Ang II, triggering the formation of the vasodilatory peptide angiotensin 1-7, which counteracts the effects of Ang II (<REF id=\"1879338\">Tikellis, C. and Thomas, M.C., 2012<\/REF>; <REF id=\"1879336\">Clarke, N.E. and Turner, A.J., 2012<\/REF>). Studies in mice have demonstrated that the targeted disruption of the <I>ACE2<\/I> gene results in increased systemic levels of angiotensin II, impaired myocardial contractility and the upregulation of hypoxia-induced genes in the heart. Further genetic ablation of the <I>ACE<\/I> gene in <I>ACE2<\/I>-null mice led to complete reversal of the cardiac phenotype, indicating that ACE and ACE2 are negative regulators of one another (<REF id=\"752047\">Danilczyk, U. et al., 2003<\/REF>; <REF id=\"752046\">Oudit, G.Y. et al., 2003<\/REF>). A Chinese study in 11,051 subjects has provided further data implicating the polymorphism G8790A of the <I>ACE2<\/I> gene as a risk factor for essential hypertension (<REF id=\"1879337\">Lu, N. et al., 2012<\/REF>).<\/para>          <para>ACE2 has been identified as a target for the treatment of atherosclerosis, hypertension, cardiovascular disease and chronic kidney disease (<REF id=\"2815136\">Oparil, S. et al., 2018<\/REF>), as well as inflammatory bowel disease and severe acute respiratory syndrome (SARS) (<REF id=\"1879336\">Clarke, N.E. and Turner, A.J., 2012<\/REF>). Current strategies for modulating ACE2 include small molecules, ACE2 augmenters such as xanthenone, and gene therapies, including human recombinant ACE2 and adenoviral (Ad)-ACE2 (<REF id=\"1879338\">Tikellis, C. and Thomas, M.C., 2012<\/REF>).<\/para>        <\/Body>        <References>          <Reference id=\"591520\" medline_id=\"10969042\">            <Title>A novel angiotensin-converting enzyme-related carboxypeptidase (ACE2) converts angiotensin I to angiotensin 1-9<\/Title>            <SourceTitle>Circulation Research<\/SourceTitle>            <PubMedTitle>Circ Res<\/PubMedTitle>            <Volume>87<\/Volume>            <Issue>5<\/Issue>            <Page>e1<\/Page>            <Year>2000<\/Year>            <Authors>              <Author>Donoghue, M.<\/Author>              <Author>Hsieh, F.<\/Author>              <Author>Baronas, E.<\/Author>              <Author>et al.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"752046\" medline_id=\"12691672\">            <Title>The role of ACE2 in cardiovascular physiology<\/Title>            <SourceTitle>Trends in Cardiovascular Medicine<\/SourceTitle>            <PubMedTitle>Trends Cardiovasc Med<\/PubMedTitle>            <Volume>13<\/Volume>            <Issue>3<\/Issue>            <Page>93<\/Page>            <Year>2003<\/Year>            <Authors>              <Author>Oudit, G.Y.<\/Author>              <Author>Crackower, M.A.<\/Author>              <Author>Backx, P.H.<\/Author>              <Author>Penninger, J.M.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"752047\" medline_id=\"12700890\">            <Title>A story of two ACEs<\/Title>            <SourceTitle>Journal of Molecular Medicine<\/SourceTitle>            <PubMedTitle>J Mol Med<\/PubMedTitle>            <Volume>81<\/Volume>            <Issue>4<\/Issue>            <Page>227<\/Page>            <Year>2003<\/Year>            <Authors>              <Author>Danilczyk, U.<\/Author>              <Author>Eriksson, U.<\/Author>              <Author>Crackower, M.A.<\/Author>              <Author>Penninger, J.M.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1879336\" medline_id=\"22121476\">            <Title>Angiotensin-converting enzyme 2: The first decade<\/Title>            <SourceTitle>International Journal of Hypertension<\/SourceTitle>            <PubMedTitle>Int J Hypertens<\/PubMedTitle>            <Volume>2012<\/Volume>            <Page>307315<\/Page>            <Year>2012<\/Year>            <Authors>              <Author>Clarke, N.E.<\/Author>              <Author>Turner, A.J.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1879337\" medline_id=\"22297693\">            <Title>ACE2 gene polymorphism and essential hypertension: An updated meta-analysis involving 11,051 subjects<\/Title>            <SourceTitle>Molecular Biology Reports<\/SourceTitle>            <PubMedTitle>Mol Biol Rep<\/PubMedTitle>            <Volume>39<\/Volume>            <Issue>6<\/Issue>            <Page>6581<\/Page>            <Year>2012<\/Year>            <Authors>              <Author>Lu, N.<\/Author>              <Author>Yang, Y.<\/Author>              <Author>Wang, Y.<\/Author>              <Author>et al.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1879338\" medline_id=\"22536270\">            <Title>Angiotensin-converting enzyme 2 (ACE2) is a key modulator of the renin angiotensin system in health and disease<\/Title>            <SourceTitle>International Journal of Peptides<\/SourceTitle>            <PubMedTitle>Int J Pept<\/PubMedTitle>            <Volume>2012<\/Volume>            <Page>256294<\/Page>            <Year>2012<\/Year>            <Authors>              <Author>Tikellis, C.<\/Author>              <Author>Thomas, M.C.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"2815136\" medline_id=\"29565029\">            <Title>Hypertension<\/Title>            <SourceTitle>Nature Reviews. Disease Primers<\/SourceTitle>            <PubMedTitle>Nat Rev Dis Primers<\/PubMedTitle>            <Volume>4<\/Volume>            <Page>18014<\/Page>            <Year>2018<\/Year>            <Authors>              <Author>Oparil, S.<\/Author>              <Author>Acelajado, M.C.<\/Author>              <Author>Bakris, G.L.<\/Author>              <Author>et al.<\/Author>            <\/Authors>          <\/Reference>        <\/References>      <\/Section>      <Section sectionId=\"611\" modifiedDate=\"20161111115018\">        <Title>Renin Inhibitors<\/Title>        <Body>          <para>Renin is a proteolytic enzyme synthesized in the kidney. It is considered a highly rational target for intervention within the RAS, as renin catalyzes the first, rate-limiting and tightly coordinated step in the cascade (<REF id=\"1151085\">Azizi, M. and Wuerzner, G., 2007<\/REF>; <REF id=\"1737279\">Unger, T. et al., 2011<\/REF>). <\/para>          <para>The blockade of angiotensin II production through the inhibition of renin has received considerable attention due to the specificity of the enzyme; angiotensinogen is the only known substrate for renin. The first renin inhibitors studied were peptide compounds with low bioavailability, poor specificity and weak antihypertensive activity (<REF id=\"1078752\">Staessen, J.A. et al., 2006<\/REF>; <REF id=\"1151085\">Azizi, M. and Wuerzner, G., 2007<\/REF>). Efforts to develop orally active renin inhibitors initially met with many difficulties, but finally culminated in the successful development and launch of aliskiren.  <\/para>          <para>In March 2007, the U.S. FDA approved aliskiren fumarate (Novartis&apos;s Tekturna) as the first renin inhibitor worldwide for the treatment of hypertension. The once-daily, oral direct renin inhibitor is indicated for the treatment of high blood pressure as monotherapy or in combination with other high blood pressure medications. In an extensive clinical trial program involving more than 6,400 patients, aliskiren provided significant blood pressure reduction for a full 24 hours. Furthermore, aliskiren provided added efficacy when used in combination with other commonly used antihypertensive medications including hydrochlorothiazide (<REF id=\"1063449\">Villamil, A. et al., 2007<\/REF>), ACE inhibitors and angiotensin receptor blockers (<REF id=\"1072077\">O&apos;Brien, E. et al., 2007<\/REF>). <\/para>          <para>It should be noted, however, that a report analyzing data from six clinical trials conducted to examine the efficacy and safety of aliskiren as a treatment for mild to moderate hypertension in more than 5,000 patients reported that this new class of orally active antihypertensive drugs is no more effective than ACE inhibitors, ARBs or diuretics for lowering blood pressure (<REF id=\"1134910\">Sealey, J.E. and Laragh, J.H., 2007<\/REF>). A Cochrane review has similar concluded that the renin inhibitor aliskiren has a blood pressure-lowering effect that is comparable in magnitude to that of ACE inhibitors and angiotensin receptor blockers (<REF id=\"1400126\">Musini, V.M. et al., 2009<\/REF>). A subsequent meta-analysis of randomized, controlled studies comparing aliskiren with ARBs (losartan, valsartan or irbesartan) has concluded that the two treatment approaches are comparable in terms of both efficacy and adverse events (<REF id=\"1604938\">Gao, D. et al., 2011<\/REF>).<\/para>          <para>In April 2012, U.S. labeling of aliskiren hemifumarate was updated to include new information from the FDA&apos;s review of the ALTITUDE (ClinicalTrials.gov Identifier NCT00549757) study. The labeling change includes a contraindication against combined use of aliskiren-based products with ACE inhibitors or ARBs in patients with diabetes. The FDA also requested the inclusion of a warning against the use of aliskiren-based products in patients with moderate renal impairment (estimated glomerular filtration rate &lt; 60 mL/min) who are also taking an ACE inhibitor or an ARB. The U.S. prescribing information was updated for Tekturna, Tekturna HCT (aliskiren fumarate/hydrochlorothiazide), Tekamlo (aliskiren fumarate/amlodipine) and Amturnide (aliskiren fumarate/amlodipine/hydrochlorothiazide). Aliskiren-based products will continue to be available in the U.S. for the treatment of hypertension in appropriate patients. In consultation with the FDA, Novartis also decided to voluntarily cease marketing in the U.S. of Valturna, a single-pill combination of aliskiren and the ARB valsartan.<COMPETITIVE id=\"137\">              <TABLE>                <TR>                  <TD>Renin inhibitors in development for the treatment of arterial hypertension<\/TD>                <\/TR>                <TR>                  <TD>Drug Name<\/TD>                  <TD>Organization<\/TD>                  <TD>Mechanism of Action<\/TD>                  <TD>Status<\/TD>                <\/TR>                <TR>                  <TD>                    <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=757907&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Imarikiren hydrochloride<\/a>                  <\/TD>                  <TD>Scohia Pharma<\/TD>                  <TD>Renin Inhibitors<\/TD>                  <TD>Phase II<\/TD>                <\/TR>              <\/TABLE>            <\/COMPETITIVE>          <\/para>        <\/Body>        <References>          <Reference id=\"1063449\" medline_id=\"17143194\">            <Title>Renin inhibition with aliskiren provides additive antihypertensive efficacy when used in combination with hydrochlorothiazide<\/Title>            <SourceTitle>Journal of Hypertension<\/SourceTitle>            <PubMedTitle>J Hypertens<\/PubMedTitle>            <Volume>25<\/Volume>            <Issue>1<\/Issue>            <Page>217<\/Page>            <Year>2007<\/Year>            <Authors>              <Author>Villamil, A.<\/Author>              <Author>Chrysant, S.G.<\/Author>              <Author>Calhoun, D.<\/Author>              <Author>Schober, B.<\/Author>              <Author>Hsu, H.<\/Author>              <Author>Matrisciano-Dimichino, L.<\/Author>              <Author>Zhang, J.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1072077\" medline_id=\"17159081\">            <Title>Aliskiren reduces blood pressure and suppresses plasma renin activity in combination with a thiazide diuretic, an angiotensin-converting enzyme inhibitor, or an angiotensin receptor blocker<\/Title>            <SourceTitle>Hypertension<\/SourceTitle>            <PubMedTitle>Hypertension<\/PubMedTitle>            <Volume>49<\/Volume>            <Issue>2<\/Issue>            <Page>276<\/Page>            <Year>2007<\/Year>            <Authors>              <Author>O&apos;Brien, E.<\/Author>              <Author>Barton, J.<\/Author>              <Author>Nussberger, J.<\/Author>              <Author>Mulcahy, D.<\/Author>              <Author>Jensen, C.<\/Author>              <Author>Dicker, P.<\/Author>              <Author>Stanton, A.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1078752\" medline_id=\"17055947\">            <Title>Oral renin inhibitors<\/Title>            <SourceTitle>The Lancet<\/SourceTitle>            <PubMedTitle>Lancet<\/PubMedTitle>            <Volume>368<\/Volume>            <Issue>9545<\/Issue>            <Page>1449<\/Page>            <Year>2006<\/Year>            <Authors>              <Author>Staessen, J.A.<\/Author>              <Author>Li, Y.<\/Author>              <Author>Richart, T.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1134910\" medline_id=\"17485026\">            <Title>Aliskiren, the first renin inhibitor for treating hypertension: Reactive renin secretion may limit its effectiveness<\/Title>            <SourceTitle>American Journal of Hypertension<\/SourceTitle>            <PubMedTitle>Am J Hypertens<\/PubMedTitle>            <Volume>20<\/Volume>            <Issue>5<\/Issue>            <Page>587<\/Page>            <Year>2007<\/Year>            <Authors>              <Author>Sealey, J.E.<\/Author>              <Author>Laragh, J.H.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1151085\" medline_id=\"17868792\">            <Title>Rationale for combining blockers of the renin-angiotensin system<\/Title>            <SourceTitle>Seminars in Nephrology<\/SourceTitle>            <PubMedTitle>Semin Nephrol<\/PubMedTitle>            <Volume>27<\/Volume>            <Issue>5<\/Issue>            <Page>544<\/Page>            <Year>2007<\/Year>            <Authors>              <Author>Azizi, M.<\/Author>              <Author>Wuerzner, G.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1400126\" medline_id=\"19158826\">            <Title>Blood pressure lowering efficacy of renin inhibitors for primary hypertension: A Cochrane systematic review<\/Title>            <SourceTitle>Journal of Human Hypertension<\/SourceTitle>            <PubMedTitle>J Hum Hypertens<\/PubMedTitle>            <Volume>23<\/Volume>            <Issue>8<\/Issue>            <Page>495<\/Page>            <Year>2009<\/Year>            <Authors>              <Author>Musini, V.M.<\/Author>              <Author>Fortin, P.M.<\/Author>              <Author>Bassett, K.<\/Author>              <Author>Wright, J.M.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1604938\" medline_id=\"21293386\">            <Title>Aliskiren vs. angiotensin receptor blockers in hypertension: Meta-analysis of randomized controlled trials<\/Title>            <SourceTitle>American Journal of Hypertension<\/SourceTitle>            <PubMedTitle>Am J Hypertens<\/PubMedTitle>            <Volume>24<\/Volume>            <Issue>5<\/Issue>            <Page>613<\/Page>            <Year>2011<\/Year>            <Authors>              <Author>Gao, D.<\/Author>              <Author>Ning, N.<\/Author>              <Author>Niu, X.<\/Author>              <Author>Wei, J.<\/Author>              <Author>Sun, P.<\/Author>              <Author>Hao, G.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1737279\" medline_id=\"21951628\">            <Title>Therapeutic perspectives in hypertension: Novel means for renin-angiotensin-aldosterone system modulation and emerging device-based approaches<\/Title>            <SourceTitle>European Heart Journal<\/SourceTitle>            <PubMedTitle>Eur Heart J<\/PubMedTitle>            <Volume>32<\/Volume>            <Issue>22<\/Issue>            <Page>2739<\/Page>            <Year>2011<\/Year>            <Authors>              <Author>Unger, T.<\/Author>              <Author>Paulis, L.<\/Author>              <Author>Sica, D.A.<\/Author>            <\/Authors>          <\/Reference>        <\/References>      <\/Section>      <Section sectionId=\"612\" modifiedDate=\"20170124011809\">        <Title>Angiotensin Receptor Blockers<\/Title>        <Body>          <para>During the early 1970s, the antagonism of angiotensin II at its receptor site was proposed as an alternative to ACE inhibition for suppressing Ang II activity. The approach could offer potentially improved treatments for hypertension and cardiac failure, as angiotensin II may be generated by enzymes other than ACE (<REF id=\"1151085\">Azizi, M. and Wuerzner, G., 2007<\/REF>). Furthermore, ACE is a nonspecific peptidyldipeptide hydrolase, and its inhibition inevitably interferes with other endogenous peptides such as bradykinin.<\/para>          <para>To date four angiotensin receptor subtypes --AT1 through AT4-- have been identified (<REF id=\"1529649\">Paulis, L. and Unger, T., 2010<\/REF>). The G-protein-linked AT1 receptor subtype is known to be the site of the major physiological effects of Ang II, including arterial vasoconstriction as well as tubular and glomerular effects. Experimental studies have shown that in the rat brain, angiotensin II receptors are mainly of the AT2 type. AT2 receptors have also been identified in female reproductive organs and in neuronal tumor cells. More recent studies have shown that AT2 receptors mediate the antiproliferative, vasodilatory and cardiovascular remodeling regression-inducing effects of angiotensin. AT3 and AT4 receptors were identified in the early 1990s; their roles have not yet been fully defined, although AT4 may be implicated in cognition (<REF id=\"1529649\">Paulis, L. and Unger, T., 2010<\/REF>; <REF id=\"1534666\">Gard, P.R., 2008<\/REF>; <REF id=\"1405960\">Wright, J.W. and Harding, J.W., 2008<\/REF>; <REF id=\"1593686\">Dasgupta, C. and Zhang, L., 2011<\/REF>).<\/para>          <para>In addition to its well-known vasoconstrictor effects, angiotensin II has more recently been reported to act as a proinflammatory mediator, contributing to the detrimental effects of inflammation that may in turn contribute to the pathogenesis of hypertension. Thus the antihypertensive activity of angiotensin receptor blockers (ARBs) may be due in part to their antiinflammatory mechanism of action, which furthermore contributes to their organ protective effects in vascular and renal tissue (<REF id=\"983594\">Dagenais, N.J. and Jamali, F., 2005<\/REF>; <REF id=\"983596\">Ruiz-Ortega, M. et al., 2006<\/REF>).<\/para>          <para>The tremendous number of clinical studies conducted on ARBs to date and their wide use over the years since the first drug in this class --losartan potassium-- reached the market, has confirmed their tolerability and efficacy in terms of improving survival, prognosis and quality of life for patients with arterial hypertension as well as other cardiovascular diseases (<REF id=\"983595\">Ribeiro, A.B., 2006<\/REF>), both as monotherapy and in combination with other antihypertensive drug classes. Most patients require more than one agent for effective blood pressure reduction, and angiotensin II blockers have been studied in a wide variety of combinations. Comparative studies confirm that ARB combinations, particularly those containing diuretics such as hydrochlorothiazide (HCTZ), are significantly more effective as compared to monotherapy regimens, both in terms of treating hypertension and reducing cardiovascular and renal complications (<REF id=\"1876563\">Greathouse, M.K. and Weir, M.R., 2012<\/REF>).<\/para>          <para>Putative related strategies include anti-angiotensin II vaccines as well as AT2 receptor agonists (<REF id=\"1529649\">Paulis, L. and Unger, T., 2010<\/REF>; <REF id=\"1877432\">Tousoulis, D. et al., 2012<\/REF>).<\/para>          <para>The following table presents angiotensin receptor blockers and ARB-containing combination products in active development at this time for the treatment of arterial hypertension.<COMPETITIVE id=\"776\">              <TABLE>                <TR>                  <TD>Angiotensin receptor blockers in development for hypertension<\/TD>                <\/TR>                <TR>                  <TD>Drug Name<\/TD>                  <TD>Organization<\/TD>                  <TD>Mechanism of Action<\/TD>                  <TD>Status<\/TD>                <\/TR>                <TR>                  <TD>                    <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=892220&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/chlorthalidone/telmisartan<\/a>                  <\/TD>                  <TD>Yuhan<\/TD>                  <TD>Angiotensin AT1 Receptor Antagonists/ Carbonic Anhydrase Type VII Inhibitors/ PPARalpha Partial Agonists/ PPARgamma Modulators/ Calcium Channel Blockers/ P-Glycoprotein (MDR-1; ABCB1) Inhibitors/ Signal Transduction Modulators<\/TD>                  <TD>Phase III<\/TD>                <\/TR>                <TR>                  <TD>                    <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=904512&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/rosuvastatin calcium/telmisartan<\/a>                  <\/TD>                  <TD>Yuhan<\/TD>                  <TD>Angiotensin AT1 Receptor Antagonists/ PPARalpha Partial Agonists/ PPARgamma Modulators/ Calcium Channel Blockers/ P-Glycoprotein (MDR-1; ABCB1) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors<\/TD>                  <TD>Phase III<\/TD>                <\/TR>                <TR>                  <TD>                    <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=766632&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Atorvastatin calcium/losartan potassium<\/a>                  <\/TD>                  <TD>HanAll BioPharma<\/TD>                  <TD>Angiotensin AT1 Receptor Antagonists/ Dipeptidyl Peptidase IV (CD26; DPP-IV; DP-IV) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ TNFSF6 Expression Inhibitors<\/TD>                  <TD>Phase III<\/TD>                <\/TR>                <TR>                  <TD>                    <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=955535&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Celecoxib/olmesartan<\/a>                  <\/TD>                  <TD>Marina Biotech<\/TD>                  <TD>Angiotensin AT1 Receptor Antagonists/ Prostaglandin G/H Synthase 2 (PTGS2; COX-2) Inhibitors/ Carbonic Anhydrase Type II (Brucella suis) Inhibitors/ Angiogenesis Inhibitors/ Carbonic Anhydrase Inhibitors/ Apoptosis Inducers/ Signal Transduction Modulators<\/TD>                  <TD>Preclinical<\/TD>                <\/TR>                <TR>                  <TD>                    <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=738267&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Elsartan<\/a>                  <\/TD>                  <TD>Eldrug<\/TD>                  <TD>Angiotensin AT1 Receptor Antagonists/ Signal Transduction Modulators<\/TD>                  <TD>Preclinical<\/TD>                <\/TR>              <\/TABLE>            <\/COMPETITIVE>          <\/para>        <\/Body>        <References>          <Reference id=\"983594\" medline_id=\"16164395\">            <Title>Protective effects of angiotensin II interruption: Evidence for antiinflammatory actions<\/Title>            <SourceTitle>Pharmacotherapy<\/SourceTitle>            <PubMedTitle>Pharmacotherapy<\/PubMedTitle>            <Volume>25<\/Volume>            <Issue>9<\/Issue>            <Page>1213<\/Page>            <Year>2005<\/Year>            <Authors>              <Author>Dagenais, N.J.<\/Author>              <Author>Jamali, F.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"983595\" medline_id=\"16393425\">            <Title>Angiotensin II antagonists-therapeutic benefits spanning the cardiovascular disease continuum from hypertension to heart failure and diabetic nephropathy<\/Title>            <SourceTitle>Current Medical Research and Opinion<\/SourceTitle>            <PubMedTitle>Curr Med Res Opin<\/PubMedTitle>            <Volume>22<\/Volume>            <Issue>1<\/Issue>            <Page>1<\/Page>            <Year>2006<\/Year>            <Authors>              <Author>Ribeiro, A.B.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"983596\" medline_id=\"16481883\">            <Title>Renal and vascular hypertension-induced inflammation: Role of angiotensin II<\/Title>            <SourceTitle>Current Opinion in Nephrology and Hypertension<\/SourceTitle>            <PubMedTitle>Curr Opin Nephrol Hypertens<\/PubMedTitle>            <Volume>15<\/Volume>            <Issue>2<\/Issue>            <Page>159<\/Page>            <Year>2006<\/Year>            <Authors>              <Author>Ruiz-Ortega, M.<\/Author>              <Author>Esteban, V.<\/Author>              <Author>Rupérez, M.<\/Author>              <Author>Sánchez-López, E.<\/Author>              <Author>Rodríguez-Vita, J.<\/Author>              <Author>Carvajal, G.<\/Author>              <Author>Egido, J.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1405960\" medline_id=\"19126664\">            <Title>The angiotensin AT4 receptor subtype as a target for the treatment of memory dysfunction associated with Alzheimer&apos;s disease<\/Title>            <SourceTitle>Journal of the Renin-Angiotensin-Aldosterone System<\/SourceTitle>            <PubMedTitle>J Renin Angiotensin Aldosterone Syst<\/PubMedTitle>            <Volume>9<\/Volume>            <Issue>4<\/Issue>            <Page>226<\/Page>            <Year>2008<\/Year>            <Authors>              <Author>Wright, J.W.<\/Author>              <Author>Harding, J.W.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1529649\" medline_id=\"20567239\">            <Title>Novel therapeutic targets for hypertension<\/Title>            <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>            <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>            <Volume>7<\/Volume>            <Issue>8<\/Issue>            <Page>431<\/Page>            <Year>2010<\/Year>            <Authors>              <Author>Paulis, L.<\/Author>              <Author>Unger, T.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1534666\" medline_id=\"19090988\">            <Title>Cognitive-enhancing effects of angiotensin IV<\/Title>            <SourceTitle>BMC Neuroscience (Online)<\/SourceTitle>            <PubMedTitle>BMC Neurosci<\/PubMedTitle>            <Volume>9<\/Volume>            <Issue>Suppl. 2<\/Issue>            <Page>S15<\/Page>            <Year>2008<\/Year>            <Authors>              <Author>Gard, P.R.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1593686\" medline_id=\"21147255\">            <Title>Angiotensin II receptors and drug discovery in cardiovascular disease<\/Title>            <SourceTitle>Drug Discovery Today<\/SourceTitle>            <PubMedTitle>Drug Discov Today<\/PubMedTitle>            <Volume>16<\/Volume>            <Issue>1-2<\/Issue>            <Page>22<\/Page>            <Year>2011<\/Year>            <Authors>              <Author>Dasgupta, C.<\/Author>              <Author>Zhang, L.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1876563\" medline_id=\"22437214\">            <Title>The role of ARBs alone or with HCTZ in the treatment of hypertension and prevention of cardiovascular and renal complications<\/Title>            <SourceTitle>Postgraduate Medicine<\/SourceTitle>            <PubMedTitle>Postgrad Med<\/PubMedTitle>            <Volume>124<\/Volume>            <Issue>2<\/Issue>            <Page>40<\/Page>            <Year>2012<\/Year>            <Authors>              <Author>Greathouse, M.K.<\/Author>              <Author>Weir, M.R.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1877432\" medline_id=\"22609833\">            <Title>Novel therapeutic strategies in the management of arterial hypertension<\/Title>            <SourceTitle>Pharmacology &amp; Therapeutics<\/SourceTitle>            <PubMedTitle>Pharmacol Ther<\/PubMedTitle>            <Volume>135<\/Volume>            <Issue>2<\/Issue>            <Page>168<\/Page>            <Year>2012<\/Year>            <Authors>              <Author>Tousoulis, D.<\/Author>              <Author>Androulakis, E.<\/Author>              <Author>Papageorgiou, N.<\/Author>              <Author>Stefanadis, C.<\/Author>            <\/Authors>          <\/Reference>        <\/References>      <\/Section>      <Section sectionId=\"613\" modifiedDate=\"20190514104853\">        <Title>Mineralocorticoid Receptor Antagonists<\/Title>        <Body>          <para>Aldosterone is the single most potent natural mineralocorticoid known. Its secretion is controlled primarily by the renin-angiotensin system (to such an extent that it is frequently called the renin-angiotensin-aldosterone system, or RAAS) and by serum potassium concentrations.<\/para>          <para>Aldosterone plays an important role in regulating electrolyte composition by promoting sodium retention and potassium excretion. The main renal effect of aldosterone is to stimulate sodium/potassium transport in the distal tubules, thus enhancing sodium reuptake and potassium excretion. Aldosterone has several adverse effects on the cardiovascular system, including myocardial fibrosis, left ventricular hypertrophy, fluid retention, potassium and magnesium excretion, which in chronic states of hyperaldosteronism can lead to significant morbidity and mortality. <\/para>          <para>Elevated aldosterone levels have been observed in conditions such as edema, congestive heart failure, essential hypertension and complications of kidney disease and hepatic cirrhosis. In the CONSENSUS trial, for example, significant relationships were observed between aldosterone and angiotensin II levels and mortality. However, even aldosterone levels within the normal range can contribute to hypertension (<REF id=\"1451546\">Tomaschitz, A. et al., 2010<\/REF>).<\/para>          <para>Mineralocorticoid receptor antagonists have been studied for various cardiovascular conditions, most importantly heart failure, essential hypertension, hepatic cirrhosis and primary aldosteronism. The aldosterone antagonist spironolactone has been used succesfully for more than 50 years to treat cardiovascular disorders including hypertension, although well-designed clinical trials documenting this efficacy are lacking (<REF id=\"1529649\">Paulis, L. and Unger, T., 2010<\/REF>; <REF id=\"1534667\">Jansen, P.M. et al., 2009<\/REF>). Furthermore, more recent information suggests that aldosterone antagonism may not necessarily be the mechanism underlying BP reduction with spironolactone. Although a variety of newer antihypertensive agents are now available, spironolactone is still prescribed for some patients with heart failure and/or refractory hypertension (<REF id=\"1877428\">Slim, H.B. et al., 2011<\/REF>). A second aldosterone antagonist, eplerenone, was launched in 2002 for the treatment of hypertension. Eplerenone has fewer progesterone- and testosterone-related adverse effects (gynecomastia, loss of libido, menstrual irregularities) than spironolactone, although both antagonists bear the risk of hypokalemia, which can in some cases be life-threatening (<REF id=\"1737279\">Unger, T. et al., 2011<\/REF>). The newest drug in this class, esaxerenone, was approved and launched in Japan in 2019 for the treatment of hypertension. <\/para>          <para>Aldosterone synthase inhibitors have more recently been identified as a potential class of agents for preventing the detrimental effects of increased aldosterone levels, including hypertension (<REF id=\"1737279\">Unger, T. et al., 2011<\/REF>; <REF id=\"1877433\">Laurent, S. et al., 2012<\/REF>).<\/para>        <\/Body>        <References>          <Reference id=\"1451546\" medline_id=\"20027193\">            <Title>Aldosterone and arterial hypertension<\/Title>            <SourceTitle>Nature Reviews Endocrinology<\/SourceTitle>            <PubMedTitle>Nat Rev Endocrinol<\/PubMedTitle>            <Volume>6<\/Volume>            <Issue>2<\/Issue>            <Page>83<\/Page>            <Year>2010<\/Year>            <Authors>              <Author>Tomaschitz, A.<\/Author>              <Author>Pilz, S.<\/Author>              <Author>Ritz, E.<\/Author>              <Author>Obermayer-Pietsch, B.<\/Author>              <Author>Pieber, T.R.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1529649\" medline_id=\"20567239\">            <Title>Novel therapeutic targets for hypertension<\/Title>            <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>            <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>            <Volume>7<\/Volume>            <Issue>8<\/Issue>            <Page>431<\/Page>            <Year>2010<\/Year>            <Authors>              <Author>Paulis, L.<\/Author>              <Author>Unger, T.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1534667\" medline_id=\"19516169\">            <Title>Aldosterone-receptor antagonism in hypertension<\/Title>            <SourceTitle>Journal of Hypertension<\/SourceTitle>            <PubMedTitle>J Hypertens<\/PubMedTitle>            <Volume>27<\/Volume>            <Issue>4<\/Issue>            <Page>680<\/Page>            <Year>2009<\/Year>            <Authors>              <Author>Jansen, P.M.<\/Author>              <Author>Danser, A.H.<\/Author>              <Author>Imholz, B.P.<\/Author>              <Author>van den Meiracker, A.H.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1737279\" medline_id=\"21951628\">            <Title>Therapeutic perspectives in hypertension: Novel means for renin-angiotensin-aldosterone system modulation and emerging device-based approaches<\/Title>            <SourceTitle>European Heart Journal<\/SourceTitle>            <PubMedTitle>Eur Heart J<\/PubMedTitle>            <Volume>32<\/Volume>            <Issue>22<\/Issue>            <Page>2739<\/Page>            <Year>2011<\/Year>            <Authors>              <Author>Unger, T.<\/Author>              <Author>Paulis, L.<\/Author>              <Author>Sica, D.A.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1877428\" medline_id=\"21550576\">            <Title>Older blood pressure medications-do they still have a place?<\/Title>            <SourceTitle>American Journal of Cardiology<\/SourceTitle>            <PubMedTitle>Am J Cardiol<\/PubMedTitle>            <Volume>108<\/Volume>            <Issue>2<\/Issue>            <Page>308<\/Page>            <Year>2011<\/Year>            <Authors>              <Author>Slim, H.B.<\/Author>              <Author>Black, H.R.<\/Author>              <Author>Thompson, P.D.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1877433\" medline_id=\"22883508\">            <Title>New drugs, procedures, and devices for hypertension<\/Title>            <SourceTitle>The Lancet<\/SourceTitle>            <PubMedTitle>Lancet<\/PubMedTitle>            <Volume>380<\/Volume>            <Issue>9841<\/Issue>            <Page>591<\/Page>            <Year>2012<\/Year>            <Authors>              <Author>Laurent, S.<\/Author>              <Author>Schlaich, M.<\/Author>              <Author>Esler, M.<\/Author>            <\/Authors>          <\/Reference>        <\/References>      <\/Section>    <\/Section>    <Section sectionId=\"614\" modifiedDate=\"20161111015622\">      <Title>Vasopeptidase Inhibitors<\/Title>      <Body>        <para>In addition to ACE, other vasopeptidases have been identified as potential targets for treating hypertension and other cardiovascular disorders (<REF id=\"1529649\">Paulis, L. and Unger, T., 2010<\/REF>). One of these is neprilysin (neutral endopeptidase, NEP), an enzyme belonging to the family of zinc-containing metalloproteases that degrades the atrial natriuretic peptide (ANP). ANP is a 28-amino acid peptide that induces diuresis, natriuresis and vasodilation. Neprilysin inhibitors potentiate the diuretic, natriuretic and hypotensive effects of ANP and thus are held to be useful in the treatment of hypertension, congestive heart failure, angina, renal insufficiency and glaucoma. <\/para>        <para>The other vasopeptidase that may be a useful target for hypertension is endothelin-converting enzyme (ECE). Compounds inhibiting two or three vasopeptidases have been sought for some time as promising agents for the treatment of resistant hypertension and prevention of end-organ damage, although success in this area has been limited (<REF id=\"1877433\">Laurent, S. et al., 2012<\/REF>).<COMPETITIVE id=\"1178\">            <TABLE>              <TR>                <TD>Vasopeptidase-inhibiting compounds in development as antihypertensive agents<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=827244&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LHW-090<\/a>                <\/TD>                <TD>Novartis<\/TD>                <TD>Neprilysin (Enkephalinase, Neutral Endopeptidase, NEP) Inhibitors<\/TD>                <TD>Phase II<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"1529649\" medline_id=\"20567239\">          <Title>Novel therapeutic targets for hypertension<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>7<\/Volume>          <Issue>8<\/Issue>          <Page>431<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Paulis, L.<\/Author>            <Author>Unger, T.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1877433\" medline_id=\"22883508\">          <Title>New drugs, procedures, and devices for hypertension<\/Title>          <SourceTitle>The Lancet<\/SourceTitle>          <PubMedTitle>Lancet<\/PubMedTitle>          <Volume>380<\/Volume>          <Issue>9841<\/Issue>          <Page>591<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Laurent, S.<\/Author>            <Author>Schlaich, M.<\/Author>            <Author>Esler, M.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"616\" modifiedDate=\"20120824045158\">      <Title>Endothelin Antagonists<\/Title>      <Body>        <para>Endothelin was first described in 1988 as a novel vasoconstricting peptide produced by vascular endothelial cells (<REF id=\"659624\">Yanagisawa, M. et al., 1988<\/REF>). Significant research efforts since that time have focused on comprehending the physiological effects and mechanism of action of endothelin (ET), as well as developing specific antagonists to block its undesirable effects (<REF id=\"1876574\">Rautureau, Y. and Schiffrin, E.L., 2012<\/REF>).<\/para>        <para>Endothelin is the most potent and long-acting vasoconstrictor isolated from mammalian cells. The 21-amino acid endothelin peptide, which has mitogenic, vasoconstrictor and bronchoconstrictor effects, was originally discovered in porcine aorta cells and subsequently identified in many other cell types (neurons, glia, vascular smooth muscle, endothelium and gastric mucosa). Three endothelin isopeptides (endothelin-1, -2 and -3) and two receptor subtypes (ETA and ETB) are known to exist. ETA receptors on smooth muscle cells have affinity for ET-1 and ET-2 but less for ET-3, while ETB receptors on endothelial cells have affinity for all three isoforms. ET-1 produces vasoconstriction, predominantly via activation of ETA receptors on vascular smooth muscle, and vasodilation via ETB receptors on endothelial cells (<REF id=\"1876640\">Ohkita, M. et al., 2012<\/REF>). Endothelin antagonists have therapeutic potential in the treatment of conditions such as congestive heart failure, pulmonary and arterial hypertension and other cardiovascular disorders, as well as asthma and erectile dysfunction.<\/para>        <para>The first endothelin antagonists studied were nonselective dual antagonists of ETA and ETB receptors. More recent studies, however, provide evidence that ETA antagonism alone may produce clinically beneficial vasodilation. Selective ETA antagonists may circumvent blockade of nonvascular ETB receptors, such as those predominating in human kidney, and may preserve any vasodilation produced by endogenous ET-1 binding to ETB receptors (<REF id=\"1877429\">Burnier, M. and Forni, V., 2012<\/REF>). A related approach involves the administration of endothelin converting enzyme (ECE) inhibitors, which block the biosynthesis of endothelin-1 from its precursor big endothelin-1.<COMPETITIVE id=\"141\">            <TABLE>              <TR>                <TD>Endothelin antagonists in development for arterial hypertension<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=460485&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Aprocitentan<\/a>                <\/TD>                <TD>Janssen Biotech/ Idorsia<\/TD>                <TD>Endothelin ETB Receptor Antagonists/ Endothelin-1 Receptor (EDNRA, ETAR) Antagonists/ Signal Transduction Modulators<\/TD>                <TD>Phase III<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"659624\" medline_id=\"2451132\">          <Title>A novel potent vasoconstrictor peptide produced by vascular endothelial cells<\/Title>          <SourceTitle>Nature<\/SourceTitle>          <PubMedTitle>Nature<\/PubMedTitle>          <Volume>332<\/Volume>          <Issue>6163<\/Issue>          <Page>114<\/Page>          <Year>1988<\/Year>          <Authors>            <Author>Yanagisawa, M.<\/Author>            <Author>Kurihara, H.<\/Author>            <Author>Kimura, S.<\/Author>            <Author>Tomobe, Y.<\/Author>            <Author>Kobayashi, M.<\/Author>            <Author>Mitsui, Y.<\/Author>            <Author>Yazaki, Y.<\/Author>            <Author>Goto, K.<\/Author>            <Author>Masaki, T.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1876574\" medline_id=\"22257795\">          <Title>Endothelin in hypertension: An update<\/Title>          <SourceTitle>Current Opinion in Nephrology and Hypertension<\/SourceTitle>          <PubMedTitle>Curr Opin Nephrol Hypertens<\/PubMedTitle>          <Volume>21<\/Volume>          <Issue>2<\/Issue>          <Page>128<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Rautureau, Y.<\/Author>            <Author>Schiffrin, E.L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1876640\" medline_id=\"22863667\">          <Title>Pathophysiological roles of endothelin receptors in cardiovascular diseases<\/Title>          <SourceTitle>Journal of Pharmacological Sciences<\/SourceTitle>          <PubMedTitle>J Pharmacol Sci<\/PubMedTitle>          <Volume>119<\/Volume>          <Issue>4<\/Issue>          <Page>302<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Ohkita, M.<\/Author>            <Author>Tawa, M.<\/Author>            <Author>Kitada, K.<\/Author>            <Author>Matsumura, Y.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1877429\" medline_id=\"22311858\">          <Title>Endothelin receptor antagonists: A place in the management of essential hypertension?<\/Title>          <SourceTitle>Nephrology Dialysis Transplantation<\/SourceTitle>          <PubMedTitle>Nephrol Dial Transplant<\/PubMedTitle>          <Volume>27<\/Volume>          <Issue>3<\/Issue>          <Page>865<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Burnier, M.<\/Author>            <Author>Forni, V.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"617\" modifiedDate=\"20121116124148\">      <Title>Calcium Channel Blockers<\/Title>      <Body>        <para>Voltage-gated ion channels are a family of integral membrane proteins that selectively conduct ions (Na+, K+, Ca++) across the cell membrane. Drugs that bind to specific sites on the channel proteins are able to activate or inhibit their activity. All calcium channel blockers (CCBs), in spite of their structural diversity, block the transmembrane flow of calcium ions through the voltage-gated L-type (slowly inactivating) calcium channel. This antagonizes vascular smooth muscle, produces myocardial smooth muscle contraction, reduces blood pressure and dilates coronary arteries (<REF id=\"659628\">Abernethy, D.R. and Schwartz, J.B., 1999<\/REF>; <REF id=\"1876638\">Preston Mason, R., 2012<\/REF>). <\/para>        <para>Verapamil, the first calcium channel blocker, reached the market in 1963. Nearly 20 such compounds are now available for the treatment of arterial hypertension. Calcium channel blockers are well established in the treatment of essential hypertension. Their efficacy in treating isolated systolic hypertension was confirmed in the Syst-Eur (Systolic Hypertension in Europe) study, which compared nitrendipine to placebo in 2,418 patients over the age of 60 years. Syst-Eur also demonstrated significant reductions in all cardiovascular events (69%) and in strokes (73%) in a subgroup of diabetic patients. The differences between the calcium antagonist and placebo were so significant in terms of a reduction in stroke risk (42%) that the trial was stopped prematurely, based on the consideration that to continue administering the placebo would be unethical (<REF id=\"659632\">Staessen, J.A. et al., 1997<\/REF>).<\/para>        <para>A Cochrane review of published clinical studies evaluating CCBs for the treatment of hypertension, and concretely for the prevention of cardiovascular events, has concluded that among the antihypertensive drug classes studied, diuretics in particular are preferred over calcium channel blockers for optimal reduction of cardiovascular events in patients with high blood pressure. Further comparative studies are needed, however (<REF id=\"1876626\">Chen, N. et al., 2010<\/REF>).<\/para>        <para>Information on calcium channel blockers and CCB-containing combinations in development for the treatment of arterial hypertension, together with their status of development for this indication, is summarized in the following table.<COMPETITIVE id=\"142\">            <TABLE>              <TR>                <TD>Calcium channel blockers in development for the treatment of arterial hypertension<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=846945&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Celecoxib/amlodipine besylate<\/a>                <\/TD>                <TD>Kitov Pharma<\/TD>                <TD>Prostaglandin G/H Synthase 2 (PTGS2; COX-2) Inhibitors/ Carbonic Anhydrase Type II (Brucella suis) Inhibitors/ Angiogenesis Inhibitors/ Calcium Channel Blockers/ Carbonic Anhydrase Inhibitors/ Apoptosis Inducers/ Signal Transduction Modulators<\/TD>                <TD>Registered<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=892220&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/chlorthalidone/telmisartan<\/a>                <\/TD>                <TD>Yuhan<\/TD>                <TD>Angiotensin AT1 Receptor Antagonists/ Carbonic Anhydrase Type VII Inhibitors/ PPARalpha Partial Agonists/ PPARgamma Modulators/ Calcium Channel Blockers/ P-Glycoprotein (MDR-1; ABCB1) Inhibitors/ Signal Transduction Modulators<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=904512&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/rosuvastatin calcium/telmisartan<\/a>                <\/TD>                <TD>Yuhan<\/TD>                <TD>Angiotensin AT1 Receptor Antagonists/ PPARalpha Partial Agonists/ PPARgamma Modulators/ Calcium Channel Blockers/ P-Glycoprotein (MDR-1; ABCB1) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=765097&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tylerdipine hydrochloride<\/a>                <\/TD>                <TD>Sihuan Pharmaceutical<\/TD>                <TD>T-Type Calcium Channel Blockers/ L-Type Calcium Channel Blockers<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1010098&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BSEM-125<\/a>                <\/TD>                <TD>BioStem Technologies<\/TD>                <TD>Calcium Channel Blockers<\/TD>                <TD>Preclinical<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"659628\" medline_id=\"10547409\">          <Title>Calcium-antagonist drugs<\/Title>          <SourceTitle>New England Journal of Medicine<\/SourceTitle>          <PubMedTitle>N Engl J Med<\/PubMedTitle>          <Volume>341<\/Volume>          <Issue>19<\/Issue>          <Page>1447<\/Page>          <Year>1999<\/Year>          <Authors>            <Author>Abernethy, D.R.<\/Author>            <Author>Schwartz, J.B.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"659632\" medline_id=\"9297994\">          <Title>Randomized double-blind comparison of placebo and active treatment for older patients with isolated systolic hypertension<\/Title>          <SourceTitle>The Lancet<\/SourceTitle>          <PubMedTitle>Lancet<\/PubMedTitle>          <Volume>350<\/Volume>          <Issue>9080<\/Issue>          <Page>757<\/Page>          <Year>1997<\/Year>          <Authors>            <Author>Staessen, J.A.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1876626\" medline_id=\"20687074\">          <Title>Calcium channel blockers versus other classes of drugs for hypertension<\/Title>          <SourceTitle>Cochrane Database of Systematic Reviews (CDROM)<\/SourceTitle>          <PubMedTitle>Cochrane Database Syst Rev<\/PubMedTitle>          <Issue>8<\/Issue>          <Page>CD003654<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Chen, N.<\/Author>            <Author>Zhou, M.<\/Author>            <Author>Yang, M.<\/Author>            <Author>Guo, J.<\/Author>            <Author>Zhu, C.<\/Author>            <Author>Yang, J.<\/Author>            <Author>Wang, Y.<\/Author>            <Author>Yang, X.<\/Author>            <Author>He, L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1876638\" medline_id=\"22610475\">          <Title>Pleiotropic effects of calcium channel blockers<\/Title>          <SourceTitle>Current Hypertension Reports<\/SourceTitle>          <PubMedTitle>Curr Hypertens Rep<\/PubMedTitle>          <Volume>14<\/Volume>          <Issue>4<\/Issue>          <Page>293<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Preston Mason, R.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"618\" modifiedDate=\"20090121103254\">      <Title>Potassium Channel Activators<\/Title>      <Body>        <para>Potassium channel activators are a structurally heterogeneous group of compounds that relax vascular smooth muscle and reduce cardiac muscle contractility by increasing membrane conductance to potassium, most likely by activating ATP-dependent potassium channels. Compounds with this mechanism of action are potentially useful in the treatment of arterial hypertension, although pinacidil (Leo&apos;s Pindac) is the only such drug to have reached the market.<\/para>      <\/Body>      <References/>    <\/Section>    <Section sectionId=\"620\" modifiedDate=\"20150922084735\">      <Title>Na+/H+ Exchange Inhibitors<\/Title>      <Body>        <para>Six isoforms of the Na+/H+ exchanger (NHE) have been identified to date. The NHE-1 isoform is ubiquitously expressed on all body cells including the plasma membrane of cardiomyocytes, where it is involved in the regulation of intracellular pH and cell volume under normal physiological conditions. Myocardial ischemia-reperfusion is reported to strongly activate NHE-1, and this activation may contribute to myocardial injury via calcium overload. NHE-1 activity is also reported to be increased in lymphocytes of hypertensive patients and in aortic vascular smooth muscle cells of spontaneously hypertensive rats. Several indicators suggest that NHE-1 is in a constantly stimulated state in SHR. Another NHE isoform, NHE-3, is expressed on the apical membrane of epithelial cells and is involved in NaCl reabsorption. This fact indicates that NHE-3 may contribute to the pathogenesis of hypertension. However, no evidence of the direct involvement of either NHE-1 or NHE-3 in hypertension has yet been obtained, and further research is required to clarify the role of NHE in hypertension as well as the potential for NHE inhibitors in this indication (<REF id=\"601533\">Sharma, A. and Singh, M., 2000<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"601533\">          <Title>Na+/H+ exchanger: An emergic therapeutic target in cardiovascular disorders<\/Title>          <SourceTitle>Drugs of Today<\/SourceTitle>          <PubMedTitle>Drugs Today<\/PubMedTitle>          <Volume>36<\/Volume>          <Issue>11<\/Issue>          <Page>793<\/Page>          <Year>2000<\/Year>          <Authors>            <Author>Sharma, A.<\/Author>            <Author>Singh, M.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"2548\" modifiedDate=\"20120823110234\">      <Title>Rho Kinase Inhibitors<\/Title>      <Body>        <para>Evidence from in vitro studies and in vivo in hypertensive animal models suggests that small GTPase Rho and its downstream effector, Rho-kinase, play an important role in the pathogenesis of hypertension (<REF id=\"1876631\">Satoh, K. et al., 2011<\/REF>). Activation of the Rho/Rho-kinase pathway is essential for smooth muscle contractility in hypertension. Increased RhoA expression and enhanced RhoA activity have been observed in aortas of hypertensive rats. The enhanced RhoA expression and activity was already observed in young spontaneously hypertensive rats before the onset of hypertension, suggesting that both genetic factors and blood pressure can upregulate RhoA expression. The specific Rho-kinase inhibitors Y-27632 and fasudil markedly decreased blood pressure in various hypertensive model rats, but not in normotensive animals. In addition, Rho-kinase inhibitors have been shown to inhibit hypertensive vascular lesion formation (<REF id=\"863696\">Hirooka, Y. et al., 2004<\/REF>). Further studies show that the RhoA/Rho-kinase pathway negatively regulates nitric oxide (NO) production in endothelial cells, and that Rho kinase inhibitors down-regulate inflammatory pathways and exert vasodilatory activity in the presence of increased vasoconstrictor tone induced by various mechanisms (<REF id=\"1876631\">Satoh, K. et al., 2011<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"863696\">          <Title>Rho-kinase, a potential therapeutic target for the treatment of hypertension<\/Title>          <SourceTitle>Drug News &amp; Perspectives<\/SourceTitle>          <PubMedTitle>Drug News Perspect<\/PubMedTitle>          <Volume>17<\/Volume>          <Issue>8<\/Issue>          <Page>523<\/Page>          <Year>2004<\/Year>          <Authors>            <Author>Hirooka, Y.<\/Author>            <Author>Shimokawa, H.<\/Author>            <Author>Takeshita, A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1876631\" medline_id=\"21622831\">          <Title>Rho-kinase: Important new therapeutic target in cardiovascular diseases<\/Title>          <SourceTitle>American Journal of Physiology - Heart and Circulatory Physiology<\/SourceTitle>          <PubMedTitle>Am J Physiol Heart Circ Physiol<\/PubMedTitle>          <Volume>301<\/Volume>          <Issue>2<\/Issue>          <Page>H287<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Satoh, K.<\/Author>            <Author>Fukumoto, Y.<\/Author>            <Author>Shimokawa, H.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"626\" modifiedDate=\"20120823095508\">      <Title>PPAR Agonists<\/Title>      <Body>        <para>Although better known for their antidiabetic effects, peroxisome proliferator-activated receptor (PPAR) agonists are also able to reduce blood pressure in animals and humans. A growing body of evidence exists to implicate PPAR receptors as a functional link in the phenomenon known as <BACKGROUNDER id=\"145\">Metabolic Syndrome<\/BACKGROUNDER> (also called insulin resistance syndrome or syndrome X), a complex condition involving obesity, diabetes, hypertension and dyslipidemia. Peroxisome proliferator-activated receptors are known to be located on all critical vascular cells, including endothelial and vascular smooth muscle cells, and monocyte-macrophages. This finding implicates said receptors not only in the process of lipid metabolism but also in vascular diseases (<REF id=\"753289\">Chen, Y.E. et al., 2003<\/REF>; <REF id=\"1876632\">Oyekan, A., 2011<\/REF>). <\/para>        <para>Various mechanisms have been suggested to account for the pleiotropic effects observed with PPAR ligands in patients with hypertension, including inhibition of angiotensin II type 1 receptor expression and Ang II-mediated signalling pathways (<REF id=\"1876627\">Sugawara, A. et al., 2010<\/REF>), suppression of the thromboxane A2 system (<REF id=\"1876627\">Sugawara, A. et al., 2010<\/REF>) and control of innate immune and inflammatory processes (<REF id=\"1509828\">Duan, S.Z. et al., 2009<\/REF>; <REF id=\"1876632\">Oyekan, A., 2011<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"753289\" medline_id=\"12852255\">          <Title>Peroxisome proliferator-activated receptors and the cardiovascular system<\/Title>          <SourceTitle>Vitamins and Hormones<\/SourceTitle>          <PubMedTitle>Vitam Horm<\/PubMedTitle>          <Volume>66<\/Volume>          <Page>157<\/Page>          <Year>2003<\/Year>          <Authors>            <Author>Chen, Y.E.<\/Author>            <Author>Fu, M.<\/Author>            <Author>Zhang, J.<\/Author>            <Author>Zhu, X.<\/Author>            <Author>Lin, Y.<\/Author>            <Author>Akinbami, M.A.<\/Author>            <Author>Song, Q.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1509828\" medline_id=\"19434050\">          <Title>PPARs: The vasculature, inflammation and hypertension<\/Title>          <SourceTitle>Current Opinion in Nephrology and Hypertension<\/SourceTitle>          <PubMedTitle>Curr Opin Nephrol Hypertens<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>2<\/Issue>          <Page>128<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Duan, S.Z.<\/Author>            <Author>Usher, M.G.<\/Author>            <Author>Mortensen, R.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1876627\" medline_id=\"20890053\">          <Title>Effects of PPARgamma on hypertension, atherosclerosis, and chronic kidney disease<\/Title>          <SourceTitle>Endocrine Journal<\/SourceTitle>          <PubMedTitle>Endocr J<\/PubMedTitle>          <Volume>57<\/Volume>          <Issue>10<\/Issue>          <Page>847<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Sugawara, A.<\/Author>            <Author>Uruno, A.<\/Author>            <Author>Kudo, M.<\/Author>            <Author>Matsuda, K.<\/Author>            <Author>Yang, C.W.<\/Author>            <Author>Ito, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1876632\" medline_id=\"21721973\">          <Title>PPARs and their effects on the cardiovascular system<\/Title>          <SourceTitle>Clinical and Experimental Hypertension<\/SourceTitle>          <PubMedTitle>Clin Exp Hypertens<\/PubMedTitle>          <Volume>33<\/Volume>          <Issue>5<\/Issue>          <Page>287<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Oyekan, A.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"624\" modifiedDate=\"20180416015346\">      <Title>Combination Therapy<\/Title>      <Body>        <para>Different classes of antihypertensive drugs reduce arterial pressure via widely differing mechanisms: beta-blockers have negative chronotropic and inotropic effects on the heart as well as controlling the renin-angiotensin system; ACE inhibitors and angiotensin II blockers target Ang II and the RAS; alpha-blockers and sympatholytic agents target the sympathetic nervous system; while calcium channel blockers exert both vasodilating and natriuretic effects. As less than half of all hypertensive patients are effectively controlled with monotherapy, low-dose combination therapy has emerged as a logical method for improving blood pressure control and reducing side effects. Good effects have been obtained with ACE inhibitors or angiotensin II receptors plus thiazide diuretics, beta-blockers in combination with diurectics and/or arteriolar vasodilators, or calcium channel blockers in combination with ACE inhibitors (<REF id=\"901232\">Giles, T.D., 2005<\/REF>). The synergistic mechanisms of action of drugs used in single-pill, fixed-dose combinations produces better and faster control of hypertension (<REF id=\"1876564\">Egan, B.M. et al., 2012<\/REF>) and enables the reduction of dose of each component drug, which may mean fewer side effects and lower cost, as well as better compliance with a more patient-friendly treatment regimen (<REF id=\"2641123\">Ali, M.A. et al., 2017<\/REF>). The first antihypertensive two-drug combinations were introduced in the mid-1980s, and the first three-drug combinations were launched more than two decades later. <\/para>        <para>Although originally developed as a second-line strategy for treating patients who did not respond to single-drug antihypertensive therapy, combination therapy--especially a combination incorporating an agent acting on the renin-angiotensin system--is increasingly recommended as initial therapy in nearly all patients, but particularly in those whose baseline blood pressure is at least 20 mmHg over target (<REF id=\"1875547\">Ruilope, L.M., 2011<\/REF>). Studies such as ACCELERATE have confirmed the efficacy of routine initial blood pressure reduction using a combination regimen of the renin inhibitor aliskirin plus the calcium channel blocker amlodipine (<REF id=\"1588948\">Brown, M.J. et al., 2011<\/REF>). Between 15% and 30% of patients require a three-drug combination for effective blood pressure control (<REF id=\"1875547\">Ruilope, L.M., 2011<\/REF>; <REF id=\"1876639\">Volpe, M. and Tocci, G., 2012<\/REF>); this is especially true in those with comorbid diabetes (<REF id=\"901230\">Bakris, G.L. et al., 2005<\/REF>) or kidney disease (<REF id=\"985018\">Choi, K.L. and Bakris, G.L., 2005<\/REF>). Among the various possible combinations, a fixed-dose triple combination incorporating a renin-angiotensin system blocker, a calcium channel blocker and a thiazide diuretic is considered the most rational (<REF id=\"1876639\">Volpe, M. and Tocci, G., 2012<\/REF>). Patients whose BP remains above 140/90 mmHg in spite of triple combination therapy are said to have resistant hypertension (<REF id=\"2815136\">Oparil, S. et al., 2018<\/REF>). <\/para>        <para>In a continued effort to improve the treatment of these patients, efforts are now turning to the development of quarter-dose quadruple combination therapy products, or &quot;quadpills&quot;: a single capsule containing four antihypertensive drugs, each at one-fourth the standard therapeutic dose. A small randomized, placebo-controlled, crossover study has evaluated the safety and efficacy of one such quadpill containing irbesartan (37.5 mg), amlodipine (1.25 mg), hydrochlorothiazide (6.25 mg) and atenolol (12.5 mg) in patients with previously untreated hypertension. Following four weeks of treatment, patients randomized to the quadpill achieved a 24-hour placebo-corrected decrease in systolic blood pressure of 19 mmHg, and an office blood pressure reduction of 22/13 mmHg. All patients achieved in-office blood pressure of &lt;140/90 on the quadpill, vs. just 33% on placebo. The adverse event profile of quadpill was comparable to that of placebo (<REF id=\"2674943\">Chow, C.K. et al., 2017<\/REF>). These findings are comparable to those reported in a systematic review and meta-analysis of 42 randomized controlled trials evaluating at least one quarter-dose quadpill agent versus placebo or standard-dose monotherapy. The overall conclusion of the review was that the quadpill antihypertensive agents could provide improved efficacy as well as tolerability (<REF id=\"2674948\">Bennett, A. et al., 2017<\/REF>).<\/para>        <para>Several fixed-dose combination products are already marketed for the treatment of hypertension, while others are in the pipeline (see table below).<COMPETITIVE id=\"642\">            <TABLE>              <TR>                <TD>New combination antihypertensive therapies in active clinical development<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=846945&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Celecoxib/amlodipine besylate<\/a>                <\/TD>                <TD>Kitov Pharma<\/TD>                <TD>Registered<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=892220&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/chlorthalidone/telmisartan<\/a>                <\/TD>                <TD>Yuhan<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=904512&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/rosuvastatin calcium/telmisartan<\/a>                <\/TD>                <TD>Yuhan<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=955525&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Celecoxib/lisinopril<\/a>                <\/TD>                <TD>Marina Biotech<\/TD>                <TD>Preclinical<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=955535&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Celecoxib/olmesartan<\/a>                <\/TD>                <TD>Marina Biotech<\/TD>                <TD>Preclinical<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"901230\">          <Title>Combination therapy: Optimizing target-organ protection<\/Title>          <SourceTitle>American Journal of Hypertension<\/SourceTitle>          <PubMedTitle>Am J Hypertens<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>5, Part 2<\/Issue>          <Page>267A<\/Page>          <Year>2005<\/Year>          <Authors>            <Author>Bakris, G.L.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"901232\">          <Title>Myths and realities of combination antihypertensive therapy<\/Title>          <SourceTitle>American Journal of Hypertension<\/SourceTitle>          <PubMedTitle>Am J Hypertens<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>5, Part 2<\/Issue>          <Page>267A<\/Page>          <Year>2005<\/Year>          <Authors>            <Author>Giles, T.D.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"985018\" medline_id=\"16202692\">          <Title>Hypertension treatment guidelines: Practical implications<\/Title>          <SourceTitle>Seminars in Nephrology<\/SourceTitle>          <PubMedTitle>Semin Nephrol<\/PubMedTitle>          <Volume>25<\/Volume>          <Issue>4<\/Issue>          <Page>198<\/Page>          <Year>2005<\/Year>          <Authors>            <Author>Choi, K.L.<\/Author>            <Author>Bakris, G.L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1588948\" medline_id=\"21236483\">          <Title>Aliskiren and the calcium channel blocker amlodipine combination as an initial treatment strategy for hypertension control (ACCELERATE): A randomised, parallel-group trial<\/Title>          <SourceTitle>The Lancet<\/SourceTitle>          <PubMedTitle>Lancet<\/PubMedTitle>          <Volume>377<\/Volume>          <Issue>9762<\/Issue>          <Page>312<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Brown, M.J.<\/Author>            <Author>McInnes, G.T.<\/Author>            <Author>Papst, C.C.<\/Author>            <Author>Zhang, J.<\/Author>            <Author>Macdonald, T.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1875547\" medline_id=\"22027655\">          <Title>Current challenges in the clinical management of hypertension<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>9<\/Volume>          <Issue>5<\/Issue>          <Page>267<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Ruilope, L.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1876564\" medline_id=\"22566499\">          <Title>Initial monotherapy and combination therapy and hypertension control the first year<\/Title>          <SourceTitle>Hypertension<\/SourceTitle>          <PubMedTitle>Hypertension<\/PubMedTitle>          <Volume>59<\/Volume>          <Issue>6<\/Issue>          <Page>1124<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Egan, B.M.<\/Author>            <Author>Bandyopadhyay, D.<\/Author>            <Author>Shaftman, S.R.<\/Author>            <Author>Wagner, C.S.<\/Author>            <Author>Zhao, Y.<\/Author>            <Author>Yu-Isenberg, K.S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1876639\" medline_id=\"22745561\">          <Title>Rationale for triple fixed-dose combination therapy with an angiotensin II receptor blocker, a calcium channel blocker, and a thiazide diuretic<\/Title>          <SourceTitle>Vascular Health and Risk Management<\/SourceTitle>          <PubMedTitle>Vasc Health Risk Manag<\/PubMedTitle>          <Volume>8<\/Volume>          <Page>371<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Volpe, M.<\/Author>            <Author>Tocci, G.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2641123\" medline_id=\"28280260\">          <Title>Trends in the market for antihypertensive drugs<\/Title>          <SourceTitle>Nature Reviews Drug Discovery<\/SourceTitle>          <PubMedTitle>Nat Rev Drug Discov<\/PubMedTitle>          <Volume>16<\/Volume>          <Issue>5<\/Issue>          <Page>309<\/Page>          <Year>2017<\/Year>          <Authors>            <Author>Ali, M.A.<\/Author>            <Author>Rizvi, S.<\/Author>            <Author>Syed, B.A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2674943\" medline_id=\"28190578\">          <Title>Quarter-dose quadruple combination therapy for initial treatment of hypertension: Placebo-controlled, crossover, randomised trial and systematic review<\/Title>          <SourceTitle>The Lancet<\/SourceTitle>          <PubMedTitle>Lancet<\/PubMedTitle>          <Volume>389<\/Volume>          <Issue>10073<\/Issue>          <Page>1035<\/Page>          <Year>2017<\/Year>          <Authors>            <Author>Chow, C.K.<\/Author>            <Author>Thakkar, J.<\/Author>            <Author>Bennett, A.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2674948\" medline_id=\"28584013\">          <Title>Efficacy and safety of quarter-dose blood pressure-lowering agents: A systematic review and meta-analysis of randomized controlled trials<\/Title>          <SourceTitle>Hypertension<\/SourceTitle>          <PubMedTitle>Hypertension<\/PubMedTitle>          <Volume>70<\/Volume>          <Issue>1<\/Issue>          <Page>85<\/Page>          <Year>2017<\/Year>          <Authors>            <Author>Bennett, A.<\/Author>            <Author>Chow, C.K.<\/Author>            <Author>Chou, M.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2815136\" medline_id=\"29565029\">          <Title>Hypertension<\/Title>          <SourceTitle>Nature Reviews. Disease Primers<\/SourceTitle>          <PubMedTitle>Nat Rev Dis Primers<\/PubMedTitle>          <Volume>4<\/Volume>          <Page>18014<\/Page>          <Year>2018<\/Year>          <Authors>            <Author>Oparil, S.<\/Author>            <Author>Acelajado, M.C.<\/Author>            <Author>Bakris, G.L.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"2691\" modifiedDate=\"20121023095755\">      <Title>Current Arterial Hypertension Pipeline<\/Title>      <Body>        <para>Consult the tables below for an overview of all products mentioned in this review, including drugs, biologics and diagnostic agents that have been marketed or are under active development for this indication. Tables may also include drugs not covered in the preceding sections because their mechanism of action is unknown or not well characterized.<FREETABLE>27<\/FREETABLE>          <COMPETITIVE id=\"839\">            <TABLE>              <TR>                <TD>Drugs in development for the treatment of arterial hypertension<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=846945&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Celecoxib/amlodipine besylate<\/a>                <\/TD>                <TD>Kitov Pharma<\/TD>                <TD>Prostaglandin G/H Synthase 2 (PTGS2; COX-2) Inhibitors/ Carbonic Anhydrase Type II (Brucella suis) Inhibitors/ Angiogenesis Inhibitors/ Calcium Channel Blockers/ Carbonic Anhydrase Inhibitors/ Apoptosis Inducers/ Signal Transduction Modulators<\/TD>                <TD>Registered<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=892220&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/chlorthalidone/telmisartan<\/a>                <\/TD>                <TD>Yuhan<\/TD>                <TD>Angiotensin AT1 Receptor Antagonists/ Carbonic Anhydrase Type VII Inhibitors/ PPARalpha Partial Agonists/ PPARgamma Modulators/ Calcium Channel Blockers/ P-Glycoprotein (MDR-1; ABCB1) Inhibitors/ Signal Transduction Modulators<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=904512&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/rosuvastatin calcium/telmisartan<\/a>                <\/TD>                <TD>Yuhan<\/TD>                <TD>Angiotensin AT1 Receptor Antagonists/ PPARalpha Partial Agonists/ PPARgamma Modulators/ Calcium Channel Blockers/ P-Glycoprotein (MDR-1; ABCB1) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=460485&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Aprocitentan<\/a>                <\/TD>                <TD>Janssen Biotech/ Idorsia<\/TD>                <TD>Endothelin ETB Receptor Antagonists/ Endothelin-1 Receptor (EDNRA, ETAR) Antagonists/ Signal Transduction Modulators<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=766632&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Atorvastatin calcium/losartan potassium<\/a>                <\/TD>                <TD>HanAll BioPharma<\/TD>                <TD>Angiotensin AT1 Receptor Antagonists/ Dipeptidyl Peptidase IV (CD26; DPP-IV; DP-IV) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ TNFSF6 Expression Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=932137&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CJ-30061<\/a>                <\/TD>                <TD>CJ HealthCare<\/TD>                <TD/>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=706897&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bexagliflozin<\/a>                <\/TD>                <TD>Theracos<\/TD>                <TD>SGLT-2 Inhibitors<\/TD>                <TD>Phase II/III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=928397&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">B-244<\/a>                <\/TD>                <TD>AOBiome<\/TD>                <TD>Microbiome Modulators<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=445081&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">INT-001<\/a>                <\/TD>                <TD>IntelGenx<\/TD>                <TD/>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=880535&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ISIS-AGT-LRx<\/a>                <\/TD>                <TD>Ionis Pharmaceuticals<\/TD>                <TD>AGT (SERPINA8) Expression Inhibitors<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=757907&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Imarikiren hydrochloride<\/a>                <\/TD>                <TD>Scohia Pharma<\/TD>                <TD>Renin Inhibitors<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=827244&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LHW-090<\/a>                <\/TD>                <TD>Novartis<\/TD>                <TD>Neprilysin (Enkephalinase, Neutral Endopeptidase, NEP) Inhibitors<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878774&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Praliciguat<\/a>                <\/TD>                <TD>Cyclerion Therapeutics<\/TD>                <TD>Soluble Guanylate Cyclase (sGC) Activators<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207241&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rostafuroxine<\/a>                <\/TD>                <TD>Windtree Therapeutics<\/TD>                <TD>Na+/H+ Exchanger (NHE) Inhibitors<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=762300&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pcDNA3.1-HBc-Ang II<\/a>                <\/TD>                <TD>AnGes<\/TD>                <TD/>                <TD>Phase I/II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=861407&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALN-AGT<\/a>                <\/TD>                <TD>Alnylam Pharmaceuticals<\/TD>                <TD>AGT (SERPINA8) Expression Inhibitors<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1024522&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CKD-385<\/a>                <\/TD>                <TD>Chong Kun Dang Pharmaceutical<\/TD>                <TD/>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1015395&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LY-3322207<\/a>                <\/TD>                <TD>Lilly<\/TD>                <TD/>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=765097&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tylerdipine hydrochloride<\/a>                <\/TD>                <TD>Sihuan Pharmaceutical<\/TD>                <TD>T-Type Calcium Channel Blockers/ L-Type Calcium Channel Blockers<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=722166&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">mANP<\/a>                <\/TD>                <TD>Mayo Clinic/ Zumbro Discovery<\/TD>                <TD>Atrial Natriuretic Peptide A (NPR1; Guanylate Cyclase A) Receptor Agonists/ Signal Transduction Modulators<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1047147&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CIN-107<\/a>                <\/TD>                <TD>CinCor Pharma<\/TD>                <TD>Cytochrome P450 CYP11B2 (Aldosterone Synthase) Inhibitors<\/TD>                <TD>Clinical<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1010098&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BSEM-125<\/a>                <\/TD>                <TD>BioStem Technologies<\/TD>                <TD>Calcium Channel Blockers<\/TD>                <TD>Preclinical<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1010127&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BSEM-135<\/a>                <\/TD>                <TD>BioStem Technologies<\/TD>                <TD/>                <TD>Preclinical<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=955525&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Celecoxib/lisinopril<\/a>                <\/TD>                <TD>Marina Biotech<\/TD>                <TD>Prostaglandin G/H Synthase 2 (PTGS2; COX-2) Inhibitors/ Angiotensin-I Converting Enzyme (ACE) Inhibitors/ Carbonic Anhydrase Type II (Brucella suis) Inhibitors/ Angiogenesis Inhibitors/ Carbonic Anhydrase Inhibitors/ Apoptosis Inducers/ Signal Transduction Modulators<\/TD>                <TD>Preclinical<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=955535&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Celecoxib/olmesartan<\/a>                <\/TD>                <TD>Marina Biotech<\/TD>                <TD>Angiotensin AT1 Receptor Antagonists/ Prostaglandin G/H Synthase 2 (PTGS2; COX-2) Inhibitors/ Carbonic Anhydrase Type II (Brucella suis) Inhibitors/ Angiogenesis Inhibitors/ Carbonic Anhydrase Inhibitors/ Apoptosis Inducers/ Signal Transduction Modulators<\/TD>                <TD>Preclinical<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=738267&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Elsartan<\/a>                <\/TD>                <TD>Eldrug<\/TD>                <TD>Angiotensin AT1 Receptor Antagonists/ Signal Transduction Modulators<\/TD>                <TD>Preclinical<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=397267&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">QGC-006<\/a>                <\/TD>                <TD>Quantum Genomics<\/TD>                <TD>Glutamyl Aminopeptidase (Aminopeptidase A) Inhibitors<\/TD>                <TD>Preclinical<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271788&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Resiniferatoxin<\/a>                <\/TD>                <TD>Sorrento Therapeutics<\/TD>                <TD>TRPV1 (Vanilloid VR1 Receptor) Agonists<\/TD>                <TD>Preclinical<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1017227&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SHR-0532<\/a>                <\/TD>                <TD>Jiangsu Hengrui<\/TD>                <TD/>                <TD>Preclinical<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References/>    <\/Section>  <\/Section>  <Section sectionId=\"4540\" modifiedDate=\"20120827030928\">    <Title>Nonpharmacological Therapies<\/Title>    <Body>      <para>Activation of renal sympathetic nerves contributes to the pathogenesis of hypertension, and yet is a factor that is neither addressed by nor responds to most drug therapies. A handful of nonpharmacological therapies have been developed and evaluated, including renal sympathetic denervation and baroreflex activation therapy, which are targeted to sympathetic nervous system control of blood pressure (<REF id=\"1875549\">Paulis, L. et al., 2011<\/REF>; <REF id=\"1737279\">Unger, T. et al., 2011<\/REF>; <REF id=\"1877433\">Laurent, S. et al., 2012<\/REF>).<\/para>      <para>Renal sympathetic denervation, an early treatment for high blood pressure that was abandoned with the advent of effective drug therapy, has enjoyed a renaissance in recent years due to the availability of more modern catheter-based, minimally invasive approaches as well as the need to identify alternative methods to treat patients with drug-resistant hypertension. In its current form, renal denervation involves the use of an intra-arterial catheter to perform percutaneous radiofrequency ablation of sympathetic nerve fibers surrounding the renal arteries (<REF id=\"1875549\">Paulis, L. et al., 2011<\/REF>; <REF id=\"1877433\">Laurent, S. et al., 2012<\/REF>). The efficacy and safety of this procedure were evaluated in the Symplicity HTN-2 trial, in which 106 patients with baseline systolic BP of 160 mmHg or higher (or SBP 150 mmHg or higher plus diabetes) were randomized to treatment with renal denervation or to continuation on previous therapy (controls). Patients were assessed after 6 months, at while time office-based BP had decreased by approximately 32/12 mmHg in the renal denervation group, as compared to no significant change in the control group. Systolic BP decreased by at least 10 mmHg in 84% of patients receiving the active therapy and in 35% of the controls. No serious procedure-related adverse events or device-related complications were reported (<REF id=\"1879334\">Esler, M.D. et al., 2010<\/REF>).<\/para>      <para>Baroreflex activation therapy (BAT) is another actively investigational device-based approach to the treatment of hypertension. BAT consists of an implantable pulse generator that emits a signal which activates the carotid sinus. This supplies false information to BP-regulating centers in the central nervous system, thereby triggering reflexive blood pressure-lowering mechanisms (<REF id=\"1875549\">Paulis, L. et al., 2011<\/REF>). The efficacy and safety of BAT were demonstrated in the phase III Rheos Pivotal Trial, which enrolled 265 patients with resistant hypertension. In this double-blind, randomized, placebo-controlled study, target systolic blood pressure levels (&lt;140 mmHg) were achieved in 42% of patients treated with BAT, as compared to 24% of sham-treated controls. Procedural complications, mostly related to implantation of the device, were reported in 25% of patients in the study, but resolved completely in two-thirds of the cases (<REF id=\"1879335\">Bisognano, J.D. et al., 2011<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"1737279\" medline_id=\"21951628\">        <Title>Therapeutic perspectives in hypertension: Novel means for renin-angiotensin-aldosterone system modulation and emerging device-based approaches<\/Title>        <SourceTitle>European Heart Journal<\/SourceTitle>        <PubMedTitle>Eur Heart J<\/PubMedTitle>        <Volume>32<\/Volume>        <Issue>22<\/Issue>        <Page>2739<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Unger, T.<\/Author>          <Author>Paulis, L.<\/Author>          <Author>Sica, D.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1875549\" medline_id=\"22430830\">        <Title>Key advances in antihypertensive treatment<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>9<\/Volume>        <Issue>5<\/Issue>        <Page>276<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Paulis, L.<\/Author>          <Author>Steckelings, U.M.<\/Author>          <Author>Unger, T.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1877433\" medline_id=\"22883508\">        <Title>New drugs, procedures, and devices for hypertension<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>380<\/Volume>        <Issue>9841<\/Issue>        <Page>591<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Laurent, S.<\/Author>          <Author>Schlaich, M.<\/Author>          <Author>Esler, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1879334\" medline_id=\"21093036\">        <Title>Renal sympathetic denervation in patients with treatment-resistant hypertension (the symplicity HTN-2 trial): A randomised controlled trial<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>376<\/Volume>        <Issue>9756<\/Issue>        <Page>1903<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Esler, M.D.<\/Author>          <Author>Krum, H.<\/Author>          <Author>Sobotka, P.A.<\/Author>          <Author>Schlaich, M.P.<\/Author>          <Author>Schmieder, R.E.<\/Author>          <Author>Böhm, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1879335\" medline_id=\"21816315\">        <Title>Baroreflex activation therapy lowers blood pressure in patients with resistant hypertension: Results from the double-blind, randomized, placebo-controlled rheos pivotal trial<\/Title>        <SourceTitle>Journal of the American College of Cardiology<\/SourceTitle>        <PubMedTitle>J Am Coll Cardiol<\/PubMedTitle>        <Volume>58<\/Volume>        <Issue>7<\/Issue>        <Page>765<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Bisognano, J.D.<\/Author>          <Author>Bakris, G.<\/Author>          <Author>Nadim, M.K.<\/Author>          <Author>Sanchez, L.<\/Author>          <Author>Kroon, A.A.<\/Author>          <Author>Schafer, J.<\/Author>          <Author>de Leeuw, P.W.<\/Author>          <Author>Sica, D.A.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"4581\" modifiedDate=\"20160801091553\">  <Title>Targets for Therapeutic Intervention<\/Title>  <Body>    <para>For an overview of validated therapeutic targets for this indication, consult the targetscape below. The targetscape shows an overall cellular and molecular landscape or comprehensive network of connections among the current therapeutic targets for the treatment of the condition and their biological actions. An arrow indicates a positive effect; a dash indicates a negative effect. Gray or lighter symbols are protein targets that are not validated (i.e., not under active development [UAD]). Pink text boxes with red borders indicate validated gene targets. Yellow text boxes are gene targets not UAD. Purple and pink text boxes indicate extracellular and intracellular effects, respectively. Green text boxes indicate a related disease/condition/symptom. For in-depth information on a specific target or mechanism of action, see the corresponding section in this report.<\/para>  <\/Body>  <References/><\/Section><\/Sections>","DiseaseTitle":"Arterial Hypertension","Id":8,"LastReviewDate":"2019-05-21T00:00:00Z","DatePublished":"2001-02-15T00:00:00Z"}}"}],"title":"I pass a &quot;id = 8&quot; as parameter to &quot;getDiseaseBriefingRecordV2&quot; operation","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;Id&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;DatePublished&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;LastReviewDate&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;DiseaseInfo&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"}],"status":"passed"}},{"testcase":{"tag":"@TestCaseId(\"getDiseaseBriefingRecordREST_001\")","time":"2019-06-14 23:59:12","title":"Verify necessary fields are present in the response","steps":[{"date":"2019-06-14 23:59:12","title":"I am authenticated user accessing &quot;REST&quot; API","status":"passed"},{"date":"2019-06-14 23:59:12","StepAttachment":[{"mime":"TXT","content":"aHR0cHM6Ly9wcm9kZXUtYXBpLmNvcnRlbGxpcy5pbnQuY2xhcml2YXRlLmNvbS9hcGktd3Mvd3MvcnMvZGlzZWFzZWJyaWVmaW5ncy12Mi9kaXNlYXNlQnJpZWZpbmcvOQ=="},{"mime":"TXT","content":""}],"title":"I pass a &quot;id = 9&quot; as parameter to &quot;getDiseaseBriefingRecordV2&quot; operation","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;Id&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;DatePublished&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;LastReviewDate&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;DiseaseInfo&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:12","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"}],"status":"passed"}},{"testcase":{"tag":"@TestCaseId(\"getDiseaseBriefingRecordREST_001\")","time":"2019-06-14 23:59:13","title":"Verify necessary fields are present in the response","steps":[{"date":"2019-06-14 23:59:13","title":"I am authenticated user accessing &quot;REST&quot; API","status":"passed"},{"date":"2019-06-14 23:59:13","StepAttachment":[{"mime":"TXT","content":"aHR0cHM6Ly9wcm9kZXUtYXBpLmNvcnRlbGxpcy5pbnQuY2xhcml2YXRlLmNvbS9hcGktd3Mvd3MvcnMvZGlzZWFzZWJyaWVmaW5ncy12Mi9kaXNlYXNlQnJpZWZpbmcvMTA="},{"mime":"TXT","content":"{"diseaseBriefingRecordOutput":{"DiseaseInfo":"<Sections><Section sectionId=\"1366\" modifiedDate=\"20190325101831\">  <Title>Facts about Atherosclerosis<\/Title>  <Body>    <para>Atherosclerosis, which means literally &quot;hardening of the arteries,&quot; is a disease of the large and medium-sized arteries in which both degenerative and regenerative processes come into play. Dyslipidemia, characterized by abnormally high serum levels of low-density lipoproteins (LDL) and excessively low levels of high-density lipoproteins (HDL), is the principal risk factor for atherosclerosis and subsequent cardiovascular disease (<REF id=\"2479348\">Helkin, A. et al., 2016<\/REF>). Atherosclerosis normally affects the intimal layer of the major arteries at the earlier stages, progressing to include the media at later stages. Both inflammatory and immune mechanisms contribute to the formation of atherosclerotic plaques, which predispose to cardiovascular disease (<REF id=\"2101218\">Wolf, D. et al., 2014<\/REF>; <REF id=\"2101242\">Chávez-Sánchez, L. et al., 2014<\/REF>; <REF id=\"2482377\">Schaftenaar, F. et al., 2016<\/REF>).<\/para>    <para>Atherosclerosis is a class of arteriosclerosis, the latter being a general term denoting thickening and hardening of the arteries that occurs, to a certain extent, as a normal part of aging (<REF id=\"1615914\">Lee, H.Y. and Oh, B.H., 2010<\/REF>; <REF id=\"1634147\">Cavalcante, J.L. et al., 2011<\/REF>). Atherosclerosis is derived from the Greek words <I>athero<\/I> (meaning gruel or paste) and <I>sclerosis<\/I> (meaning hardness). Although the consequences of atherosclerosis generally manifest in middle-aged or older adults, the process of atherogenesis generally begins during childhood, with an asymptomatic preclinical phase that can last for decades (<REF id=\"1615855\">Hong, Y.M., 2010<\/REF>; <REF id=\"2290585\">Rafieian-Kopaei, M. et al., 2014<\/REF>). With the concomitant increase in lifespans, dietary habit adjustments and decrease in smoking rates worldwide, atherosclerosis and dyslipidemia have emerged as the most important modifiable risk factors for cardiovascular disease (<REF id=\"2479347\">Hendrani, A.D. et al., 2016<\/REF>; <REF id=\"2985140\">Tsui, P.F. et al., 2018<\/REF>). <\/para>  <\/Body>  <References>    <Reference id=\"1615855\" medline_id=\"20111646\">      <Title>Atherosclerotic cardiovascular disease beginning in childhood<\/Title>      <SourceTitle>Korean Circulation Journal<\/SourceTitle>      <PubMedTitle>NOT INDEXED IN PUBMED<\/PubMedTitle>      <Volume>40<\/Volume>      <Issue>1<\/Issue>      <Page>1<\/Page>      <Year>2010<\/Year>      <Authors>        <Author>Hong, Y.M.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1615914\" medline_id=\"20962429\">      <Title>Aging and arterial stiffness<\/Title>      <SourceTitle>Circulation Journal<\/SourceTitle>      <PubMedTitle>Circ J<\/PubMedTitle>      <Volume>74<\/Volume>      <Issue>11<\/Issue>      <Page>2257<\/Page>      <Year>2010<\/Year>      <Authors>        <Author>Lee, H.Y.<\/Author>        <Author>Oh, B.H.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1634147\" medline_id=\"21453829\">      <Title>Aortic stiffness current understanding and future directions<\/Title>      <SourceTitle>Journal of the American College of Cardiology<\/SourceTitle>      <PubMedTitle>J Am Coll Cardiol<\/PubMedTitle>      <Volume>57<\/Volume>      <Issue>14<\/Issue>      <Page>1511<\/Page>      <Year>2011<\/Year>      <Authors>        <Author>Cavalcante, J.L.<\/Author>        <Author>Lima, J.A.<\/Author>        <Author>Redheuil, A.<\/Author>        <Author>Al-Mallah, M.H.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2101218\" medline_id=\"24343521\">      <Title>Inflammatory mechanisms in atherosclerosis<\/Title>      <SourceTitle>Hämostaseologie<\/SourceTitle>      <PubMedTitle>Hamostaseologie<\/PubMedTitle>      <Volume>34<\/Volume>      <Issue>1<\/Issue>      <Page>63<\/Page>      <Year>2014<\/Year>      <Authors>        <Author>Wolf, D.<\/Author>        <Author>Stachon, P.<\/Author>        <Author>Bode, C.<\/Author>        <Author>Zirlik, A.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2101242\" medline_id=\"24326322\">      <Title>Innate immune system cells in atherosclerosis<\/Title>      <SourceTitle>Archives of Medical Research<\/SourceTitle>      <PubMedTitle>Arch Med Res<\/PubMedTitle>      <Volume>45<\/Volume>      <Issue>1<\/Issue>      <Page>1<\/Page>      <Year>2014<\/Year>      <Authors>        <Author>Chávez-Sánchez, L.<\/Author>        <Author>Espinosa-Luna, J.E.<\/Author>        <Author>Chávez-Rueda, K.<\/Author>        <Author>Legorreta-Haquet, M.V.<\/Author>        <Author>Montoya-Díaz, E.<\/Author>        <Author>Blanco-Favela, F.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2290585\" medline_id=\"25489440\">      <Title>Atherosclerosis: Process, indicators, risk factors and new hopes<\/Title>      <SourceTitle>International Journal of Preventive Medicine<\/SourceTitle>      <PubMedTitle>Int J Prev Med<\/PubMedTitle>      <Volume>5<\/Volume>      <Issue>8<\/Issue>      <Page>927<\/Page>      <Year>2014<\/Year>      <Authors>        <Author>Rafieian-Kopaei, M.<\/Author>        <Author>Setorki, M.<\/Author>        <Author>Doudi, M.<\/Author>        <Author>Baradaran, A.<\/Author>        <Author>Nasri, H.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2479347\" medline_id=\"26981215\">      <Title>Dyslipidemia management in primary prevention of cardiovascular disease: Current guidelines and strategies<\/Title>      <SourceTitle>World Journal of Cardiology<\/SourceTitle>      <PubMedTitle>World J Cardiol<\/PubMedTitle>      <Volume>8<\/Volume>      <Issue>2<\/Issue>      <Page>201<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Hendrani, A.D.<\/Author>        <Author>Adesiyun, T.<\/Author>        <Author>Quispe, R.<\/Author>        <Author>Jones, S.R.<\/Author>        <Author>Stone, N.J.<\/Author>        <Author>Blumenthal, R.S.<\/Author>        <Author>Martin, S.S.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2479348\" medline_id=\"26983667\">      <Title>Dyslipidemia part 1-review of lipid metabolism and vascular cell physiology<\/Title>      <SourceTitle>Vascular and Endovascular Surgery<\/SourceTitle>      <PubMedTitle>Vasc Endovascular Surg<\/PubMedTitle>      <Volume>50<\/Volume>      <Issue>2<\/Issue>      <Page>107<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Helkin, A.<\/Author>        <Author>Stein, J.J.<\/Author>        <Author>Lin, S.<\/Author>        <Author>Siddiqui, S.<\/Author>        <Author>Maier, K.G.<\/Author>        <Author>Gahtan, V.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2482377\" medline_id=\"27031276\">      <Title>Atherosclerosis: The interplay between lipids and immune cells<\/Title>      <SourceTitle>Current Opinion in Lipidology<\/SourceTitle>      <PubMedTitle>Curr Opin Lipidol<\/PubMedTitle>      <Volume>27<\/Volume>      <Issue>3<\/Issue>      <Page>209<\/Page>      <Year>2016<\/Year>      <Authors>        <Author>Schaftenaar, F.<\/Author>        <Author>Frodermann, V.<\/Author>        <Author>Kuiper, J.<\/Author>        <Author>Lutgens, E.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2985140\" medline_id=\"30423840\">      <Title>Spices and atherosclerosis<\/Title>      <SourceTitle>Nutrients<\/SourceTitle>      <PubMedTitle>Nutrients<\/PubMedTitle>      <Volume>10<\/Volume>      <Issue>11<\/Issue>      <Page>E1724<\/Page>      <Year>2018<\/Year>      <Authors>        <Author>Tsui, P.F.<\/Author>        <Author>Lin, C.S.<\/Author>        <Author>Ho, L.J.<\/Author>        <Author>Lai, J.H.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"1373\" modifiedDate=\"20150212012247\">    <Title>Pathophysiology<\/Title>    <Body>      <para>Atherosclerosis affects medium-sized and large arteries. The type of artery affected and the location of disease vary from one person to another. In all cases, however, atherosclerosis is thought to begin when the vascular endothelium becomes damaged due to high levels of cholesterol and triglycerides in the blood, as well as hypertension, tobacco smoke or other aggressors (<REF id=\"2290585\">Rafieian-Kopaei, M. et al., 2014<\/REF>). <\/para>      <para>The condition results from the deposition of fatty streaks composed of lipoproteins, cellular waste products, calcium and other materials in the inner wall of an artery. These substances together form a build-up called plaque, which may partially or completely block blood flow. In the presence of plaque, endothelial cells in the arterial wall are activated and produce other substances (macrophages, dendritic cells, foam cells, leukocytes and other inflammatory cells) that accumulate in the intima (<REF id=\"1613391\">Galkina, E. and Ley, K., 2009<\/REF>), the innermost layer of the artery wall, where many of them divide. At the same time, fat builds up within and around the cells, and connective tissue forms. The plaque continues to grow until it becomes unstable and ruptures; alternatively, a thrombus may form on the plaque&apos;s surface that, if large enough, can obstruct blood flow (<REF id=\"1195660\">Rader, D.J. and Daugherty, A., 2008<\/REF>; <REF id=\"1195663\">Sanz, J. and Fayad, Z.A., 2008<\/REF>). <\/para>      <para>Regardless of whether the atherosclerotic plaque ruptures or continues to grow into an advanced lesion that completely obstructs blood flow, the culmination of this process may be a <BACKGROUNDER id=\"58\">Stroke<\/BACKGROUNDER> (if the artery leads to the brain) or <BACKGROUNDER id=\"134\">Myocardial Infarction<\/BACKGROUNDER> (if blood supply to the heart is cut off) (<REF id=\"1195660\">Rader, D.J. and Daugherty, A., 2008<\/REF>). If the affected artery is one that supplies blood to the extremities, peripheral artery disease leading to critical limb ischemia, intermittent claudication and gangrene --in severe cases requiring amputation-- can result (<a href=\"http://eurheartj.oxfordjournals.org/content/32/22/2851\">ESC guidelines on the diagnosis and treatment of peripheral artery diseases (European Society of Cardiology, 2011)<\/a>).<\/para>    <\/Body>    <References>      <Reference id=\"1195660\" medline_id=\"18288179\">        <Title>Translating molecular discoveries into new therapies for atherosclerosis<\/Title>        <SourceTitle>Nature<\/SourceTitle>        <PubMedTitle>Nature<\/PubMedTitle>        <Volume>451<\/Volume>        <Issue>7181<\/Issue>        <Page>904<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Rader, D.J.<\/Author>          <Author>Daugherty, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1195663\" medline_id=\"18288186\">        <Title>Imaging of atherosclerotic cardiovascular disease<\/Title>        <SourceTitle>Nature<\/SourceTitle>        <PubMedTitle>Nature<\/PubMedTitle>        <Volume>451<\/Volume>        <Issue>7181<\/Issue>        <Page>953<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Sanz, J.<\/Author>          <Author>Fayad, Z.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1613391\" medline_id=\"19302038\">        <Title>Immune and inflammatory mechanisms of atherosclerosis<\/Title>        <SourceTitle>Annual Review of Immunology<\/SourceTitle>        <PubMedTitle>Annu Rev Immunol<\/PubMedTitle>        <Volume>27<\/Volume>        <Page>165<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Galkina, E.<\/Author>          <Author>Ley, K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290585\" medline_id=\"25489440\">        <Title>Atherosclerosis: Process, indicators, risk factors and new hopes<\/Title>        <SourceTitle>International Journal of Preventive Medicine<\/SourceTitle>        <PubMedTitle>Int J Prev Med<\/PubMedTitle>        <Volume>5<\/Volume>        <Issue>8<\/Issue>        <Page>927<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Rafieian-Kopaei, M.<\/Author>          <Author>Setorki, M.<\/Author>          <Author>Doudi, M.<\/Author>          <Author>Baradaran, A.<\/Author>          <Author>Nasri, H.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"1374\" modifiedDate=\"20180430093532\">    <Title>Hypercholesterolemia: The Primary Risk Factor<\/Title>    <Body>      <para>Cholesterol, a soft, fat-like substance produced by the liver and found in bloodstream lipids and in all cells, is necessary for the human body to function. Among its many physiological roles, cholesterol is a precursor of steroid hormones and vitamin D and is required for the formation of bile salts (<REF id=\"1613381\">van der Velde, A.E., 2010<\/REF>). The body requires a certain amount of cholesterol in order to build cell membranes, produce some hormones and maintain other vital functions; however, hepatic production of cholesterol (the liver produces approximately 1,000 mg of cholesterol each day) is sufficient to meet these needs. Excessively high levels of cholesterol --usually obtained in the diet-- constitute a major risk factor for atherosclerosis, and hence for coronary heart disease (CHD) and myocardial infarction (<REF id=\"2290585\">Rafieian-Kopaei, M. et al., 2014<\/REF>).<\/para>      <para>Cholesterol and other fats cannot dissolve in the blood and must be transported by lipoproteins. Three forms of lipoproteins exist:<UL>&lt;LI&gt;Very-low-density lipoprotein (VLDL), which carries triglycerides made in the liver from fatty acids, carbohydrates, alcohol and some cholesterol.&lt;LI&gt;Low-density lipoprotein (LDL), a transport structure made up of lipids and proteins that transports &quot;harmful&quot; cholesterol from the liver to the rest of the body. LDL is the major cholesterol carrier in the blood, transporting 60-80% of the body&apos;s cholesterol content. If too much LDL circulates in the blood, cholesterol builds up on the arterial walls and causes plaque.&lt;LI&gt;High-density lipoprotein (HDL), a transport structure made up of lipids and proteins that transports cholesterol away from the periphery to the intestines and the liver, where it can be removed from the bloodstream and ultimately excreted in feces. About 25-33% of blood cholesterol is transported by HDL, which is considered to exert a protective effect on the heart and circulation.<\/UL>      <\/para>      <para>A large body of evidence has established that a diet high in saturated fats and cholesterol can increase blood cholesterol levels, contributing to atherosclerosis and CHD. The American Heart Association (AHA) has identified untreated total cholesterol of &lt; 200 mg/dL (&lt; 170 mg/dL in children 6-19 years of age) as one of the seven components of ideal cardiovascular health (<REF id=\"2786330\">Benjamin, E.J. et al., 2018<\/REF>).<FREETABLE id=\"228\"><![CDATA[      <TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>      <TR>      <TD COLSPAN=4 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>National Cholesterol Education Program (NCEP - ATP III) guidelines for desirable serum cholesterol levels in adults<\/B><\/FONT><\/TD>            <\/TR>      <TR>      <TD COLSPAN=2 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>LDL cholesterol<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN><100 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Optimal<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>100-129 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Near or above optimal<\/TD>      <\/TR>\t        <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>130-159 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Borderline high<\/TD>      <\/TR>\t        <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>160-189 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      High<\/TD>      <\/TR>\t        <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>190 mg/dl or higher<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Very high<\/TD>      <\/TR>\t        <TR>      <TD COLSPAN=4 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Total cholesterol<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN><200 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Desirable<\/TD>      <\/TR>\t        <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>200-239 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Borderline high<\/TD>      <\/TR>\t         <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>240 mg/dl or higher<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      High<\/TD>      <\/TR>\t        <TR>      <TD COLSPAN=4 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>HDL cholesterol<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN><40 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Low<\/TD>      <\/TR>\t         <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>60 mg/dl or higher<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      High<\/TD>      <\/TR>\t  <\/TABLE>]]><\/FREETABLE>      <\/para>    <\/Body>    <References>      <Reference id=\"1613381\" medline_id=\"21157966\">        <Title>Reverse cholesterol transport: From classical view to new insights<\/Title>        <SourceTitle>World Journal of Gastroenterology<\/SourceTitle>        <PubMedTitle>World J Gastroenterol<\/PubMedTitle>        <Volume>16<\/Volume>        <Issue>47<\/Issue>        <Page>5908<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>van der Velde, A.E.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290585\" medline_id=\"25489440\">        <Title>Atherosclerosis: Process, indicators, risk factors and new hopes<\/Title>        <SourceTitle>International Journal of Preventive Medicine<\/SourceTitle>        <PubMedTitle>Int J Prev Med<\/PubMedTitle>        <Volume>5<\/Volume>        <Issue>8<\/Issue>        <Page>927<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Rafieian-Kopaei, M.<\/Author>          <Author>Setorki, M.<\/Author>          <Author>Doudi, M.<\/Author>          <Author>Baradaran, A.<\/Author>          <Author>Nasri, H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2786330\" medline_id=\"29386200\">        <Title>Heart disease and stroke statistics - 2018 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>137<\/Volume>        <Page>e67<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Benjamin, E.J.<\/Author>          <Author>Virani, S.S.<\/Author>          <Author>Callaway, C.W.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"5403\" modifiedDate=\"20150721011618\">    <Title>The Role of Inflammation and the Immune System<\/Title>    <Body>      <para>Although long held to be a straightforward disorder of lipoprotein metabolism, atherosclerosis is now known to be a much more complex, chronic inflammatory disease of the arterial intima (<REF id=\"1619027\">Mizuno, Y. et al., 2011<\/REF>; <REF id=\"2290579\">Linden, F. et al., 2014<\/REF>) in which innate and adaptive immune responses are also intimately involved (<REF id=\"2291783\">Ait-Oufella, H. et al., 2014<\/REF>; <REF id=\"2199763\">Tsiantoulas, D. et al., 2014<\/REF>; <REF id=\"2291790\">Ammirati, E. et al., 2015<\/REF>). <\/para>      <para>According to the inflammatory disease theory, the atherosclerotic process is initiated when low density lipoproteins (LDL) accumulate in the arterial intima and undergo chemical modification. This event stimulates local inflammation in the blood vessel wall, attracting monocytes from the circulation. The modified LDL are taken up by monocyte-derived macrophages. The resulting fat-laden macrophages, or foam cells, localize in the vessel wall at the site of the early fatty streak lesion and intensify the inflammatory response, forming an intermediate lesion. If the inflammatory response is not interrupted, the arterial wall thickens and undergoes a process of remodeling. As inflammation continues, increased numbers of macrophages, dendritic cells and T lymphocytes emigrate from the blood to the lesion, where they multiply and become activated. This stimulates the release of hydrolytic enzymes, cytokines, chemokines and growth factors as well as activation of the complement system, underlining the immune component of atherosclerotic inflammation. Each of these inflammatory elements contributes to further damage and focal necrosis, resulting in the accumulation of fibrous tissue that forms an advanced lesion. The process is repeated in a cyclical fashion until the artery can no longer dilate far enough to compensate for blockage (<REF id=\"1619027\">Mizuno, Y. et al., 2011<\/REF>; <REF id=\"1613391\">Galkina, E. and Ley, K., 2009<\/REF>; <REF id=\"2290585\">Rafieian-Kopaei, M. et al., 2014<\/REF>). <\/para>      <para>In contrast to T cells, which are present in large numbers in atherosclerotic lesions, very few B cells can be detected. The role of B cells in atherogenesis is complex and subtype-dependent: whereas B1 cells prevent lesion formation, B2 cell may promote it (<REF id=\"2199763\">Tsiantoulas, D. et al., 2014<\/REF>).<\/para>      <para>Blood platelets also contribute to the detrimental inflammatory process. Platelets are a recognized source of inflammatory mediators, and adhesion of platelets to the site of vascular injury results in activation of the same by inflammatory mediators (adenosine diphosphate, thrombin, epinephrine, thromboxane A2), further amplifying and sustaining the initial platelet response (<REF id=\"1164367\">Davì, G. and Patrono, C., 2007<\/REF>; <REF id=\"1613391\">Galkina, E. and Ley, K., 2009<\/REF>). <\/para>    <\/Body>    <References>      <Reference id=\"1164367\" medline_id=\"18077812\">        <Title>Platelet activation and atherothrombosis<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>357<\/Volume>        <Issue>24<\/Issue>        <Page>2482<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Davì, G.<\/Author>          <Author>Patrono, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1613391\" medline_id=\"19302038\">        <Title>Immune and inflammatory mechanisms of atherosclerosis<\/Title>        <SourceTitle>Annual Review of Immunology<\/SourceTitle>        <PubMedTitle>Annu Rev Immunol<\/PubMedTitle>        <Volume>27<\/Volume>        <Page>165<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Galkina, E.<\/Author>          <Author>Ley, K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1619027\" medline_id=\"21427505\">        <Title>Inflammation and the development of atherosclerosis: Effects of lipid-lowering therapy<\/Title>        <SourceTitle>Journal of Atheroscleoris and Thrombosis<\/SourceTitle>        <PubMedTitle>J Atheroscler Thromb<\/PubMedTitle>        <Volume>18<\/Volume>        <Issue>5<\/Issue>        <Page>351<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Mizuno, Y.<\/Author>          <Author>Jacob, R.F.<\/Author>          <Author>Mason, R.P.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2199763\" medline_id=\"24855199\">        <Title>B cells and humoral immunity in atherosclerosis<\/Title>        <SourceTitle>Circulation Research<\/SourceTitle>        <PubMedTitle>Circ Res<\/PubMedTitle>        <Volume>114<\/Volume>        <Issue>11<\/Issue>        <Page>1743<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Tsiantoulas, D.<\/Author>          <Author>Diehl, C.J.<\/Author>          <Author>Witztum, J.L.<\/Author>          <Author>Binder, C.J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290579\" medline_id=\"25484870\">        <Title>Inflammatory therapeutic targets in coronary atherosclerosis-from molecular biology to clinical application<\/Title>        <SourceTitle>Frontiers in Physiology<\/SourceTitle>        <PubMedTitle>Front Physiol<\/PubMedTitle>        <Volume>5<\/Volume>        <Page>455<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Linden, F.<\/Author>          <Author>Domschke, G.<\/Author>          <Author>Erbel, C.<\/Author>          <Author>Akhavanpoor, M.<\/Author>          <Author>Katus, H.A.<\/Author>          <Author>Gleissner, C.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290585\" medline_id=\"25489440\">        <Title>Atherosclerosis: Process, indicators, risk factors and new hopes<\/Title>        <SourceTitle>International Journal of Preventive Medicine<\/SourceTitle>        <PubMedTitle>Int J Prev Med<\/PubMedTitle>        <Volume>5<\/Volume>        <Issue>8<\/Issue>        <Page>927<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Rafieian-Kopaei, M.<\/Author>          <Author>Setorki, M.<\/Author>          <Author>Doudi, M.<\/Author>          <Author>Baradaran, A.<\/Author>          <Author>Nasri, H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2291783\" medline_id=\"24812352\">        <Title>Adaptive (T and B cells) immunity and control by dendritic cells in atherosclerosis<\/Title>        <SourceTitle>Circulation Research<\/SourceTitle>        <PubMedTitle>Circ Res<\/PubMedTitle>        <Volume>114<\/Volume>        <Issue>10<\/Issue>        <Page>1640<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Ait-Oufella, H.<\/Author>          <Author>Sage, A.P.<\/Author>          <Author>Mallat, Z.<\/Author>          <Author>Tedgui, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2291790\" medline_id=\"25352024\">        <Title>The role of T and B cells in human atherosclerosis and atherothrombosis<\/Title>        <SourceTitle>Clinical and Experimental Immunology<\/SourceTitle>        <PubMedTitle>Clin Exp Immunol<\/PubMedTitle>        <Volume>179<\/Volume>        <Issue>2<\/Issue>        <Page>173<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Ammirati, E.<\/Author>          <Author>Moroni, F.<\/Author>          <Author>Magnoni, M.<\/Author>          <Author>Camici, P.G.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"1375\" modifiedDate=\"20150302041024\">    <Title>Other Risk Factors<\/Title>    <Body>      <para>High levels of lipoprotein(a), a genetic variant of LDL cholesterol, and of triglycerides also constitute risk factors for atherosclerosis (<REF id=\"1615959\">Galvano, F. et al., 2010<\/REF>; <REF id=\"1610366\">Nordestgaard, B.G. et al., 2010<\/REF>). High levels of homocysteine, an amino acid intermediate formed during methionine metabolism, are believed to contribute to damaging the vascular endothelium. An increasing body of evidence suggests that hyperhomocysteinemia (above 15 mcmol/l in the fasting state) constitutes a risk factor for atherosclerosis in the coronary, cerebral and peripheral vasculature (<REF id=\"1320277\">de Ruijter, W. et al., 2009<\/REF>; <REF id=\"1476117\">Humphrey, L.L. et al., 2008<\/REF>). Several drugs and toxins, as well as cigarette smoking, gender, age (<REF id=\"1615914\">Lee, H.Y. and Oh, B.H., 2010<\/REF>) and genetics, can contribute to hyperhomocysteinemia. Type 2 diabetes, which leads to metabolic abnormalities and resulting vascular dysfunction that predispose patients to atherosclerosis, is another important risk factor (<REF id=\"1405294\">Fadini, G.P. et al., 2009<\/REF>).<\/para>      <para>Established risk factors for atherosclerosis include:<UL>&lt;LI&gt;<BACKGROUNDER id=\"8\">Arterial Hypertension<\/BACKGROUNDER>&lt;LI&gt;Type 2 <BACKGROUNDER id=\"23\">Diabetes<\/BACKGROUNDER>&lt;LI&gt;Male gender&lt;LI&gt;Advancing age&lt;LI&gt;Elevated levels of fibrinogen and other hemostatic factors&lt;LI&gt;<BACKGROUNDER id=\"145\">Metabolic Syndrome<\/BACKGROUNDER>&lt;LI&gt;Insulin resistance&lt;LI&gt;<BACKGROUNDER id=\"47\">Obesity<\/BACKGROUNDER>&lt;LI&gt;Physical inactivity&lt;LI&gt;High-fat diet&lt;LI&gt;Heavy alcohol consumption&lt;LI&gt;Family history&lt;LI&gt;Smoking<\/UL>      <\/para>      <para>Smoking is a risk factor for atherosclerosis in its own right, and furthermore potentiates the effects of other risk factors (<REF id=\"2290572\">Siasos, G. et al., 2014<\/REF>). In the Bogalusa Heart Study, cigarette smoking was shown to significantly exacerbate the harmful effects of age and metabolic syndrome --measured as change in carotid intima-media thickness-- in young adults with subclinical atherosclerosis (<REF id=\"2294377\">Li, S. et al., 2014<\/REF>).<\/para>      <para>Given the role of inflammation in atherogenesis, the presence of chronic inflammatory disease is implicated in both the development and the destabilization of atheromatous plaques (<REF id=\"1613391\">Galkina, E. and Ley, K., 2009<\/REF>). This theory is supported by a Japanese study demonstrating reduced carotid atherosclerosis in asthma patients undergoing regular treatment with inhaled corticosteroids (<REF id=\"1502763\">Otsuki, M. et al., 2010<\/REF>). Chronic systemic inflammation is the mechanism contributing to increased atherosclerosis in the <BACKGROUNDER id=\"55\">Rheumatoid Arthritis<\/BACKGROUNDER> population, and disease-modifying antirheumatic drug (DMARD) therapy has been shown to decrease the risk of CVD-related morbidity and mortality (<REF id=\"1562926\">Ozbalkan, Z. et al., 2010<\/REF>; <REF id=\"1551073\">de Groot, L. et al., 2010<\/REF>). Chronic low-grade systemic inflammation may also be the mechanism linking <BACKGROUNDER id=\"47\">Obesity<\/BACKGROUNDER> to the increased risk of atherosclerosis and cardiovascular disease (<REF id=\"1615850\">Wang, Z. and Nakayama, T., 2010<\/REF>; <REF id=\"1615905\">Anfossi, G. et al., 2010<\/REF>).<\/para>      <para>Another theory asserts that persistent bacterial infections --especially those produced by <I>Chlamydia pneumoniae<\/I>, <BACKGROUNDER id=\"39\">Herpes Simplex Virus<\/BACKGROUNDER>, <I>Helicobacter pylori<\/I> or <BACKGROUNDER id=\"20\">Cytomegalovirus<\/BACKGROUNDER>-- can directly or indirectly trigger the kind of low-grade systemic inflammatory response that may lead to atherosclerosis (<REF id=\"2291792\">Sessa, R. et al., 2014<\/REF>; <REF id=\"2290574\">He, C. et al., 2014<\/REF>). The Northern Manhattan Study confirmed that infectious disease burden was positively associated with increased carotid plaque thickness in a multiethnic cohort (<REF id=\"1472203\">Elkind, M.S. et al., 2010<\/REF>). <\/para>      <para>Long-term exposure to air pollution may lead to the development of atherosclerosis, according to a study sponsored by the National Institutes of Health. The researchers evaluated 798 healthy Los Angeles-area men and women over the age of 40 who showed some signs of increased risk of cardiovascular disease. They used data from 23 monitoring stations to estimate annual average concentrations of particulate matter throughout the Los Angeles area. Overall, the more polluted the air to which subjects were exposed, the thicker the inner layers of their carotid artery. The most-exposed study participants experienced about 8% more artery thickening than the least-exposed participants, after accounting for such factors as diet, use of vitamin supplements and hormone-replacement drugs, physical activity, blood pressure, education and income. Women over the age of 60 experienced artery thickening at a rate almost four times higher than the overall population. In general, women were much more vulnerable than men, and nonsmokers and people taking drugs to reduce cholesterol also proved to be more vulnerable than average. These results support the hypothesis that long-term exposure to particulate matter air pollution contributes to systemic inflammatory pathways (<REF id=\"875601\">Künzli, N. et al., 2005<\/REF>). These findings have since been replicated in dozens of epidemiological studies --including the widely cited Harvard Six Cities study-- which have confirmed that chronic exposure to air pollution, particularly fine particulate matter (particles with a median aerodynamic diameter &lt; 2.5 mcm, or PM2.5), is a major risk factor for cardiovascular disease (<REF id=\"2291788\">Lee, B.J. et al., 2014<\/REF>; <REF id=\"2295342\">Lepeule, J. et al., 2012<\/REF>). Mechanistic studies in preclinical models have demonstrated that exposure to diesel exhaust induces oxidative stress and promotes alterations in the atherosclerotic plaque component, rendering plaques more vulnerable and unstable (<REF id=\"1615956\">Bai, N. et al., 2011<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"875601\" medline_id=\"15687058\">        <Title>Ambient air pollution and atherosclerosis in Los Angeles<\/Title>        <SourceTitle>Environmental Health Perspectives<\/SourceTitle>        <PubMedTitle>Environ Health Perspect<\/PubMedTitle>        <Volume>113<\/Volume>        <Issue>2<\/Issue>        <Page>201<\/Page>        <Year>2005<\/Year>        <Authors>          <Author>Künzli, N.<\/Author>          <Author>Jerrett, M.<\/Author>          <Author>Mack, W.J.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1320277\" medline_id=\"19131384\">        <Title>Use of Framingham risk score and new biomarkers to predict cardiovascular mortality in older people: Population based observational cohort study<\/Title>        <SourceTitle>BMJ - British Medical Journal (Clinical research ed.)<\/SourceTitle>        <PubMedTitle>BMJ<\/PubMedTitle>        <Volume>338<\/Volume>        <Page>a3083<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>de Ruijter, W.<\/Author>          <Author>Westendorp, R.G.<\/Author>          <Author>Assendelft, W.J.<\/Author>          <Author>den Elzen, W.P.<\/Author>          <Author>de Craen, A.J.<\/Author>          <Author>le Cessie, S.<\/Author>          <Author>Gussekloo, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1405294\" medline_id=\"18977481\">        <Title>Why to screen heart disease in diabetes<\/Title>        <SourceTitle>Atherosclerosis<\/SourceTitle>        <PubMedTitle>Atherosclerosis<\/PubMedTitle>        <Volume>204<\/Volume>        <Issue>1<\/Issue>        <Page>11<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Fadini, G.P.<\/Author>          <Author>de Kreutzenberg, S.V.<\/Author>          <Author>Tiengo, A.<\/Author>          <Author>Avogaro, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1472203\" medline_id=\"20075350\">        <Title>Infectious burden and carotid plaque thickness: The northern Manhattan study<\/Title>        <SourceTitle>Stroke<\/SourceTitle>        <PubMedTitle>Stroke<\/PubMedTitle>        <Volume>41<\/Volume>        <Issue>3<\/Issue>        <Page>e117<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Elkind, M.S.<\/Author>          <Author>Luna, J.M.<\/Author>          <Author>Moon, Y.P.<\/Author>          <Author>Boden-Albala, B.<\/Author>          <Author>Liu, K.M.<\/Author>          <Author>Spitalnik, S.<\/Author>          <Author>Rundek, T.<\/Author>          <Author>Sacco, R.L.<\/Author>          <Author>Paik, M.C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1476117\">        <Title>Homocysteine level and coronary heart disease incidence: A systematic review and meta-analysis<\/Title>        <SourceTitle>Mayo Clinic Proceedings<\/SourceTitle>        <PubMedTitle>Mayo Clin Proc<\/PubMedTitle>        <Volume>83<\/Volume>        <Issue>11<\/Issue>        <Page>1203<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Humphrey, L.L.<\/Author>          <Author>Fu, R.W.<\/Author>          <Author>Rogers, K.<\/Author>          <Author>Freeman, M.<\/Author>          <Author>Helfand, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1502763\" medline_id=\"20413534\">        <Title>Reduced carotid atherosclerosis in asthmatic patients treated with inhaled corticosteroids<\/Title>        <SourceTitle>The European Respiratory Journal<\/SourceTitle>        <PubMedTitle>Eur Respir J<\/PubMedTitle>        <Volume>36<\/Volume>        <Issue>3<\/Issue>        <Page>503<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Otsuki, M.<\/Author>          <Author>Miyatake, A.<\/Author>          <Author>Fujita, K.<\/Author>          <Author>Hamasaki, T.<\/Author>          <Author>Kasayama, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1551073\" medline_id=\"20597966\">        <Title>Risk factors and early detection of atherosclerosis in rheumatoid arthritis<\/Title>        <SourceTitle>European Journal of Clinical Investigation<\/SourceTitle>        <PubMedTitle>Eur J Clin Invest<\/PubMedTitle>        <Volume>40<\/Volume>        <Issue>9<\/Issue>        <Page>835<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>de Groot, L.<\/Author>          <Author>Posthumus, M.D.<\/Author>          <Author>Kallenberg, C.G.<\/Author>          <Author>Bijl, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1562926\" medline_id=\"20430394\">        <Title>An update on the relationships between rheumatoid arthritis and atherosclerosis<\/Title>        <SourceTitle>Atherosclerosis<\/SourceTitle>        <PubMedTitle>Atherosclerosis<\/PubMedTitle>        <Volume>212<\/Volume>        <Issue>2<\/Issue>        <Page>377<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Ozbalkan, Z.<\/Author>          <Author>Efe, C.<\/Author>          <Author>Cesur, M.<\/Author>          <Author>Ertek, S.<\/Author>          <Author>Nasiroglu, N.<\/Author>          <Author>Berneis, K.<\/Author>          <Author>Rizzo, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1610366\" medline_id=\"20965889\">        <Title>Lipoprotein(a) as a cardiovascular risk factor: Current status<\/Title>        <SourceTitle>European Heart Journal<\/SourceTitle>        <PubMedTitle>Eur Heart J<\/PubMedTitle>        <Volume>31<\/Volume>        <Issue>23<\/Issue>        <Page>2844<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Nordestgaard, B.G.<\/Author>          <Author>Chapman, M.J.<\/Author>          <Author>Ray, K.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1613391\" medline_id=\"19302038\">        <Title>Immune and inflammatory mechanisms of atherosclerosis<\/Title>        <SourceTitle>Annual Review of Immunology<\/SourceTitle>        <PubMedTitle>Annu Rev Immunol<\/PubMedTitle>        <Volume>27<\/Volume>        <Page>165<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Galkina, E.<\/Author>          <Author>Ley, K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615850\" medline_id=\"20847813\">        <Title>Inflammation, a link between obesity and cardiovascular disease<\/Title>        <SourceTitle>Mediators of Inflammation<\/SourceTitle>        <PubMedTitle>Mediators Inflamm<\/PubMedTitle>        <Volume>2010<\/Volume>        <Page>535918<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Wang, Z.<\/Author>          <Author>Nakayama, T.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615905\" medline_id=\"20652043\">        <Title>Adipocytokines in atherothrombosis: Focus on platelets and vascular smooth muscle cells<\/Title>        <SourceTitle>Mediators of Inflammation<\/SourceTitle>        <PubMedTitle>Mediators Inflamm<\/PubMedTitle>        <Volume>2010<\/Volume>        <Issue>1466<\/Issue>        <Page>174341<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Anfossi, G.<\/Author>          <Author>Russo, I.<\/Author>          <Author>Doronzo, G.<\/Author>          <Author>Pomero, A.<\/Author>          <Author>Trovati, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615914\" medline_id=\"20962429\">        <Title>Aging and arterial stiffness<\/Title>        <SourceTitle>Circulation Journal<\/SourceTitle>        <PubMedTitle>Circ J<\/PubMedTitle>        <Volume>74<\/Volume>        <Issue>11<\/Issue>        <Page>2257<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Lee, H.Y.<\/Author>          <Author>Oh, B.H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615956\" medline_id=\"21435644\">        <Title>Changes in atherosclerotic plaques induced by inhalation of diesel exhaust<\/Title>        <SourceTitle>Atherosclerosis<\/SourceTitle>        <PubMedTitle>Atherosclerosis<\/PubMedTitle>        <Volume>216<\/Volume>        <Issue>2<\/Issue>        <Page>299<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Bai, N.<\/Author>          <Author>Kido, T.<\/Author>          <Author>Suzuki, H.<\/Author>          <Author>Yang, G.<\/Author>          <Author>Kavanagh, T.J.<\/Author>          <Author>Kaufman, J.D.<\/Author>          <Author>Rosenfeld, M.E.<\/Author>          <Author>van Breemen, C.<\/Author>          <Author>Eeden, S.F.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615959\" medline_id=\"20515830\">        <Title>The physiopathology of lipoprotein (a)<\/Title>        <SourceTitle>Frontiers in Bioscience (Scholar Edition)<\/SourceTitle>        <PubMedTitle>Front Biosci (Schol Ed)<\/PubMedTitle>        <Volume>2<\/Volume>        <Page>866<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Galvano, F.<\/Author>          <Author>Malaguarnera, M.<\/Author>          <Author>Vacante, M.<\/Author>          <Author>Motta, M.<\/Author>          <Author>Russo, C.<\/Author>          <Author>Malaguarnera, G. <\/Author>          <Author>D&apos;Orazio, N.<\/Author>          <Author>Malaguarnera, L.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290572\" medline_id=\"25174928\">        <Title>Smoking and atherosclerosis: Mechanisms of disease and new therapeutic approaches<\/Title>        <SourceTitle>Current Medicinal Chemistry<\/SourceTitle>        <PubMedTitle>Curr Med Chem<\/PubMedTitle>        <Volume>21<\/Volume>        <Issue>34<\/Issue>        <Page>3936<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Siasos, G.<\/Author>          <Author>Tsigkou, V.<\/Author>          <Author>Kokkou, E.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290574\" medline_id=\"25342566\">        <Title>Helicobacter pylori-an infectious risk factor for atherosclerosis?<\/Title>        <SourceTitle>Journal of Atheroscleoris and Thrombosis<\/SourceTitle>        <PubMedTitle>J Atheroscler Thromb<\/PubMedTitle>        <Volume>21<\/Volume>        <Issue>12<\/Issue>        <Page>1229<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>He, C.<\/Author>          <Author>Yang, Z.<\/Author>          <Author>Lu, N.H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2291788\" medline_id=\"25071915\">        <Title>Air pollution exposure and cardiovascular disease<\/Title>        <SourceTitle>Toxicological Research<\/SourceTitle>        <PubMedTitle>Toxicol Res<\/PubMedTitle>        <Volume>30<\/Volume>        <Issue>2<\/Issue>        <Page>71<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Lee, B.J.<\/Author>          <Author>Kim, B.<\/Author>          <Author>Lee, K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2291792\" medline_id=\"25032197\">        <Title>Infectious burden and atherosclerosis: A clinical issue<\/Title>        <SourceTitle>World Journal of Clinical Cases<\/SourceTitle>        <PubMedTitle>World J Clin Cases<\/PubMedTitle>        <Volume>2<\/Volume>        <Issue>7<\/Issue>        <Page>240<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Sessa, R.<\/Author>          <Author>Pietro, M.D.<\/Author>          <Author>Filardo, S.<\/Author>          <Author>Turriziani, O.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2294377\" medline_id=\"24789040\">        <Title>Cigarette smoking exacerbates the adverse effects of age and metabolic syndrome on subclinical atherosclerosis: The Bogalusa Heart Study<\/Title>        <SourceTitle>PLoS ONE<\/SourceTitle>        <PubMedTitle>PLoS One<\/PubMedTitle>        <Volume>9<\/Volume>        <Issue>5<\/Issue>        <Page>e96368<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Li, S.<\/Author>          <Author>Yun, M.<\/Author>          <Author>Fernandez, C.<\/Author>          <Author>Xu, J.<\/Author>          <Author>Srinivasan, S.R.<\/Author>          <Author>Chen, W.<\/Author>          <Author>Berenson, G.S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2295342\" medline_id=\"22456598\">        <Title>Chronic exposure to fine particles and mortality: An extended follow-up of the Harvard Six Cities study from 1974 to 2009<\/Title>        <SourceTitle>Environmental Health Perspectives<\/SourceTitle>        <PubMedTitle>Environ Health Perspect<\/PubMedTitle>        <Volume>120<\/Volume>        <Issue>7<\/Issue>        <Page>965<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Lepeule, J.<\/Author>          <Author>Laden, F.<\/Author>          <Author>Dockery, D.<\/Author>          <Author>Schwartz, J.<\/Author>        <\/Authors>      <\/Reference>    <\/References>    <Section sectionId=\"3748\" modifiedDate=\"20190405083745\">      <Title>Genetics<\/Title>      <Body>        <para>The importance of genetics in atherosclerosis should not be overlooked. Genetic factors determine up to 50% of the variability in serum cholesterol levels within the general population (<REF id=\"671806\">O&apos;Connell, D.L. et al., 1988<\/REF>). Genes that may be implicated in the development of atherosclerosis include various genes associated with LDL-cholesterol metabolism (including but not limited to <I>LDLR, APOB, LDLRAP1<\/I> and <I>APOA1<\/I>), HDL-cholesterol metabolism (including <I>LCAT, SR-B1, ABCA1<\/I> and <I>CETP<\/I>), triglyceride metabolism (such as <I>LPL, apoA5<\/I> and <I>apoC-III<\/I>) and vascular smooth muscle cell migration (<I>ADAM33<\/I>), as well as other genes influencing inflammation, oxidative stress, endothelial dysfunction and a range of other processes. Gene variants of <I>endothelin-1<\/I> (<I>EDN1<\/I>) are reported to play a role in atherosclerosis. In the Chinese Han population, the <I>EDN1<\/I> tagSNP (single-nucleotide polymorphism) rs6458155 is associated with atherosclerosis risk, probably via circulating endothelin-1 levels (<REF id=\"2985144\">Liang, L.L. et al., 2018<\/REF>). Other reports state that individual genetic factors may also interact with environmental risk factors, as well as with genes (<REF id=\"1404640\">Roy, H. et al., 2009<\/REF>; <REF id=\"1521352\">Holloway, J.W. et al., 2010<\/REF>). <\/para>        <para>A handful of genetic forms of hyperlipidemia exist, most notably the autosomal dominant disease familial hypercholesterolemia (FH), of which three subtypes have been identified. These subtypes are caused by mutations in the genes for: the LDL receptor (<I>LDLR<\/I>), apolipoprotein B (<I>ApoB<\/I>), and pro-protein convertase subtilisin/kexin 9 (<I>PCSK9<\/I>). Heterozygous and homozygous forms also exist, the latter being the more severe (<REF id=\"1975803\">Hovingh, G.K. et al., 2013<\/REF>). <\/para>      <\/Body>      <References>        <Reference id=\"671806\" medline_id=\"3215507\">          <Title>Twin study of genetic and environmental effects on lipid levels<\/Title>          <SourceTitle>Genetic Epidemiology<\/SourceTitle>          <PubMedTitle>Genet Epidemiol<\/PubMedTitle>          <Volume>5<\/Volume>          <Issue>5<\/Issue>          <Page>323<\/Page>          <Year>1988<\/Year>          <Authors>            <Author>O&apos;Connell, D.L.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1404640\" medline_id=\"19301036\">          <Title>Molecular genetics of atherosclerosis<\/Title>          <SourceTitle>Human Genetics<\/SourceTitle>          <PubMedTitle>Hum Genet<\/PubMedTitle>          <Volume>125<\/Volume>          <Issue>5-6<\/Issue>          <Page>467<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Roy, H.<\/Author>            <Author>Bhardwaj, S.<\/Author>            <Author>Yla-Herttuala, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1521352\" medline_id=\"20227692\">          <Title>ADAM33 expression in atherosclerotic lesions and relationship of ADAM33 gene variation with atherosclerosis<\/Title>          <SourceTitle>Atherosclerosis<\/SourceTitle>          <PubMedTitle>Atherosclerosis<\/PubMedTitle>          <Volume>211<\/Volume>          <Issue>1<\/Issue>          <Page>224<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Holloway, J.W.<\/Author>            <Author>Laxton, R.C.<\/Author>            <Author>Rose-Zerilli, M.J.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1975803\" medline_id=\"23416791\">          <Title>Diagnosis and treatment of familial hypercholesterolaemia<\/Title>          <SourceTitle>European Heart Journal<\/SourceTitle>          <PubMedTitle>Eur Heart J<\/PubMedTitle>          <Volume>34<\/Volume>          <Issue>13<\/Issue>          <Page>962<\/Page>          <Year>2013<\/Year>          <Authors>            <Author>Hovingh, G.K.<\/Author>            <Author>Davidson, M.H.<\/Author>            <Author>Kastelein, J.J.<\/Author>            <Author>O&apos;Connor, A.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2985144\" medline_id=\"29654172\">          <Title>Genetic susceptibility of five tagSNPs in the endothelin-1 (EDN1) gene to coronary artery disease in a Chinese Han population<\/Title>          <SourceTitle>Bioscience Reports<\/SourceTitle>          <PubMedTitle>Biosci Rep<\/PubMedTitle>          <Volume>38<\/Volume>          <Issue>5<\/Issue>          <Year>2018<\/Year>          <Authors>            <Author>Liang, L.L.<\/Author>            <Author>Chen, L.<\/Author>            <Author>Zhou, M.Y.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>  <\/Section>  <Section sectionId=\"1376\" modifiedDate=\"20180430093638\">    <Title>Epidemiology<\/Title>    <Body>      <para>A comparison of serum total cholesterol levels in adults residing in 199 countries and territories worldwide has concluded that in spite of national nutritional policies, mean total cholesterol levels showed little sign of decreasing in the period 1980-2008 in countries those countries where data were available. Greater intervention is needed in middle- to high-income countries, and greater surveillance in low- and middle-income nations (<REF id=\"1611218\">Farzadfar, F. et al., 2011<\/REF>), where 80% of all cardiovascular-related mortalities occur (<REF id=\"1493244\">Gersh, B.J. et al., 2010<\/REF>; <REF id=\"2294375\">Rodríguez-Saldaña, J. et al., 2014<\/REF>).<\/para>      <para>Although the symptoms of coronary heart disease generally do not become apparent until after age 40, the processes leading up to atherosclerosis begin in the early years of life (<REF id=\"1615855\">Hong, Y.M., 2010<\/REF>). Early atherosclerotic lesions have been reported in infants from around the world, regardless of ethnicity or prevalence of CHD in the population. Parallel to an increasing prevalence of obesity and overweight among children and adolescents, together with an ever-more sedentary lifestyle, excess dietary intake of saturated fats, calories and cholesterol, and cigarette smoking, the incidence of juvenile atherosclerosis is visibly on the upswing in industrialized countries. <\/para>      <para>The American Heart Association defines hypercholesterolemia as untreated total cholesterol of &gt;240 mg/dL in adults. According to this definition, an estimated 28.5 million (11.9%) U.S. adults aged 20 years and older had excessively high cholesterol levels in 2011-2014 (<REF id=\"2627529\">Benjamin, E.J. et al., 2017<\/REF>). A more recent estimate from CDC is that in 2015-2016, 12.4% of U.S. adults had high total cholesterol (greater than or equal to 240 mg/dL). Overall, prevalence was higher in adults aged 40-59 years as compared to those aged 20-39 years or aged 60 years and older (17.1% vs. 7.9% and 12.5%, respectively) (<a href=\"http://www.cdc.gov/nchs/data/databriefs/db290.pdf\">Total and high-density lipoprotein cholesterol in adults: United States, 2015-2016. NCHS Data Brief No. 290 (Centers for Disease Control and Prevention, October 2017)<\/a>). Moreover, NHANES data for 2011-2014 indicate that approximately 8.2% of adolescents 12 to 19 years of age have total cholesterol levels above 200 mg/dL; hypercholesterolemia in this age group is defined by AHA as &gt; 170 mg/dL (<REF id=\"2786330\">Benjamin, E.J. et al., 2018<\/REF>). While still high, a trend toward decreasing cholesterol values has been observed in the U.S. in recent years in comparison with previous decades (<REF id=\"1956849\">Carroll, M.D. et al., 2012<\/REF>; <REF id=\"2291879\">Kit, B.K. et al., 2012<\/REF>; <a href=\"http://www.cdc.gov/nchs/data/databriefs/db290.pdf\">Total and high-density lipoprotein cholesterol in adults: United States, 2015-2016. NCHS Data Brief No. 290 (Centers for Disease Control and Prevention, October 2017)<\/a>), although this may be the result of increased use of cholesterol-lowering drug therapy, rather than improved lifestyle habits (<REF id=\"2467711\">Mozaffarian, D. et al., 2016<\/REF>).<\/para>      <para>In a pathology study conducted in Mexico City, autopsy confirmed the nearly universal presence of clinical atherosclerosis in 185 cadavers of men (median age 35 years) and women (median age 30 years) who had died of other causes. In this study, atherosclerosis was identified in at least one of the five arterial territories (intracranial, carotid, coronary, renal or aorta) in 97.8% of subjects, and in two or more territories in 92.2% of subjects. The investigators furthermore reported that emerging and advanced lesions were observed in 53% and 20%, respectively, of people who had no known risk factors (<REF id=\"2294375\">Rodríguez-Saldaña, J. et al., 2014<\/REF>).<\/para>      <para>Hyperlipidemia and atherosclerosis are prevalent--and becoming even more so--in other low and middle income countries such as India, where the younger generations are most affected (<REF id=\"1956445\">Ashavaid, T.F. et al., 2012<\/REF>), and China. At least 200 million Chinese are believed to have dyslipidemia. According to a national survey conducted in that country in 2002, in 2002, the prevalence of dyslipidemia in adults was 18.6%, of whom 2.9% had hypercholesterolemia (total cholesterol greater than or equal to 5.72 mmol/L), 11.9% had hypertriglyceridemia (triglyceride great than or equal to 1.70 mmol/L) and 7.4% had low HDL-cholesterol (&lt;1.04 mmol/L) (<REF id=\"1946092\">Hu, S.S. et al., 2012<\/REF>). In the Korean National Health and Nutrition Examination Survey (KNHANES) 2010, the age-standardized prevalence of hypercholesterolemia (defined as total cholesterol greater than or equal to 240 mg/dL or taking cholesterol-lowering medication) in Korea was estimated at 13.5%, equivalent to approximately 3.8 million adults aged 30 and older (<REF id=\"2112124\">Hong, K.S. et al., 2013<\/REF>). Prevalence of atherosclerosis on the African continent ranges from 15-20% in countries of West Africa such as Nigeria, to nearly 45% in Northern African nations such as Tunisian and Egypt (<REF id=\"2659813\">Keates, A.K. et al., 2017<\/REF>).<\/para>      <para>For more epidemiology information, consult the Incidence and Prevalence Database (IPD): <a href=\"http://www.tdrdata.com/ipd/IPD_SearchIPDByKeyword_Excel.aspx?keyword=atherosclerosis\">IPD: Atherosclerosis<\/a>.<\/para>    <\/Body>    <References>      <Reference id=\"1493244\" medline_id=\"20176800\">        <Title>Novel therapeutic concepts: The epidemic of cardiovascular disease in the developing world: Global implications<\/Title>        <SourceTitle>European Heart Journal<\/SourceTitle>        <PubMedTitle>Eur Heart J<\/PubMedTitle>        <Volume>31<\/Volume>        <Issue>6<\/Issue>        <Page>642<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Gersh, B.J.<\/Author>          <Author>Sliwa, K.<\/Author>          <Author>Mayosi, B.M.<\/Author>          <Author>Yusuf, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1611218\" medline_id=\"21295847\">        <Title>National, regional, and global trends in serum total cholesterol since 1980: Systematic analysis of health examination surveys and epidemiological studies with 321 country-years and 3·0 million participants<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>377<\/Volume>        <Issue>9765<\/Issue>        <Page>578<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Farzadfar, F.<\/Author>          <Author>Finucane, M.M.<\/Author>          <Author>Danaei, G.<\/Author>          <Author>Pelizzari, P.M.<\/Author>          <Author>Cowan, M.J.<\/Author>          <Author>Paciorek, C.J.<\/Author>          <Author>Singh, G.M.<\/Author>          <Author>Lin, J.K.<\/Author>          <Author>Stevens, G.A.<\/Author>          <Author>Riley, L.M.<\/Author>          <Author>Ezzati, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615855\" medline_id=\"20111646\">        <Title>Atherosclerotic cardiovascular disease beginning in childhood<\/Title>        <SourceTitle>Korean Circulation Journal<\/SourceTitle>        <PubMedTitle>NOT INDEXED IN PUBMED<\/PubMedTitle>        <Volume>40<\/Volume>        <Issue>1<\/Issue>        <Page>1<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Hong, Y.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1946092\" medline_id=\"22840574\">        <Title>Outline of the report on cardiovascular disease in China, 2010<\/Title>        <SourceTitle>Biomedical and Environmental Sciences<\/SourceTitle>        <PubMedTitle>Biomed Environ Sci<\/PubMedTitle>        <Volume>25<\/Volume>        <Issue>3<\/Issue>        <Page>251<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Hu, S.S.<\/Author>          <Author>Kong, L.Z.<\/Author>          <Author>Gao, R.L.<\/Author>          <Author>Zhu, M.L.<\/Author>          <Author>Wang, W.<\/Author>          <Author>Wang, Y.J.<\/Author>          <Author>Wu, Z.S.<\/Author>          <Author>Chen, W.W.<\/Author>          <Author>Liu, M.B.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1956445\" medline_id=\"22727001\">        <Title>Cardiovascular disease in India<\/Title>        <SourceTitle>Clinics in Laboratory Medicine<\/SourceTitle>        <PubMedTitle>Clin Lab Med<\/PubMedTitle>        <Volume>32<\/Volume>        <Issue>2<\/Issue>        <Page>217<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Ashavaid, T.F.<\/Author>          <Author>Ponde, C.K.<\/Author>          <Author>Shah, S.<\/Author>          <Author>Jawanjal, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1956849\" medline_id=\"23073951\">        <Title>Trends in lipids and lipoproteins in US adults, 1988-2010<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>308<\/Volume>        <Issue>15<\/Issue>        <Page>1545<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Carroll, M.D.<\/Author>          <Author>Kit, B.K.<\/Author>          <Author>Lacher, D.A.<\/Author>          <Author>Shero, S.T.<\/Author>          <Author>Mussolino, M.E.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2112124\" medline_id=\"24324935\">        <Title>Stroke statistics in Korea: Part I. Epidemiology and risk factors. A report from the Korean stroke society and clinical research center for stroke<\/Title>        <SourceTitle>Journal of Stroke<\/SourceTitle>        <PubMedTitle>J Stroke<\/PubMedTitle>        <Volume>15<\/Volume>        <Issue>1<\/Issue>        <Page>2<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Hong, K.S.<\/Author>          <Author>Bang, O.Y.<\/Author>          <Author>Kang, D.W.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2291879\" medline_id=\"22871871\">        <Title>Trends in serum lipids among US youths aged 6 to 19 years, 1988-2010<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>308<\/Volume>        <Issue>6<\/Issue>        <Page>591<\/Page>        <Year>2012<\/Year>        <Authors>          <Author>Kit, B.K.<\/Author>          <Author>Carroll, M.D.<\/Author>          <Author>Lacher, D.A.<\/Author>          <Author>Sorlie, P.D.<\/Author>          <Author>DeJesus, J.M.<\/Author>          <Author>Ogden, C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2294375\" medline_id=\"24719773\">        <Title>A pathological study of the epidemiology of atherosclerosis in Mexico City<\/Title>        <SourceTitle>Cardiology Research and Practice<\/SourceTitle>        <PubMedTitle>Cardiol Res Pract<\/PubMedTitle>        <Volume>2014<\/Volume>        <Page>264205<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Rodríguez-Saldaña, J.<\/Author>          <Author>Rodriguez-Flores, M.<\/Author>          <Author>Cantú-Brito, C.<\/Author>          <Author>Aguirre-Garcia, J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2467711\" medline_id=\"26673558\">        <Title>Heart disease and stroke statistics-2016 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>133<\/Volume>        <Issue>4<\/Issue>        <Page>e38<\/Page>        <Year>2016<\/Year>        <Authors>          <Author>Mozaffarian, D.<\/Author>          <Author>Benjamin, E.J.<\/Author>          <Author>Go, A.S.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2627529\">        <Title>Heart disease and stroke statistics -- 2017 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>135<\/Volume>        <Page>e1<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Benjamin, E.J.<\/Author>          <Author>Blaha, M.J.<\/Author>          <Author>Chiuve, S.E.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2659813\" medline_id=\"28230175\">        <Title>Cardiovascular disease in Africa: Epidemiological profile and challenges<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>14<\/Volume>        <Issue>5<\/Issue>        <Page>273<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Keates, A.K.<\/Author>          <Author>Mocumbi, A.O.<\/Author>          <Author>Ntsekhe, M.<\/Author>          <Author>Sliwa, K.<\/Author>          <Author>Stewart, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2786330\" medline_id=\"29386200\">        <Title>Heart disease and stroke statistics - 2018 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>137<\/Volume>        <Page>e67<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Benjamin, E.J.<\/Author>          <Author>Virani, S.S.<\/Author>          <Author>Callaway, C.W.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"1377\" modifiedDate=\"20180430094153\">    <Title>Morbidity and Mortality<\/Title>    <Body>      <para>According to data from the World Health Organization&apos;s Global Burden of Disease study, elevated total cholesterol was the 15th most important risk factor for global burden of disease, measured as DALYs, in 2015. In that study, raised TC, defined as greater than or equal to 115 mg/dL or greater than or equal to 3.0 mmol/L, was estimated to be the cause of 4.3 million deaths worldwide (<REF id=\"2786330\">Benjamin, E.J. et al., 2018<\/REF>). According to the American Heart Association, atherosclerosis currently accounts for 125,000 hospital discharges and 14,979 deaths per 100,000 population each year in the United States. Furthermore, atherosclerosis is a leading cause of death from heart attack and stroke, thereby contributing to nearly three-fourths of all deaths from cardiovascular disease. Atherosclerotic cardiovascular disease is also a leading cause of death in developing countries (<REF id=\"1493244\">Gersh, B.J. et al., 2010<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"1493244\" medline_id=\"20176800\">        <Title>Novel therapeutic concepts: The epidemic of cardiovascular disease in the developing world: Global implications<\/Title>        <SourceTitle>European Heart Journal<\/SourceTitle>        <PubMedTitle>Eur Heart J<\/PubMedTitle>        <Volume>31<\/Volume>        <Issue>6<\/Issue>        <Page>642<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Gersh, B.J.<\/Author>          <Author>Sliwa, K.<\/Author>          <Author>Mayosi, B.M.<\/Author>          <Author>Yusuf, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2786330\" medline_id=\"29386200\">        <Title>Heart disease and stroke statistics - 2018 update: A report from the American Heart Association<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>137<\/Volume>        <Page>e67<\/Page>        <Year>2018<\/Year>        <Authors>          <Author>Benjamin, E.J.<\/Author>          <Author>Virani, S.S.<\/Author>          <Author>Callaway, C.W.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"2582\" modifiedDate=\"20180523014145\">    <Title>Cost<\/Title>    <Body>      <para>The international REduction of Atherothrombosis for Continued Health (REACH) Registry study has provided estimates of the costs associated with atherosclerosis in several countries. In the U.S., where REACH enrolled 25,763 subjects aged 45 years and older with a history of coronary artery, cerebrovascular, or peripheral artery disease or with at least three atherothrombotic risk factors, annual medication costs ranged from USD 2,401 to USD 3,481. Age- and sex-adjusted average cost of hospitalization ranged from USD 1,370 in patients with risk factors only to USD 8,162 in patients with atherosclerotic disease in all three arterial beds. When long-term medication costs were considered, these figures increased to USD 3,696 to USD 11,482. Extrapolated to the entire U.S. population, the investigators estimated total annual costs associated with vascular hospitalizations for outpatients with a history of coronary arter disease and cardiovascular disease to be more than USD 47 billion and USD 11 billion, respectively, and for those with peripheral artery disease to be more than USD 21 billion (<REF id=\"2294373\">Mahoney, E.M. et al., 2008<\/REF>).<\/para>      <para>Among U.S. adults (18-64 years of age) in the Medicaid population, total annual healthcare costs were estimated at USD 18,785 per beneficiary with hyperlipidemia over the period 2000-2016. Disease-related cost per patient was estimated to range from USD 560 to USD 3,370 (<REF id=\"2833325\">Chapel, J.M. et al., 2017<\/REF>).<\/para>      <para>The Canadian arm of the REACH study enrolled 1,964 outpatients with coronary artery disease, cerebrovascular disease or peripheral arterial disease, or with three or more atherothrombotic risk factors. In this group, annual medication costs averaged CAD 1,683, CAD 1,523 and CAD 1,776 (expressed in 2006 Canadian dollars) for patients with zero (i.e., risk factors only), one, and two or three symptomatic arterial beds, respectively. Annual hospitalization costs increased with the number of affected arterial beds, averaging CAD 380, CAD 1,403 and CAD 3,465, respectively. Extrapolating these numbers to the entire population of Canada, the researchers estimated that average annual costs for vascular-related hospitalizations would be over CAD 2.2 billion for patients with coronary artery disease, more than CAD 0.5 billion for patients with cerebrovascular disease, and more than CAD 3.7 billion for patients with peripheral arterial disease (<REF id=\"2294374\">Smolderen, K.G. et al., 2010<\/REF>).<\/para>      <para>REACH also enrolled 2,873 participants in Australia, where mean annual per-person costs were determined to be AUD 1,388 for pharmaceuticals, AUD 704 for ambulatory care and AUD 10,711 for hospitalization. Costs in patients with peripheral arterial disease were highest with respect to those with risk factors only (<REF id=\"2294379\">Ademi, Z. et al., 2010<\/REF>).<\/para>      <para>Cardiovascular disease accounts for 11% of Australia&apos;s annual healthcare expenditure (equivalent to AUD 14 billion in 2010-2011), and hospital readmission represents a significant share of this cost. In a study of 6,172 patients with atherothrombotic disease admitted to hospitals in Perth in 2007, the two-year cost to the health system, including index admission, was AUD 101 million (2013 Australian dollars). Readmission during this period accounted for 42% of total cost (<REF id=\"2294378\">Atkins, E.R. et al., 2014<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"2294373\" medline_id=\"20031786\">        <Title>One-year costs in patients with a history of or at risk for atherothrombosis in the United States<\/Title>        <SourceTitle>Circulation Cardiovascular Quality and Outcomes<\/SourceTitle>        <PubMedTitle>Circ Cardiovasc Qual Outcomes<\/PubMedTitle>        <Volume>1<\/Volume>        <Issue>1<\/Issue>        <Page>38<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Mahoney, E.M.<\/Author>          <Author>Wang, K.<\/Author>          <Author>Cohen, D.J.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2294374\" medline_id=\"20931098\">        <Title>One-year costs associated with cardiovascular disease in Canada: Insights from the Reduction of Atherothrombosis for Continued Health (REACH) registry<\/Title>        <SourceTitle>Canadian Journal of Cardiology<\/SourceTitle>        <PubMedTitle>Can J Cardiol<\/PubMedTitle>        <Volume>26<\/Volume>        <Issue>8<\/Issue>        <Page>297<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Smolderen, K.G.<\/Author>          <Author>Bell, A.<\/Author>          <Author>Lei, Y.<\/Author>          <Author>Cohen, E.A.<\/Author>          <Author>Steg, P.G.<\/Author>          <Author>Bhatt, D.L.<\/Author>          <Author>Mahoney, E.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2294378\" medline_id=\"25102911\">        <Title>One third of hospital costs for atherothrombotic disease are attributable to readmissions: A linked data analysis<\/Title>        <SourceTitle>BMC Health Services Research (Online)<\/SourceTitle>        <PubMedTitle>BMC Health Serv Res<\/PubMedTitle>        <Volume>14<\/Volume>        <Page>338<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Atkins, E.R.<\/Author>          <Author>Geelhoed, E.A.<\/Author>          <Author>Knuiman, M.<\/Author>          <Author>Briffa, T.G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2294379\">        <Title>The economic implications of treating atherothrombotic disease in Australia, from the government perspective<\/Title>        <SourceTitle>Clinical Therapeutics<\/SourceTitle>        <PubMedTitle>Clin Ther<\/PubMedTitle>        <Volume>32<\/Volume>        <Issue>1<\/Issue>        <Page>119<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Ademi, Z.<\/Author>          <Author>Liew, D.<\/Author>          <Author>Hollingsworth, B.<\/Author>          <Author>Wolfe, R.<\/Author>          <Author>Steg, G.P.<\/Author>          <Author>Bhatt, D.L.<\/Author>          <Author>Reid, C.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2833325\" medline_id=\"29153115\">        <Title>Prevalence and medical costs of chronic diseases among adult medicaid beneficiaries<\/Title>        <SourceTitle>American Journal of Preventive Medicine<\/SourceTitle>        <PubMedTitle>Am J Prev Med<\/PubMedTitle>        <Volume>53<\/Volume>        <Issue>6S2<\/Issue>        <Page>S143<\/Page>        <Year>2017<\/Year>        <Authors>          <Author>Chapel, J.M.<\/Author>          <Author>Ritchey, M.D.<\/Author>          <Author>Zhang, D.<\/Author>          <Author>Wang, G.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"1367\" modifiedDate=\"20150223103444\">  <Title>Diagnosis<\/Title>  <Body>    <para>The diagnostic workup includes physical examination and blood tests and, in some cases, any of the following: electrocardiogram, imaging tests (chest x-ray, echocardiography or CT scan), ankle/brachial index, or stress testing. <\/para>    <para>Given the extremely high incidence of elevated cholesterol levels among young adults --one study determined that one-third of young adult men (20-34 years) had total cholesterol levels above 200 mg/dL--, all adults aged 20 years and older should have their cholesterol levels tested at least once every five years (<REF id=\"662365\">Grundy, S.M., 2000<\/REF>). In patients with abnormally high cholesterol counts, blood testing should be repeated every one to two years.<FREETABLE id=\"228\"><![CDATA[      <TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>      <TR>      <TD COLSPAN=4 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>National Cholesterol Education Program (NCEP - ATP III) guidelines for desirable serum cholesterol levels in adults<\/B><\/FONT><\/TD>            <\/TR>      <TR>      <TD COLSPAN=2 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>LDL cholesterol<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN><100 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Optimal<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>100-129 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Near or above optimal<\/TD>      <\/TR>\t        <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>130-159 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Borderline high<\/TD>      <\/TR>\t        <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>160-189 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      High<\/TD>      <\/TR>\t        <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>190 mg/dl or higher<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Very high<\/TD>      <\/TR>\t        <TR>      <TD COLSPAN=4 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Total cholesterol<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN><200 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Desirable<\/TD>      <\/TR>\t        <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>200-239 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Borderline high<\/TD>      <\/TR>\t         <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>240 mg/dl or higher<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      High<\/TD>      <\/TR>\t        <TR>      <TD COLSPAN=4 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>HDL cholesterol<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN><40 mg/dl<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Low<\/TD>      <\/TR>\t         <TR>      <TD WIDTH=\"221\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <DN>60 mg/dl or higher<\/TD>      <TD WIDTH=\"222\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      High<\/TD>      <\/TR>\t  <\/TABLE>]]><\/FREETABLE>    <\/para>  <\/Body>  <References>    <Reference id=\"662365\" medline_id=\"10891970\">      <Title>Early detection of high cholesterol levels in young adults<\/Title>      <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>      <PubMedTitle>JAMA<\/PubMedTitle>      <Volume>284<\/Volume>      <Issue>3<\/Issue>      <Page>365<\/Page>      <Year>2000<\/Year>      <Authors>        <Author>Grundy, S.M.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"1378\" modifiedDate=\"20170124034220\">    <Title>Diagnostic Imaging<\/Title>    <Body>      <para>The gold standard diagnostic procedure for imaging atherosclerosis is X-ray angiography (<REF id=\"1195663\">Sanz, J. and Fayad, Z.A., 2008<\/REF>), which involves the injection of an X-ray dye and sequential imaging of sections of the body. This procedure has several drawbacks, including high cost, patient discomfort, the use of a potentially toxic dye, follow-up hospital stay, and the various risks associated with catheterization directly into the arteries: excessive blood loss and the possibility of dislodging plaque built up on the arterial walls. In spite of these considerable risks, millions of X-ray angiographies are performed worldwide each year.<\/para>      <para>Noninvasive ultrasound can detect early indicators of atherogenesis, including impaired endothelial function and thickening of the arterial wall, in coronary as well as peripheral vessels (<REF id=\"1615933\">Fuster, V. et al., 2010<\/REF>). Due to the high specificity, reproducibility and safety of ultrasound, this technology is highly attractive, although still not widely used, for the presymptomatic diagnosis of atherosclerosis in its earliest stages (<REF id=\"662265\">Celermajer, D.S., 1998<\/REF>).<\/para>      <para>Magnetic resonance imaging (MRI) may be useful in detecting and determining the composition and extent of lipid-rich atherosclerotic plaque, especially those plaques that are likely to rupture and cause acute ischemic events. This noninvasive method is superior to intravascular ultrasound for detecting type IV and Va lipid-rich plaque, which is often not visible with angiography. MRI is also the preferred method for imaging the heart, which can have important diagnostic implications in both the diagnosis and treatment of atherosclerosis (<REF id=\"1615933\">Fuster, V. et al., 2010<\/REF>; <REF id=\"1195663\">Sanz, J. and Fayad, Z.A., 2008<\/REF>).<\/para>      <para>Computed tomography (CT) technology can also be applied to the imaging of coronary arteries. Using an appropriate contrast agent for image enhancement, a multidetector CT scanner can generate a complete coronary angiogram in less than 15 seconds; this technique has a diagnostic sensitivity of 96% and specificity of 74% in the detection of significant coronary stenosis (&gt;50% narrowing of the artery diameter) (<REF id=\"1195663\">Sanz, J. and Fayad, Z.A., 2008<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"662265\" medline_id=\"9869674\">        <Title>Noninvasive detection of atherosclerosis<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>339<\/Volume>        <Issue>27<\/Issue>        <Page>2014<\/Page>        <Year>1998<\/Year>        <Authors>          <Author>Celermajer, D.S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1195663\" medline_id=\"18288186\">        <Title>Imaging of atherosclerotic cardiovascular disease<\/Title>        <SourceTitle>Nature<\/SourceTitle>        <PubMedTitle>Nature<\/PubMedTitle>        <Volume>451<\/Volume>        <Issue>7181<\/Issue>        <Page>953<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Sanz, J.<\/Author>          <Author>Fayad, Z.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615933\" medline_id=\"20440291\">        <Title>Early identification of atherosclerotic disease by noninvasive imaging<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>7<\/Volume>        <Issue>6<\/Issue>        <Page>327<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Fuster, V.<\/Author>          <Author>Lois, F.<\/Author>          <Author>Franco, M.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"1368\" modifiedDate=\"20110427123718\">  <Title>Prevention<\/Title>  <Body>    <para>In the NCEP&apos;s third report by the Expert Panel on Detection, Evaluation, and Treatment of High Blood Cholesterol in Adults (<REF id=\"662366\">Anonymous, 2001<\/REF>), risk reduction is recommended for all individuals, although it is of course most important in those individuals with multiple risk factors. The intensity of risk-reduction therapy is determined by the individual&apos;s absolute risk of CHD, and hence assessment of personal risk status is the first step in selecting the appropriate preventive strategy.<\/para>  <\/Body>  <References>    <Reference id=\"662366\" medline_id=\"11368702\">      <Title>Executive summary of the third report of the national cholesterol education program (NCEP) expert panel on detection, evaluation, and treatment of high blood cholesterol in adults (adult treatment panel III)<\/Title>      <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>      <PubMedTitle>JAMA<\/PubMedTitle>      <Volume>285<\/Volume>      <Issue>19<\/Issue>      <Page>2486<\/Page>      <Year>2001<\/Year>      <Authors/>    <\/Reference>  <\/References>  <Section sectionId=\"4226\" modifiedDate=\"20110427024547\">    <Title>Lifestyle Modification<\/Title>    <Body>      <para>In order to prevent the appearance of hypercholesterolemia and atherosclerosis later in life, even healthy young adults and children should eat a diet low in cholesterol and saturated fats as well as identify and correct other risk factors (<REF id=\"1615855\">Hong, Y.M., 2010<\/REF>). The American Heart Association recommends a healthy, balanced diet that includes five servings of fruit or vegetables each day. Foods containing folic acid and vitamins B6 and B12 (tomatoes, citrus fruits, vegetables and grains) are recommended for maintenance of low plasma homocysteine levels. Adequate consumption of foods containing omega-3 fatty acids --primarily from oily fish or dietary supplements-- is also recommended due to demonstrated hypolipidemic and cardioprotective effects (<REF id=\"1431448\">Lee, J.H. et al., 2009<\/REF>). Dose-related effects on blood lipid levels have been reported for nuts, especially in subjects with higher LDL-cholesterol at baseline and/or lower BMI (<REF id=\"1502759\">Sabaté, J. et al., 2010<\/REF>). Lifestyle modification, even to a moderate degree, has proven to be beneficial in reducing the future risk of coronary heart disease. A 1% reduction in LDL cholesterol levels decreases the risk of CHD by 2%, and a 1% increase in HDL reduces the risk of CHD by 3-4%.<\/para>      <para>Various dietary supplements are available for LDL cholesterol reduction, and their use may delay or eliminate the need to prescribe cholesterol-lowering drugs. Supplements include dietary fiber, plant stanols and sterols, soy and other proteins such as legumes, and various milk-derived products (<REF id=\"1400764\">Sirtori, C.R. et al., 2009<\/REF>; <REF id=\"1615939\">Kelly, R.B., 2010<\/REF>).<\/para>      <para>Physical activity has several beneficial effects on the risk factors for atherosclerosis. Exercise contributes to weight loss and visceral fat reduction, decreased blood pressure and pulse rate. It also helps to boost HDL levels and reduce those of total and LDL cholesterol and triglycerides, decreases platelet aggregability, improves glucose tolerance and increases insulin sensitivity (<REF id=\"1615906\">Cederberg, H. et al., 2011<\/REF>; <REF id=\"1615910\">Martins, R.A. et al., 2010<\/REF>). In a sample of 1,235 adolescents (age 12-19 years) from NHANES, participation in moderate to vigorous physical exercise, even in small amounts, was associated with a significant reduction in the risk of having age- and sex-specific high-risk HDL cholesterol and triglyceride scores (<REF id=\"1615935\">LeBlanc, A.G. and Janssen, I., 2010<\/REF>).<\/para>      <para>The risk of fatal heart attack among heavy smokers is approximately 5.5 times higher than for nonsmokers, for which smoking cessation is an effective strategy for preventing atherosclerosis and cardiovascular disease. The mechanism by which cigarette smoking contributes to atherosclerosis has not been fully elucidated, although smoking may reduce HDL levels and cause fibrinogenemia. Excessive consumption of alcoholic beverages also increases cardiovascular mortality, although moderate alcohol intake appears to exert a protective effect on the cardiovascular system, perhaps by increasing levels of HDL cholesterol (<REF id=\"662255\">Tegos, T.J. et al., 2001<\/REF>). Red wine, which is rich in natural polyphenols, is especially recognized for its beneficial cardiovascular effects when consumed in moderation (<REF id=\"1618892\">Saleem, T.S. and Basha, S.D., 2010<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"662255\" medline_id=\"11228092\">        <Title>The genesis of atherosclerosis and risk factors: A review<\/Title>        <SourceTitle>Angiology<\/SourceTitle>        <PubMedTitle>Angiology<\/PubMedTitle>        <Volume>52<\/Volume>        <Issue>2<\/Issue>        <Page>89<\/Page>        <Year>2001<\/Year>        <Authors>          <Author>Tegos, T.J.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1400764\" medline_id=\"18687434\">        <Title>Nutritional and nutraceutical approaches to dyslipidemia and atherosclerosis prevention: Focus on dietary proteins<\/Title>        <SourceTitle>Atherosclerosis<\/SourceTitle>        <PubMedTitle>Atherosclerosis<\/PubMedTitle>        <Volume>203<\/Volume>        <Issue>1<\/Issue>        <Page>8<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Sirtori, C.R.<\/Author>          <Author>Galli, C.<\/Author>          <Author>Anderson, J.W.<\/Author>          <Author>Arnoldi, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1431448\" medline_id=\"19859067\">        <Title>Omega-3 fatty acids: Cardiovascular benefits, sources and sustainability<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>6<\/Volume>        <Issue>12<\/Issue>        <Page>753<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Lee, J.H.<\/Author>          <Author>O&apos;Keefe, J.H.<\/Author>          <Author>Lavie, C.J.<\/Author>          <Author>Harris, W.S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1502759\" medline_id=\"20458092\">        <Title>Nut consumption and blood lipid levels: A pooled analysis of 25 intervention trials<\/Title>        <SourceTitle>Archives of Internal Medicine<\/SourceTitle>        <PubMedTitle>Arch Intern Med<\/PubMedTitle>        <Volume>170<\/Volume>        <Issue>9<\/Issue>        <Page>821<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Sabaté, J.<\/Author>          <Author>Oda, K.<\/Author>          <Author>Ros, E.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615855\" medline_id=\"20111646\">        <Title>Atherosclerotic cardiovascular disease beginning in childhood<\/Title>        <SourceTitle>Korean Circulation Journal<\/SourceTitle>        <PubMedTitle>NOT INDEXED IN PUBMED<\/PubMedTitle>        <Volume>40<\/Volume>        <Issue>1<\/Issue>        <Page>1<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Hong, Y.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615906\" medline_id=\"21402378\">        <Title>Exercise during military training improves cardiovascular risk factors in young men<\/Title>        <SourceTitle>Atherosclerosis<\/SourceTitle>        <PubMedTitle>Atherosclerosis<\/PubMedTitle>        <Volume>216<\/Volume>        <Issue>2<\/Issue>        <Page>489<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Cederberg, H.<\/Author>          <Author>Mikkola, I.<\/Author>          <Author>Jokelainen, J.<\/Author>          <Author>Laakso, M.<\/Author>          <Author>Häkönen, P.<\/Author>          <Author>Ikäheimo, T.<\/Author>          <Author>Laakso, M.<\/Author>          <Author>Keinänen-Kiukaanniemi, S.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615910\" medline_id=\"20663148\">        <Title>Effects of aerobic and strength-based training on metabolic health indicators in older adults<\/Title>        <SourceTitle>Lipids in Health and Disease (Online)<\/SourceTitle>        <PubMedTitle>Lipids Health Dis<\/PubMedTitle>        <Volume>9<\/Volume>        <Page>76<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Martins, R.A.<\/Author>          <Author>Veríssimo, M.T.<\/Author>          <Author>Coelho E Silva, M.J. <\/Author>          <Author>Cumming, S.P.<\/Author>          <Author>Teixeira, A.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615935\" medline_id=\"20548982\">        <Title>Dose-response relationship between physical activity and dyslipidemia in youth<\/Title>        <SourceTitle>Canadian Journal of Cardiology<\/SourceTitle>        <PubMedTitle>Can J Cardiol<\/PubMedTitle>        <Volume>26<\/Volume>        <Issue>6<\/Issue>        <Page>201<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>LeBlanc, A.G.<\/Author>          <Author>Janssen, I.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615939\" medline_id=\"20433126\">        <Title>Diet and exercise in the management of hyperlipidemia<\/Title>        <SourceTitle>American Family Physician (1970)<\/SourceTitle>        <PubMedTitle>Am Fam Physician<\/PubMedTitle>        <Volume>81<\/Volume>        <Issue>9<\/Issue>        <Page>1097<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Kelly, R.B.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1618892\" medline_id=\"21264180\">        <Title>Red wine: A drink to your heart<\/Title>        <SourceTitle>Journal of Cardiovascular Disease Research<\/SourceTitle>        <PubMedTitle>J Cardiovasc Dis Res<\/PubMedTitle>        <Volume>1<\/Volume>        <Issue>4<\/Issue>        <Page>171<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Saleem, T.S.<\/Author>          <Author>Basha, S.D.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"1381\" modifiedDate=\"20190201014616\">    <Title>Hormone Replacement Therapy<\/Title>    <Body>      <para>The incidence of atherosclerosis and of resulting cardiovascular disease is much lower in women during the premenopausal period than in men. This difference, which disappears at the onset of menopause, has often been attributed to the protective effects of estrogen upon the circulation (<REF id=\"1615916\">Kolovou, G. et al., 2011<\/REF>), a theory that was supported by observations in epidemiological studies of reduced cardiovascular morbidity and mortality among postmenopausal women using hormone replacement therapy (HRT). <\/para>      <para>Although hormone replacement therapy was never approved by the FDA for the prevention of coronary heart disease, the positive results obtained in the above-mentioned observational studies led to wide-spread use of HRT for this indication. Thus the discovery of an increase rather than a decrease in the incidence of CHD among women treated with estrogen plus progestin in the Women&apos;s Health Initiative (WHI) caught healthcare providers by surprise. Subjects in the WHI had a 29% increase in coronary heart disease at an average of 5.2 years (<REF id=\"680673\">Rossouw, J.E. et al., 2002<\/REF>). Based on this finding, the American Heart Association and the North American Menopause Society issued recommendations that hormone therapy should not be initiated for the primary or secondary prevention of CHD (<REF id=\"732744\">Michels, K.B. and Manson, J.E., 2003<\/REF>). Five years after the WHI was halted, however, additional results were published indicating that some initial conclusions of the study may have been premature, misleading or wrong altogether. The newer conclusions, derived from secondary analyses of the study data, indicated that the timing of HRT has a crucial impact on the efficacy and safety of the treatment. In newly menopausal women without cardiovascular risk factors, risk of coronary heart disease (CHD) and death was in fact lower among those taking HRT as compared to those not on hormones; this was in direct contrast to the results reported in 2002. Among older women who were further from menopause, however, the risk of CHD and death increased as a result of hormone therapy (<REF id=\"1087810\">Rossouw, J.E. et al., 2007<\/REF>; <REF id=\"1112520\">Manson, J.E. et al., 2007<\/REF>). These divergent results are due to the fact that estrogen&apos;s effects on vascular pathology are largely dependent upon the underlying vacular pathology: in health vessels, the hormone protects against atherogenesis, but in the presence of established plaques, estrogen may be ineffective or even detrimental (<REF id=\"1615919\">Bechlioulis, A. et al., 2010<\/REF>). The 2001 NCEP-ATP III report (<REF id=\"662366\">Anonymous, 2001<\/REF>) states a clear preference for lipid-lowering therapy, especially with statins, over hormone replacement therapy. <\/para>      <para>Studies in aging men indicate a similiar role for male hormones in protecting against cardiovascular disease. Although this relationship has not been confirmed, observational studies in middle-aged and older men have linked lower-than-normal testosterone levels with an increased risk of cardiovascular events such as stroke and transient ischemic attack, as well as increased cardiovascular mortality, and androgen supplementation has been shown to protect against myocardial ischemia (<REF id=\"1615918\">Yeap, B.B., 2010<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"662366\" medline_id=\"11368702\">        <Title>Executive summary of the third report of the national cholesterol education program (NCEP) expert panel on detection, evaluation, and treatment of high blood cholesterol in adults (adult treatment panel III)<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>285<\/Volume>        <Issue>19<\/Issue>        <Page>2486<\/Page>        <Year>2001<\/Year>        <Authors/>      <\/Reference>      <Reference id=\"680673\" medline_id=\"12117397\">        <Title>Risks and benefits of estrogen plus progestin in healthy postmenopausal women. Principal results from the Women&apos;s Health Initiative randomized controlled trial<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>288<\/Volume>        <Issue>3<\/Issue>        <Page>321<\/Page>        <Year>2002<\/Year>        <Authors>          <Author>Rossouw, J.E.<\/Author>          <Author>Anderson, G.L.<\/Author>          <Author>Prentice, R.L.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"732744\" medline_id=\"12695280\">        <Title>Postmenopausal hormone therapy. A reversal of fortune<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>107<\/Volume>        <Issue>14<\/Issue>        <Page>1830<\/Page>        <Year>2003<\/Year>        <Authors>          <Author>Michels, K.B.<\/Author>          <Author>Manson, J.E.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1087810\" medline_id=\"17405972\">        <Title>Postmenopausal hormone therapy and risk of cardiovascular disease by age and years since menopause<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>297<\/Volume>        <Issue>13<\/Issue>        <Page>1465<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Rossouw, J.E.<\/Author>          <Author>Prentice, R.L.<\/Author>          <Author>Manson, J.E.<\/Author>          <Author>Wu, L.<\/Author>          <Author>Barad, D.<\/Author>          <Author>Barnabei, V.M.<\/Author>          <Author>Ko, M.<\/Author>          <Author>LaCroix, A.Z.<\/Author>          <Author>Margolis, K.L.<\/Author>          <Author>Stefanick, M.L.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1112520\" medline_id=\"17582069\">        <Title>Estrogen therapy and coronary-artery calcification<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>356<\/Volume>        <Issue>25<\/Issue>        <Page>2591<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Manson, J.E.<\/Author>          <Author>Allison, M.A.<\/Author>          <Author>Rossouw, J.E.<\/Author>          <Author>Carr, J.J.<\/Author>          <Author>Langer, R.D.<\/Author>          <Author>Hsia, J.<\/Author>          <Author>Kuller, L.H.<\/Author>          <Author>Cochrane, B.B.<\/Author>          <Author>Hunt, J.R.<\/Author>          <Author>Ludlam, S.E.<\/Author>          <Author>Pettinger, M.B.<\/Author>          <Author>Gass, M.<\/Author>          <Author>Margolis, K.L.<\/Author>          <Author>Nathan, L.<\/Author>          <Author>Ockene, J.K.<\/Author>          <Author>Prentice, R.L.<\/Author>          <Author>Robbins, J.<\/Author>          <Author>Stefanick, M.L.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615916\" medline_id=\"20507277\">        <Title>Effects of estrogens on atherogenesis<\/Title>        <SourceTitle>Current Vascular Pharmacology<\/SourceTitle>        <PubMedTitle>Curr Vasc Pharmacol<\/PubMedTitle>        <Volume>9<\/Volume>        <Issue>2<\/Issue>        <Page>244<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Kolovou, G.<\/Author>          <Author>Giannakopoulou, V.<\/Author>          <Author>Vasiliadis, Y.<\/Author>          <Author>Bilianou, H.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615918\" medline_id=\"20186051\">        <Title>Androgens and cardiovascular disease<\/Title>        <SourceTitle>Current Opinion in Endocrinology, Diabetes, and Obesity (Online)<\/SourceTitle>        <PubMedTitle>Curr Opin Endocrinol Diabetes Obes (Online)<\/PubMedTitle>        <Volume>17<\/Volume>        <Issue>3<\/Issue>        <Page>269<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Yeap, B.B.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615919\" medline_id=\"19485910\">        <Title>Cardiovascular effects of endogenous estrogen and hormone therapy<\/Title>        <SourceTitle>Current Vascular Pharmacology<\/SourceTitle>        <PubMedTitle>Curr Vasc Pharmacol<\/PubMedTitle>        <Volume>8<\/Volume>        <Issue>2<\/Issue>        <Page>249<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Bechlioulis, A.<\/Author>          <Author>Naka, K.K.<\/Author>          <Author>Calis, K.A.<\/Author>          <Author>Makrigiannakis, A.<\/Author>          <Author>Michalis, L.<\/Author>          <Author>Kalantaridou, S.N.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"1369\" modifiedDate=\"20151223122903\">  <Title>Treatment<\/Title>  <Body>    <para>Adequate dietary and lifestyle modification is generally the first step to cholesterol reduction; drug treatment should be considered only when dietary intervention is insufficient. Essential lifestyle changes as defined by the NCEP-ATP III (<REF id=\"662366\">Anonymous, 2001<\/REF>) include reduced intake of saturated fats and cholesterol, weight reduction and regular physical activity (at least 120 minutes/week). Various dietary supplements are available for enhancing LDL cholesterol reduction, and their use may delay or eliminate the need to prescribe cholesterol-lowering drugs. Supplements include dietary fiber, plant stanols and sterols, omega-3 fatty acid and soy protein (<REF id=\"1615939\">Kelly, R.B., 2010<\/REF>). At all stages of dietary therapy, patients should be referred to a registered dietitian or nutritionist for medical nutrition therapy.<\/para>    <para>Detection and treatment of high blood cholesterol at the present time are clearly inadequate. According to the Centers for Disease Control and Prevention (CDC), over 36% of all American adults (equivalent to 78.1 million persons aged 21 years or older) surveyed in NHANES 2005-2012 were on or eligible for cholesterol treatment. Of these, 55.5% reported they were taking cholesterol-lowering medication, and 46.6% reported making lifestyle modifications to lower cholesterol (<REF id=\"2435828\">Mercado, C. et al., 2015<\/REF>). Other studies show that among those who are prescribed lipid-lowering therapy, only one-third achieve target LDL-cholesterol levels (<REF id=\"1180214\">Rosamond, W. et al., 2008<\/REF>). Increased access to antihyperlipidemic drug therapy is an important goal, given that effective lipid-lowering therapy has been shown in clinical studies to significantly reduce all-cause mortality as compared to untreated patients (<REF id=\"1346666\">Gardette, V. et al., 2009<\/REF>).<\/para>  <\/Body>  <References>    <Reference id=\"662366\" medline_id=\"11368702\">      <Title>Executive summary of the third report of the national cholesterol education program (NCEP) expert panel on detection, evaluation, and treatment of high blood cholesterol in adults (adult treatment panel III)<\/Title>      <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>      <PubMedTitle>JAMA<\/PubMedTitle>      <Volume>285<\/Volume>      <Issue>19<\/Issue>      <Page>2486<\/Page>      <Year>2001<\/Year>      <Authors/>    <\/Reference>    <Reference id=\"1180214\" medline_id=\"18086926\">      <Title>Heart disease and stroke statistics-2008 update: A report from the American Heart Association Statistics Committee and Stroke Statistics Subcommittee<\/Title>      <SourceTitle>Circulation<\/SourceTitle>      <PubMedTitle>Circulation<\/PubMedTitle>      <Volume>117<\/Volume>      <Issue>4<\/Issue>      <Page>e25<\/Page>      <Year>2008<\/Year>      <Authors>        <Author>Rosamond, W.<\/Author>        <Author>Flegal, K.<\/Author>        <Author>Furie, K.<\/Author>        <Author>Go, A.<\/Author>        <Author>Greenlund, K.<\/Author>        <Author>Haase, N.<\/Author>        <Author>Hailpern, S.M.<\/Author>        <Author>Ho, M.<\/Author>        <Author>Howard, V.<\/Author>        <Author>Kissela, B.<\/Author>        <Author>Kittner, S.<\/Author>        <Author>Lloyd-Jones, D.<\/Author>        <Author>McDermott, M.<\/Author>        <Author>Meigs, J.<\/Author>        <Author>Moy, C.<\/Author>        <Author>Nichol, G.<\/Author>        <Author>O&apos;Donnell, C.<\/Author>        <Author>Roger, V.<\/Author>        <Author>Sorlie, P.<\/Author>        <Author>Steinberger, J.<\/Author>        <Author>Thom, T.<\/Author>        <Author>Wilson, M.<\/Author>        <Author>Hong, Y.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1346666\" medline_id=\"19166693\">      <Title>Ten-year all-cause mortality in presumably healthy subjects on lipid-lowering drugs (from the Prospective Epidemiological Study of Myocardial Infarction [PRIME] prospective cohort)<\/Title>      <SourceTitle>American Journal of Cardiology<\/SourceTitle>      <PubMedTitle>Am J Cardiol<\/PubMedTitle>      <Volume>103<\/Volume>      <Issue>3<\/Issue>      <Page>381<\/Page>      <Year>2009<\/Year>      <Authors>        <Author>Gardette, V.<\/Author>        <Author>Bongard, V.<\/Author>        <Author>Dallongeville, J.<\/Author>        <Author>Arveiler, D.<\/Author>        <Author>Bingham, A.<\/Author>        <Author>Ruidavets, J.B.<\/Author>        <Author>Amouyel, P.<\/Author>        <Author>Haas, B.<\/Author>        <Author>Ducimetière, P.<\/Author>        <Author>Ferrières, J.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"1615939\" medline_id=\"20433126\">      <Title>Diet and exercise in the management of hyperlipidemia<\/Title>      <SourceTitle>American Family Physician (1970)<\/SourceTitle>      <PubMedTitle>Am Fam Physician<\/PubMedTitle>      <Volume>81<\/Volume>      <Issue>9<\/Issue>      <Page>1097<\/Page>      <Year>2010<\/Year>      <Authors>        <Author>Kelly, R.B.<\/Author>      <\/Authors>    <\/Reference>    <Reference id=\"2435828\">      <Title>Prevalence of cholesterol treatment eligibility and medication use among adults - United States, 2005-2012<\/Title>      <SourceTitle>MMWR. Morbidity and Mortality Weekly Report<\/SourceTitle>      <PubMedTitle>MMWR Morb Mortal Wkly Rep<\/PubMedTitle>      <Volume>64<\/Volume>      <Issue>47<\/Issue>      <Page>1305<\/Page>      <Year>2015<\/Year>      <Authors>        <Author>Mercado, C.<\/Author>        <Author>DeSimone, A.K.<\/Author>        <Author>Odom, E.<\/Author>        <Author>Gillespie, C.<\/Author>        <Author>Ayala, C.<\/Author>        <Author>Loustalot, F.<\/Author>      <\/Authors>    <\/Reference>  <\/References>  <Section sectionId=\"1384\" modifiedDate=\"20180910103157\">    <Title>LDL Cholesterol-Lowering Drug Therapy<\/Title>    <Body>      <para>In patients who are unable to control their cholesterol levels through diet and exercise alone, drug therapy is indicated. Data obtained in primary prevention studies has confirmed that LDL cholesterol-lowering drugs reduce the risk of major coronary events, coronary death and total mortality in patients with established CHD, even in the short term (<REF id=\"1622817\">Brautbar, A. and Ballantyne, C.M., 2011<\/REF>). Lipid-lowering agents act by either reducing hepatic production of lipoproteins or by increasing their removal from blood. A wide range of lipid-lowering drugs are on the market for the prevention and treatment of atherosclerosis, as shown in the table below.<\/para>      <para>However, the strategy of LDL cholesterol reduction alone does not appear to be sufficient for the control of atherosclerotic disease and prevention of cardiovascular morbidity. This observation is supported by the fact that more than one-third of all patients who develop atherosclerosis have cholesterol levels below 200 mg/dL. Furthermore, and perhaps more importantly, over half of those patients with hyperlipidemia who take cholesterol-lowering drugs do not enjoy protection against cardiovascular morbidity as a result. Finally, a growing body of evidence demonstrates that many of the therapeutic benefits of statins --the most widely used and effective class of antihypercholesterolemic drugs-- are derived from their pleiotropic effects rather than their lipid-lowering effects (<REF id=\"2290573\">Artom, N. et al., 2014<\/REF>; <REF id=\"2295909\">Profumo, E. et al., 2014<\/REF>).<FREETABLE id=\"75\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>      <TR>      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Lipid-lowering drugs marketed for the prevention and treatment of atherosclerosis<\/B><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Drug name<\/B><\/TD>      <TD WIDTH=\"120\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Company<\/B><\/TD>      <TD WIDTH=\"100\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Year and country of first launch<\/B><\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Bile acid sequestrants<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91567&p_type=L&p_origen=BGR&p_tsearch=A\">Cholestyramine resin<\/a> (Questran, LoCholest)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1961<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=285607&p_type=L&p_origen=BGR&p_tsearch=A\">Colestipol hydrochloride<\/a> (Colestid)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1977 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=185277&p_type=L&p_origen=BGR&p_tsearch=A\">Colestilan<\/a> (Cholebine)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Mitsubishi Chemical/Mitsubishi Tanabe Pharma/Astellas<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1999 (Japan)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=222457&p_type=L&p_origen=BGR&p_tsearch=A\">Colesevelam hydrochloride<\/a> (Welchol)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Daiichi Sankyo/Genzyme/Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2000 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Fibric acid derivatives<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=296346&p_type=L&p_origen=BGR&p_tsearch=A\">Clofibrate<\/a> (Atromid-S)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1963<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=282546&p_type=L&p_origen=BGR&p_tsearch=A\">Bezafibrate<\/a> (Bezatol)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Roche<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1978<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91117&p_type=L&p_origen=BGR&p_tsearch=A\">Clinofibrate<\/a> (Lipoclin)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Dainippon Sumitomo Pharma<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1981 (Japan)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91114&p_type=L&p_origen=BGR&p_tsearch=A\">Gemfibrozil<\/a> (Lopid)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1982 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=122952&p_type=L&p_origen=BGR&p_tsearch=A\">Ronifibrate<\/a> (Cloprane)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Daiichi Sankyo<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1985 (Italy)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90802&p_type=L&p_origen=BGR&p_tsearch=A\">Binifibrate<\/a> (Biniwas)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Soc. Esp. Esp. Farmaco-Terapeuticas<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1987 (Spain)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=276065&p_type=L&p_origen=BGR&p_tsearch=A\">Fenofibrate<\/a> (Lipidil)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1987 (France)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=115067&p_type=L&p_origen=BGR&p_tsearch=A\">Ciprofibrate<\/a> (Ciprol)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1995 (France)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=422591&p_type=L&p_origen=BGR&p_tsearch=A\">Choline fenofibrate<\/a> (Trilipix)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2008 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>HMG-CoA reductase inhibitors (statins)<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90077&p_type=L&p_origen=BGR&p_tsearch=A\">Lovastatin<\/a> (Mevacor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1987 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=122234&p_type=L&p_origen=BGR&p_tsearch=A\">Simvastatin<\/a> (Zocor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1988 (Sweden)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=103471&p_type=L&p_origen=BGR&p_tsearch=A\">Pravastatin sodium<\/a> (Lipostat)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Daiichi Sankyo<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1989 (Japan)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=129568&p_type=L&p_origen=BGR&p_tsearch=A\">Fluvastatin sodium<\/a> (Locol)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Novartis<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1993 (U.K., U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=180072&p_type=L&p_origen=BGR&p_tsearch=A\">Atorvastatin calcium<\/a> (Lipitor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1997 (Germany)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=192009&p_type=L&p_origen=BGR&p_tsearch=A\">Pitavastatin calcium<\/a> (Livalo)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Nissan Chemical/Daiichi Sankyo/Kowa<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (Japan)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=243619&p_type=L&p_origen=BGR&p_tsearch=A\">Rosuvastatin calcium<\/a> (Crestor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (Canada)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=967945&p_type=L&p_origen=BGR&p_tsearch=A\">Pitavastatin magnesium<\/a> (Zypitamag)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Zydus Cadilla<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2017 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Nicotinic acid derivatives<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=115061&p_type=L&p_origen=BGR&p_tsearch=A\">Acipimox<\/a> (Olbetam)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1985 (Italy)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=256792&p_type=L&p_origen=BGR&p_tsearch=A\">Niacin<\/a> (Niaspan)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1998 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Cholesterol absorption inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=224366&p_type=L&p_origen=BGR&p_tsearch=A\">Ezetimibe<\/a> (Zetia, Ezetrol)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2002 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>MTTP inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=235523&p_type=L&p_origen=BGR&p_tsearch=A\">Lomitapide<\/a> (Juxtapid)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Novelion Therapeutics<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (U.S.) (familial hypercholesterolemia)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>APOB expression inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=339511&p_type=L&p_origen=BGR&p_tsearch=A\">Mipomersen sodium<\/a> (Kynamro)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Ionis/Genzyme<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (U.S.) (homozygous familial hypercholesterolemia)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>PPAR modulators<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=802540&p_type=L&p_origen=BGR&p_tsearch=A\">Saroglitazar magnesium<\/a> (Lipoglyn)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Zydus<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (India) (diabetic dyslipidemia)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=400569&p_type=L&p_origen=BGR&p_tsearch=A\">Pemafibrate<\/a> (Parmodia)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Kowa<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (Japan)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>PCSK9 inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=687774&p_type=L&p_origen=BGR&p_tsearch=A\">Alirocumab<\/a> (Praluent)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi/Regeneron<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2015 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661832&p_type=L&p_origen=BGR&p_tsearch=A\">Evolocumab<\/a> (Repatha)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Amgen<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2015 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Antiplatelet therapy<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=142672&p_type=L&p_origen=BGR&p_tsearch=A\">Clopidogrel bisulfate<\/a> (Iscover, Plavix)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi/Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1998 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Combination products<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=342656&p_type=L&p_origen=BGR&p_tsearch=A\">Amlodipine besylate/atorvastatin calcium<\/a> (Caduet)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=289928&p_type=L&p_origen=BGR&p_tsearch=A\">Ezetimibe/simvastatin<\/a> (Inegy)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004 (Germany, Mexico, U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=632487&p_type=L&p_origen=BGR&p_tsearch=A\">Atorvastatin/ramipril<\/a> (Atocor-R)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Dr. Reddy's<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2008 (India)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=348069&p_type=L&p_origen=BGR&p_tsearch=A\">Niacin/simvastatin<\/a> (Simcor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2008 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=448662&p_type=L&p_origen=BGR&p_tsearch=A\">Ezetimibe/atorvastatin<\/a> (Liptruzet)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=644223&p_type=L&p_origen=BGR&p_tsearch=A\">Fenofibrate/simvastatin<\/a> (Cholib)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Abbott<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2014 (Croatia, Slovenia, Bulgaria)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=822508&p_type=L&p_origen=BGR&p_tsearch=A\">Rosuvastatin/olmesartan<\/a> (Olostar)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Daewoong<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2014 (Korea)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=858600&p_type=L&p_origen=BGR&p_tsearch=A\">Fimasartan/rosuvastatin calcium<\/a> (Tuvero)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Boryung<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2016 (Korea)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Miscellaneous lipid-lowering agents<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=167987&p_type=L&p_origen=BGR&p_tsearch=A\">Icosapent ethyl ester<\/a> (Epadel)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Mochida<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1990 (Japan)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=213604&p_type=L&p_origen=BGR&p_tsearch=A\">Omega-3-acid ethyl esters<\/a> (Omacor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Abbott/GlaxoSmithKline<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1995 (Norway)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=321631&p_type=L&p_origen=BGR&p_tsearch=A\">Reducol<\/a><\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Forbes Medi-Tech<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2005 (U.K.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=167987&p_type=L&p_origen=BGR&p_tsearch=A\">Icosapent ethyl ester<\/a>, ultra pure (Vascepa)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Amarin<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (U.S.)<\/TD>      <\/TR><\/TABLE>]]><\/FREETABLE>      <\/para>    <\/Body>    <References>      <Reference id=\"1622817\" medline_id=\"21321561\">        <Title>Pharmacological strategies for lowering LDL cholesterol: Statins and beyond<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>8<\/Volume>        <Issue>5<\/Issue>        <Page>253<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Brautbar, A.<\/Author>          <Author>Ballantyne, C.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290573\" medline_id=\"25231921\">        <Title>Carotid atherosclerotic plaque stenosis: The stabilizing role of statins<\/Title>        <SourceTitle>European Journal of Clinical Investigation<\/SourceTitle>        <PubMedTitle>Eur J Clin Invest<\/PubMedTitle>        <Volume>44<\/Volume>        <Issue>11<\/Issue>        <Page>1122<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Artom, N.<\/Author>          <Author>Montecucco, F.<\/Author>          <Author>Dallegri, F.<\/Author>          <Author>Pende, A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2295909\" medline_id=\"25478882\">        <Title>Pleiotropic effects of statins in atherosclerotic disease: Focus on the antioxidant activity of atorvastatin<\/Title>        <SourceTitle>Current Topics in Medicinal Chemistry<\/SourceTitle>        <PubMedTitle>Curr Top Med Chem<\/PubMedTitle>        <Volume>14<\/Volume>        <Issue>22<\/Issue>        <Page>2542<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Profumo, E.<\/Author>          <Author>Buttari, B.<\/Author>          <Author>Saso, L.<\/Author>          <Author>Rigano, R.<\/Author>        <\/Authors>      <\/Reference>    <\/References>    <Section sectionId=\"1385\" modifiedDate=\"20110429011232\">      <Title>Bile Acid Sequestrants<\/Title>      <Body>        <para>Bile acids are synthesized from cholesterol in the liver and are secreted into the bile flow to facilitate the digestion and absorption of lipids in the intestinal lumen. More than 90% of these bile acids are subsequently reabsorbed from the intestine through a process of enterohepatic circulation (<REF id=\"536297\">Hara, S., 1999<\/REF>). <\/para>        <para>Bile acid sequestrants, polyanionic exchange resins, nonspecifically bind bile acids within the lumen of the small intestine, increasing their fecal excretion (<REF id=\"1622817\">Brautbar, A. and Ballantyne, C.M., 2011<\/REF>). The interruption of bile acid recirculation increases production of bile acids from cholesterol in the liver, leading to lower circulating cholesterol concentrations. Drugs in this class lower LDL and raise HDL cholesterol levels, but generally do not affect serum triglycerides. They act locally and are not absorbed into the systemic circulation.<\/para>        <para>Older bile acid sequestrants (cholestyramine, colestipol) frequently cause gastrointestinal disturbances (constipation, nausea, indigestion, bloating, diarrhea, etc.) and as a result patient compliance is often poor. These drugs also interfere with the intestinal absorption of vitamins and minerals. Given these drawbacks, they are rarely used as first-line therapy for hypercholesterolemia (<REF id=\"1617235\">Goldberg, R.B., 2009<\/REF>). The newer compound colesevelam has less constipating side effects as well as greater potency and tolerability, and hence the potential for increased compliance (<REF id=\"1617235\">Goldberg, R.B., 2009<\/REF>). Colesevelam is indicated for the treatment of atherosclerosis, as monotherapy or in combination with any statin at any dose; it is also and effective antihyperglycemic agent and is approved for use in the treatment of patients with diabetes (<REF id=\"1615931\">Bell, D.S. and O&apos;Keefe, J.H., 2009<\/REF>; <REF id=\"1617235\">Goldberg, R.B., 2009<\/REF>; <REF id=\"1622817\">Brautbar, A. and Ballantyne, C.M., 2011<\/REF>).<\/para>        <para>Bile acid sequestrants can be taken safely in combination with statins, resulting in greater-than-additive LDL cholesterol-lowering effects. In one study, colesevelam hydrochloride in combination with the standard treatment dose of atorvastatin resulted in an average 48% reduction in LDL cholesterol levels (<REF id=\"641844\">Hunninghake, D. et al., 2001<\/REF>). Favorable efficacy has also been reported for colesevelam in combination with various statins (simvastatin, atorvastatin or pravastatin) in patients with hypercholesterolemia (<REF id=\"982200\">Bays, H.E. et al., 2006<\/REF>), or with a statin plus ezetimibe in patients with familiar hypercholesterolemia (<REF id=\"1553792\">Huijgen, R. et al., 2010<\/REF>). Due to the favorable effects of colesevelam on impaired glucose tolerance, a treatment regimen incorporating the bile acid sequestrant with a statin is especially indicated for the treatment of patients with comorbid insulin resistance/diabetes and hyperlipidemia (<REF id=\"1615931\">Bell, D.S. and O&apos;Keefe, J.H., 2009<\/REF>; <REF id=\"1617235\">Goldberg, R.B., 2009<\/REF>). Colesevelam can also be used in combination with non-statin LDL cholesterol-lowering agents such as fibrates (<REF id=\"1617235\">Goldberg, R.B., 2009<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"536297\">          <Title>Ileal Na+/bile acid cotransporter inhibitors<\/Title>          <SourceTitle>Drugs of the Future<\/SourceTitle>          <PubMedTitle>Drugs Fut<\/PubMedTitle>          <Volume>024<\/Volume>          <Issue>04<\/Issue>          <Page>0425<\/Page>          <Year>1999<\/Year>          <Authors>            <Author>Hara, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"641844\" medline_id=\"11583720\">          <Title>Coadministration of colesevelam hydrochloride with atorvastatin lowers LDL cholesterol additively<\/Title>          <SourceTitle>Atherosclerosis<\/SourceTitle>          <PubMedTitle>Atherosclerosis<\/PubMedTitle>          <Volume>158<\/Volume>          <Issue>2<\/Issue>          <Page>407<\/Page>          <Year>2001<\/Year>          <Authors>            <Author>Hunninghake, D.<\/Author>            <Author>Insull, W. Jr.<\/Author>            <Author>Toth, P.<\/Author>            <Author>Davidson, D.<\/Author>            <Author>Donovan, J.M.<\/Author>            <Author>Burke, S.K.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"982200\" medline_id=\"16616026\">          <Title>Effects of colesevelam hydrochloride on low-density lipoprotein cholesterol and high-sensitivity C-reactive protein when added to statins in patients with hypercholesterolemia<\/Title>          <SourceTitle>American Journal of Cardiology<\/SourceTitle>          <PubMedTitle>Am J Cardiol<\/PubMedTitle>          <Volume>97<\/Volume>          <Issue>8<\/Issue>          <Page>1198<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Bays, H.E.<\/Author>            <Author>Davidson, M.<\/Author>            <Author>Jones, M.R.<\/Author>            <Author>Abby, S.L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1553792\" medline_id=\"20435231\">          <Title>Colesevelam added to combination therapy with a statin and ezetimibe in patients with familial hypercholesterolemia: A 12-week, multicenter, randomized, double-blind, controlled trial<\/Title>          <SourceTitle>Clinical Therapeutics<\/SourceTitle>          <PubMedTitle>Clin Ther<\/PubMedTitle>          <Volume>32<\/Volume>          <Issue>4<\/Issue>          <Page>615<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Huijgen, R.<\/Author>            <Author>Abbink, E.J.<\/Author>            <Author>Bruckert, E.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615931\" medline_id=\"19788434\">          <Title>Rediscovering bile acid sequestrants<\/Title>          <SourceTitle>Diabetes, Obesity and Metabolism <\/SourceTitle>          <PubMedTitle>Diabetes Obes Metab<\/PubMedTitle>          <Volume>11<\/Volume>          <Issue>12<\/Issue>          <Page>1114<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Bell, D.S.<\/Author>            <Author>O&apos;Keefe, J.H.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1617235\" medline_id=\"21437115\">          <Title>Improving glycemic and cholesterol control through an integrated approach incorporating colesevelam - A clinical perspective<\/Title>          <SourceTitle>Diabetes, Metabolic Syndrome and Obesity<\/SourceTitle>          <PubMedTitle>Diabetes Metab Syndr Obes<\/PubMedTitle>          <Volume>2<\/Volume>          <Page>11<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Goldberg, R.B.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1622817\" medline_id=\"21321561\">          <Title>Pharmacological strategies for lowering LDL cholesterol: Statins and beyond<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>8<\/Volume>          <Issue>5<\/Issue>          <Page>253<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Brautbar, A.<\/Author>            <Author>Ballantyne, C.M.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1387\" modifiedDate=\"20130206121847\">      <Title>Fibric Acid Derivatives<\/Title>      <Body>        <para>Fibric acid derivatives, or fibrates, agonize peroxisome proliferator-activated receptors (PPARs) (<REF id=\"1502784\">Shah, A. et al., 2010<\/REF>). They have been used since the late 1960s (<REF id=\"1615940\">Alagona, P. Jr., 2010<\/REF>), often as second-line agents following statins (<REF id=\"1615942\">Remick, J. et al., 2008<\/REF>) as well as in the treatment of hypertriglyceridemia (fasting serum triglyceride levels above 400 mg/dL), a recognized risk factor for coronary heart disease, and of mixed hyperlipidemias of the Frederickson type IIb pattern. Triglyceride levels can be reduced by 30-50% with fibrate therapy, with greatest reductions obtained in those patients with highest pretreatment TG levels (<REF id=\"1615940\">Alagona, P. Jr., 2010<\/REF>). HDL cholesterol levels generally increase as a result of therapy, and LDL levels tend to decrease. Fibrates may be particularly indicated in the treatment of dyslipidemia in patients with <BACKGROUNDER id=\"145\">Metabolic Syndrome<\/BACKGROUNDER> (<REF id=\"983298\">Bloomfield, H.E., 2006<\/REF>; <REF id=\"1344803\">Steiner, G., 2008<\/REF>; <REF id=\"1502784\">Shah, A. et al., 2010<\/REF>).<\/para>        <para>Fibrates have been shown to reduce cardiovascular mortality, particularly in patients with mixed or diabetic dyslipidemia, in both secondary and primary prevention studies (<REF id=\"1615940\">Alagona, P. Jr., 2010<\/REF>). Fibrates are contraindicated in patients with hepatic or renal dysfunction, gallstones or those at risk of developing pancreatitis, nor should they be coadministered with the antidiabetic drugs insulin and glyburide (<REF id=\"662260\">Safeer, R.S. and Lacivita, C.L., 2000<\/REF>). It has traditionally been held that fibrates should not be used in combination with statins due to risk of myalgias and rhabdomyolysis, although one compound (Trilipix) has been specifically approved for use in combination with low- and medium-dose statins. Unlike gemfibrozil and fenofibrate, which are prodrugs of fenofibric acid that must undergo hepatic glucuronidation, Trilipix is a delayed-release choline salt of fenofibric acid and not a prodrug. It circumvents hepatic metabolism and thus does not compete with statin metabolism or increase statin toxicity. Clinical studies have confirmed the increased efficacy and equivalent safety of Trilipix in combination with statins as compared to statin monotherapy (<REF id=\"1615940\">Alagona, P. Jr., 2010<\/REF>; <REF id=\"1615936\">Moutzouri, E. et al., 2010<\/REF>).<\/para>        <para>Prescriptions for these fibrates have increased significantly in recent years. According to researchers from the U.S. and Canada, the number of prescriptions for fibrates (particularly fenofibrate) increased in the U.S. by 117% between January 2002 and December 2009, whereas in Canada, a relatively smaller increase (18%) was reported. The reason for this disparity is unknown (<REF id=\"1613379\">Jackevicius, C.A. et al., 2011<\/REF>).<COMPETITIVE id=\"1005\">            <TABLE>              <TR>                <TD>Fibric acid derivatives in active development for the treatment of hypercholesterolemia and atherosclerosis<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=910032&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Atorvastatin calcium/choline fenofibrate<\/a>                <\/TD>                <TD>Chong Kun Dang Holdings<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=864982&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Fenofibrate/pitavastatin calcium<\/a>                <\/TD>                <TD>Hanlim Pharmaceutical<\/TD>                <TD>Phase III<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"662260\" medline_id=\"10865931\">          <Title>Choosing drug therapy for patients with hyperlipidemia<\/Title>          <SourceTitle>American Family Physician (1970)<\/SourceTitle>          <PubMedTitle>Am Fam Physician<\/PubMedTitle>          <Volume>61<\/Volume>          <Issue>11<\/Issue>          <Page>3371<\/Page>          <Year>2000<\/Year>          <Authors>            <Author>Safeer, R.S.<\/Author>            <Author>Lacivita, C.L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"983298\" medline_id=\"16606806\">          <Title>The role of fibrates in a statin world<\/Title>          <SourceTitle>Archives of Internal Medicine<\/SourceTitle>          <PubMedTitle>Arch Intern Med<\/PubMedTitle>          <Volume>166<\/Volume>          <Issue>7<\/Issue>          <Page>715<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Bloomfield, H.E.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1344803\">          <Title>Fenofibrate for cardiovascular disease prevention in metabolic syndrome and type 2 diabetes mellitus<\/Title>          <SourceTitle>American Journal of Cardiology<\/SourceTitle>          <PubMedTitle>Am J Cardiol<\/PubMedTitle>          <Volume>102<\/Volume>          <Issue>12A<\/Issue>          <Page>28L<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Steiner, G.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1502784\" medline_id=\"20005515\">          <Title>The effect of PPAR-alpha agonism on apolipoprotein metabolism in humans<\/Title>          <SourceTitle>Atherosclerosis<\/SourceTitle>          <PubMedTitle>Atherosclerosis<\/PubMedTitle>          <Volume>210<\/Volume>          <Issue>1<\/Issue>          <Page>35<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Shah, A.<\/Author>            <Author>Rader, D.J.<\/Author>            <Author>Millar, J.S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1613379\" medline_id=\"21427374\">          <Title>Use of fibrates in the United States and Canada<\/Title>          <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>          <PubMedTitle>JAMA<\/PubMedTitle>          <Volume>305<\/Volume>          <Issue>12<\/Issue>          <Page>1217<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Jackevicius, C.A.<\/Author>            <Author>Tu, J.V.<\/Author>            <Author>Ross, J.S.<\/Author>            <Author>Ko, D.T.<\/Author>            <Author>Carreon, D.<\/Author>            <Author>Krumholz, H.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615936\" medline_id=\"20730069\">          <Title>Management of dyslipidemias with fibrates, alone and in combination with statins: Role of delayed-release fenofibric acid<\/Title>          <SourceTitle>Vascular Health and Risk Management<\/SourceTitle>          <PubMedTitle>Vasc Health Risk Manag<\/PubMedTitle>          <Volume>6<\/Volume>          <Page>525<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Moutzouri, E.<\/Author>            <Author>Kei, A.<\/Author>            <Author>Elisaf, M.S.<\/Author>            <Author>Milionis, H.J.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615940\" medline_id=\"20531954\">          <Title>Fenofibric acid: A new fibrate approved for use in combination with statin for the treatment of mixed dyslipidemia<\/Title>          <SourceTitle>Vascular Health and Risk Management<\/SourceTitle>          <PubMedTitle>Vasc Health Risk Manag<\/PubMedTitle>          <Volume>6<\/Volume>          <Page>351<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Alagona, P. Jr.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615942\" medline_id=\"18414184\">          <Title>Fibrate therapy: An update<\/Title>          <SourceTitle>Cardiology in Review<\/SourceTitle>          <PubMedTitle>Cardiol Rev<\/PubMedTitle>          <Volume>16<\/Volume>          <Issue>3<\/Issue>          <Page>129<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Remick, J.<\/Author>            <Author>Weintraub, H.<\/Author>            <Author>Setton, R.<\/Author>            <Author>Offenbacher, J.<\/Author>            <Author>Fisher, E.<\/Author>            <Author>Schwartzbard, A.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1388\" modifiedDate=\"20170124035231\">      <Title>Nicotinic Acid and Derivatives<\/Title>      <Body>        <para>Nicotinic acid (niacin) is a B-complex vitamin that decreases levels of apolipoprotein B-containing VLDL and LDL cholesterol and lipoprotein (a), and increases levels of apolipoprotein A-I-containing HDL cholesterol; it also has a range of beneficial lipid-independent effects (<REF id=\"1615909\">Farmer, J.A., 2009<\/REF>; <REF id=\"2290577\">Liu, D. et al., 2015<\/REF>) including vascular antiinflammatory activity (<REF id=\"1615911\">Kamanna, V.S. and Kashyap, M.L., 2007<\/REF>; <REF id=\"2290579\">Linden, F. et al., 2014<\/REF>). In clinical use for more than half a century, niacin is the oldest lipid-lowering drug with a proven ability to reduce cardiovascular morbidity and total mortality. It is effective as monotherapy or in combination with bile acid sequestrants and statins (<REF id=\"1615909\">Farmer, J.A., 2009<\/REF>).<\/para>        <para>Endowed with an excellent efficacy profile, the standard formulation of niacin was nonetheless associated with poor compliance and a high incidence of adverse effects, particularly cutaneous flushing (<REF id=\"1622817\">Brautbar, A. and Ballantyne, C.M., 2011<\/REF>). In 1998, Kos Pharmaceuticals introduced Niaspan, an extended-release formulation of niacin that has a much lower incidence of side effects as compared to the traditional formulation (6% versus 40%). In 2001, Kos obtained marketing approval in the US for Advicor, a combination product incorporating niacin and the HMG-CoA reductase inhibitor lovastatin in a single tablet for once-daily administration. In 2008, Abbott obtained FDA approval for Simcor, a similar product incorporating Niaspan and simvastatin, another HMG-CoA reductase inhibitor. <\/para>        <para>In spite of its long history of use, the mechanism of action of niacin has only recently been clarified due to cloning of the G-protein-coupled receptors GPR109A and GPR109B expressed on adipocytes and immune cells (<REF id=\"1615912\">Soudijn, W. et al., 2007<\/REF>; <REF id=\"1615911\">Kamanna, V.S. and Kashyap, M.L., 2007<\/REF>; <REF id=\"1609246\">Lukasova, M. et al., 2011<\/REF>). It is not yet clear whether these receptors are solely responsible for niacin&apos;s beneficial effects on LDL cholesterol, and hence that other nicotinic receptor agonists would be similar or even more effective lipid-lowering agents, or if niacin also exerts its therapeutic effects via other mechanisms of action such as DGAT2 inhibition (<REF id=\"1615911\">Kamanna, V.S. and Kashyap, M.L., 2007<\/REF>; <REF id=\"1216311\">Kamanna, V.S. and Kashyap, M.L., 2008<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"1216311\" medline_id=\"18375237\">          <Title>Mechanism of action of niacin<\/Title>          <SourceTitle>American Journal of Cardiology<\/SourceTitle>          <PubMedTitle>Am J Cardiol<\/PubMedTitle>          <Volume>101<\/Volume>          <Issue>8A<\/Issue>          <Page>20B<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Kamanna, V.S.<\/Author>            <Author>Kashyap, M.L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1609246\" medline_id=\"21317532\">          <Title>Nicotinic acid inhibits progression of atherosclerosis in mice through its receptor GPR109A expressed by immune cells<\/Title>          <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>          <PubMedTitle>J Clin Invest<\/PubMedTitle>          <Volume>121<\/Volume>          <Issue>3<\/Issue>          <Page>1163<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Lukasova, M.<\/Author>            <Author>Malaval, C.<\/Author>            <Author>Gille, A.<\/Author>            <Author>Kero, J.<\/Author>            <Author>Offermanns, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615909\" medline_id=\"19228480\">          <Title>Nicotinic acid: A new look at an old drug<\/Title>          <SourceTitle>Current Atherosclerosis Reports<\/SourceTitle>          <PubMedTitle>Curr Atheroscler Rep<\/PubMedTitle>          <Volume>11<\/Volume>          <Issue>2<\/Issue>          <Page>87<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Farmer, J.A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615911\" medline_id=\"18047854\">          <Title>Nicotinic acid (niacin) receptor agonists: Will they be useful therapeutic agents?<\/Title>          <SourceTitle>American Journal of Cardiology<\/SourceTitle>          <PubMedTitle>Am J Cardiol<\/PubMedTitle>          <Volume>100<\/Volume>          <Issue>11A<\/Issue>          <Page>S53<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Kamanna, V.S.<\/Author>            <Author>Kashyap, M.L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615912\" medline_id=\"17238156\">          <Title>Nicotinic acid receptor subtypes and their ligands<\/Title>          <SourceTitle>Medicinal Research Reviews<\/SourceTitle>          <PubMedTitle>Med Res Rev<\/PubMedTitle>          <Volume>27<\/Volume>          <Issue>3<\/Issue>          <Page>417<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Soudijn, W.<\/Author>            <Author>van Wijngaarden, I.<\/Author>            <Author>Ijzerman, A.P.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1622817\" medline_id=\"21321561\">          <Title>Pharmacological strategies for lowering LDL cholesterol: Statins and beyond<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>8<\/Volume>          <Issue>5<\/Issue>          <Page>253<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Brautbar, A.<\/Author>            <Author>Ballantyne, C.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290577\" medline_id=\"25429652\">          <Title>Nicotinic acid regulates glucose and lipid metabolism through lipid independent pathways<\/Title>          <SourceTitle>Current Pharmaceutical Biotechnology<\/SourceTitle>          <PubMedTitle>Curr Pharm Biotechnol<\/PubMedTitle>          <Volume>16<\/Volume>          <Issue>1<\/Issue>          <Page>3<\/Page>          <Year>2015<\/Year>          <Authors>            <Author>Liu, D.<\/Author>            <Author>Wang, X.<\/Author>            <Author>Kong, L.<\/Author>            <Author>Chen, Z.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290579\" medline_id=\"25484870\">          <Title>Inflammatory therapeutic targets in coronary atherosclerosis-from molecular biology to clinical application<\/Title>          <SourceTitle>Frontiers in Physiology<\/SourceTitle>          <PubMedTitle>Front Physiol<\/PubMedTitle>          <Volume>5<\/Volume>          <Page>455<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Linden, F.<\/Author>            <Author>Domschke, G.<\/Author>            <Author>Erbel, C.<\/Author>            <Author>Akhavanpoor, M.<\/Author>            <Author>Katus, H.A.<\/Author>            <Author>Gleissner, C.A.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1389\" modifiedDate=\"20190201014818\">      <Title>HMG-CoA Reductase Inhibitors<\/Title>      <Body>        <para>The enzymatic biosynthesis of cholesterol is a complex process requiring more than 25 reaction steps. The four principal steps of the pathway include conversion of acetic acid to mevalonic acid, conversion of mevalonic acid into squalene, conversion of squalene into lanosterol and conversion of lanosterol into cholesterol. Inhibiting cholesterol biosynthesis has been established as one of the most effective approaches to lowering serum cholesterol. Several enzymes have been selected as targets for hypocholesterolemic drug design. Among these enzymes, HMG-CoA reductase, the rate-limiting enzyme in endogenous cholesterol biosynthesis, catalyzes the reduction of HMG-CoA into mevalonic acid. Inhibition of this enzyme has proven to be an effective means for lowering serum triglycerides and LDL levels in humans. Faced with reduced endogenous cholesterol production, the cells of the body, especially those of the liver, react by increasing their uptake of cholesterol from the bloodstream, thus lowering the circulating LDL cholesterol level.<\/para>        <para>HMG-CoA reductase inhibitors, popularly known as statins, are the first-line pharmacotherapeutics for LDL cholesterol reduction. They can be taken alone or in combination with other antihyperlipidemic drugs in order to achieve further LDL reduction or to improve other lipoprotein fractions such as HDL and triglycerides (<REF id=\"1622817\">Brautbar, A. and Ballantyne, C.M., 2011<\/REF>). Statins are extremely effective in combination with bile acid sequestrants, due to their differing but complementary effects on LDL cholesterol. Clinical trials have repeatedly demonstrated a reduction of approximately 30% in the relative risk of major coronary events, accompanied by significant increases in survival, among patients with a history of cardiovascular disease (CVD) receiving statin therapy. <\/para>        <para>The Scandinavian Simvastatin Survival Study (4S) was the first to document reductions in all-cause mortality among patients with a history of angina pectoris or myocardial infarction treated with simvastatin. In this and other large prospective studies evaluating statins, plaque progression was reduced by an average of 30% with statin therapy, and clear plaque regression was observed in approximately 20% of patients administered drugs in this class. All statins decrease total and LDL cholesterol, and simvastatin, atorvastatin and cerivastatin (the latter now withdrawn from markets worldwide) also lower triglycerides. Although all drugs in this class are slightly effective in increasing HDL cholesterol levels, only simvastatin and atorvastatin are explicitly labeled for this indication. Statins exert favorable effects on plasma lipoproteins, endothelial function, architecture and stability of atherosclerotic plaque, thrombus formation and arterial inflammation (<REF id=\"662260\">Safeer, R.S. and Lacivita, C.L., 2000<\/REF>; <REF id=\"662383\">Maron, D.J. et al., 2000<\/REF>; <REF id=\"662249\">Vaughan, C.J. et al., 2000<\/REF>). <\/para>        <para>A Cochrane review concluded that statins are safe and effective for reducing mortality when administered in the context of primary prevention to high-risk individuals without a history of CVD (<REF id=\"2291678\">Taylor, F. et al., 2013<\/REF>). Both the FDA and the European Commission granted approval of rosuvastatin in 2010 for the risk reduction of myocardial infarction, stroke, and arterial revascularization procedures in patients without clinically evident coronary heart disease, but with multiple risk factors. <\/para>        <para>Also in 2010, the Cholesterol Treatment Trialists&apos; (CTT) collaboration study group reported the results of a meta-analysis comparing standard statin regimens versus more intensive cholesterol lowering with more intensive statin therapy. The analysis included data from 26 trials enrolling approximately 170,000 patients, and concluded that further LDL cholesterol reductions using intensive therapy translated into significantly greater reductions in the incidence of myocardial infarction, revascularization and ischemic stroke, with no apparent threshold (<REF id=\"1568323\">Cholesterol Treatment Trialists&apos; Ctt Collaboration, 2010<\/REF>). <\/para>        <para>In addition to LDL cholesterol reduction, statins exert a wide range of pleiotropic effects, many of which are beneficial in treating atherosclerosis. These include antiinflammatory activity, which results in stabilization of carotid arterial plaque and potential reduction in plaque size (<REF id=\"2290573\">Artom, N. et al., 2014<\/REF>), as well as antithrombotic and antioxidant effects (<REF id=\"2295909\">Profumo, E. et al., 2014<\/REF>).<\/para>        <para>The safety and tolerability of statins are generally excellent (<REF id=\"1106448\">Armitage, J., 2007<\/REF>), although patients should nonetheless be monitored for side effects (<REF id=\"1615946\">Beltowski, J. et al., 2009<\/REF>). Myalgias and myopathy (<REF id=\"1615941\">Mammen, A.L. and Amato, A.A., 2010<\/REF>), peripheral neuropathy, impaired myocardial contractility and autoimmune diseases are the most commonly reported adverse events (<REF id=\"1615946\">Beltowski, J. et al., 2009<\/REF>). Elevated liver enzyme levels, in rare cases leading to drug-induced hepatitis, have been reported in 1-2% of patients treated with statins (<REF id=\"662383\">Maron, D.J. et al., 2000<\/REF>; <REF id=\"662249\">Vaughan, C.J. et al., 2000<\/REF>). Serious side effects have been associated with one statin, cerivastatin sodium. In postmarketing studies the drug was linked to an increased incidence of rhabdomyolysis, which in some instances was fatal. Fatal cases of rhabdomyolysis in association with cerivastatin occurred most frequently when used at higher doses, in elderly patients and with concomitant gemfibrozil. Of the 31 deaths in the U.S. due to severe rhabdomyolysis associated with cerivastatin reported to the FDA, 12 involved concomitant gemfibrozil. In August 2001, the manufacturer elected to withdraw the drug from this and all other markets worldwide. Seven statins remain on the market for atherosclerosis, none of which have been related to date with such serious side effects. No new statins have been introduced in more than a decade, however. The first generic statin became available in 2001, further increasing the accessibility and acceptance of this drug class (<REF id=\"2311980\">Stein, E.A. and Raal, F.J., 2014<\/REF>).<\/para>        <para>In 2013, the American Heart Association and American College of Cardiology issued new joint guidelines recommending that statin therapy be prescribed for all patients with at least a 7.5% risk of suffering a nonfatal heart attack, stroke or death from atherosclerotic heart disease within the next 10 years. Risk is calculated based on sex, race, age, total and HDL cholesterol levels, systolic blood pressure, antihypertensive drug therapy, diabetes and smoking (<a href=\"http://circ.ahajournals.org/content/early/2013/11/11/01.cir.0000437738.63853.7a\">2013 ACC/AHA guideline on the treatment of blood cholesterol to reduce atherosclerotic cardiovascular risk in adults: A report of the American College of Cardiology/American Heart Association task force on practice guidelines (November 2013)<\/a>). The guideline furthermore recommends high-intensity statin therapy for patients under age 75 years with clinically apparent atherosclerotic cardiovascular disease. The new guideline has triggered considerable controversy among practitioners, many of whom express a preference for addressing risk factors such as smoking prior to initiation of drug therapy (<REF id=\"2201649\">Schulte, J.M. et al., 2014<\/REF>).<\/para>        <para>A study of Medicare data from 2007-2011 revealed that statin use in this older adult population increased from 53.1% to 58.8% over the period evaluated (<REF id=\"2408568\">Bittner, V. et al., 2015<\/REF>).<\/para>        <para>The following table presents an overview of new HMG-CoA reductase inhibitors as well as novel statin-containing combination drugs in active clinical or preclinical development.<COMPETITIVE id=\"816\">            <TABLE>              <TR>                <TD>HMG-CoA reductase inhibitors in development for atherosclerosis therapy<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=904512&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/rosuvastatin calcium/telmisartan<\/a>                <\/TD>                <TD>Yuhan<\/TD>                <TD>Angiotensin AT1 Receptor Antagonists/ PPARalpha Partial Agonists/ PPARgamma Modulators/ Calcium Channel Blockers/ P-Glycoprotein (MDR-1; ABCB1) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=910032&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Atorvastatin calcium/choline fenofibrate<\/a>                <\/TD>                <TD>Chong Kun Dang Holdings<\/TD>                <TD>Dipeptidyl Peptidase IV (CD26; DPP-IV; DP-IV) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ TNFSF6 Expression Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=766632&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Atorvastatin calcium/losartan potassium<\/a>                <\/TD>                <TD>HanAll BioPharma<\/TD>                <TD>Angiotensin AT1 Receptor Antagonists/ Dipeptidyl Peptidase IV (CD26; DPP-IV; DP-IV) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ TNFSF6 Expression Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=852638&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Atorvastatin calcium/metformin hydrochloride<\/a>                <\/TD>                <TD>Daewoong/ CJ HealthCare<\/TD>                <TD>AMP-Activated Protein Kinase (AMPK) Activators/ Dipeptidyl Peptidase IV (CD26; DPP-IV; DP-IV) Inhibitors/ Insulin Sensitizers/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ TNFSF6 Expression Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=864982&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Fenofibrate/pitavastatin calcium<\/a>                <\/TD>                <TD>Hanlim Pharmaceutical<\/TD>                <TD>PPARalpha Agonists/ APOA1 Expression Enhancers/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ SPP1 (Osteopontin) Expression Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=832868&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rosuvastatin calcium/metformin hydrochloride<\/a>                <\/TD>                <TD>Jeil Pharmaceutical<\/TD>                <TD>AMP-Activated Protein Kinase (AMPK) Activators/ Insulin Sensitizers/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"662249\" medline_id=\"10636252\">          <Title>The evolving role of statins in the management of atherosclerosis<\/Title>          <SourceTitle>Journal of the American College of Cardiology<\/SourceTitle>          <PubMedTitle>J Am Coll Cardiol<\/PubMedTitle>          <Volume>35<\/Volume>          <Issue>1<\/Issue>          <Page>1<\/Page>          <Year>2000<\/Year>          <Authors>            <Author>Vaughan, C.J.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"662260\" medline_id=\"10865931\">          <Title>Choosing drug therapy for patients with hyperlipidemia<\/Title>          <SourceTitle>American Family Physician (1970)<\/SourceTitle>          <PubMedTitle>Am Fam Physician<\/PubMedTitle>          <Volume>61<\/Volume>          <Issue>11<\/Issue>          <Page>3371<\/Page>          <Year>2000<\/Year>          <Authors>            <Author>Safeer, R.S.<\/Author>            <Author>Lacivita, C.L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"662383\" medline_id=\"10637210\">          <Title>Current perspectives on statins<\/Title>          <SourceTitle>Circulation<\/SourceTitle>          <PubMedTitle>Circulation<\/PubMedTitle>          <Volume>101<\/Volume>          <Issue>2<\/Issue>          <Page>207<\/Page>          <Year>2000<\/Year>          <Authors>            <Author>Maron, D.J.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1106448\" medline_id=\"17559928\">          <Title>The safety of statins in clinical practice<\/Title>          <SourceTitle>The Lancet<\/SourceTitle>          <PubMedTitle>Lancet<\/PubMedTitle>          <Volume>370<\/Volume>          <Issue>9601<\/Issue>          <Page>1781<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Armitage, J.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1568323\" medline_id=\"21067804\">          <Title>Efficacy and safety of more intensive lowering of LDL cholesterol: A meta-analysis of data from 170.000 participants in 26 randomised trials<\/Title>          <SourceTitle>The Lancet<\/SourceTitle>          <PubMedTitle>Lancet<\/PubMedTitle>          <Volume>376<\/Volume>          <Issue>9753<\/Issue>          <Page>1670<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Cholesterol Treatment Trialists&apos; Ctt Collaboration<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615941\" medline_id=\"20827205\">          <Title>Statin myopathy: A review of recent progress<\/Title>          <SourceTitle>Current Opinion in Rheumatology<\/SourceTitle>          <PubMedTitle>Curr Opin Rheumatol<\/PubMedTitle>          <Volume>22<\/Volume>          <Issue>6<\/Issue>          <Page>644<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Mammen, A.L.<\/Author>            <Author>Amato, A.A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615946\" medline_id=\"19534648\">          <Title>Adverse effects of statins - Mechanisms and consequences<\/Title>          <SourceTitle>Current Drug Safety<\/SourceTitle>          <PubMedTitle>Curr Drug Saf<\/PubMedTitle>          <Volume>4<\/Volume>          <Issue>3<\/Issue>          <Page>209<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Beltowski, J.<\/Author>            <Author>Wójcicka, G.<\/Author>            <Author>Jamroz-Wisniewska, A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1622817\" medline_id=\"21321561\">          <Title>Pharmacological strategies for lowering LDL cholesterol: Statins and beyond<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>8<\/Volume>          <Issue>5<\/Issue>          <Page>253<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Brautbar, A.<\/Author>            <Author>Ballantyne, C.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2201649\" medline_id=\"25054734\">          <Title>Clinical decisions. Starting statins - Polling results<\/Title>          <SourceTitle>New England Journal of Medicine<\/SourceTitle>          <PubMedTitle>N Engl J Med<\/PubMedTitle>          <Volume>371<\/Volume>          <Issue>4<\/Issue>          <Page>e6<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Schulte, J.M.<\/Author>            <Author>Rothaus, C.S.<\/Author>            <Author>Adler, J.N.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290573\" medline_id=\"25231921\">          <Title>Carotid atherosclerotic plaque stenosis: The stabilizing role of statins<\/Title>          <SourceTitle>European Journal of Clinical Investigation<\/SourceTitle>          <PubMedTitle>Eur J Clin Invest<\/PubMedTitle>          <Volume>44<\/Volume>          <Issue>11<\/Issue>          <Page>1122<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Artom, N.<\/Author>            <Author>Montecucco, F.<\/Author>            <Author>Dallegri, F.<\/Author>            <Author>Pende, A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2291678\" medline_id=\"23440795\">          <Title>Statins for the primary prevention of cardiovascular disease<\/Title>          <SourceTitle>Cochrane Database of Systematic Reviews (CDROM)<\/SourceTitle>          <PubMedTitle>Cochrane Database Syst Rev<\/PubMedTitle>          <Volume>1<\/Volume>          <Year>2013<\/Year>          <Authors>            <Author>Taylor, F.<\/Author>            <Author>Huffman, M.D.<\/Author>            <Author>Macedo, A.F.<\/Author>            <Author>Moore, T.H.<\/Author>            <Author>Burke, M.<\/Author>            <Author>Davey Smith, G.<\/Author>            <Author>Ward, K.<\/Author>            <Author>Ebrahim, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2295909\" medline_id=\"25478882\">          <Title>Pleiotropic effects of statins in atherosclerotic disease: Focus on the antioxidant activity of atorvastatin<\/Title>          <SourceTitle>Current Topics in Medicinal Chemistry<\/SourceTitle>          <PubMedTitle>Curr Top Med Chem<\/PubMedTitle>          <Volume>14<\/Volume>          <Issue>22<\/Issue>          <Page>2542<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Profumo, E.<\/Author>            <Author>Buttari, B.<\/Author>            <Author>Saso, L.<\/Author>            <Author>Rigano, R.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2311980\" medline_id=\"25432394\">          <Title>New therapies for reducing low-density lipoprotein cholesterol<\/Title>          <SourceTitle>Endocrinology and Metabolism Clinics of North America<\/SourceTitle>          <PubMedTitle>Endocrinol Metab Clin North Am<\/PubMedTitle>          <Volume>43<\/Volume>          <Issue>4<\/Issue>          <Page>1007<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Stein, E.A.<\/Author>            <Author>Raal, F.J.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2408568\" medline_id=\"26493657\">          <Title>Trends in the use of nonstatin lipid-lowering therapy among patients with coronary heart disease: A retrospective cohort study in the medicare population 2007 to 2011<\/Title>          <SourceTitle>Journal of the American College of Cardiology<\/SourceTitle>          <PubMedTitle>J Am Coll Cardiol<\/PubMedTitle>          <Volume>66<\/Volume>          <Issue>17<\/Issue>          <Page>1864<\/Page>          <Year>2015<\/Year>          <Authors>            <Author>Bittner, V.<\/Author>            <Author>Deng, L.<\/Author>            <Author>Rosenson, R.S.<\/Author>            <Author>Taylor, B.<\/Author>            <Author>Glasser, S.P.<\/Author>            <Author>Kent, S.T.<\/Author>            <Author>Farkouh, M.E.<\/Author>            <Author>Muntner, P.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1390\" modifiedDate=\"20150224074350\">      <Title>ACAT Inhibitors<\/Title>      <Body>        <para>Acyl-coenzyme A:cholesterol O-acyltransferase (ACAT) is the major enzyme involved in the esterification of cholesterol, a process that plays an important role in different tissues. ACAT, located in the endoplasmic reticulum, is involved in cholesterol absorption in the intestine and in the accumulation of cholesterol in macrophages in the arterial wall. In the liver, ACAT is implicated in the storage of cholesteryl esters and the assembly and secretion of very-low-density lipoproteins. Two ACAT genes have been identified in humans: ACAT1 and ACAT2 (<REF id=\"1615857\">Chang, C. et al., 2006<\/REF>). <\/para>        <para>Different from the effect of statins, which work mainly by reducing plasma cholesterol, ACAT inhibitors reduce the size of the lipid-rich core in atherosclerotic plaques, and thus may stabilize the lesion against plaque rupture (<REF id=\"1615857\">Chang, C. et al., 2006<\/REF>). Although long considered attractive candidates for the treatment of hypercholesterolemia, no ACAT inhibitors have yet attained marketing status in any country. Development of one ACAT inhibitor, pactimibe, was discontinued after the compound failed to meet the primary endpoint --change from baseline in percent atheroma volume, as measured by coronary intravascular ultrasound (IVUS), after 18 months-- in a coronary IVUS study. Analysis of the secondary endpoints showed a lower effect of pactimibe on atherosclerosis than standard of care alone and no beneficial effect on the frequency of cardiovascular events (<REF id=\"977810\">Nissen, S.E. et al., 2006<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"977810\" medline_id=\"16554527\">          <Title>Effect of ACAT inhibition on the progression of coronary atherosclerosis<\/Title>          <SourceTitle>New England Journal of Medicine<\/SourceTitle>          <PubMedTitle>N Engl J Med<\/PubMedTitle>          <Volume>354<\/Volume>          <Issue>12<\/Issue>          <Page>1253<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Nissen, S.E.<\/Author>            <Author>Tuzcu, E.M.<\/Author>            <Author>Brewer, H.B.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615857\" medline_id=\"16518538\">          <Title>Human acyl-CoA:Cholesterol acyltransferase (ACAT) and its potential as a target for pharmaceutical intervention against atherosclerosis<\/Title>          <SourceTitle>Acta Biochimica et Biophysica Sinica<\/SourceTitle>          <PubMedTitle>Acta Biochim Biophys Sin (Shanghai)<\/PubMedTitle>          <Volume>38<\/Volume>          <Issue>3<\/Issue>          <Page>151<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Chang, C.<\/Author>            <Author>Dong, R.<\/Author>            <Author>Miyazaki, A.<\/Author>            <Author>Sakashita, N.<\/Author>            <Author>Zhang, Y.<\/Author>            <Author>Liu, J.<\/Author>            <Author>Guo, M.<\/Author>            <Author>Li, B.L.<\/Author>            <Author>Chang, T.Y.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1391\" modifiedDate=\"20170124035300\">      <Title>Cholesterol Absorption Inhibitors<\/Title>      <Body>        <para>Although the precise mechanism by which dietary cholesterol is absorbed across the small intestine has not yet been elucidated, blockade of this absorption is considered an attractive strategy for lowering plasma cholesterol levels. Cholesterol absorption may occur through a straightforward process of diffusion or with the assistance of some as-yet-unidentified cholesterol transporter protein (<REF id=\"662251\">Izzat, N.N. et al., 2000<\/REF>).<\/para>        <para>The cholesterol absorption inhibitor ezetimibe (Zetia) was first launched in the U.S. in 2002. Ezetimibe, which has been shown in large-scale clinical trials to possess robust LDL cholesterol-reducing effects as well as a favorable safety profile (<REF id=\"971569\">Yatskar, L. et al., 2006<\/REF>), acts by inhibiting the cholesterol-transporting protein NPC1L1. It is approved for use alone or in combination with statins, and in 2006 was approved for use in combination with fenofibrate. Combination therapy incorporating ezetimibe plus a statin achieves LDL-C targets in a greater proportion of patients than statin monotherapy. Among its potential pleitropic effects, ezetimibe has been reported to to improve renal function, insulin resistance and inflammatory markers, actions which are especially beneficial in patients with comorbid diabetes (<REF id=\"1582620\">Sarigianni, M. et al., 2010<\/REF>). Two fixed-dose combination products incorporating ezetimibe plus a statin have been approved: Inegy (ezetimibe/simvastatin) and Liptruzet (ezetimibe/atorvastatin). <\/para>      <\/Body>      <References>        <Reference id=\"662251\" medline_id=\"10772997\">          <Title>New molecular targets for cholesterol-lowering therapy<\/Title>          <SourceTitle>Journal of Pharmacology and Experimental Therapeutics<\/SourceTitle>          <PubMedTitle>J Pharmacol Exp Ther<\/PubMedTitle>          <Volume>293<\/Volume>          <Issue>2<\/Issue>          <Page>315<\/Page>          <Year>2000<\/Year>          <Authors>            <Author>Izzat, N.N.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"971569\" medline_id=\"16506638\">          <Title>Ezetimibe: Rationale and role in the management of hypercholesterolemia<\/Title>          <SourceTitle>Clinical Cardiology<\/SourceTitle>          <PubMedTitle>Clin Cardiol<\/PubMedTitle>          <Volume>29<\/Volume>          <Issue>2<\/Issue>          <Page>52<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Yatskar, L.<\/Author>            <Author>Fisher, E.A.<\/Author>            <Author>Schwartzbard, A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1582620\" medline_id=\"20843163\">          <Title>Ezetimibe in diabetes: More than cholesterol lowering?<\/Title>          <SourceTitle>Current Medical Research and Opinion<\/SourceTitle>          <PubMedTitle>Curr Med Res Opin<\/PubMedTitle>          <Volume>26<\/Volume>          <Issue>10<\/Issue>          <Page>2517<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Sarigianni, M.<\/Author>            <Author>Katsiki, N.<\/Author>            <Author>Mikhailidis, D.P.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1392\" modifiedDate=\"20150408023058\">      <Title>MTTP Inhibitors<\/Title>      <Body>        <para>Microsomal triglyceride transfer protein (MTTP or MTP), a heterodimeric transfer protein found in the endoplasmic reticulum of hepatocytes and enterocytes, limits the production of atherogenic apolipoprotein B (apoB)-containing lipoproteins in the liver (<REF id=\"1622817\">Brautbar, A. and Ballantyne, C.M., 2011<\/REF>). MTTP is a key factor in the assembly of VLDL, the direct precursor to LDL. MTTP inhibition has been shown to reduce plasma LDL and VLDL levels in rabbits, and MTTP is considered an attractive target for the treatment of dyslipidemias and prevention of atherosclerosis (<REF id=\"1429511\">Wierzbicki, A.S. et al., 2009<\/REF>; <REF id=\"1429509\">Hussain, M.M. and Bakillah, A., 2008<\/REF>). This strategy has also been successfully tested in clinical studies in patients with familial hypercholesterolemia (FH), a rare and potentially serious genetic disorder that impairs the function of the receptor responsible for removing LDL-C from the body, which results in extreme elevation of blood cholesterol levels (<REF id=\"1060818\">Cuchel, M. et al., 2007<\/REF>; <REF id=\"2052604\">Smith, R.J. and Hiatt, W.R., 2013<\/REF>). <\/para>        <para>In December 2012, lomitapide became the first MTTP inhibitor to obtain marketing approval worldwide. The FDA approved the product as an adjunct to a low-fat diet and other lipid-lowering treatments, including LDL apheresis where available, to reduce LDL cholesterol (LDL-C), total cholesterol, apolipoprotein B and non-HDL cholesterol in patients with FH. Lomitapide was launched in the U.S. in January 2013, and was approved in the European Union in early 2013 (<REF id=\"2311980\">Stein, E.A. and Raal, F.J., 2014<\/REF>).<\/para>        <para>The table below provides further information on MTTP inhibitors and their status of development for the treatment of lipoprotein disorders and atherosclerosis.<COMPETITIVE id=\"473\">            <TABLE>              <TR>                <TD>MTP inhibitors in development for atherosclerosis<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=410531&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SLx-4090<\/a>                <\/TD>                <TD>NT Life Sciences<\/TD>                <TD>ApoB Secretion Inhibitors/ Microsomal Triglyceride Transfer Protein (MTTP) Inhibitors<\/TD>                <TD>Phase II<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"1060818\" medline_id=\"17215532\">          <Title>Inhibition of microsomal triglyceride transfer protein in familial hypercholesterolemia<\/Title>          <SourceTitle>New England Journal of Medicine<\/SourceTitle>          <PubMedTitle>N Engl J Med<\/PubMedTitle>          <Volume>356<\/Volume>          <Issue>2<\/Issue>          <Page>148<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Cuchel, M.<\/Author>            <Author>Bloedon, L.T.<\/Author>            <Author>Szapary, P.O.<\/Author>            <Author>Kolansky, D.M.<\/Author>            <Author>Wolfe, M.L.<\/Author>            <Author>Sarkis, A.<\/Author>            <Author>Millar, J.S.<\/Author>            <Author>Ikewaki, K.<\/Author>            <Author>Siegelman, E.S.<\/Author>            <Author>Gregg, R.E.<\/Author>            <Author>Rader, D.J.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1429509\" medline_id=\"18957879\">          <Title>New approaches to target microsomal triglyceride transfer protein<\/Title>          <SourceTitle>Current Opinion in Lipidology<\/SourceTitle>          <PubMedTitle>Curr Opin Lipidol<\/PubMedTitle>          <Volume>19<\/Volume>          <Issue>6<\/Issue>          <Page>572<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Hussain, M.M.<\/Author>            <Author>Bakillah, A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1429511\" medline_id=\"19601852\">          <Title>Future challenges for microsomal transport protein inhibitors<\/Title>          <SourceTitle>Current Vascular Pharmacology<\/SourceTitle>          <PubMedTitle>Curr Vasc Pharmacol<\/PubMedTitle>          <Volume>7<\/Volume>          <Issue>3<\/Issue>          <Page>277<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Wierzbicki, A.S.<\/Author>            <Author>Hardman, T.<\/Author>            <Author>Prince, W.T.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1622817\" medline_id=\"21321561\">          <Title>Pharmacological strategies for lowering LDL cholesterol: Statins and beyond<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>8<\/Volume>          <Issue>5<\/Issue>          <Page>253<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Brautbar, A.<\/Author>            <Author>Ballantyne, C.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2052604\" medline_id=\"23649296\">          <Title>Two new drugs for homozygous familial hypercholesterolemia: Managing benefits and risks in a rare disorder<\/Title>          <SourceTitle>JAMA Internal Medicine<\/SourceTitle>          <PubMedTitle>JAMA Intern Med<\/PubMedTitle>          <Volume>173<\/Volume>          <Issue>16<\/Issue>          <Page>1491<\/Page>          <Year>2013<\/Year>          <Authors>            <Author>Smith, R.J.<\/Author>            <Author>Hiatt, W.R.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2311980\" medline_id=\"25432394\">          <Title>New therapies for reducing low-density lipoprotein cholesterol<\/Title>          <SourceTitle>Endocrinology and Metabolism Clinics of North America<\/SourceTitle>          <PubMedTitle>Endocrinol Metab Clin North Am<\/PubMedTitle>          <Volume>43<\/Volume>          <Issue>4<\/Issue>          <Page>1007<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Stein, E.A.<\/Author>            <Author>Raal, F.J.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"4726\" modifiedDate=\"20171213012813\">      <Title>PCSK9 Inhibitors<\/Title>      <Body>        <para>Lowering cholesterol associated with low-density lipoprotein (LDL) is an efficient strategy to prevent cardiovascular diseases or attenuate their progression and damage. Although statins have been successfully used for this purpose, many patients still need alternative or additional, more aggressive therapy. Inhibition of the circulating protein proprotein convertase subtilisin/kexin type 9 (PCSK9) may be the solution. PCSK9 exerts its hypercholesterolemic effect by promoting degradation of the LDL receptor (LDLR). Its absence leads to lower LDL cholesterol and reduced cardiovascular risk. However, the interaction of PCSK9 with other lipoprotein receptors and its presence in organs such as the brain raise concerns about its inhibitory effects. Several strategies have been developed to inhibit PCSK9 synthesis or its binding to the LDLR, and are now being evaluated in clinical trials (<REF id=\"1790302\">Costet, P., 2012<\/REF>; <REF id=\"1656881\">Cariou, B. et al., 2011<\/REF>; <REF id=\"2291791\">Rodriguez, F. and Knowles, J.W., 2015<\/REF>).<\/para>        <para>In one of the first studies evaluating this approach, the anti-PCSK9 monoclonal antibody alirocumab was administered to patients with heterozygous familial hypercholesterolemia in a phase II trial. Study participants were maintained on a stable diet and statin dose, with or without ezetimibe, and were furthermore randomized to receive one of several doses of the active drug or placebo for 12 weeks. Least-square mean reductions in LDL-cholesterol ranged from 29% in patients on the lowest dose of alirocumab (150 mg every 4 weeks) to 68% in those on the highest dose (150 mg every 2 weeks), as compared to a reduction of 10.5% in patients randomized to placebo. The anti-PCSK9 agent was well tolerated (<REF id=\"1868618\">Stein, E.A. et al., 2012<\/REF>). In three other phase I studies, alirocumab proved effective in decreasing LDL cholesterol levels in healthy volunteers as well as in patients with familial or nonfamilial hypercholesterol (<REF id=\"1798742\">Stein, E.A. et al., 2012<\/REF>). In July 2015, alirocumab was approved and launched in the U.S. for the treatment of adults with heterozygous familial hypercholesterolemia or clinical atherosclerotic cardiovascular disease who require additional lowering of LDL cholesterol. It thus became the first product in this much-anticipated new cholesterol-lowering drug class to reach the market. <\/para>        <para>Another anti-PCSK9 MAb known as evolocumab was administered to patients with statin intolerance in the GAUSS randomized phase II trial. One hundred sixty patients were randomized to 12 weeks of treatment with one of three doses of evolocumab monotherapy, evolocumab plus ezetimibe, or ezetimibe plus placebo. HDL cholesterol reductions were achieved in all active treatment groups, with maximum effect obtained in the evolocumab plus ezetimibe arm (63% decrease with respect to baseline). The study drug was generally well tolerated in this short-term study (<REF id=\"1930154\">Sullivan, D. et al., 2012<\/REF>). In July 2015, the European Commission approved evolocumab (Repatha) for the following indications: adults with primary hypercholesterolemia (heterozygous familial and non-familial) or mixed dyslipidemia as an adjunct to diet; either in combination with a statin, or statin with other lipid-lowering therapies in patients unable to reach LDL cholesterol goals with the maximum tolerated dose of a statin, or alone, or in combination with other lipid-lowering therapies in patients who are statin-intolerant or for whom a statin is contraindicated. It is also approved for the treatment of adults and adolescents aged 12 years and over with homozygous familial hypercholesterolemia in combination with other lipid-lowering therapies. The MAb was approved in late August in the U.S., where it was launched just a week later.<\/para>        <para>Although much ado was made about their approval and market introduction, a postmarketing study conducted in the U.S. shows that at the prices currently charged in that country (USD 14,350 for a year of treatment), the addition of PCSK9 inhibitors to statin therapy does not provide greater cost-effectiveness as compared to statins plus ezetimibe. Outcome measures in the study included lifetime major adverse cardiovascular events (cardiovascular death, nonfatal myocardial infarction or stroke), incremental cost per quality-adjusted life-year, and total effect on U.S. health care spending over five years. Although the drugs are effective in the treatment of patients with familial hypercholesterolemia and atherosclerotic cardiovascular disease, the authors concluded that annual drug prices would have to be reduced by more than two-thirds (to USD 4,536 per patient or less) in order to meet a generally acceptable threshold for cost-effectiveness (<REF id=\"2535520\">Kazi, D.S. et al., 2016<\/REF>).<\/para>        <para>In light of their high cost, a European Society of Cardiology/European Atherosclerosis Society task force has recommended their use only in certain subgroups of patients at very high cardiovascular risk. This includes very high risk patients with atherosclerotic cardiovascular disease (ASCVD, clinical or unequivocal on imaging), including those with progressive ASCVD, or diabetes mellitus (with target organ damage or a major cardiovascular risk factor); or in patients with severe familial hypercholesterolemia without ASCVD with substantially elevated LDL-C levels despite maximal statin/ezetimibe therapy (<a href=\"http://academic.oup.com/eurheartj/article/38/29/2245/2418178\">European Society of Cardiology/European Atherosclerosis Society Task Force consensus statement on proprotein convertase subtilisin/kexin type 9 inhibitors: Practical guidance (ESC/EAS, August 2017)<\/a>). <\/para>        <para>The following table summarizes the current development status of drugs and biologics targeting PCSK9 for the treatment of hyperlipidemia and atherosclerosis. <COMPETITIVE id=\"1325\">            <TABLE>              <TR>                <TD>PCSK9 inhibitors in development for hypercholesterolemia and atherosclerosis<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=441754&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Inclisiran<\/a>                <\/TD>                <TD>The Medicines Co.<\/TD>                <TD>PCSK9 Expression Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=985966&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IBI-306<\/a>                <\/TD>                <TD>Innovent Biologics<\/TD>                <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1005624&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LIB-003<\/a>                <\/TD>                <TD>LIB Therapeutics<\/TD>                <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=896528&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AT-04A<\/a>                <\/TD>                <TD>AFFiRiS<\/TD>                <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=896536&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AT-06A<\/a>                <\/TD>                <TD>AFFiRiS<\/TD>                <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=951993&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CiVi-007<\/a>                <\/TD>                <TD>CiVi Biopharma<\/TD>                <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1016525&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SHR-1209<\/a>                <\/TD>                <TD>Jiangsu Hengrui<\/TD>                <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1015584&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NYX-330<\/a>                <\/TD>                <TD>Nyrada<\/TD>                <TD>Proprotein Convertase Subtilisin/Kexin-Type 9 (PCSK9) Inhibitors<\/TD>                <TD>Preclinical<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1022404&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">P-21<\/a>                <\/TD>                <TD>Shifa Biomedical<\/TD>                <TD>Proprotein Convertase Subtilisin/Kexin-Type 9 (PCSK9) Inhibitors<\/TD>                <TD>Preclinical<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"1656881\" medline_id=\"21596380\">          <Title>Clinical aspects of PCSK9<\/Title>          <SourceTitle>Atherosclerosis<\/SourceTitle>          <PubMedTitle>Atherosclerosis<\/PubMedTitle>          <Volume>216<\/Volume>          <Issue>2<\/Issue>          <Page>258<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Cariou, B.<\/Author>            <Author>Le May, C.<\/Author>            <Author>Costet, P.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1790302\">          <Title>PCSK9 inhibitors as LDL cholesterol-lowering agents: Rationale, concerns and preliminary outcomes<\/Title>          <SourceTitle>Drugs of the Future<\/SourceTitle>          <PubMedTitle>Drugs Fut<\/PubMedTitle>          <Volume>037<\/Volume>          <Issue>05<\/Issue>          <Page>0331<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Costet, P.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1798742\">          <Title>Effect of a monoclonal antibody to PCSK9 on LDL cholesterol<\/Title>          <SourceTitle>New England Journal of Medicine<\/SourceTitle>          <PubMedTitle>N Engl J Med<\/PubMedTitle>          <Volume>366<\/Volume>          <Issue>12<\/Issue>          <Page>1108<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Stein, E.A.<\/Author>            <Author>Mellis, S.<\/Author>            <Author>Yancopoulos, G.D.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1868618\" medline_id=\"22633824\">          <Title>Effect of a monoclonal antibody to PCSK9, REGN727/SAR236553, to reduce low-density lipoprotein cholesterol in patients with heterozygous familial hypercholesterolaemia on stable statin dose with or without ezetimibe therapy: A phase 2 randomised controlled trial<\/Title>          <SourceTitle>The Lancet<\/SourceTitle>          <PubMedTitle>Lancet<\/PubMedTitle>          <Volume>380<\/Volume>          <Issue>9836<\/Issue>          <Page>29<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Stein, E.A.<\/Author>            <Author>Gipe, D.<\/Author>            <Author>Bergeron, J.<\/Author>            <Author>Gaudet, D.<\/Author>            <Author>Weiss, R.<\/Author>            <Author>Dufour, R.<\/Author>            <Author>Wu, R.<\/Author>            <Author>Pordy, R.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1930154\" medline_id=\"23128163\">          <Title>Effect of a monoclonal antibody to PCSK9 on low-density lipoprotein cholesterol levels in statin-intolerant patients the GAUSS randomized trial<\/Title>          <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>          <PubMedTitle>JAMA<\/PubMedTitle>          <Volume>308<\/Volume>          <Issue>23<\/Issue>          <Page>2497<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>Sullivan, D.<\/Author>            <Author>Olsson, A.G.<\/Author>            <Author>Scott, R.<\/Author>            <Author>Kim, J.B.<\/Author>            <Author>Xue, A.<\/Author>            <Author>Gebski, V.<\/Author>            <Author>Wasserman, S.M.<\/Author>            <Author>Stein, E.A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2291791\" medline_id=\"25637042\">          <Title>PCSK9 Inhibition: Current Concepts and Lessons from Human Genetics<\/Title>          <SourceTitle>Current Atherosclerosis Reports<\/SourceTitle>          <PubMedTitle>Curr Atheroscler Rep<\/PubMedTitle>          <Volume>17<\/Volume>          <Issue>3<\/Issue>          <Page>487<\/Page>          <Year>2015<\/Year>          <Authors>            <Author>Rodriguez, F.<\/Author>            <Author>Knowles, J.W.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2535520\" medline_id=\"27533159\">          <Title>Cost-effectiveness of PCSK9 inhibitor therapy in patients with heterozygous familial hypercholesterolemia or atherosclerotic cardiovascular disease<\/Title>          <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>          <PubMedTitle>JAMA<\/PubMedTitle>          <Volume>316<\/Volume>          <Issue>7<\/Issue>          <Page>743<\/Page>          <Year>2016<\/Year>          <Authors>            <Author>Kazi, D.S.<\/Author>            <Author>Moran, A.E.<\/Author>            <Author>Coxson, P.G.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1395\" modifiedDate=\"20170124035901\">      <Title>APOB Expression Inhibitors<\/Title>      <Body>        <para>Apolipoprotein B (APOB), produced in the liver, is an important component of all atherogenic lipoproteins, including LDL cholesterol and its precursors, intermediate-density lipoprotein (IDL) cholesterol and very-low-density lipoprotein (VLDL) cholesterol, making it an attractive target for LDL cholesterol reduction (<REF id=\"1132978\">Wang, Y., 2007<\/REF>; <REF id=\"1622817\">Brautbar, A. and Ballantyne, C.M., 2011<\/REF>). <\/para>        <para>Developed by Ionis Pharmaceuticals for the treatment of hypercholesterolemia, mipomersen sodium (ISIS-301012), a 20-mer phosphorothioate oligonucleotide (5&apos;-GCCTCAGTCTGCTTCGCACC-3&apos;), is a second-generation antisense drug designed to inhibit the expression of APOB. The agent binds to the coding region of human apoB-100 mRNA by Watson and Crick base pairing, leading to RNase H-mediated degradation of the cognate mRNA and thereby inhibiting the translation of the apoB protein (<REF id=\"1132978\">Wang, Y., 2007<\/REF>; <REF id=\"2311980\">Stein, E.A. and Raal, F.J., 2014<\/REF>). <\/para>        <para>Mipomersen was evaluated in a international, randomised, double-blind, placebo-controlled, phase III study enrolling 51 patients with a clinical diagnosis or genetic confirmation of homozygous familial hypercholesterolemia (HoFH). Subjects, who were already receiving the maximum tolerated dose of a lipid-lowering drug, were randomly assigned to treatment with mipomersen 200 mg s.c. every week or placebo for 26 weeks. At the end of the treatment period, LDL cholesterol levels were reduced by an average of 25% in the active treatment group, as compared to an average 3% reduction in the placebo group (<REF id=\"1487864\">Raal, F.J. et al., 2010<\/REF>). <\/para>        <para>In January 2013, mipomersen was approved by the FDA for the treatment of patients with HoFH, indicated as an adjunct to diet and lipid-lowering medications to reduce LDL-cholesterol, apolipoprotein B, total cholesterol and non-HDL-cholesterol in these patients. HoFH is a rare inherited condition that makes the body unable to remove LDL cholesterol from the blood, causing abnormally high levels of circulating LDL cholesterol. In the United States, where HoFH is an orphan indication, the disorder occurs in approximately one in one million individuals. For those with HoFH, heart attacks and death often occur before age 30 (<REF id=\"2052604\">Smith, R.J. and Hiatt, W.R., 2013<\/REF>). Due to concerns about adverse events, mipomersen is not yet approved in Europe (<REF id=\"2290580\">Khoo, B., 2014<\/REF>; <REF id=\"2311980\">Stein, E.A. and Raal, F.J., 2014<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"1132978\">          <Title>ISIS-301012<\/Title>          <SourceTitle>Drugs of the Future<\/SourceTitle>          <PubMedTitle>Drugs Fut<\/PubMedTitle>          <Volume>032<\/Volume>          <Issue>08<\/Issue>          <Page>0699<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Wang, Y.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1487864\" medline_id=\"20227758\">          <Title>Mipomersen, an apolipoprotein B synthesis inhibitor, for lowering of LDL cholesterol concentrations in patients with homozygous familial hypercholesterolaemia: A randomised, double-blind, placebo-controlled trial<\/Title>          <SourceTitle>The Lancet<\/SourceTitle>          <PubMedTitle>Lancet<\/PubMedTitle>          <Volume>375<\/Volume>          <Issue>9719<\/Issue>          <Page>998<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Raal, F.J.<\/Author>            <Author>Santos, R.D.<\/Author>            <Author>Blom, D.J.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1622817\" medline_id=\"21321561\">          <Title>Pharmacological strategies for lowering LDL cholesterol: Statins and beyond<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>8<\/Volume>          <Issue>5<\/Issue>          <Page>253<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Brautbar, A.<\/Author>            <Author>Ballantyne, C.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2052604\" medline_id=\"23649296\">          <Title>Two new drugs for homozygous familial hypercholesterolemia: Managing benefits and risks in a rare disorder<\/Title>          <SourceTitle>JAMA Internal Medicine<\/SourceTitle>          <PubMedTitle>JAMA Intern Med<\/PubMedTitle>          <Volume>173<\/Volume>          <Issue>16<\/Issue>          <Page>1491<\/Page>          <Year>2013<\/Year>          <Authors>            <Author>Smith, R.J.<\/Author>            <Author>Hiatt, W.R.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290580\" medline_id=\"25542072\">          <Title>Genetic therapies to lower cholesterol<\/Title>          <SourceTitle>Vascular Pharmacology<\/SourceTitle>          <PubMedTitle>Vascul Pharmacol<\/PubMedTitle>          <Volume>64C<\/Volume>          <Page>11<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Khoo, B.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2311980\" medline_id=\"25432394\">          <Title>New therapies for reducing low-density lipoprotein cholesterol<\/Title>          <SourceTitle>Endocrinology and Metabolism Clinics of North America<\/SourceTitle>          <PubMedTitle>Endocrinol Metab Clin North Am<\/PubMedTitle>          <Volume>43<\/Volume>          <Issue>4<\/Issue>          <Page>1007<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Stein, E.A.<\/Author>            <Author>Raal, F.J.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"2920\" modifiedDate=\"20130124021940\">      <Title>Thyroid Hormone Receptor Agonists<\/Title>      <Body>        <para>Several large observational studies have established a link between hypothyroidism and increased risk of atherosclerosis and other cardiovascular disorders (<REF id=\"1003650\">Boelaert, K. and Franklyn, J.A., 2005<\/REF>; <REF id=\"1003644\">Biondi, B. and Klein, I., 2004<\/REF>; <REF id=\"1368713\">Baxter, J.D. and Webb, P., 2009<\/REF>). In the Rotterdam Study, even subclinical hypothyroidism was a meaningful and independent risk factor for atherosclerosis in elderly women (<REF id=\"1003643\">Hak, A.E. et al., 2000<\/REF>). Thus in recent years several research teams have begun investigating liver-selective thyroid hormone receptor analogues, especially THRbeta-selective agonists, as potential lipid-lowering agents. <\/para>        <para>Thyroid hormone mimetics have been shown in preclinical and preliminary clinical studies to exert the same effects as native thyroid hormone on serum cholesterol: they reduce LDL cholesterol, promote the reverse transport of cholesterol from atherogenic macrophages back to the liver, induce bile acid production and promote biliary secretion of sterols, all of which result in the increased excretion of excess cholesterol (<REF id=\"1520864\">Tancevski, I. et al., 2010<\/REF>). Given their differing mechanisms of action, thyroid hormone mimetics may have synergistic effects with statins, although this remains to be confirmed in clinical studies (<REF id=\"1368713\">Baxter, J.D. and Webb, P., 2009<\/REF>). The following table provides an up-to-date overview of thyroid hormone receptor agonists in active development for the treatment of atherosclerosis. <COMPETITIVE id=\"934\">            <TABLE>              <TR>                <TD>Thyroid hormone agonists in active development for the treatment of atherosclerosis<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=444128&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Resmetirom<\/a>                <\/TD>                <TD>Madrigal Pharmaceuticals<\/TD>                <TD>Thyroid Hormone Receptor beta Agonists/ Signal Transduction Modulators<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=885328&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VK-2809<\/a>                <\/TD>                <TD>Viking Therapeutics<\/TD>                <TD>Thyroid Hormone Receptor beta Agonists/ Signal Transduction Modulators<\/TD>                <TD>Phase II<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"1003643\" medline_id=\"10681281\">          <Title>Subclinical hypothyroidism is an independent risk factor for atherosclerosis and myocardial infarction in elderly women: The Rotterdam Study<\/Title>          <SourceTitle>Annals of Internal Medicine<\/SourceTitle>          <PubMedTitle>Ann Intern Med<\/PubMedTitle>          <Volume>132<\/Volume>          <Issue>4<\/Issue>          <Page>270<\/Page>          <Year>2000<\/Year>          <Authors>            <Author>Hak, A.E.<\/Author>            <Author>Pols, H.A.<\/Author>            <Author>Visser, T.J.<\/Author>            <Author>Drexhage, H.A.<\/Author>            <Author>Hofman, A.<\/Author>            <Author>Witteman, J.C.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1003644\" medline_id=\"15249698\">          <Title>Hypothyroidism as a risk factor for cardiovascular disease<\/Title>          <SourceTitle>Endocrine<\/SourceTitle>          <PubMedTitle>Endocrine<\/PubMedTitle>          <Volume>24<\/Volume>          <Issue>1<\/Issue>          <Page>1<\/Page>          <Year>2004<\/Year>          <Authors>            <Author>Biondi, B.<\/Author>            <Author>Klein, I.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1003650\" medline_id=\"16214936\">          <Title>Thyroid hormone in health and disease<\/Title>          <SourceTitle>Journal of Endocrinology<\/SourceTitle>          <PubMedTitle>J Endocrinol<\/PubMedTitle>          <Volume>187<\/Volume>          <Issue>1<\/Issue>          <Page>1<\/Page>          <Year>2005<\/Year>          <Authors>            <Author>Boelaert, K.<\/Author>            <Author>Franklyn, J.A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1368713\" medline_id=\"19337272\">          <Title>Thyroid hormone mimetics: Potential applications in atherosclerosis, obesity and type 2 diabetes<\/Title>          <SourceTitle>Nature Reviews Drug Discovery<\/SourceTitle>          <PubMedTitle>Nat Rev Drug Discov<\/PubMedTitle>          <Volume>8<\/Volume>          <Issue>4<\/Issue>          <Page>308<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Baxter, J.D.<\/Author>            <Author>Webb, P.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1520864\">          <Title>Thyromimetics for atherosclerotic cardiovascular disease<\/Title>          <SourceTitle>Drugs of the Future<\/SourceTitle>          <PubMedTitle>Drugs Fut<\/PubMedTitle>          <Volume>035<\/Volume>          <Issue>09<\/Issue>          <Page>747<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Tancevski, I.<\/Author>            <Author>Patsch, J.R.<\/Author>            <Author>Eller, P.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>  <\/Section>  <Section sectionId=\"1397\" modifiedDate=\"20151102025106\">    <Title>HDL-Targeted Therapies<\/Title>    <Body>      <para>Plasma high density lipoproteins (HDL) are a heterogeneous family of lipoprotein particles that vary in density, size, surface charge, and lipid and protein composition. All HDLs, however, act as important lipid-transporting elements in the blood. Known as the &quot;good&quot; cholesterol, HDL cholesterol transports excess lipids from peripheral cells in the arterial wall to the liver, where they are subsequently eliminated in bile and feces. This process is known as reverse cholesterol transport (RCT) (<REF id=\"1181302\">Joy, T. and Hegele, R.A., 2008<\/REF>; <REF id=\"2291787\">Calabresi, L. et al., 2015<\/REF>; <REF id=\"2291884\">Favari, E. et al., 2015<\/REF>). HDL also exerts beneficial antiinflammatory, antioxidant and vasodilatory/vasoprotective effects, all of which help to reduce the risk of cardiovascular disease (<REF id=\"1619025\">Navab, M. et al., 2011<\/REF>; <REF id=\"1619023\">Podrez, E.A., 2010<\/REF>). <\/para>      <para>Low HDL cholesterol (&lt;40 mg/dl for men and &lt;50 mg/dl for women) is common in the general population (35% of U.S. men and 39% of U.S. women), and has been consistently confirmed as a significant and independent risk factor for coronary heart disease (<REF id=\"1615920\">Singh, V. et al., 2010<\/REF>; <REF id=\"2217698\">Rader, D.J. and Hovingh, G.K., 2014<\/REF>).<\/para>      <para>The Framingham Heart Study was the first to demonstrate that low HDL levels are associated with increased risk for CHD, regardless of LDL levels (<REF id=\"2217698\">Rader, D.J. and Hovingh, G.K., 2014<\/REF>). The landmark Veterans Administration High-density lipoprotein Intervention Trial (VA-HIT) subsequently proved that increasing HDL reduces the risk of CHD death and nonfatal myocardial infarction. Patients in VA-HIT who improved their HDL levels by 6% showed a 22% reduction in risk of CHD death and nonfatal MI. Both the Framingham study and VA-HIT demonstrated that a 1% increase in HDL translated into a 3-4% decrease in risk reduction. This is in contrast to strategies targeting LDL cholesterol: a 1% decrease in LDL has been shown to decrease the risk of coronary events by approximately 1% as well. Drugs that are able to increase HDL cholesterol levels at the same time that they decrease LDL and triglycerides represent an especially attractive approach to the treatment and prevention of the progression of atherosclerosis, as well as for stabilizing vulnerable lesions and perhaps even inducing plaque regression (<REF id=\"2294376\">Subedi, B.H. et al., 2014<\/REF>). In recent years, significant efforts have been directed to the identification of HDL-increasing therapies (<REF id=\"2294376\">Subedi, B.H. et al., 2014<\/REF>).<\/para>      <para>The first recommendations for raising HDL levels generally include diet and lifestyle modification: weight loss, increased intake of mono- and polyunsaturated fats in the diet, aerobic exercise and the avoidance of alcohol and tobacco (<REF id=\"1138140\">Singh, I.M. et al., 2007<\/REF>). If drug therapy is required, the most effective HDL-elevating therapies available at this time include fibrates, nicotinic acid and some statins (especially rosuvastatin) (<REF id=\"1615920\">Singh, V. et al., 2010<\/REF>; <REF id=\"2294376\">Subedi, B.H. et al., 2014<\/REF>). Various experimental approaches targeting reverse cholesterol transport as a way to raising blood levels of HDL cholesterol have been identified, include cholesteryl ester transfer protein (CETP) inhibitors, nuclear hormone receptor (LXR and FXR) modulators and lipid transporter-targeting agents (<REF id=\"1138140\">Singh, I.M. et al., 2007<\/REF>; <REF id=\"2290575\">Uehara, Y. and Saku, K., 2014<\/REF>), as well as cannabinoid-1 receptor blockers, PPAR-gamma agonists and BET bromodomain inhibitors (<REF id=\"1138140\">Singh, I.M. et al., 2007<\/REF>; <REF id=\"1615920\">Singh, V. et al., 2010<\/REF>; <REF id=\"2290568\">Verdier, C. et al., 2013<\/REF>). Given the disappointing results obtained with several of these drug classes in patient studies, forcus has shifted in more recent years to the development of agents that mimic the structure of HDL or that improve endogenous production of HDL particles (<REF id=\"2294376\">Subedi, B.H. et al., 2014<\/REF>).<\/para>      <para>In spite of the presence of laboratory evidence to support the role of HDL in atherothrombosis and clinical data validating its utility as a biomarker of cardiovascular risk, relatively little success has been attained in the clinic with drugs designed to boost HDL levels (<REF id=\"1154533\">Rader, D.J., 2007<\/REF>; <REF id=\"2217698\">Rader, D.J. and Hovingh, G.K., 2014<\/REF>), and the classic HDL hypothesis is beginning to be questioned by some researchers (<REF id=\"2217698\">Rader, D.J. and Hovingh, G.K., 2014<\/REF>). At this time there are are no clear guidelines for targeting HDL-C or HDL, due to lack of solid outcomes data from studies evaluating HDL-specific therapies alone or in combination with statins (<REF id=\"2294376\">Subedi, B.H. et al., 2014<\/REF>). <COMPETITIVE id=\"1207\">          <TABLE>            <TR>              <TD>HDL cholesterol-increasing agents in active development for the treatment of dyslipidemia and atherosclerosis<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Mechanism of Action<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=242854&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Gemcabene calcium<\/a>              <\/TD>              <TD>Gemphire Therapeutics<\/TD>              <TD>PPAR Agonists/ HDL-Cholesterol Increasing Agents/ Signal Transduction Modulators<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=628880&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Obicetrapib<\/a>              <\/TD>              <TD>Amgen<\/TD>              <TD>Cholesteryl Ester Transfer Protein (CETP) Inhibitors/ HDL-Cholesterol Increasing Agents/ Lipid Lowering Agents/ Triglyceride Lowering Agents<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=791488&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rocacetrapib<\/a>              <\/TD>              <TD>Chong Kun Dang Holdings<\/TD>              <TD>Cholesteryl Ester Transfer Protein (CETP) Inhibitors/ HDL-Cholesterol Increasing Agents<\/TD>              <TD>Phase I<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"1138140\" medline_id=\"17699012\">        <Title>High-density lipoprotein as a therapeutic target: A systematic review<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>298<\/Volume>        <Issue>7<\/Issue>        <Page>786<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Singh, I.M.<\/Author>          <Author>Shishehbor, M.H.<\/Author>          <Author>Ansell, B.J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1154533\" medline_id=\"17984168\">        <Title>Illuminating HDL - is it still a viable therapeutic target?<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>357<\/Volume>        <Issue>21<\/Issue>        <Page>2180<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Rader, D.J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1181302\" medline_id=\"18239670\">        <Title>Is raising HDL a futile strategy for atheroprotection?<\/Title>        <SourceTitle>Nature Reviews Drug Discovery<\/SourceTitle>        <PubMedTitle>Nat Rev Drug Discov<\/PubMedTitle>        <Volume>7<\/Volume>        <Issue>2<\/Issue>        <Page>143<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Joy, T.<\/Author>          <Author>Hegele, R.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1615920\" medline_id=\"21127701\">        <Title>Low high-density lipoprotein cholesterol: Current status and future strategies for management<\/Title>        <SourceTitle>Vascular Health and Risk Management<\/SourceTitle>        <PubMedTitle>Vasc Health Risk Manag<\/PubMedTitle>        <Volume>6<\/Volume>        <Page>979<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Singh, V.<\/Author>          <Author>Sharma, R.<\/Author>          <Author>Kumar, A.<\/Author>          <Author>Deedwania, P.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1619023\" medline_id=\"20374263\">        <Title>Anti-oxidant properties of high-density lipoprotein and atherosclerosis<\/Title>        <SourceTitle>Clinical and Experimental Pharmacology and Physiology<\/SourceTitle>        <PubMedTitle>Clin Exp Pharmacol Physiol<\/PubMedTitle>        <Volume>37<\/Volume>        <Issue>7<\/Issue>        <Page>719<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Podrez, E.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1619025\" medline_id=\"21304474\">        <Title>HDL and cardiovascular disease: Atherogenic and atheroprotective mechanisms<\/Title>        <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>        <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>        <Volume>8<\/Volume>        <Issue>4<\/Issue>        <Page>222<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Navab, M.<\/Author>          <Author>Reddy, S.T.<\/Author>          <Author>Van Lenten, B.J.<\/Author>          <Author>Fogelman, A.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2217698\" medline_id=\"25131981\">        <Title>HDL and cardiovascular disease<\/Title>        <SourceTitle>The Lancet<\/SourceTitle>        <PubMedTitle>Lancet<\/PubMedTitle>        <Volume>384<\/Volume>        <Issue>9943<\/Issue>        <Page>618<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Rader, D.J.<\/Author>          <Author>Hovingh, G.K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290568\" medline_id=\"24074699\">        <Title>Targeting high-density lipoproteins: Update on a promising therapy<\/Title>        <SourceTitle>Archives of Cardiovascular Diseases<\/SourceTitle>        <PubMedTitle>Arch Cardiovasc Dis<\/PubMedTitle>        <Volume>106<\/Volume>        <Issue>11<\/Issue>        <Page>601<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Verdier, C.<\/Author>          <Author>Martinez, L.O.<\/Author>          <Author>Ferrières, J.<\/Author>          <Author>Elbaz, M.<\/Author>          <Author>Genoux, A.<\/Author>          <Author>Perret, B.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290575\" medline_id=\"25349649\">        <Title>High-density lipoprotein and atherosclerosis: Roles of lipid transporters<\/Title>        <SourceTitle>World Journal of Cardiology<\/SourceTitle>        <PubMedTitle>World J Cardiol<\/PubMedTitle>        <Volume>6<\/Volume>        <Issue>10<\/Issue>        <Page>1049<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Uehara, Y.<\/Author>          <Author>Saku, K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2291787\" medline_id=\"25068410\">        <Title>HDL and atherosclerosis: Insights from inherited HDL disorders<\/Title>        <SourceTitle>Biochimica et Biophysica Acta<\/SourceTitle>        <PubMedTitle>Biochim Biophys Acta<\/PubMedTitle>        <Volume>1851<\/Volume>        <Issue>1<\/Issue>        <Page>13<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Calabresi, L.<\/Author>          <Author>Gomaraschi, M.<\/Author>          <Author>Simonelli, S.<\/Author>          <Author>Bernini, F.<\/Author>          <Author>Franceschini, G.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2291884\" medline_id=\"25522988\">        <Title>Cholesterol efflux and reverse cholesterol transport<\/Title>        <SourceTitle>Handbook of Experimental Pharmacology<\/SourceTitle>        <PubMedTitle>Handb Exp Pharmacol<\/PubMedTitle>        <Volume>224<\/Volume>        <Page>181<\/Page>        <Year>2015<\/Year>        <Authors>          <Author>Favari, E.<\/Author>          <Author>Chroni, A.<\/Author>          <Author>Tietge, U.J.<\/Author>          <Author>Zanotti, I.<\/Author>          <Author>Escolà-Gil, J.C.<\/Author>          <Author>Bernini, F.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2294376\" medline_id=\"24748800\">        <Title>Current guidelines for high-density lipoprotein cholesterol in therapy and future directions<\/Title>        <SourceTitle>Vascular Health and Risk Management<\/SourceTitle>        <PubMedTitle>Vasc Health Risk Manag<\/PubMedTitle>        <Volume>10<\/Volume>        <Page>205<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Subedi, B.H.<\/Author>          <Author>Joshi, P.H.<\/Author>          <Author>Jones, S.R.<\/Author>          <Author>Martin, S.S.<\/Author>          <Author>Blaha, M.J.<\/Author>          <Author>Michos, E.D.<\/Author>        <\/Authors>      <\/Reference>    <\/References>    <Section sectionId=\"1398\" modifiedDate=\"20170124040434\">      <Title>Apolipoprotein A-I-Directed Therapies<\/Title>      <Body>        <para>HDL mimetics are an innovative therapeutic strategy to increase HDL cholesterol. HDL is composed of lipids (cholesterol and phospholipids) and apolipoproteins. The most important structural proteins of HDL are apolipoprotein A-I (ApoA-I), which accounts for approximately 70% of the total HDL protein (<REF id=\"1181302\">Joy, T. and Hegele, R.A., 2008<\/REF>), and apoA-II (<REF id=\"1615920\">Singh, V. et al., 2010<\/REF>). ApoA-I overexpression in the liver increases HDL-cholesterol levels and delays or even reverses the progression of atherosclerosis in murine models (<REF id=\"1157131\">Rader, D.J., 2006<\/REF>). Epidemiological studies have demonstrated a strong inverse relationship between ApoA-I/HDL cholesterol levels and the risk of atherosclerotic cardiovascular disease.<\/para>        <para>A major finding in the field of atherosclerosis research was the discovery of a specific gene mutation expressed by members of a family from Limone, Italy, who were virtually immune to cholesterol-related heart problems and strokes in spite of engaging in lifestyle practices that normally lead to increased risk, such as smoking and overeating (<REF id=\"929022\">Franceschini, G. et al., 1980<\/REF>). Scientists at the University of Milan identified the gene prevalent in members of this family, referred to as apolipoprotein A-I Milano (ApoA-I Milano or AIM), in the 1980s, although the role of this gene in protecting arterial walls from plaque buildup was not known until years later. In 1992, a team from Cedars-Sinai Medical Center began studying the protein produced by AIM, and eventually succeeded in demonstrating that AIM is extremely potent in reducing plaque buildup in the arteries of mice and rabbits. Because the protein appears to actually remove harmful cholesterol, even from sites on arteries where plaque has accumulated, the need for such invasive procedures as angioplasty and bypass surgery could someday be virtually eliminated. And because AIM treats the entire circulatory system, it may be useful in repairing diseased vessels that currently cannot be reached by invasive techniques.<\/para>        <para>ApoA-I itself is not appropriate for therapeutic use due to pharmacokinetic limitations, and thus the search was initiated for ApoA-I mimetics. Several such compounds have been discovered and evaluated in preclinical and clinical studies, with promising results. ApoA-I mimetic peptides enhance the beneficial effects of HDL cholesterol, including atheroprotection and the ability to modify atherosclerotic disease progression. They also exert antiinflammatory activity. Further studies are needed, however, in order to determine optimum dosing regimens and route of administration (<REF id=\"1529656\">Mendez, A.J., 2010<\/REF>; <REF id=\"2290571\">White, C.R. et al., 2014<\/REF>; <REF id=\"2291885\">Stoekenbroek, R.M. et al., 2015<\/REF>). <\/para>        <para>The orally active apoA-I mimetic peptide D-4F (APP-018) was tested in preclinical and clinical studies. In early human trials, a single oral dose of D-4F was shown to effectively and safely improve conversion of pro-inflammatory to antiinflammatory HDL cholesterol (<REF id=\"1529644\">Sherman, C.B. et al., 2010<\/REF>). Related peptides have also been reported (<REF id=\"1445420\">Buga, G.M. et al., 2010<\/REF>). However these complex proteins are difficult to produce and must be administered parenterally, which has slowed their development (<REF id=\"2294376\">Subedi, B.H. et al., 2014<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"929022\" medline_id=\"7430351\">          <Title>A-IMilano apoprotein. Decreased high density lipoprotein cholesterol levels with significant lipoprotein modifications and without clinical atherosclerosis in an Italian family<\/Title>          <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>          <PubMedTitle>J Clin Invest<\/PubMedTitle>          <Volume>66<\/Volume>          <Issue>5<\/Issue>          <Page>892<\/Page>          <Year>1980<\/Year>          <Authors>            <Author>Franceschini, G.<\/Author>            <Author>Sirtori, C.R.<\/Author>            <Author>Capurso, A. II.<\/Author>            <Author>Weisgraber, K.H.<\/Author>            <Author>Mahley, R.W.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1157131\" medline_id=\"17143322\">          <Title>Molecular regulation of HDL metabolism and function: Implications for novel therapies<\/Title>          <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>          <PubMedTitle>J Clin Invest<\/PubMedTitle>          <Volume>116<\/Volume>          <Issue>12<\/Issue>          <Page>3090<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Rader, D.J.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1181302\" medline_id=\"18239670\">          <Title>Is raising HDL a futile strategy for atheroprotection?<\/Title>          <SourceTitle>Nature Reviews Drug Discovery<\/SourceTitle>          <PubMedTitle>Nat Rev Drug Discov<\/PubMedTitle>          <Volume>7<\/Volume>          <Issue>2<\/Issue>          <Page>143<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Joy, T.<\/Author>            <Author>Hegele, R.A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1445420\" medline_id=\"19965777\">          <Title>L-4F alters hyperlipidemic (but not healthy) mouse plasma to reduce platelet aggregation<\/Title>          <SourceTitle>Arteriosclerosis, Thrombosis, and Vascular Biology<\/SourceTitle>          <PubMedTitle>Arterioscler Thromb Vasc Biol<\/PubMedTitle>          <Volume>30<\/Volume>          <Issue>2<\/Issue>          <Page>283<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Buga, G.M.<\/Author>            <Author>Navab, M.<\/Author>            <Author>Imaizumi, S.<\/Author>            <Author>Reddy, S.T.<\/Author>            <Author>Yekta, B.<\/Author>            <Author>Hough, G.<\/Author>            <Author>Chanslor, S.<\/Author>            <Author>Anantharamaiah, G.M.<\/Author>            <Author>Fogelman, A.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1529644\" medline_id=\"20395699\">          <Title>Apolipoprotein A-I mimetic peptides: A potential new therapy for the prevention of atherosclerosis<\/Title>          <SourceTitle>Cardiology in Review<\/SourceTitle>          <PubMedTitle>Cardiol Rev<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>3<\/Issue>          <Page>141<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Sherman, C.B.<\/Author>            <Author>Peterson, S.J.<\/Author>            <Author>Frishman, W.H.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1529656\">          <Title>The promise of apolipoprotein A-I mimetics<\/Title>          <SourceTitle>Current Opinion in Endocrinology, Diabetes, and Obesity (Online)<\/SourceTitle>          <PubMedTitle>Curr Opin Endocrinol Diabetes Obes (Online)<\/PubMedTitle>          <Volume>17<\/Volume>          <Issue>2<\/Issue>          <Page>171<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Mendez, A.J.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615920\" medline_id=\"21127701\">          <Title>Low high-density lipoprotein cholesterol: Current status and future strategies for management<\/Title>          <SourceTitle>Vascular Health and Risk Management<\/SourceTitle>          <PubMedTitle>Vasc Health Risk Manag<\/PubMedTitle>          <Volume>6<\/Volume>          <Page>979<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Singh, V.<\/Author>            <Author>Sharma, R.<\/Author>            <Author>Kumar, A.<\/Author>            <Author>Deedwania, P.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290571\" medline_id=\"25157031\">          <Title>Anti-inflammatory and cholesterol-reducing properties of apolipoprotein mimetics: A review<\/Title>          <SourceTitle>Journal of Lipid Research<\/SourceTitle>          <PubMedTitle>J Lipid Res<\/PubMedTitle>          <Volume>55<\/Volume>          <Issue>10<\/Issue>          <Page>2007<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>White, C.R.<\/Author>            <Author>Garber, D.W.<\/Author>            <Author>Anantharamaiah, G.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2291885\" medline_id=\"25523005\">          <Title>ApoA-I Mimetics<\/Title>          <SourceTitle>Handbook of Experimental Pharmacology<\/SourceTitle>          <PubMedTitle>Handb Exp Pharmacol<\/PubMedTitle>          <Volume>224<\/Volume>          <Page>631<\/Page>          <Year>2015<\/Year>          <Authors>            <Author>Stoekenbroek, R.M.<\/Author>            <Author>Stroes, E.S.<\/Author>            <Author>Hovingh, G.K.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2294376\" medline_id=\"24748800\">          <Title>Current guidelines for high-density lipoprotein cholesterol in therapy and future directions<\/Title>          <SourceTitle>Vascular Health and Risk Management<\/SourceTitle>          <PubMedTitle>Vasc Health Risk Manag<\/PubMedTitle>          <Volume>10<\/Volume>          <Page>205<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Subedi, B.H.<\/Author>            <Author>Joshi, P.H.<\/Author>            <Author>Jones, S.R.<\/Author>            <Author>Martin, S.S.<\/Author>            <Author>Blaha, M.J.<\/Author>            <Author>Michos, E.D.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1400\" modifiedDate=\"20151023083814\">      <Title>Cholesteryl Ester Transfer Protein Inhibitors<\/Title>      <Body>        <para>Cholesteryl ester transfer protein (CETP), a glycoprotein secreted by the liver that circulates in plasma, plays a pivotal role in the metabolism of HDL cholesterol, and has been identified as a potential factor influencing whether or not patients respond favorably to lipid-lowering therapy with statins and other drugs. CETP regulates the exchange of cholesterol and triglycerides between plasma lipoproteins, enabling the net transfer of cholesteryl ester from antiatherogenic HDL to proatherogenic apolipoprotein B-containing lipoproteins and the resulting uptake of cholesterol by hepatocytes via a process of receptor-mediated endocytosis. CETP promotes the atherogenicity of VLDL and LDL by increasing their cholesteryl ester content (<REF id=\"1237957\">Kontush, A. et al., 2008<\/REF>; <REF id=\"2290576\">Mabuchi, H. et al., 2014<\/REF>). Thus the inhibition of CETP has been extensively studied as a strategy for treating atherosclerosis by boosting HDL-C and reducing LDL-C levels, especially in patients with insulin resistance, hypertriglyceridemia, premature atherosclerosis and high cardiovascular risk (<REF id=\"1610081\">Chapman, M.J. et al., 2010<\/REF>; <REF id=\"2290576\">Mabuchi, H. et al., 2014<\/REF>).<\/para>        <para>The synthesis and evaluation of CETP inhibitors in the clinical setting was considered a logical and promising new strategy for the treatment of atherosclerosis. In 2000, Pfizer first reported findings of early clinical trials demonstrating good tolerability and dramatically increased HDL levels in animal models as well as in subjects treated with the drug. Other CETP inhibitors also entered clinical testing in the following years (<REF id=\"1613380\">Davidson, M.H., 2010<\/REF>; <REF id=\"2217698\">Rader, D.J. and Hovingh, G.K., 2014<\/REF>). <\/para>        <para>However, in December 2006, Pfizer announced that it had decided to halt the clinical development of torcetrapib --which had reached phase III and was the most advanced product in this drug class-- in interests of patient safety (<REF id=\"1610082\">Weber, O. et al., 2010<\/REF>; <REF id=\"1610125\">Anonymous, 2011<\/REF>). The decision was made based on recommendations by an independent Data Safety Monitoring Board (DSMB), which was monitoring the ILLUMINATE morbidity and mortality study for torcetrapib. The DSMB noted an increase in the incidence of mortality and cardiovascular events in the torcetrapib arm of the study (<REF id=\"1158201\">Barter, P.J. et al., 2007<\/REF>). The company elected to terminate the ILLUMINATE study as well as the development program for this compound. Pfizer said that the new information from the trial was totally unexpected. However, new data that have been evaluated since the trial termination suggest that the toxicity observed with torcetrapib was due to off-target steroidogenic effects and were not the result of HDL elevation (<REF id=\"1237957\">Kontush, A. et al., 2008<\/REF>; <REF id=\"1610083\">Kappelle, P.J. et al., 2011<\/REF>; <REF id=\"1610080\">Hu, X. et al., 2009<\/REF>). <\/para>        <para>With clinical evidence to support that blood pressure elevation is not a class effect (<REF id=\"1468385\">Stein, E.A. et al., 2010<\/REF>), CETP inhibition is now being pursued with renewed vigor albeit increased caution (<REF id=\"1610083\">Kappelle, P.J. et al., 2011<\/REF>; <REF id=\"1613380\">Davidson, M.H., 2010<\/REF>), with treatment targeted to patients whose CETP levels are higher than required for efficient reverse cholesterol transport (<REF id=\"2290576\">Mabuchi, H. et al., 2014<\/REF>). There is a need, however, for improved biomarkers to guide the clinical evaluation of these compounds (<REF id=\"2032510\">Mohammadpour, A.H. and Akhlaghi, F., 2013<\/REF>).<\/para>        <para>In 2015 another CETP inhibitor was discontinued from late-stage development: Lilly&apos;s evacetrapib. The decision was made following a recommendation by an independent data monitoring committee to terminate the phase III trial ACCELERATE. This double-blind trial recruited 12,095 adults with high-risk vascular disease (acute coronary syndrome, cerebrovascular atherosclerotic disease, peripheral arterial disease, or diabetes mellitus with coronary artery disease) and administered 130 mg evacetrapib or oral placebo once daily. The committee conducted regular data reviews, which have indicated that the trial was unlikely to achieve the primary endpoint of demonstrating significant reduction versus placebo in time to first myocardial infarction, stroke, coronary revascularization, hospitalization for unstable angina, or death. Lilly announced that it would also close other studies in the evacetrapib development program. The effect of this decision on the future of this drug class remains to be seen. <\/para>        <para>The following table provides an overview of CETP inhibitors under active development at this time.<COMPETITIVE id=\"469\">            <TABLE>              <TR>                <TD>CETP inhibitors in development for atherosclerosis<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=628880&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Obicetrapib<\/a>                <\/TD>                <TD>Amgen<\/TD>                <TD>Cholesteryl Ester Transfer Protein (CETP) Inhibitors/ HDL-Cholesterol Increasing Agents/ Lipid Lowering Agents/ Triglyceride Lowering Agents<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=791488&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rocacetrapib<\/a>                <\/TD>                <TD>Chong Kun Dang Holdings<\/TD>                <TD>Cholesteryl Ester Transfer Protein (CETP) Inhibitors/ HDL-Cholesterol Increasing Agents<\/TD>                <TD>Phase I<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"1158201\" medline_id=\"17984165\">          <Title>Effects of torcetrapib in patients at high risk for coronary events<\/Title>          <SourceTitle>New England Journal of Medicine<\/SourceTitle>          <PubMedTitle>N Engl J Med<\/PubMedTitle>          <Volume>357<\/Volume>          <Issue>21<\/Issue>          <Page>2109<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Barter, P.J.<\/Author>            <Author>Caulfield, M.<\/Author>            <Author>Eriksson, M.<\/Author>            <Author>Grundy, S.M.<\/Author>            <Author>Kastelein, J.J.<\/Author>            <Author>Komajda, M.<\/Author>            <Author>Lopez-Sendon, J.<\/Author>            <Author>Mosca, L.<\/Author>            <Author>Tardif, J.C.<\/Author>            <Author>Waters, D.D.<\/Author>            <Author>Shear, C.L.<\/Author>            <Author>Revkin, J.H.<\/Author>            <Author>Buhr, K.A.<\/Author>            <Author>Fisher, M.R.<\/Author>            <Author>Tall, A.R.<\/Author>            <Author>Brewer, B.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1237957\" medline_id=\"18431367\">          <Title>Spotlight on HDL-raising therapies: Insights from the torcetrapib trials<\/Title>          <SourceTitle>Nature Clinical Practice Cardiovascular Medicine<\/SourceTitle>          <PubMedTitle>Nat Clin Pract Cardiovasc Med<\/PubMedTitle>          <Volume>5<\/Volume>          <Issue>6<\/Issue>          <Page>329<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Kontush, A.<\/Author>            <Author>Guérin, M.<\/Author>            <Author>Chapman, M.J.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1468385\" medline_id=\"20097702\">          <Title>Safety and tolerability of dalcetrapib (RO4607381/JTT-705): Results from a 48-week trial<\/Title>          <SourceTitle>European Heart Journal<\/SourceTitle>          <PubMedTitle>Eur Heart J<\/PubMedTitle>          <Volume>31<\/Volume>          <Issue>4<\/Issue>          <Page>480<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Stein, E.A.<\/Author>            <Author>Roth, E.M.<\/Author>            <Author>Rhyne, J.M.<\/Author>            <Author>Burgess, T.<\/Author>            <Author>Kallend, D.<\/Author>            <Author>Robinson, J.G.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1610080\" medline_id=\"19164467\">          <Title>Torcetrapib induces aldosterone and cortisol production by an intracellular calcium-mediated mechanism independently of cholesteryl ester transfer protein inhibition<\/Title>          <SourceTitle>Endocrinology (Philadelphia)<\/SourceTitle>          <PubMedTitle>Endocrinology<\/PubMedTitle>          <Volume>150<\/Volume>          <Issue>5<\/Issue>          <Page>2211<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Hu, X.<\/Author>            <Author>Dietz, J.D.<\/Author>            <Author>Xia, C.<\/Author>            <Author>Knight, D.R.<\/Author>            <Author>Loging, W.T.<\/Author>            <Author>Smith, A.H.<\/Author>            <Author>Yuan, H.<\/Author>            <Author>Perry, D.A.<\/Author>            <Author>Keiser, J.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1610081\" medline_id=\"19825813\">          <Title>Cholesteryl ester transfer protein: At the heart of the action of lipid-modulating therapy with statins, fibrates, niacin, and cholesteryl ester transfer protein inhibitors<\/Title>          <SourceTitle>European Heart Journal<\/SourceTitle>          <PubMedTitle>Eur Heart J<\/PubMedTitle>          <Volume>31<\/Volume>          <Issue>2<\/Issue>          <Page>149<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Chapman, M.J.<\/Author>            <Author>Le Goff, W.<\/Author>            <Author>Guerin, M.<\/Author>            <Author>Kontush, A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1610082\" medline_id=\"20556633\">          <Title>Cholesteryl ester transfer protein and its inhibition<\/Title>          <SourceTitle>Cellular and Molecular Life Sciences<\/SourceTitle>          <PubMedTitle>Cell Mol Life Sci<\/PubMedTitle>          <Volume>67<\/Volume>          <Issue>18<\/Issue>          <Page>3139<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Weber, O.<\/Author>            <Author>Bischoff, H.<\/Author>            <Author>Schmeck, C.<\/Author>            <Author>Böttcher, M.F.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1610083\" medline_id=\"20645987\">          <Title>Cholesteryl ester transfer protein inhibition in cardiovascular risk management: Ongoing trials will end the confusion<\/Title>          <SourceTitle>Cardiovascular Therapeutics<\/SourceTitle>          <PubMedTitle>Cardiovasc Ther<\/PubMedTitle>          <Volume>29<\/Volume>          <Issue>6<\/Issue>          <Page>e89<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Kappelle, P.J.<\/Author>            <Author>van Tol, A.<\/Author>            <Author>Wolffenbuttel, B.H.<\/Author>            <Author>Dullaart, R.P.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1610125\" medline_id=\"21358723\">          <Title>Learning lessons from Pfizer&apos;s 800 million dollar failure<\/Title>          <SourceTitle>Nature Reviews Drug Discovery<\/SourceTitle>          <PubMedTitle>Nat Rev Drug Discov<\/PubMedTitle>          <Volume>10<\/Volume>          <Issue>3<\/Issue>          <Page>163<\/Page>          <Year>2011<\/Year>          <Authors/>        <\/Reference>        <Reference id=\"1613380\" medline_id=\"21122682\">          <Title>Update on CETP inhibition<\/Title>          <SourceTitle>Journal of Clinical Lipidology<\/SourceTitle>          <PubMedTitle>J Clin Lipidol<\/PubMedTitle>          <Volume>4<\/Volume>          <Issue>5<\/Issue>          <Page>394<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Davidson, M.H.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2032510\">          <Title>Future of cholesteryl ester transfer protein (CETP) inhibitors: A pharmacological perspective<\/Title>          <SourceTitle>Clinical Pharmacokinetics<\/SourceTitle>          <PubMedTitle>Clin Pharmacokinet<\/PubMedTitle>          <Volume>52<\/Volume>          <Page>615<\/Page>          <Year>2013<\/Year>          <Authors>            <Author>Mohammadpour, A.H.<\/Author>            <Author>Akhlaghi, F.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2217698\" medline_id=\"25131981\">          <Title>HDL and cardiovascular disease<\/Title>          <SourceTitle>The Lancet<\/SourceTitle>          <PubMedTitle>Lancet<\/PubMedTitle>          <Volume>384<\/Volume>          <Issue>9943<\/Issue>          <Page>618<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Rader, D.J.<\/Author>            <Author>Hovingh, G.K.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290576\" medline_id=\"25410905\">          <Title>Cholesteryl ester transfer protein (CETP) deficiency and CETP inhibitors<\/Title>          <SourceTitle>Molecules and Cells<\/SourceTitle>          <PubMedTitle>Mol Cells<\/PubMedTitle>          <Volume>37<\/Volume>          <Issue>11<\/Issue>          <Page>777<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Mabuchi, H.<\/Author>            <Author>Nohara, A.<\/Author>            <Author>Inazu, A.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1402\" modifiedDate=\"20150721011555\">      <Title>The Role of Scavenger Receptors<\/Title>      <Body>        <para>The scavenger receptor class B member I (SR-BI) is a cell surface lipoprotein receptor located most abundantly in the liver and steroidogenic tissues, as well as in the brush border membrane of the small intestine, that mediates the selective uptake of cholesteryl esters from HDL (<REF id=\"1619025\">Navab, M. et al., 2011<\/REF>). SR-BI appears to be required for the maintenance of reverse cholesterol transport, normal HDL cholesterol and phospholipid levels and HDL structure. SR-BI can also promote the selective uptake of cholesteryl ester from apoB-containing lipoproteins. Studies in transgenic and knockout mice have confirmed that SR-BI plays a protective role against atherosclerosis, and a pharmacological agent capable of increasing RCT, both in the early and late stages, by targeting SR-BI could become a powerful tool for the prevention or treatment of atherosclerotic cardiovascular diseases (<REF id=\"1610085\">Hoekstra, M. et al., 2010<\/REF>). It should be noted, however, that the importance of this receptor in humans remains to be demonstrated (<REF id=\"671807\">Hirano, K. et al., 2000<\/REF>).<\/para>        <para>Although no specific SR-BI receptor-acting drugs have yet been identified, the known compounds probucol and fenofibrate appear to exert their cholesterol-lowering effects at least partially by increasing the activity or expression of SR-BI (<REF id=\"662237\">Viñals, M., 2001<\/REF>).<\/para>        <para>Studies conducted by Innsbruck Medical University researchers have demonstrated that aspirin treatment can increase SR-BI mRNA and protein expression on primary human macrophages and in human carotid plaques. Functional assays further confirmed an elevated uptake of radiolabeled HDL cholesteryl ester in these cells and in murine models. These effects were enhanced with the combined use of the peroxisome proliferator-activated receptor (PPAR) alpha activator fenofibrate. This study demonstrates a novel mechanism for aspirin as a preventative therapy for atherosclerosis, mediated via the PPARalpha pathway (<REF id=\"1009455\">Tancevski, I. et al., 2006<\/REF>; <REF id=\"1428231\">Wehinger, A. et al., 2009<\/REF>).<\/para>        <para>In contrast CD36, another scavenger receptor expressed on various cell types, plays a proatherogenic role. CD36 receptors on macrophages orchestrate the uptake of oxidized LDL (<REF id=\"1615889\">Silverstein, R.L. et al., 2010<\/REF>; <REF id=\"2291785\">Park, Y.M., 2014<\/REF>) and mediate the formation of foam cells. CD36 also binds oxidized phospholipids, which play an important role in atherosclerosis. Although further study is needed, the CD36-mediated signaling pathway may provide promising targets for therapeutic intervention (<REF id=\"2291785\">Park, Y.M., 2014<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"662237\">          <Title>Role of SR-BI in regulating lipoprotein structure and metabolism<\/Title>          <SourceTitle>Drug News &amp; Perspectives<\/SourceTitle>          <PubMedTitle>Drug News Perspect<\/PubMedTitle>          <Volume>14<\/Volume>          <Issue>4<\/Issue>          <Page>221<\/Page>          <Year>2001<\/Year>          <Authors>            <Author>Viñals, M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"671807\" medline_id=\"11086331\">          <Title>Pros and cons of inhibiting cholesteryl ester transfer protein<\/Title>          <SourceTitle>Current Opinion in Lipidology<\/SourceTitle>          <PubMedTitle>Curr Opin Lipidol<\/PubMedTitle>          <Volume>11<\/Volume>          <Issue>6<\/Issue>          <Page>589<\/Page>          <Year>2000<\/Year>          <Authors>            <Author>Hirano, K.<\/Author>            <Author>Yamashita, S.<\/Author>            <Author>Matsuzawa, Y.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1009455\" medline_id=\"16816107\">          <Title>Aspirin regulates expression and function of scavenger receptor-BI in macrophages: Studies in primary human macrophages and in mice<\/Title>          <SourceTitle>The FASEB Journal<\/SourceTitle>          <PubMedTitle>FASEB J<\/PubMedTitle>          <Volume>20<\/Volume>          <Issue>9<\/Issue>          <Page>1328<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Tancevski, I.<\/Author>            <Author>Wehinger, A.<\/Author>            <Author>Schgoer, W.<\/Author>            <Author>Eller, P.<\/Author>            <Author>Cuzzocrea, S.<\/Author>            <Author>Foeger, B.<\/Author>            <Author>Patsch, J.R.<\/Author>            <Author>Ritsch, A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1428231\" medline_id=\"19268942\">          <Title>Influence of aspirin on SR-BI expression in human carotid plaques<\/Title>          <SourceTitle>Atherosclerosis<\/SourceTitle>          <PubMedTitle>Atherosclerosis<\/PubMedTitle>          <Volume>206<\/Volume>          <Issue>1<\/Issue>          <Page>234<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Wehinger, A.<\/Author>            <Author>Tancevski, I.<\/Author>            <Author>Seiler, R.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1610085\" medline_id=\"21157967\">          <Title>Scavenger receptor BI: A multi-purpose player in cholesterol and steroid metabolism<\/Title>          <SourceTitle>World Journal of Gastroenterology<\/SourceTitle>          <PubMedTitle>World J Gastroenterol<\/PubMedTitle>          <Volume>16<\/Volume>          <Issue>47<\/Issue>          <Page>5916<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Hoekstra, M.<\/Author>            <Author>Van Berkel, T.J.<\/Author>            <Author>Van Eck, M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615889\" medline_id=\"20697562\">          <Title>Mechanisms of cell signaling by the scavenger receptor CD36: Implications in atherosclerosis and thrombosis<\/Title>          <SourceTitle>Transactions of the American Clinical and Climatological Association<\/SourceTitle>          <PubMedTitle>Trans Am Clin Climatol Assoc<\/PubMedTitle>          <Volume>121<\/Volume>          <Page>206<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Silverstein, R.L.<\/Author>            <Author>Li, W.<\/Author>            <Author>Park, Y.M.<\/Author>            <Author>Rahaman, S.O.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1619025\" medline_id=\"21304474\">          <Title>HDL and cardiovascular disease: Atherogenic and atheroprotective mechanisms<\/Title>          <SourceTitle>Nature Reviews. Cardiology<\/SourceTitle>          <PubMedTitle>Nat Rev Cardiol<\/PubMedTitle>          <Volume>8<\/Volume>          <Issue>4<\/Issue>          <Page>222<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Navab, M.<\/Author>            <Author>Reddy, S.T.<\/Author>            <Author>Van Lenten, B.J.<\/Author>            <Author>Fogelman, A.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2291785\" medline_id=\"24903227\">          <Title>CD36, a scavenger receptor implicated in atherosclerosis<\/Title>          <SourceTitle>Experimental and Molecular Medicine<\/SourceTitle>          <PubMedTitle>Exp Mol Med<\/PubMedTitle>          <Volume>46<\/Volume>          <Page>e99<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Park, Y.M.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1403\" modifiedDate=\"20150227013936\">      <Title>Paraoxonase as a Target<\/Title>      <Body>        <para>The paraoxonase (PON) gene cluster consists of three adjacent gene members (<I>PON1, PON2<\/I> and <I>PON3<\/I>) that, under physiological conditions, degrade metabolites of polyunsaturated fatty acids and homocysteine thiolactone and detoxify oxidized LDL (<REF id=\"2296877\">She, Z.G. et al., 2012<\/REF>; <REF id=\"2296878\">Abelló, D. et al., 2014<\/REF>). <\/para>        <para>There is considerable evidence to indicate that the antioxidant effects of HDL are largely attributable to the enzyme paraoxonase-1 (PON1) located on HDL. Studies in PON1-knockout mice suggest that the enzyme can protect against atherogenesis. Preliminary evidence from case-control studies of individuals bearing PON1 genetic polymorphisms indicates that low serum PON1 activity is associated with CHD, indicating that drugs or dietary methods of modifying serum PON1 activity may be useful in the treatment of atherosclerosis (<REF id=\"662391\">Durrington, P.N. et al., 2001<\/REF>; <REF id=\"1017660\">Kerkeni, M. et al., 2006<\/REF>). PON2 and PON3 are also believed to exert antioxidant effects, although fewer studies of their role have been conducted (<REF id=\"2296878\">Abelló, D. et al., 2014<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"662391\" medline_id=\"11304460\">          <Title>Paraoxonase and atherosclerosis<\/Title>          <SourceTitle>Arteriosclerosis, Thrombosis, and Vascular Biology<\/SourceTitle>          <PubMedTitle>Arterioscler Thromb Vasc Biol<\/PubMedTitle>          <Volume>21<\/Volume>          <Issue>4<\/Issue>          <Page>473<\/Page>          <Year>2001<\/Year>          <Authors>            <Author>Durrington, P.N.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1017660\" medline_id=\"16875684\">          <Title>Hyperhomocysteinemia, paraoxonase activity and risk of coronary artery disease<\/Title>          <SourceTitle>Clinical Biochemistry<\/SourceTitle>          <PubMedTitle>Clin Biochem<\/PubMedTitle>          <Volume>39<\/Volume>          <Issue>8<\/Issue>          <Page>821<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Kerkeni, M.<\/Author>            <Author>Addad, F.<\/Author>            <Author>Chauffert, M.<\/Author>            <Author>Chuniaud, L.<\/Author>            <Author>Miled, A.<\/Author>            <Author>Trivin, F.<\/Author>            <Author>Maaroufi, K.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2296877\" medline_id=\"21867409\">          <Title>The human paraoxonase gene cluster as a target in the treatment of atherosclerosis<\/Title>          <SourceTitle>Antioxidants &amp; Redox Signalling<\/SourceTitle>          <PubMedTitle>Antioxid Redox Signal<\/PubMedTitle>          <Volume>16<\/Volume>          <Issue>6<\/Issue>          <Page>597<\/Page>          <Year>2012<\/Year>          <Authors>            <Author>She, Z.G.<\/Author>            <Author>Chen, H.Z.<\/Author>            <Author>Yan, Y.<\/Author>            <Author>Li, H.<\/Author>            <Author>Liu, D.P.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2296878\" medline_id=\"25405733\">          <Title>Exploring the role of paraoxonases in the pathogenesis of coronary artery disease: A systematic review<\/Title>          <SourceTitle>International Journal of Molecular Sciences<\/SourceTitle>          <PubMedTitle>Int J Mol Sci<\/PubMedTitle>          <Volume>15<\/Volume>          <Issue>11<\/Issue>          <Page>20997<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Abelló, D.<\/Author>            <Author>Sancho, E.<\/Author>            <Author>Camps, J.<\/Author>            <Author>Joven, J.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1404\" modifiedDate=\"20150401075206\">      <Title>ABCA1 Expression Enhancers<\/Title>      <Body>        <para>Studies in the late 1990s established a role for the <I>ABCA1<\/I> gene (encoding for the protein ATP-binding cassette A1) in cholesterol metabolism. An earlier study showed that this gene is mutated in patients with Tangier disease, who have very low levels of HDL and in patients with hypoalphalipoproteinemia. Using BAC transgenic mice, <I>ABCA1<\/I> overexpression was shown to result in increased plasma HDL cholesterol levels, increased HDL cholesterol apoprotein levels and an increased cellular cholesterol efflux. Feeding the transgenic mice a cholesterol-rich diet further increased these parameters (<REF id=\"646078\">Singaraja, R.R. et al., 2001<\/REF>; <REF id=\"662262\">Rong, J.X. and Fisher, E.A., 2000<\/REF>).<\/para>        <para>          <I>ABCA1<\/I> is now known to be involved in the initial steps of reverse cholesterol transport, possibly by promoting the formation of apoA-I complexes with phospholipids and cholesterol at the plasma membrane (<REF id=\"1613381\">van der Velde, A.E., 2010<\/REF>). <I>ABCA1<\/I> expression enhancers have thus been proposed as potential agents for the treatment of dyslipidemia and atherosclerosis.<\/para>      <\/Body>      <References>        <Reference id=\"646078\" medline_id=\"11423537\">          <Title>Human ABCA1 BAC transgenic mice show increased high density lipoprotein cholesterol and ApoAI-dependent efflux stimulated by an internal promoter containing liver X receptor response elements in intron 1<\/Title>          <SourceTitle>Journal of Biological Chemistry<\/SourceTitle>          <PubMedTitle>J Biol Chem<\/PubMedTitle>          <Volume>276<\/Volume>          <Issue>36<\/Issue>          <Page>33969<\/Page>          <Year>2001<\/Year>          <Authors>            <Author>Singaraja, R.R.<\/Author>            <Author>Bocher, V.<\/Author>            <Author>James, E.R.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"662262\" medline_id=\"11209972\">          <Title>High-density lipoprotein: Gene-based approaches to the prevention of atherosclerosis<\/Title>          <SourceTitle>Annals of Medicine<\/SourceTitle>          <PubMedTitle>Ann Med<\/PubMedTitle>          <Volume>32<\/Volume>          <Issue>9<\/Issue>          <Page>642<\/Page>          <Year>2000<\/Year>          <Authors>            <Author>Rong, J.X.<\/Author>            <Author>Fisher, E.A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1613381\" medline_id=\"21157966\">          <Title>Reverse cholesterol transport: From classical view to new insights<\/Title>          <SourceTitle>World Journal of Gastroenterology<\/SourceTitle>          <PubMedTitle>World J Gastroenterol<\/PubMedTitle>          <Volume>16<\/Volume>          <Issue>47<\/Issue>          <Page>5908<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>van der Velde, A.E.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1414\" modifiedDate=\"20170124040449\">      <Title>Drugs Targeting Nuclear Hormone Receptors<\/Title>      <Body>        <para>The orphan nuclear hormone receptors liver X receptor (LXR) and farnesoid X receptor (FXR) have been identified as targets for future cholesterol-lowering compounds. In studies with receptor-selective agonists in mice, LXR was found to upregulate the expression of <I>ABCA1<\/I>, the mutation of which has been associated with an increased risk of heart disease (<REF id=\"1121740\">Fiorucci, S. et al., 2007<\/REF>; <REF id=\"1615920\">Singh, V. et al., 2010<\/REF>). FXR also regulates the synthesis, uptake and excretion of bile acids (<REF id=\"1615891\">Hageman, J. et al., 2010<\/REF>).<\/para>        <para>Liver X receptors alpha and beta (LXRalpha and LXRbeta) are master regulators of cholesterol homeostasis in the body, upregulating the expression of ABC transporters to promote cholesterol efflux via reverse cholesterol transport (<REF id=\"1525162\">Calkin, A.C. and Tontonoz, P., 2010<\/REF>; <REF id=\"2291784\">Hong, C. and Tontonoz, P., 2014<\/REF>). LXRs also regulate intermediary metabolism and energy balance, integrate metabolic and inflammatory signaling, and promote apoptotic cell clearance. LXRapha is expressed in tissues involved in lipid homeostasis in the liver, adipose tissue, kidney, adrenal tissue and macrophages, whereas LXRbeta is expressed ubiquitously; both receptors are equally effective in promoting reverse cholesterol transport from macrophages (<REF id=\"1525162\">Calkin, A.C. and Tontonoz, P., 2010<\/REF>). Improved efficacy and tolerability has been reported with newer-generation LXRbeta-selective agonists and with LXR modulators, which act as LXR agonists in macrophages and antagonists in liver (<REF id=\"1615894\">Zhu, Y. and Li, Y., 2009<\/REF>).<\/para>        <para>FXR was found to repress expression of cholesterol 7-hydroxylase (CYP7A1), decreasing bile acid synthesis and cholesterol absorption (<REF id=\"1615920\">Singh, V. et al., 2010<\/REF>). LXR and FXR are the retinoid X receptor (RXR) heterodimeric partners which can be activated by RXR agonists such as rexinoids, affecting cholesterol absorption, transport and catabolism. Both LXR agonists and FXR antagonists are considered promising candidates in the treatment and/or prevention of atherosclerosis (<REF id=\"900990\">Lehrke, M. et al., 2005<\/REF>; <REF id=\"1164359\">Rader, D.J., 2007<\/REF>; <REF id=\"2291784\">Hong, C. and Tontonoz, P., 2014<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"900990\" medline_id=\"16054077\">          <Title>Diet-dependent cardiovascular lipid metabolism controlled by hepatic LXRalpha<\/Title>          <SourceTitle>Cell Metabolism<\/SourceTitle>          <PubMedTitle>Cell Metab<\/PubMedTitle>          <Volume>1<\/Volume>          <Issue>5<\/Issue>          <Page>297<\/Page>          <Year>2005<\/Year>          <Authors>            <Author>Lehrke, M.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1121740\" medline_id=\"17588816\">          <Title>Targeting farnesoid X receptor for liver and metabolic disorders<\/Title>          <SourceTitle>Trends in Molecular Medicine<\/SourceTitle>          <PubMedTitle>Trends Mol Med<\/PubMedTitle>          <Volume>13<\/Volume>          <Issue>7<\/Issue>          <Page>298<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Fiorucci, S.<\/Author>            <Author>Rizzo, G.<\/Author>            <Author>Donini, A.<\/Author>            <Author>Distrutti, E.<\/Author>            <Author>Santucci, L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1164359\" medline_id=\"18047847\">          <Title>Liver x receptor and farnesoid x receptor as therapeutic targets<\/Title>          <SourceTitle>American Journal of Cardiology<\/SourceTitle>          <PubMedTitle>Am J Cardiol<\/PubMedTitle>          <Volume>100<\/Volume>          <Issue>11A<\/Issue>          <Page>S15<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Rader, D.J.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1525162\" medline_id=\"20631351\">          <Title>Liver x receptor signaling pathways and atherosclerosis<\/Title>          <SourceTitle>Arteriosclerosis, Thrombosis, and Vascular Biology<\/SourceTitle>          <PubMedTitle>Arterioscler Thromb Vasc Biol<\/PubMedTitle>          <Volume>30<\/Volume>          <Issue>8<\/Issue>          <Page>1513<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Calkin, A.C.<\/Author>            <Author>Tontonoz, P.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615891\" medline_id=\"20631352\">          <Title>A role of the bile salt receptor FXR in atherosclerosis<\/Title>          <SourceTitle>Arteriosclerosis, Thrombosis, and Vascular Biology<\/SourceTitle>          <PubMedTitle>Arterioscler Thromb Vasc Biol<\/PubMedTitle>          <Volume>30<\/Volume>          <Issue>8<\/Issue>          <Page>1519<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Hageman, J.<\/Author>            <Author>Herrema, H.<\/Author>            <Author> Groen, A.K.<\/Author>            <Author>Kuipers, F.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615894\" medline_id=\"19796580\">          <Title>Liver X receptors as potential therapeutic targets in atherosclerosis<\/Title>          <SourceTitle>Clinical and Investigative Medicine<\/SourceTitle>          <PubMedTitle>Clin Invest Med<\/PubMedTitle>          <Volume>32<\/Volume>          <Issue>5<\/Issue>          <Page>E383<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Zhu, Y.<\/Author>            <Author>Li, Y.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615920\" medline_id=\"21127701\">          <Title>Low high-density lipoprotein cholesterol: Current status and future strategies for management<\/Title>          <SourceTitle>Vascular Health and Risk Management<\/SourceTitle>          <PubMedTitle>Vasc Health Risk Manag<\/PubMedTitle>          <Volume>6<\/Volume>          <Page>979<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Singh, V.<\/Author>            <Author>Sharma, R.<\/Author>            <Author>Kumar, A.<\/Author>            <Author>Deedwania, P.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2291784\" medline_id=\"24833295\">          <Title>Liver X receptors in lipid metabolism: Opportunities for drug discovery<\/Title>          <SourceTitle>Nature Reviews Drug Discovery<\/SourceTitle>          <PubMedTitle>Nat Rev Drug Discov<\/PubMedTitle>          <Volume>13<\/Volume>          <Issue>6<\/Issue>          <Page>433<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Hong, C.<\/Author>            <Author>Tontonoz, P.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>  <\/Section>  <Section sectionId=\"1405\" modifiedDate=\"20150212013453\">    <Title>Antiinflammatory Strategies<\/Title>    <Body>      <para>Atherosclerosis, long held to be a straightforward disorder of lipoprotein metabolism, is now known to be a much more complex, chronic inflammatory disease affecting the arterial intima (<REF id=\"1619027\">Mizuno, Y. et al., 2011<\/REF>; <REF id=\"2290579\">Linden, F. et al., 2014<\/REF>). Inflammation contributes to all stages of the disease, driving the formation, progression and rupture of atherosclerotic plaques (<REF id=\"1619022\">Libby, P. et al., 2010<\/REF>).<\/para>      <para>According to the inflammatory disease theory, the atherosclerotic process is initiated when low density lipoproteins (LDL) accumulate in the arterial intima and undergo chemical modification. This event stimulates local inflammation in the blood vessel wall, attracting monocytes from the circulation. The modified LDL are taken up by scavenger receptors expressed on monocyte-derived macrophages. The resulting fat-laden macrophages, or foam cells, localize in the vessel wall at the site of the early fatty streak lesion and intensify the inflammatory response, forming an intermediate lesion. If the inflammatory response is not interrupted, the arterial wall thickens and undergoes a process of remodeling. As inflammation continues, increased numbers of macrophages and T lymphocytes emigrate from the blood to the lesion, where they multiply and become activated. This stimulates the release of hydrolytic enzymes, cytokines, chemokines and growth factors. Each of these inflammatory elements contributes to further damage and focal necrosis, resulting in the accumulation of fibrous tissue that forms an advanced lesion. The process is repeated in a cyclical fashion until the artery can no longer dilate far enough to compensate for blockage, or until the fibrous cap fractures, causing the plaque to rupture (<REF id=\"1619027\">Mizuno, Y. et al., 2011<\/REF>; <REF id=\"1613391\">Galkina, E. and Ley, K., 2009<\/REF>; <REF id=\"1619022\">Libby, P. et al., 2010<\/REF>). <\/para>      <para>This theory is further supported by the fact that many of the known risk factors for atherosclerosis (i.e., obesity, hypertension) are also proinflammatory (<REF id=\"1619022\">Libby, P. et al., 2010<\/REF>).<\/para>      <para>The theory that persistent bacterial infections or acute viral infections can instigate or complicate an immunoinflammatory response leading to atherosclerosis is attaining increased acceptance and support (<REF id=\"2290585\">Rafieian-Kopaei, M. et al., 2014<\/REF>). <\/para>      <para>        <I>C. pneumoniae<\/I> and herpesvirus organisms have been identified in atheromatous lesions during postmortem analysis of human subjects, and animal studies have shown that atherosclerotic plaque can be induced through injection of these pathogens. A prospective, population-based study has confirmed that the incidence of carotid atherosclerosis was much higher among subjects who had been affected by chronic respiratory, urinary tract, dental or other infections. It is highly likely that infectious pathogens act in combination with other atherogenic factors to produce, complicate or destabilize lesions in some patients (<REF id=\"662266\">Ross, R., 1999<\/REF>; <REF id=\"662384\">Mayr, M. et al., 2000<\/REF>; <REF id=\"662381\">Kiechl, S. et al., 2001<\/REF>).<\/para>      <para>In other patients, the inherent nature of the blood vessels may make them vulnerable to inflammatory insult. Natural bifurcations, branches and curvatures of the arteries may slow or alter the flow of blood, leading to the accumulation of adhesion molecules that attract monocytes, T cells and other inflammatory molecules and forming early lesions (fatty streaks) (<REF id=\"662266\">Ross, R., 1999<\/REF>).<\/para>      <para>Platelets have also been found to contribute to the processes of inflammation, thrombosis and atherogenesis (<REF id=\"2290583\">Gros, A. et al., 2014<\/REF>; <REF id=\"2290570\">von Hundelshausen, P. and Schmitt, M.M., 2014<\/REF>). Platelet attachment to the arterial wall appears to be mediated by adhesion receptors expressed on the surface of endothelial cells in response to inflammatory stimuli. Platelet aggregation triggers the release of various soluble immune mediators, including chemokines and growth factors, propagating chronic inflammatory processes in the arterial wall (<REF id=\"949418\">Gawaz, M. et al., 2005<\/REF>; <REF id=\"2290570\">von Hundelshausen, P. and Schmitt, M.M., 2014<\/REF>). Platelets also promote endothelial permeability under inflammatory conditions, influence the recruitment of neutrophils and macrophages and regulate their effector functions (<REF id=\"2290583\">Gros, A. et al., 2014<\/REF>).<\/para>      <para>Regardless of the underlying cause of inflammation, reversal or inhibition of the harmful inflammatory processes leading to atherosclerosis, while leaving protective inflammatory responses intact, is the subject of increasing attention from researchers (<REF id=\"1010018\">Stoll, G. and Bendszus, M., 2006<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"662266\" medline_id=\"9887164\">        <Title>Atherosclerosis-an inflammatory disease<\/Title>        <SourceTitle>New England Journal of Medicine<\/SourceTitle>        <PubMedTitle>N Engl J Med<\/PubMedTitle>        <Volume>340<\/Volume>        <Issue>2<\/Issue>        <Page>115<\/Page>        <Year>1999<\/Year>        <Authors>          <Author>Ross, R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"662381\" medline_id=\"11222467\">        <Title>Chronic infections and the risk of carotid atherosclerosis: Prospective results from a large population study<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>103<\/Volume>        <Issue>8<\/Issue>        <Page>1064<\/Page>        <Year>2001<\/Year>        <Authors>          <Author>Kiechl, S.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"662384\" medline_id=\"10952949\">        <Title>Infections, immunity, and atherosclerosis: Associations of antibodies to Chlamydia pneumoniae, helicobacter pylori, and cytomegalovirus with immune reactions to heat-shock protein 60 and carotid or femoral atherosclerosis<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>102<\/Volume>        <Issue>8<\/Issue>        <Page>833<\/Page>        <Year>2000<\/Year>        <Authors>          <Author>Mayr, M.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"949418\" medline_id=\"16322783\">        <Title>Platelets in inflammation and atherogenesis<\/Title>        <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>        <PubMedTitle>J Clin Invest<\/PubMedTitle>        <Volume>115<\/Volume>        <Issue>12<\/Issue>        <Page>3378<\/Page>        <Year>2005<\/Year>        <Authors>          <Author>Gawaz, M.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1010018\" medline_id=\"16741184\">        <Title>Inflammation and atherosclerosis: Novel insights into plaque formation and destabilization<\/Title>        <SourceTitle>Stroke<\/SourceTitle>        <PubMedTitle>Stroke<\/PubMedTitle>        <Volume>37<\/Volume>        <Issue>7<\/Issue>        <Page>1923<\/Page>        <Year>2006<\/Year>        <Authors>          <Author>Stoll, G.<\/Author>          <Author>Bendszus, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1613391\" medline_id=\"19302038\">        <Title>Immune and inflammatory mechanisms of atherosclerosis<\/Title>        <SourceTitle>Annual Review of Immunology<\/SourceTitle>        <PubMedTitle>Annu Rev Immunol<\/PubMedTitle>        <Volume>27<\/Volume>        <Page>165<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Galkina, E.<\/Author>          <Author>Ley, K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1619022\" medline_id=\"20065609\">        <Title>Inflammation in atherosclerosis: Transition from theory to practice<\/Title>        <SourceTitle>Circulation Journal<\/SourceTitle>        <PubMedTitle>Circ J<\/PubMedTitle>        <Volume>74<\/Volume>        <Issue>2<\/Issue>        <Page>213<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Libby, P.<\/Author>          <Author>Okamoto, Y.<\/Author>          <Author>Rocha, V.Z.<\/Author>          <Author>Folco, E.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1619027\" medline_id=\"21427505\">        <Title>Inflammation and the development of atherosclerosis: Effects of lipid-lowering therapy<\/Title>        <SourceTitle>Journal of Atheroscleoris and Thrombosis<\/SourceTitle>        <PubMedTitle>J Atheroscler Thromb<\/PubMedTitle>        <Volume>18<\/Volume>        <Issue>5<\/Issue>        <Page>351<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Mizuno, Y.<\/Author>          <Author>Jacob, R.F.<\/Author>          <Author>Mason, R.P.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290570\" medline_id=\"25152735\">        <Title>Platelets and their chemokines in atherosclerosis-clinical applications<\/Title>        <SourceTitle>Frontiers in Physiology<\/SourceTitle>        <PubMedTitle>Front Physiol<\/PubMedTitle>        <Volume>5<\/Volume>        <Page>294<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>von Hundelshausen, P.<\/Author>          <Author>Schmitt, M.M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290579\" medline_id=\"25484870\">        <Title>Inflammatory therapeutic targets in coronary atherosclerosis-from molecular biology to clinical application<\/Title>        <SourceTitle>Frontiers in Physiology<\/SourceTitle>        <PubMedTitle>Front Physiol<\/PubMedTitle>        <Volume>5<\/Volume>        <Page>455<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Linden, F.<\/Author>          <Author>Domschke, G.<\/Author>          <Author>Erbel, C.<\/Author>          <Author>Akhavanpoor, M.<\/Author>          <Author>Katus, H.A.<\/Author>          <Author>Gleissner, C.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290583\" medline_id=\"25610439\">        <Title>Platelets in inflammation: Regulation of leukocyte activities and vascular repair<\/Title>        <SourceTitle>Frontiers in Immunology<\/SourceTitle>        <PubMedTitle>Front Immunol<\/PubMedTitle>        <Volume>5<\/Volume>        <Page>678<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Gros, A.<\/Author>          <Author>Ollivier, V.<\/Author>          <Author>Ho-Tin-Noé, B.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290585\" medline_id=\"25489440\">        <Title>Atherosclerosis: Process, indicators, risk factors and new hopes<\/Title>        <SourceTitle>International Journal of Preventive Medicine<\/SourceTitle>        <PubMedTitle>Int J Prev Med<\/PubMedTitle>        <Volume>5<\/Volume>        <Issue>8<\/Issue>        <Page>927<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Rafieian-Kopaei, M.<\/Author>          <Author>Setorki, M.<\/Author>          <Author>Doudi, M.<\/Author>          <Author>Baradaran, A.<\/Author>          <Author>Nasri, H.<\/Author>        <\/Authors>      <\/Reference>    <\/References>    <Section sectionId=\"1406\" modifiedDate=\"20110429111627\">      <Title>Statins<\/Title>      <Body>        <para>Among the many pleiotropic effects of HMG-CoA reductase inhibitors (statins) contributing to their efficacy in treating atherosclerosis, their antiinflammatory activity is now recognized to be significant (<REF id=\"1619027\">Mizuno, Y. et al., 2011<\/REF>). An early study compared the effects of simvastatin, pravastatin and atorvastatin on levels of C-reactive protein (CRP), a marker of arterial inflammation, in hyperlipidemic patients and shown that all three statins significantly reduce levels of high-sensitive CRP (hsCRP) to a similar extent (<REF id=\"616861\">Jialal, I. et al., 2001<\/REF>). Subsequent studies have shown that the CRP-lowering effects of individual statins are directly related to their potency (<REF id=\"623753\">Ridker, P.M. et al., 2001<\/REF>; <REF id=\"1619027\">Mizuno, Y. et al., 2011<\/REF>). Statins also possess multifaceted antioxidant effects, as seen by their ability to block the production and activity of reactive oxygen species, increase nitric oxide bioavailability by inhibiting nitric oxide synthase, upregulate antioxidant enzyme activities, inhibit the oxidation of LDL cholesterol and act as free radical scavengers (<REF id=\"1619027\">Mizuno, Y. et al., 2011<\/REF>).<\/para>        <para>A posthoc analysis of data from the AFCAPS/TExCAPS study showed that patients with normal LDL cholesterol levels but elevated CRP levels also benefitted from treatment with lovastatin (<REF id=\"623753\">Ridker, P.M. et al., 2001<\/REF>). Based on this information, the prospective JUPITER (Justification for the Use of statins in Prevention: an Intervention Trial Evaluating Rosuvastatin) study was designed to confirm these findings in a larger patient population. JUPITER was a long-term, randomised, double-blind, placebo-controlled, large-scale study of 17,802 patients designed to determine if rosuvastatin (20 mg) decreased the risk of heart attack, stroke and other cardiovascular events in patients with low to normal LDL-C (&lt;3.4 mmol/L) but at increased cardiovascular risk as identified by age and elevated high-sensitivity C-reactive protein (hsCRP &gt;19.0 nmol/L). The majority of patients had at least one other risk factor including hypertension, low HDL-C, family history of premature coronary heart disease or smoking. The primary endpoint was the occurrence of a major cardiovascular event (myocardial infaction, nonfatal stroke, hospitalization for unstable angina or arterial revascularization procedure) or cardiovascular death. JUPITER was stopped almost two years sooner than planned by the Data Safety Monitoring Board due to meeting pre-defined stopping rules for efficacy; at that point, 142 major cardiovascular events had been registered in the rosuvastatin treatment group, as compared to 251 in the placebo group, representing a 44% reduction in the cumulative incidence of CV events with the statin (<REF id=\"1619022\">Libby, P. et al., 2010<\/REF>). The drug significantly reduced the respective risks for heart attack, stroke and arterial revascularization by 54%, 48% and 46%, compared with placebo. Primarily on the basis of these results, the FDA and EMA subsequently granted supplementary marketing approval for rosuvastatin to reduce the risk of stroke, myocardial infarction and arterial revascularization procedures in individuals without clinically evident coronary heart disease but with an increased risk of cardiovascular disease based on age (men aged &gt;= 50 years and women aged &gt;= 60 years), high-sensitivity C-reactive protein &gt;= 2 mg/L and the presence of at least one additional cardiovascular disease risk factor (e.g., hypertension, low HDL-cholesterol, smoking or a family history of premature coronary heart disease). Also on the basis of JUPITER study results, use of hsCRP as a risk marker for CV disease has been recommended (<REF id=\"1615901\">Abd, T.T. et al., 2011<\/REF>; <REF id=\"1615950\">Kones, R., 2010<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"616861\" medline_id=\"11306519\">          <Title>Effect of hydroxymethyl glutaryl coenzyme A reductase inhibitor therapy on high sensitive C-reactive protein levels<\/Title>          <SourceTitle>Circulation<\/SourceTitle>          <PubMedTitle>Circulation<\/PubMedTitle>          <Volume>103<\/Volume>          <Issue>14<\/Issue>          <Page>1933<\/Page>          <Year>2001<\/Year>          <Authors>            <Author>Jialal, I.<\/Author>            <Author>Stein, D.<\/Author>            <Author>Balis, D.<\/Author>            <Author>Grundy, S.M.<\/Author>            <Author>Adams-Huet, B.<\/Author>            <Author>Devaraj, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"623753\" medline_id=\"11430324\">          <Title>Measurement of C-reactive protein for the targeting of statin therapy in the primary prevention of acute coronary events<\/Title>          <SourceTitle>New England Journal of Medicine<\/SourceTitle>          <PubMedTitle>N Engl J Med<\/PubMedTitle>          <Volume>344<\/Volume>          <Issue>26<\/Issue>          <Page>1959<\/Page>          <Year>2001<\/Year>          <Authors>            <Author>Ridker, P.M.<\/Author>            <Author>et al.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615901\" medline_id=\"21274757\">          <Title>The role of C-reactive protein as a risk predictor of coronary atherosclerosis: Implications from the JUPITER trial<\/Title>          <SourceTitle>Current Atherosclerosis Reports<\/SourceTitle>          <PubMedTitle>Curr Atheroscler Rep<\/PubMedTitle>          <Volume>13<\/Volume>          <Issue>2<\/Issue>          <Page>154<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Abd, T.T.<\/Author>            <Author>Eapen, D.J.<\/Author>            <Author>Bajpai, A.<\/Author>            <Author>Goyal, A.<\/Author>            <Author>Dollar, A.<\/Author>            <Author>Sperling, L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615950\" medline_id=\"21267417\">          <Title>Rosuvastatin, inflammation, C-reactive protein, JUPITER, and primary prevention of cardiovascular disease - A perspective<\/Title>          <SourceTitle>Drug Design, Development and Therapy<\/SourceTitle>          <PubMedTitle>Drug Des Devel Ther<\/PubMedTitle>          <Volume>4<\/Volume>          <Page>383<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Kones, R.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1619022\" medline_id=\"20065609\">          <Title>Inflammation in atherosclerosis: Transition from theory to practice<\/Title>          <SourceTitle>Circulation Journal<\/SourceTitle>          <PubMedTitle>Circ J<\/PubMedTitle>          <Volume>74<\/Volume>          <Issue>2<\/Issue>          <Page>213<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Libby, P.<\/Author>            <Author>Okamoto, Y.<\/Author>            <Author>Rocha, V.Z.<\/Author>            <Author>Folco, E.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1619027\" medline_id=\"21427505\">          <Title>Inflammation and the development of atherosclerosis: Effects of lipid-lowering therapy<\/Title>          <SourceTitle>Journal of Atheroscleoris and Thrombosis<\/SourceTitle>          <PubMedTitle>J Atheroscler Thromb<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>5<\/Issue>          <Page>351<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Mizuno, Y.<\/Author>            <Author>Jacob, R.F.<\/Author>            <Author>Mason, R.P.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1409\" modifiedDate=\"20150212010729\">      <Title>Antioxidants<\/Title>      <Body>        <para>Several major pro-atherogenic factors (advanced age, hypercholesterolemia, hypertension, smoking and diabetes) are known to induce the production of free radicals and other reactive oxygen species in vascular cells. The resulting oxidative stress both generates and is generated by inflammation, resulting in a self-propagating cycle that contributes significantly to the complications of the underlying diseases. Interrupting this process through the administration of antioxidants thus appears to represent an attractive approach to the treatment of atherosclerosis (<REF id=\"1616256\">Vogiatzi, G. et al., 2009<\/REF>; <REF id=\"2290586\">Bar-Or, D. et al., 2015<\/REF>). Various animal studies have confirmed that reactive oxygen species contribute to processes of vascular inflammation, atherogenesis and atherosclerosis (<REF id=\"1613387\">Lakshmi, S.V. et al., 2009<\/REF>).<\/para>        <para>In the patient with cardiovascular disease, excessive generation of superoxide or, alternatively, decreased inactivation by superoxide dismutase, results in abnormally high levels of superoxide in the heart and blood vessels, leading to inactivation of nitric oxide and contributing to endothelial dysfunction. In spite of the solidity of this theory, however, little success has been reported to date in studies evaluating the efficacy of antioxidants such as beta-carotene, vitamin E, niacin or alpha-tocopherol/vitamin C for cardiovascular risk reduction (<REF id=\"1365436\">Heistad, D.D. et al., 2009<\/REF>; <REF id=\"1616256\">Vogiatzi, G. et al., 2009<\/REF>; <REF id=\"2290579\">Linden, F. et al., 2014<\/REF>). Nonetheless, antioxidants continue to be evaluated for the treatment and/or prevention of atherosclerosis and hyperlipidemia, as indicated in the following table. <COMPETITIVE id=\"943\">            <TABLE>              <TR>                <TD>Antioxidants in development for the treatment of atherosclerosis<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=474661&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">(+)-Antroquinonol<\/a>                <\/TD>                <TD>Golden Biotech<\/TD>                <TD>Antioxidants<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=329529&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">4-Guanidino-n-butyl syringate<\/a>                <\/TD>                <TD>Zhongzhu Healthcare Holding<\/TD>                <TD>Antioxidants/ Apoptosis Inhibitors<\/TD>                <TD>IND Filed<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=402619&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CDX-085<\/a>                <\/TD>                <TD>Cardax<\/TD>                <TD>Antioxidants<\/TD>                <TD>Preclinical<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"1365436\" medline_id=\"19110503\">          <Title>Novel aspects of oxidative stress in cardiovascular diseases<\/Title>          <SourceTitle>Circulation Journal<\/SourceTitle>          <PubMedTitle>Circ J<\/PubMedTitle>          <Volume>73<\/Volume>          <Issue>2<\/Issue>          <Page>201<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Heistad, D.D.<\/Author>            <Author>Wakisaka, Y.<\/Author>            <Author>Miller, J.<\/Author>            <Author>Chu, Y.<\/Author>            <Author>Pena-Silva, R.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1613387\" medline_id=\"20361706\">          <Title>Oxidative stress in cardiovascular disease<\/Title>          <SourceTitle>Indian Journal of Biochemistry &amp; Biophysics<\/SourceTitle>          <PubMedTitle>Indian J Biochem Biophys<\/PubMedTitle>          <Volume>46<\/Volume>          <Issue>6<\/Issue>          <Page>421<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Lakshmi, S.V.<\/Author>            <Author>Padmaja, G.<\/Author>            <Author>Kuppusamy, P.<\/Author>            <Author>Kutala, V.K.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1616256\" medline_id=\"19767282\">          <Title>The role of oxidative stress in atherosclerosis<\/Title>          <SourceTitle>HJC Hellenic Journal of Cardiology<\/SourceTitle>          <PubMedTitle>Hellenic J Cardiol<\/PubMedTitle>          <Volume>50<\/Volume>          <Issue>5<\/Issue>          <Page>402<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Vogiatzi, G.<\/Author>            <Author>Tousoulis, D.<\/Author>            <Author>Stefanadis, C.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290579\" medline_id=\"25484870\">          <Title>Inflammatory therapeutic targets in coronary atherosclerosis-from molecular biology to clinical application<\/Title>          <SourceTitle>Frontiers in Physiology<\/SourceTitle>          <PubMedTitle>Front Physiol<\/PubMedTitle>          <Volume>5<\/Volume>          <Page>455<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Linden, F.<\/Author>            <Author>Domschke, G.<\/Author>            <Author>Erbel, C.<\/Author>            <Author>Akhavanpoor, M.<\/Author>            <Author>Katus, H.A.<\/Author>            <Author>Gleissner, C.A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290586\" medline_id=\"25644686\">          <Title>Oxidative stress in severe acute illness<\/Title>          <SourceTitle>Redox Biology<\/SourceTitle>          <PubMedTitle>Redox Biol<\/PubMedTitle>          <Volume>4C<\/Volume>          <Page>340<\/Page>          <Year>2015<\/Year>          <Authors>            <Author>Bar-Or, D.<\/Author>            <Author>Bar-Or, R.<\/Author>            <Author>Rael, L.T.<\/Author>            <Author>Brody, E.N.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"2932\" modifiedDate=\"20150212013930\">      <Title>Chemokine-Targeting Compounds<\/Title>      <Body>        <para>Chemokines (chemotactic cytokines) are a class of small heparin-binding, proinflammatory polypeptides that attract circulating leukocytes to areas of developing inflammation or injury (<REF id=\"1017658\">Sheikine, Y. and Hansson, G.K., 2004<\/REF>; <REF id=\"1347855\">Aukrust, P. et al., 2008<\/REF>). <\/para>        <para>Several chemokines and chemokine receptors, including CXCL12 and its receptors CXCR4 and CXCR7 (<REF id=\"2290582\">Weber, C. et al., 2015<\/REF>), monocyte chemoattractant protein (MCP-1),  IL-8, interferon (INF)-gamma-inducible 10 (IP-10/CXCL10), RANTES and leukotactin-1 (Lkn-1/CCL15, have been found implicated in the processes of inflammation and platelet activation/adhesion contributing to atherosclerosis progression and plaque destabilization (<REF id=\"1347855\">Aukrust, P. et al., 2008<\/REF>). Support is growing for the hypothesis that chemokine inhibition, modulation of chemokine receptor expression or interference in signaling processes may be an effective strategy for the treatment of atherosclerosis (<REF id=\"1017658\">Sheikine, Y. and Hansson, G.K., 2004<\/REF>), although further studies are needed to identify the most important pathways, and hence the most effective targets within this class (<REF id=\"1017657\">Bursill, C.A. et al., 2004<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"1017657\" medline_id=\"15017357\">          <Title>The role of chemokines in atherosclerosis: Recent evidence from experimental models and population genetics<\/Title>          <SourceTitle>Current Opinion in Lipidology<\/SourceTitle>          <PubMedTitle>Curr Opin Lipidol<\/PubMedTitle>          <Volume>15<\/Volume>          <Issue>2<\/Issue>          <Page>145<\/Page>          <Year>2004<\/Year>          <Authors>            <Author>Bursill, C.A.<\/Author>            <Author>Channon, K.M.<\/Author>            <Author>Greaves, D.R.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1017658\" medline_id=\"15119830\">          <Title>Chemokines and atherosclerosis<\/Title>          <SourceTitle>Annals of Medicine<\/SourceTitle>          <PubMedTitle>Ann Med<\/PubMedTitle>          <Volume>36<\/Volume>          <Issue>2<\/Issue>          <Page>98<\/Page>          <Year>2004<\/Year>          <Authors>            <Author>Sheikine, Y.<\/Author>            <Author>Hansson, G.K.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1347855\" medline_id=\"18669888\">          <Title>Chemokines and cardiovascular risk<\/Title>          <SourceTitle>Arteriosclerosis, Thrombosis, and Vascular Biology<\/SourceTitle>          <PubMedTitle>Arterioscler Thromb Vasc Biol<\/PubMedTitle>          <Volume>28<\/Volume>          <Issue>11<\/Issue>          <Page>1909<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Aukrust, P.<\/Author>            <Author>Halvorsen, B.<\/Author>            <Author>Yndestad, A.<\/Author>            <Author>Ueland, T.<\/Author>            <Author>Oeie, E.<\/Author>            <Author>Otterdal, K.<\/Author>            <Author>Gullestad, L.<\/Author>            <Author>Damas, J.K.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290582\" medline_id=\"25586789\">          <Title>Potential cell-specific functions of CXCR4 in atherosclerosis<\/Title>          <SourceTitle>Hämostaseologie<\/SourceTitle>          <PubMedTitle>Hamostaseologie<\/PubMedTitle>          <Volume>35<\/Volume>          <Issue>2<\/Issue>          <Page>1<\/Page>          <Year>2015<\/Year>          <Authors>            <Author>Weber, C.<\/Author>            <Author>Döring, Y.<\/Author>            <Author>Noels, H.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1410\" modifiedDate=\"20150219125717\">      <Title>Phospholipase A2 Inhibitors<\/Title>      <Body>        <para>Lipoprotein-associated phospholipase A2 (EC 3.1.1.47; Lp-PLA2, previously known as platelet activating factor acetylhydrolase or PAF-AH) has been identified as one of the few inflammatory mediators of atherosclerosis meeting the criteria of participation in several critical stages of atherogenesis. Lp-PLA2 is implicated in the oxidation of LDL and in fact remains latent until LDL undergoes oxidative damage. It is also involved in the infiltration and accumulation of inflammatory cells and modulation of the inflammatory response to infection. Lp-PLA2 appears to constitute an important link between lipid homeostasis and the vascular inflammatory response (<REF id=\"1613382\">Wilensky, R.L. and Macphee, C.H., 2009<\/REF>), and the selective Lp-PLA2 inhibition may slow the progressive development of the necrotic core and destruction of smooth muscle cells and fibrous tissue, thereby preventing plaque instability (<REF id=\"1615922\">Chauffe, R.J. et al., 2010<\/REF>; <REF id=\"1945349\">Dennis, E.A. et al., 2011<\/REF>). More recently, phospholipase enzymes have emerged as key regulators of lipid droplet biogenesis and homeostasis (<REF id=\"2290578\">Guijas, C. et al., 2014<\/REF>).<\/para>        <para>Following a nested case-control analysis of subjects participating in the WOSCOPS trial, Lp-PLA2 levels were shown to constitute a potent and independent predictor of clinical events that are not associated with C-reactive protein, white blood cell count,  fibrinogen or standard lipid parameters. These findings were confirmed in the MONICA and Rotterdam studies, validating Lp-PLA2 as a therapeutic target for atherosclerosis and cardiovascular disease (<REF id=\"1130504\">Sudhir, K., 2006<\/REF>; <REF id=\"1130196\">Tsimikas, S. et al., 2007<\/REF>). The findings obtained in a preliminary study in hyperlipidemic rabbits, in which the administration of a potent and selective Lp-PLA2 inhibitor was shown to slow disease progression, further supported this theory (<REF id=\"662373\">Macphee, C.H., 2001<\/REF>) and formed the basis for clinical testing. In one such multicenter, randomized, double-blind, placebo-controlled trial, the selective Lp-PLA2 inhibitor darapladib was evaluated in 959 patients with coronary heart disease (CHD) or CHD equivalent, who received the agent or placebo, both in addition to atorvastatin, for 12 weeks. At the end of the treatment period, subjects administered darapladib (40, 80 or 160 mg) showed sustained inhibition of Lp-PLA2 activity as well as reductions in IL-6 and hsCRP as compared to placebo. Further clinical studies have been initiated to confirm the favorable effects of Lp-PLA2 inhibition on cardiovascular events (<REF id=\"1213597\">Mohler, E.R. 3rd. et al., 2008<\/REF>; <REF id=\"2290579\">Linden, F. et al., 2014<\/REF>), although this hypothesis has already been validated in a large-animal model (<REF id=\"1309800\">Wilensky, R.L. et al., 2008<\/REF>).<\/para>        <para>Secretory phospholipase A2 (sPLA2) enzymes, which are produced and secreted in blood vessels and hepatocytes, are activated during inflammation and hence also play a role in the development of atherosclerotic vascular disease. The potential lipid-lowering efficacy of sPLA2 inhibitors has been evaluated in clinical trials (<REF id=\"1945348\">Rosenson, R.S., 2010<\/REF>; <REF id=\"1945349\">Dennis, E.A. et al., 2011<\/REF>; <REF id=\"2291786\">Quach, N.D. et al., 2014<\/REF>).<\/para>        <para>Phospholipase A2 inhibitors, including both selective Lp-PLA2 inhibitors and sPLA2 inhibitors, in preclinical and clinical testing are shown in the table below. In addition to these compounds, other classes of lipid-lowering agents such as statins may also act via PLA2 inhibition (<REF id=\"1615897\">Braun, L.T. and Davidson, M.H., 2010<\/REF>).<COMPETITIVE id=\"1208\"/>        <\/para>      <\/Body>      <References>        <Reference id=\"662373\" medline_id=\"11714085\">          <Title>Lipoprotein-associated phospholipase A2: A potential new risk factor for coronary artery disease and a therapeutic target<\/Title>          <SourceTitle>Current Opinion in Pharmacology<\/SourceTitle>          <PubMedTitle>Curr Opin Pharmacol<\/PubMedTitle>          <Volume>1<\/Volume>          <Issue>2<\/Issue>          <Page>121<\/Page>          <Year>2001<\/Year>          <Authors>            <Author>Macphee, C.H.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1130196\" medline_id=\"17626905\">          <Title>New insights into the role of lipoprotein(a)-associated lipoprotein-associated phospholipase A2 in atherosclerosis and cardiovascular disease<\/Title>          <SourceTitle>Arteriosclerosis, Thrombosis, and Vascular Biology<\/SourceTitle>          <PubMedTitle>Arterioscler Thromb Vasc Biol<\/PubMedTitle>          <Volume>27<\/Volume>          <Issue>10<\/Issue>          <Page>2094<\/Page>          <Year>2007<\/Year>          <Authors>            <Author>Tsimikas, S.<\/Author>            <Author>Tsironis, L.D.<\/Author>            <Author>Tselepis, A.D.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1130504\" medline_id=\"17319459\">          <Title>Lipoprotein-associated phospholipase A2, vascular inflammation and cardiovascular risk prediction<\/Title>          <SourceTitle>Vascular Health and Risk Management<\/SourceTitle>          <PubMedTitle>Vasc Health Risk Manag<\/PubMedTitle>          <Volume>2<\/Volume>          <Issue>2<\/Issue>          <Page>153<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Sudhir, K.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1213597\" medline_id=\"18436114\">          <Title>The effect of darapladib on plasma lipoprotein-associated phospholipase A2 activity and cardiovascular biomarkers in patients with stable coronary heart disease or coronary heart disease risk equivalent: The results of a multicenter, randomized, double-blind, placebo-controlled study<\/Title>          <SourceTitle>Journal of the American College of Cardiology<\/SourceTitle>          <PubMedTitle>J Am Coll Cardiol<\/PubMedTitle>          <Volume>51<\/Volume>          <Issue>17<\/Issue>          <Page>1632<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Mohler, E.R. 3rd.<\/Author>            <Author>Ballantyne, C.M.<\/Author>            <Author>Davidson, M.H.<\/Author>            <Author>Hanefeld, M.<\/Author>            <Author>Ruilope, L.M.<\/Author>            <Author>Johnson, J.L.<\/Author>            <Author>Zalewski, A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1309800\" medline_id=\"18806801\">          <Title>Inhibition of lipoprotein-associated phospholipase A2 reduces complex coronary atherosclerotic plaque development<\/Title>          <SourceTitle>Nature Medicine<\/SourceTitle>          <PubMedTitle>Nat Med<\/PubMedTitle>          <Volume>14<\/Volume>          <Issue>10<\/Issue>          <Page>1059<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Wilensky, R.L.<\/Author>            <Author>Shi, Y.<\/Author>            <Author>Mohler, E.R. 3rd.<\/Author>            <Author>Hamamdzic, D.<\/Author>            <Author>Burgert, M.E.<\/Author>            <Author>Li, J.<\/Author>            <Author>Postle, A.<\/Author>            <Author>Fenning, R.S.<\/Author>            <Author>Bollinger, J.G.<\/Author>            <Author>Hoffman, B.E.<\/Author>            <Author>Pelchovitz, D.J.<\/Author>            <Author>Yang, J.<\/Author>            <Author>Mirabile, R.C.<\/Author>            <Author>Webb, C.L.<\/Author>            <Author>Zhang, L.<\/Author>            <Author>Zhang, P.<\/Author>            <Author>Gelb, M.H.<\/Author>            <Author>Walker, M.C.<\/Author>            <Author>Zalewski, A.<\/Author>            <Author>Macphee, C.H.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1613382\" medline_id=\"19667981\">          <Title>Lipoprotein-associated phospholipase A(2) and atherosclerosis<\/Title>          <SourceTitle>Current Opinion in Lipidology<\/SourceTitle>          <PubMedTitle>Curr Opin Lipidol<\/PubMedTitle>          <Volume>20<\/Volume>          <Issue>5<\/Issue>          <Page>415<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Wilensky, R.L.<\/Author>            <Author>Macphee, C.H.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615897\" medline_id=\"20425268\">          <Title>Lp-PLA2: A new target for statin therapy<\/Title>          <SourceTitle>Current Atherosclerosis Reports<\/SourceTitle>          <PubMedTitle>Curr Atheroscler Rep<\/PubMedTitle>          <Volume>12<\/Volume>          <Issue>1<\/Issue>          <Page>29<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Braun, L.T.<\/Author>            <Author>Davidson, M.H.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615922\" medline_id=\"20425270\">          <Title>Recent developments with lipoprotein-associated phospholipase A2 inhibitors<\/Title>          <SourceTitle>Current Atherosclerosis Reports<\/SourceTitle>          <PubMedTitle>Curr Atheroscler Rep<\/PubMedTitle>          <Volume>12<\/Volume>          <Issue>1<\/Issue>          <Page>43<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Chauffe, R.J.<\/Author>            <Author>Wilensky, R.L.<\/Author>            <Author>Mohler, E.R. III.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1945348\" medline_id=\"20739882\">          <Title>Phospholipase A2 inhibition and atherosclerotic vascular disease: Prospects for targeting secretory and lipoprotein-associated phospholipase A2 enzymes<\/Title>          <SourceTitle>Current Opinion in Lipidology<\/SourceTitle>          <PubMedTitle>Curr Opin Lipidol<\/PubMedTitle>          <Volume>21<\/Volume>          <Issue>6<\/Issue>          <Page>473<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Rosenson, R.S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1945349\" medline_id=\"21910409\">          <Title>Phospholipase A2 enzymes: Physical structure, biological function, disease implication, chemical inhibition, and therapeutic intervention<\/Title>          <SourceTitle>Chemical Reviews<\/SourceTitle>          <PubMedTitle>Chem Rev<\/PubMedTitle>          <Volume>111<\/Volume>          <Issue>10<\/Issue>          <Page>6130<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Dennis, E.A.<\/Author>            <Author>Cao, J.<\/Author>            <Author>Hsu, Y.H.<\/Author>            <Author>Magrioti, V.<\/Author>            <Author>Kokotos, G.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290578\" medline_id=\"25450448\">          <Title>Phospholipase A2 regulation of lipid droplet formation<\/Title>          <SourceTitle>Biochimica et Biophysica Acta<\/SourceTitle>          <PubMedTitle>Biochim Biophys Acta<\/PubMedTitle>          <Volume>1841<\/Volume>          <Issue>12<\/Issue>          <Page>1661<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Guijas, C.<\/Author>            <Author>Rodríguez, J.P.<\/Author>            <Author>Rubio, J.M.<\/Author>            <Author>Balboa, M.A.<\/Author>            <Author>Balsinde, J.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290579\" medline_id=\"25484870\">          <Title>Inflammatory therapeutic targets in coronary atherosclerosis-from molecular biology to clinical application<\/Title>          <SourceTitle>Frontiers in Physiology<\/SourceTitle>          <PubMedTitle>Front Physiol<\/PubMedTitle>          <Volume>5<\/Volume>          <Page>455<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Linden, F.<\/Author>            <Author>Domschke, G.<\/Author>            <Author>Erbel, C.<\/Author>            <Author>Akhavanpoor, M.<\/Author>            <Author>Katus, H.A.<\/Author>            <Author>Gleissner, C.A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2291786\" medline_id=\"24907600\">          <Title>Secretory phospholipase A2 enzymes as pharmacological targets for treatment of disease<\/Title>          <SourceTitle>Biochemical Pharmacology<\/SourceTitle>          <PubMedTitle>Biochem Pharmacol<\/PubMedTitle>          <Volume>90<\/Volume>          <Issue>4<\/Issue>          <Page>338<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Quach, N.D.<\/Author>            <Author>Arnold, R.D.<\/Author>            <Author>Cummings, B.S.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>  <\/Section>  <Section sectionId=\"1411\" modifiedDate=\"20150212020029\">    <Title>Novel Targets for Atherosclerosis<\/Title>    <Body>      <para>Novel targets for atherosclerosis --i.e., targets that do not fit appropriately into the major classes of LDL- or HDL-cholesterol-targeting or antiinflammatory therapies, or that exert multiple mechanistic effects-- are described in the following sections.<\/para>    <\/Body>    <References/>    <Section sectionId=\"1412\" modifiedDate=\"20180910103455\">      <Title>PPAR Receptors<\/Title>      <Body>        <para>The peroxisome proliferator-activated receptor (PPAR) family of transcription factors plays a key role in regulating dietary fat storage and the metabolism of lipids and carbohydrates (<REF id=\"970294\">Semple, R.K. et al., 2006<\/REF>). Since they were first cloned in the early 1990s, PPARs have become established as an important target for the treatment of type 2 <BACKGROUNDER id=\"23\">Diabetes<\/BACKGROUNDER>, <BACKGROUNDER id=\"47\">Obesity<\/BACKGROUNDER>, dyslipidemia, <BACKGROUNDER id=\"145\">Metabolic Syndrome<\/BACKGROUNDER>, some types of cancer and other human health disorders associated with high intake of dietary fat.<\/para>        <para>The first PPAR was cloned in 1990 by Isseman and Green; this receptor was designated PPARalpha when two other receptor subtypes, PPARgamma and PPARdelta, were found (<REF id=\"605743\">Uppenberg, J. et al., 1999<\/REF>). Members of the thiazolidinedione class of antidiabetic drugs tend to be selective for PPARgamma receptors over PPARalpha and delta receptors. PPAR receptors appear to serve metabolic and immunologic functions that influence the development of atherosclerosis, including regulation of beta-oxidation and uptake of fatty acids from triglyceride-rich lipoproteins, stimulation of the expression of ApoA-I and elevation of HDL levels by PPARalpha. PPARgamma, on the other hand, is highly expressed in macrophage foam cells. Both PPARalpha ligands (such as fibrates) and PPARgamma ligands (especially thiazolidinediones) also demonstrate antiinflammatory effects at the arterial wall level, providing further evidence of their potential in the treatment of atherosclerosis (<REF id=\"970294\">Semple, R.K. et al., 2006<\/REF>; <REF id=\"740244\">Tham, D.M. et al., 2003<\/REF>; <REF id=\"2290579\">Linden, F. et al., 2014<\/REF>). They are considered especially promising in diabetic patients with atherosclerosis, who are at increased risk for developing complications (<REF id=\"1623348\">Wang, N. et al., 2011<\/REF>; <REF id=\"1502784\">Shah, A. et al., 2010<\/REF>). PPARgamma ligands have furthermore been reported to regulate the immune response (<REF id=\"701652\">Kwak, B.R. et al., 2002<\/REF>) and to modulate the composition of atherosclerotic plaque. The development of targeted PPAR modulators is expected to facilitate more precise treatment and perhaps even prevention of atherosclerosis (<REF id=\"1615923\">Jandeleit-Dahm, K.A. et al., 2009<\/REF>).<\/para>        <para>The function of PPARdelta has been described more recently (<REF id=\"970295\">Barish, G.D. et al., 2006<\/REF>). This receptor has a dual role in regulating both hypertriglyceridemia and insulin resistance. It also enhances the catabolism of fatty acids and promotes energy uncoupling in adipose tissue and muscle. PPARdelta has also been shown to have direct effects on vascular endothelial function and angiogenesis. Taken together, these effects make PPARdelta an attractive target for antihyperlipidemic agents (<REF id=\"1615928\">Wang, N., 2008<\/REF>).<\/para>        <para>In 2013, the PPAR agonist saroglitazar was launched in India for the treatment of diabetic dyslipidemia, or hypertriglyceridemia in patients with type 2 diabetes not adequately controlled on statins. More than 80% of all diabetic patients --equivalent to approximately 300 million patients worldwide-- are estimated to suffer from diabetic dyslipidemia. <\/para>        <para>In July 2017, Japan became the first country to approve Kowa&apos;s selective PPARalpha modulator pemafibrate, indicated for the treatment of hyperlipidemia, including familial hyperlipidemia. In Japanese trials in patients with dyslipidemia, pemafibrate produced a reduction in triglycerides and increase in HDL-cholesterol, as well as a reduction in hepatic enzymes. In a study evaluating drug interactions with statin products, the blood concentration of the drugs was not changed. Outside Japan, pemafibrate is in clinical trials for the prevention of onset or recurrence of cardiovascular disease (NCT03071692) and for the treatment of patients with elevated triglycerides. Pemafibrate was launched in Japan in the summer of 2018.<\/para>        <para>Several PPAR modulators are in development for the atherosclerosis indication, as shown in the following table.<COMPETITIVE id=\"286\">            <TABLE>              <TR>                <TD>PPAR agonists in development for atherosclerosis<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=904512&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/rosuvastatin calcium/telmisartan<\/a>                <\/TD>                <TD>Yuhan<\/TD>                <TD>Angiotensin AT1 Receptor Antagonists/ PPARalpha Partial Agonists/ PPARgamma Modulators/ Calcium Channel Blockers/ P-Glycoprotein (MDR-1; ABCB1) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=864982&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Fenofibrate/pitavastatin calcium<\/a>                <\/TD>                <TD>Hanlim Pharmaceutical<\/TD>                <TD>PPARalpha Agonists/ APOA1 Expression Enhancers/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ SPP1 (Osteopontin) Expression Inhibitors<\/TD>                <TD>Phase III<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=242854&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Gemcabene calcium<\/a>                <\/TD>                <TD>Gemphire Therapeutics<\/TD>                <TD>PPAR Agonists/ HDL-Cholesterol Increasing Agents/ Signal Transduction Modulators<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=462423&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CER-002<\/a>                <\/TD>                <TD>Cerenis Therapeutics<\/TD>                <TD>PPARdelta Agonists/ Signal Transduction Modulators<\/TD>                <TD>Phase I<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"605743\">          <Title>PPARs: Lipid sensors in metabolic control<\/Title>          <SourceTitle>Drug News &amp; Perspectives<\/SourceTitle>          <PubMedTitle>Drug News Perspect<\/PubMedTitle>          <Volume>12<\/Volume>          <Issue>7<\/Issue>          <Page>389<\/Page>          <Year>1999<\/Year>          <Authors>            <Author>Uppenberg, J.<\/Author>            <Author>Jendeberg, L.<\/Author>            <Author>Berkenstam, A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"701652\">          <Title>The role of PPARgamma ligands as regulators of the immune response<\/Title>          <SourceTitle>Drug News &amp; Perspectives<\/SourceTitle>          <PubMedTitle>Drug News Perspect<\/PubMedTitle>          <Volume>15<\/Volume>          <Issue>6<\/Issue>          <Page>325<\/Page>          <Year>2002<\/Year>          <Authors>            <Author>Kwak, B.R.<\/Author>            <Author>Mulhaupt, F.<\/Author>            <Author>Mach, F.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"740244\">          <Title>Modulation of vascular inflammation by PPARs<\/Title>          <SourceTitle>Drug News &amp; Perspectives<\/SourceTitle>          <PubMedTitle>Drug News Perspect<\/PubMedTitle>          <Volume>16<\/Volume>          <Issue>2<\/Issue>          <Page>109<\/Page>          <Year>2003<\/Year>          <Authors>            <Author>Tham, D.M.<\/Author>            <Author>Wang, Y.-X.<\/Author>            <Author>Rutledge, J.C.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"970294\" medline_id=\"16511590\">          <Title>PPARgamma and human metabolic disease<\/Title>          <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>          <PubMedTitle>J Clin Invest<\/PubMedTitle>          <Volume>116<\/Volume>          <Issue>3<\/Issue>          <Page>581<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Semple, R.K.<\/Author>            <Author>Chatterjee, V.K.<\/Author>            <Author>O&apos;rahilly, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"970295\" medline_id=\"16511591\">          <Title>PPARdelta: A dagger in the heart of the metabolic syndrome<\/Title>          <SourceTitle>Journal of Clinical Investigation<\/SourceTitle>          <PubMedTitle>J Clin Invest<\/PubMedTitle>          <Volume>116<\/Volume>          <Issue>3<\/Issue>          <Page>590<\/Page>          <Year>2006<\/Year>          <Authors>            <Author>Barish, G.D.<\/Author>            <Author>Narkar, V.A.<\/Author>            <Author>Evans, R.M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1502784\" medline_id=\"20005515\">          <Title>The effect of PPAR-alpha agonism on apolipoprotein metabolism in humans<\/Title>          <SourceTitle>Atherosclerosis<\/SourceTitle>          <PubMedTitle>Atherosclerosis<\/PubMedTitle>          <Volume>210<\/Volume>          <Issue>1<\/Issue>          <Page>35<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Shah, A.<\/Author>            <Author>Rader, D.J.<\/Author>            <Author>Millar, J.S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615923\" medline_id=\"19133407\">          <Title>Direct antiatherosclerotic effects of PPAR agonists<\/Title>          <SourceTitle>Current Opinion in Lipidology<\/SourceTitle>          <PubMedTitle>Curr Opin Lipidol<\/PubMedTitle>          <Volume>20<\/Volume>          <Issue>1<\/Issue>          <Page>24<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Jandeleit-Dahm, K.A.<\/Author>            <Author>Calkin, A.<\/Author>            <Author>Tikellis, C.<\/Author>            <Author>Thomas, M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615928\" medline_id=\"19132133\">          <Title>PPAR-delta in vascular pathophysiology<\/Title>          <SourceTitle>PPAR Research<\/SourceTitle>          <PubMedTitle>PPAR Res<\/PubMedTitle>          <Volume>2008<\/Volume>          <Page>164163<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Wang, N.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1623348\" medline_id=\"21325726\">          <Title>Role of peroxisome proliferator-activated receptor-gamma in atherosclerosis: An update<\/Title>          <SourceTitle>Circulation Journal<\/SourceTitle>          <PubMedTitle>Circ J<\/PubMedTitle>          <Volume>75<\/Volume>          <Issue>3<\/Issue>          <Page>528<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Wang, N.<\/Author>            <Author>Yin, R.<\/Author>            <Author>Liu, Y.<\/Author>            <Author>Mao, G.<\/Author>            <Author>Xi, F.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2290579\" medline_id=\"25484870\">          <Title>Inflammatory therapeutic targets in coronary atherosclerosis-from molecular biology to clinical application<\/Title>          <SourceTitle>Frontiers in Physiology<\/SourceTitle>          <PubMedTitle>Front Physiol<\/PubMedTitle>          <Volume>5<\/Volume>          <Page>455<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Linden, F.<\/Author>            <Author>Domschke, G.<\/Author>            <Author>Erbel, C.<\/Author>            <Author>Akhavanpoor, M.<\/Author>            <Author>Katus, H.A.<\/Author>            <Author>Gleissner, C.A.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>    <Section sectionId=\"1415\" modifiedDate=\"20110414030019\">      <Title>Endothelial Dysfunction<\/Title>      <Body>        <para>The endothelium plays an important role in regulating vascular homeostasis, synthesizing and releasing vasodilating factors (primarily NO and prostaglandins) and, under some conditions, liberating other vasoconstricting factors such as endothelin (<REF id=\"1619018\">Abraham, D. and Dashwood, M., 2008<\/REF>). Endothelial dysfunction is characterized by imbalances between vasodilating and -constricting factors, between anti- and prothrombotic actions and between inhibitors and promoters of growth, and has been implicated in the pathophysiologies of both stable and unstable ischemic coronary syndromes. Endothelial dysfunction secondary to aging, menopause, diabetes, cigarette smoking or hypercholesterolemia is implicated in the development of atherosclerotic lesions and predisposes the blood vessels to vasospasm, thrombosis and other vascular disorders. Several mechanisms appear to be involved in the pathogenesis of endothelial dysfunction in atherosclerosis. Abnormal signal transduction, availability of L-arginine or of cofactors for eNOS and expression of the enzyme contribute to reduced production of NO by the endothelium. Other potential mechanisms involved in the impaired endothelium-dependent relaxation associated with atherosclerosis include increased destruction of NO by superoxide anion, up-regulation of pro-inflammatory signaling pathways, altered responsiveness of the vascular smooth muscle and concomitant release of vasoconstricting factors (<REF id=\"1615871\">Grassi, D. et al., 2011<\/REF>; <REF id=\"1616255\">Dobarro, D. et al., 2009<\/REF>; <REF id=\"1619027\">Mizuno, Y. et al., 2011<\/REF>). Potential therapeutic interventions for improving or restoring endothelial function include physical exercise (<REF id=\"1615873\">Ghisi, G.L. et al., 2010<\/REF>), statins (<REF id=\"1615863\">Reriani, M.K. et al., 2011<\/REF>), angiotensin converting enzyme (ACE) inhibitors (<REF id=\"1615867\">Shahin, Y. et al., 2011<\/REF>), endothelin receptor antagonists (<REF id=\"1613384\">Reriani, M. et al., 2010<\/REF>) and antioxidants (<REF id=\"1613388\">Victor, V.M. et al., 2009<\/REF>).<\/para>        <para>Activation of the renin-angiotensin-aldosterone system has been linked to endothelial dysfunction in the setting of atherosclerosis. The primary mediator of this dysfunction appears to be angiotensin II, as evidenced by the efficacy of ACE inhibitors in improving brachial flow-mediated dilatation --a measure of endothelial dysfunction-- in randomized, controlled trials (<REF id=\"1615867\">Shahin, Y. et al., 2011<\/REF>). Mechanistic studies indicate that aldosterone may also contribute to its pathogenesis (<REF id=\"1615875\">Fels, J. et al., 2010<\/REF>).<\/para>      <\/Body>      <References>        <Reference id=\"1613384\" medline_id=\"20733096\">          <Title>Long-term administration of endothelin receptor antagonist improves coronary endothelial function in patients with early atherosclerosis<\/Title>          <SourceTitle>Circulation<\/SourceTitle>          <PubMedTitle>Circulation<\/PubMedTitle>          <Volume>122<\/Volume>          <Issue>10<\/Issue>          <Page>958<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Reriani, M.<\/Author>            <Author>Raichlin, E.<\/Author>            <Author>Prasad, A.<\/Author>            <Author>Mathew, V.<\/Author>            <Author>Pumper, G.M.<\/Author>            <Author>Nelson, R.E.<\/Author>            <Author>Lennon, R.<\/Author>            <Author>Rihal, C.<\/Author>            <Author>Lerman, L.O.<\/Author>            <Author>Lerman, A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1613388\" medline_id=\"19903143\">          <Title>Oxidative stress and mitochondrial dysfunction in atherosclerosis: Mitochondria-targeted antioxidants as potential therapy<\/Title>          <SourceTitle>Current Medicinal Chemistry<\/SourceTitle>          <PubMedTitle>Curr Med Chem<\/PubMedTitle>          <Volume>16<\/Volume>          <Issue>35<\/Issue>          <Page>4654<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Victor, V.M.<\/Author>            <Author>Apostolova, N.<\/Author>            <Author>Herance, R.<\/Author>            <Author>Hernandez-Mijares, A.<\/Author>            <Author>Rocha, M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615863\" medline_id=\"21450596\">          <Title>Effects of statins on coronary and peripheral endothelial function in humans: A systematic review and meta-analysis of randomized controlled trials<\/Title>          <SourceTitle>European Journal of Cardiovascular Prevention &amp; Rehabilitation<\/SourceTitle>          <PubMedTitle>Eur J Cardiovasc Prev Rehabil<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>5<\/Issue>          <Page>704<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Reriani, M.K.<\/Author>            <Author>Dunlay, S.M.<\/Author>            <Author>Gupta, B.<\/Author>            <Author>West, C.P.<\/Author>            <Author>Rihal, C.S.<\/Author>            <Author>Lerman, L.O.<\/Author>            <Author>Lerman, A.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615867\" medline_id=\"21411098\">          <Title>Angiotensin converting enzyme inhibitors effect on endothelial dysfunction: A meta-analysis of randomised controlled trials<\/Title>          <SourceTitle>Atherosclerosis<\/SourceTitle>          <PubMedTitle>Atherosclerosis<\/PubMedTitle>          <Volume>216<\/Volume>          <Issue>1<\/Issue>          <Page>7<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Shahin, Y.<\/Author>            <Author>Khan, J.A.<\/Author>            <Author>Samuel, N.<\/Author>            <Author>Chetter, I.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615871\" medline_id=\"21235459\">          <Title>Cardiovascular risk and endothelial dysfunction: The preferential route for atherosclerosis<\/Title>          <SourceTitle>Current Pharmaceutical Biotechnology<\/SourceTitle>          <PubMedTitle>Curr Pharm Biotechnol<\/PubMedTitle>          <Volume>12<\/Volume>          <Issue>9<\/Issue>          <Page>1343<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Grassi, D.<\/Author>            <Author>Desideri, G.<\/Author>            <Author>Ferri, C.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615873\" medline_id=\"21225112\">          <Title>Physical exercise and endothelial dysfunction<\/Title>          <SourceTitle>Arquivos Brasileiros de Cardiologia<\/SourceTitle>          <PubMedTitle>Arq Bras Cardiol<\/PubMedTitle>          <Volume>95<\/Volume>          <Issue>5<\/Issue>          <Page>e130<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Ghisi, G.L.<\/Author>            <Author>Durieux, A.<\/Author>            <Author>Pinho, R.<\/Author>            <Author>Benetti, M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615875\" medline_id=\"20302930\">          <Title>Menage a trois: Aldosterone, sodium and nitric oxide in vascular endothelium<\/Title>          <SourceTitle>Biochimica et Biophysica Acta<\/SourceTitle>          <PubMedTitle>Biochim Biophys Acta<\/PubMedTitle>          <Volume>1802<\/Volume>          <Issue>12<\/Issue>          <Page>1193<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Fels, J.<\/Author>            <Author>Oberleithner, H.<\/Author>            <Author>Kusche-Vihrog, K. <\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1616255\" medline_id=\"19689260\">          <Title>Current pharmacological approach to restore endothelial dysfunction<\/Title>          <SourceTitle>Cardiovascular &amp; Hematological Agents in Medicinal Chemistry<\/SourceTitle>          <PubMedTitle>Cardiovasc Hematol Agents Med Chem<\/PubMedTitle>          <Volume>7<\/Volume>          <Issue>3<\/Issue>          <Page>212<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Dobarro, D.<\/Author>            <Author>Gómez-Rubín, M.C.<\/Author>            <Author>Sanchez-Recalde, A.<\/Author>            <Author>Moreno, R.<\/Author>            <Author>Galeote, G.<\/Author>            <Author>Jimenez-Valero, S.<\/Author>            <Author>Calvo, L.<\/Author>            <Author>López de Sá, E.<\/Author>            <Author>López-Sendón, J.L.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1619018\" medline_id=\"18784133\">          <Title>Endothelin-role in vascular disease<\/Title>          <SourceTitle>Rheumatology (Oxford)<\/SourceTitle>          <PubMedTitle>Rheumatology (Oxford)<\/PubMedTitle>          <Volume>47<\/Volume>          <Issue>Suppl. 5<\/Issue>          <Page>v23<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Abraham, D.<\/Author>            <Author>Dashwood, M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1619027\" medline_id=\"21427505\">          <Title>Inflammation and the development of atherosclerosis: Effects of lipid-lowering therapy<\/Title>          <SourceTitle>Journal of Atheroscleoris and Thrombosis<\/SourceTitle>          <PubMedTitle>J Atheroscler Thromb<\/PubMedTitle>          <Volume>18<\/Volume>          <Issue>5<\/Issue>          <Page>351<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Mizuno, Y.<\/Author>            <Author>Jacob, R.F.<\/Author>            <Author>Mason, R.P.<\/Author>          <\/Authors>        <\/Reference>      <\/References>      <Section sectionId=\"1413\" modifiedDate=\"20110414030622\">        <Title>Endothelin Receptors<\/Title>        <Body>          <para>Increased production and activation of endothelin (ET-1) is associated with atherosclerosis and several of its risk factors, including hypertension, aging, hypercholesterolemia and endothelial dysfunction. These findings have led to the theory that ET-1, one of the most potent vasocontrictors known in human biology, may contribute to the pathogenesis of atherosclerosis, a disease that is characterized by the imbalance of vasoactive factors. It is conceivable that ET-1, when present at elevated concentrations in vascular tissues, promotes endothelial dysfunction and abnormally increased vascular tone in atherosclerotic vessels (<REF id=\"1619018\">Abraham, D. and Dashwood, M., 2008<\/REF>).<\/para>          <para>The contribution of endothelin to the atherosclerotic process may derive from its various physiological activities, including vasoconstriction, mitogenesis, neutrophil adhesion, platelet aggregation and hypertrophy, as well as its tendency to promote the formation of reactive oxygen species. Preclinical studies have demonstrated that ETA receptor antagonism decreases fatty streak formation in cholesterol-fed hamsters and vascular lesion formation in apoE-knockout mice (<REF id=\"662252\">d&apos; Uscio, L.V. et al., 2000<\/REF>). Administered for six months to patients with early coronary atherosclerosis, the ETA receptor antagonist atrasentan yielded improvements in coronary microvascular endothelial function, as seen by improved coronary blood flow in atrasentan-treated patients vs. patients treated with placebo. There was no change in coronary artery diameter or coronary flow reserve. These results support the theory of a role for the endogenous endothelin system in the regulation of endothelial function (<REF id=\"1613384\">Reriani, M. et al., 2010<\/REF>).<\/para>        <\/Body>        <References>          <Reference id=\"662252\">            <Title>Endothelin in atherosclerosis: Importance of risk factors and therapeutic implications<\/Title>            <SourceTitle>Journal of Cardiovascular Pharmacology<\/SourceTitle>            <PubMedTitle>J Cardiovasc Pharmacol<\/PubMedTitle>            <Volume>35<\/Volume>            <Issue>4, Suppl. 2<\/Issue>            <Page>S55<\/Page>            <Year>2000<\/Year>            <Authors>              <Author>d&apos; Uscio, L.V.<\/Author>              <Author>et al.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1613384\" medline_id=\"20733096\">            <Title>Long-term administration of endothelin receptor antagonist improves coronary endothelial function in patients with early atherosclerosis<\/Title>            <SourceTitle>Circulation<\/SourceTitle>            <PubMedTitle>Circulation<\/PubMedTitle>            <Volume>122<\/Volume>            <Issue>10<\/Issue>            <Page>958<\/Page>            <Year>2010<\/Year>            <Authors>              <Author>Reriani, M.<\/Author>              <Author>Raichlin, E.<\/Author>              <Author>Prasad, A.<\/Author>              <Author>Mathew, V.<\/Author>              <Author>Pumper, G.M.<\/Author>              <Author>Nelson, R.E.<\/Author>              <Author>Lennon, R.<\/Author>              <Author>Rihal, C.<\/Author>              <Author>Lerman, L.O.<\/Author>              <Author>Lerman, A.<\/Author>            <\/Authors>          <\/Reference>          <Reference id=\"1619018\" medline_id=\"18784133\">            <Title>Endothelin-role in vascular disease<\/Title>            <SourceTitle>Rheumatology (Oxford)<\/SourceTitle>            <PubMedTitle>Rheumatology (Oxford)<\/PubMedTitle>            <Volume>47<\/Volume>            <Issue>Suppl. 5<\/Issue>            <Page>v23<\/Page>            <Year>2008<\/Year>            <Authors>              <Author>Abraham, D.<\/Author>              <Author>Dashwood, M.<\/Author>            <\/Authors>          <\/Reference>        <\/References>      <\/Section>    <\/Section>    <Section sectionId=\"2921\" modifiedDate=\"20150223105456\">      <Title>Endocannabinoid System<\/Title>      <Body>        <para>The endocannabinoid system, long believed to be primarily involved in central nervous system function, has more recently been shown to also act on peripheral tissues and organs and has been implicated in the pathogenesis of a wide range of diseases including obesity, diabetes, atherosclerosis and cardiovascular disease (<REF id=\"2174408\">Zubrzycki, M. et al., 2014<\/REF>; <REF id=\"2291880\">Pacher, P. and Kunos, G., 2013<\/REF>). Endocannabinoids, which exert their wide-ranging biological effect by binding to CB1 and CB2 receptors, function as lipid neurotransmitters, and there is a significant body of evidence to support the hypothesis that abnormal cannabinoid signalling contributes to atherogenesis (<REF id=\"1616254\">Fisar, Z., 2009<\/REF>; <REF id=\"1615882\">Mach, F. and Steffens, S., 2008<\/REF>; <REF id=\"1619019\">Pacher, P. and Steffens, S., 2009<\/REF>). <\/para>        <para>Antiatherogenic effects were achieved in ApoE-/- mice administered the cannabinoid (CB1/CB2) receptor agonist WIN-55212-2; this protective effect was blocked by coadministration of the selective CB2 receptor antagonist AM-630, confirming that CB2 receptor activation is the mechanism underlying the atherosclerosis-reducing activity of WIN-55212-2 (<REF id=\"1615876\">Zhao, Y. et al., 2010<\/REF>). Another study in the same model confirmed this conclusion but showed that suppression of pro-inflammatory responses also contributed to atherosclerosis inhibition (<REF id=\"1589630\">Zhao, Y. et al., 2010<\/REF>). Conversely, a preclinical study demonstrated that treatment of ApoE-/- mice with the selective CB1 receptor antagonist rimonabant also led to improved endothelial function, although this was the result of direct vascular effects (improved endothelium-dependent vasodilation, decreased production of ROS in aorta and reduced NADPH oxidase activity) rather than inhibition of the development of atherosclerotic plaque (<REF id=\"1615877\">Tiyerili, V. et al., 2010<\/REF>). Another preclinical study in the ApoE knockout mouse confirmed the antiatherosclerotic effects of rimonabant, and further established that this effect may be associated with activation of the reverse cholesterol transport (RCT) system. Mice treated with rimonabant tended to have increased HDL cholesterol levels as well as increased serum adiponectin levels (<REF id=\"1514405\">Sugamura, K. et al., 2010<\/REF>). <\/para>        <para>While some researchers argue that combined antagonism of cannabinoid CB1 receptors and activation of CB2 receptors may exert the most potent effects on atherosclerosis, primarily via inhibition of inflammatory processes (<REF id=\"2174408\">Zubrzycki, M. et al., 2014<\/REF>), others hypothesize that selective CB2 receptor-activating agents represent the most promising approach (<REF id=\"2291881\">Carbone, F. et al., 2014<\/REF>). Further research is clearly needed to determine the role of cannabinoid receptor-acting drugs in the treatment of lipid disorders. <\/para>      <\/Body>      <References>        <Reference id=\"1514405\" medline_id=\"20124735\">          <Title>Cannabinoid 1 receptor blockade reduces atherosclerosis with enhances reverse cholesterol transport<\/Title>          <SourceTitle>Journal of Atheroscleoris and Thrombosis<\/SourceTitle>          <PubMedTitle>J Atheroscler Thromb<\/PubMedTitle>          <Volume>17<\/Volume>          <Issue>2<\/Issue>          <Page>141<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Sugamura, K.<\/Author>            <Author>Sugiyama, S.<\/Author>            <Author>Fujiwara, Y.<\/Author>            <Author>Matsubara, J.<\/Author>            <Author>Akiyama, E.<\/Author>            <Author>Maeda, H.<\/Author>            <Author>Ohba, K.<\/Author>            <Author>Matsuzawa, Y.<\/Author>            <Author>Konishi, M.<\/Author>            <Author>Nozaki, T.<\/Author>            <Author>Horibata, Y.<\/Author>            <Author>Kaikita, K.<\/Author>            <Author>Sumida, H.<\/Author>            <Author>Takeya, M.<\/Author>            <Author>Ogawa, H.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1589630\" medline_id=\"20868672\">          <Title>WIN55212-2 ameliorates atherosclerosis associated with suppression of pro-inflammatory responses in ApoE-knockout mice<\/Title>          <SourceTitle>European Journal of Pharmacology<\/SourceTitle>          <PubMedTitle>Eur J Pharmacol<\/PubMedTitle>          <Volume>649<\/Volume>          <Issue>1-3<\/Issue>          <Page>285<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Zhao, Y.<\/Author>            <Author>Liu, Y.<\/Author>            <Author>Zhang, W.<\/Author>            <Author>Xue, J.<\/Author>            <Author>Wu, Y.Z.<\/Author>            <Author>Xu, W.<\/Author>            <Author>Liang, X.<\/Author>            <Author>Chen, T.<\/Author>            <Author>Kishimoto, C.<\/Author>            <Author>Yuan, Z.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615876\" medline_id=\"20075743\">          <Title>Activation of cannabinoid CB2 receptor ameliorates atherosclerosis associated with suppression of adhesion molecules<\/Title>          <SourceTitle>Journal of Cardiovascular Pharmacology<\/SourceTitle>          <PubMedTitle>J Cardiovasc Pharmacol<\/PubMedTitle>          <Volume>55<\/Volume>          <Issue>3<\/Issue>          <Page>292<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Zhao, Y.<\/Author>            <Author>Yuan, Z.<\/Author>            <Author>Liu, Y.<\/Author>            <Author>Xue, J.<\/Author>            <Author>Tian, Y.<\/Author>            <Author>Liu, W.<\/Author>            <Author>Zhang, W.<\/Author>            <Author>Shen, Y.<\/Author>            <Author>Xu, W.<\/Author>            <Author>Liang, X.<\/Author>            <Author>Chen, T.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615877\" medline_id=\"20361197\">          <Title>CB1 receptor inhibition leads to decreased vascular AT1 receptor expression, inhibition of oxidative stress and improved endothelial function<\/Title>          <SourceTitle>Basic Research in Cardiology<\/SourceTitle>          <PubMedTitle>Basic Res Cardiol<\/PubMedTitle>          <Volume>105<\/Volume>          <Issue>4<\/Issue>          <Page>465<\/Page>          <Year>2010<\/Year>          <Authors>            <Author>Tiyerili, V.<\/Author>            <Author>Zimmer, S.<\/Author>            <Author>Jung, S.<\/Author>            <Author>Wassmann, K.<\/Author>            <Author>Naehle, C.P.<\/Author>            <Author>Lütjohann, D.<\/Author>            <Author>Zimmer, A.<\/Author>            <Author>Nickenig, G.<\/Author>            <Author>Wassmann, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1615882\" medline_id=\"18426500\">          <Title>The role of the endocannabinoid system in atherosclerosis<\/Title>          <SourceTitle>Journal of Neuroendocrinology<\/SourceTitle>          <PubMedTitle>J Neuroendocrinol<\/PubMedTitle>          <Volume>20<\/Volume>          <Issue>Suppl. 1<\/Issue>          <Page>53<\/Page>          <Year>2008<\/Year>          <Authors>            <Author>Mach, F.<\/Author>            <Author>Steffens, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1616254\" medline_id=\"19591373\">          <Title>Cannabinoids and atherosclerosis<\/Title>          <SourceTitle>Prague Medical Report<\/SourceTitle>          <PubMedTitle>Prague Med Rep<\/PubMedTitle>          <Volume>110<\/Volume>          <Issue>1<\/Issue>          <Page>5<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Fisar, Z.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"1619019\" medline_id=\"19357846\">          <Title>The emerging role of the endocannabinoid system in cardiovascular disease<\/Title>          <SourceTitle>Semin Immunopathol<\/SourceTitle>          <PubMedTitle>Semin Immunopathol<\/PubMedTitle>          <Volume>31<\/Volume>          <Issue>1<\/Issue>          <Page>63<\/Page>          <Year>2009<\/Year>          <Authors>            <Author>Pacher, P.<\/Author>            <Author>Steffens, S.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2174408\" medline_id=\"24781728\">          <Title>A new face of endocannabinoids in pharmacotherapy. Part II: Role of endocannabinoids in inflammation-derived cardiovascular diseases<\/Title>          <SourceTitle>Journal of Physiology and Pharmacology<\/SourceTitle>          <PubMedTitle>J Physiol Pharmacol<\/PubMedTitle>          <Volume>65<\/Volume>          <Issue>2<\/Issue>          <Page>183<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Zubrzycki, M.<\/Author>            <Author>Liebold, A.<\/Author>            <Author>Janecka, A.<\/Author>            <Author>Zubrzycka, M.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2291880\" medline_id=\"23551849\">          <Title>Modulating the endocannabinoid system in human health and disease - Successes and failures<\/Title>          <SourceTitle>The FEBS Journal<\/SourceTitle>          <PubMedTitle>FEBS J<\/PubMedTitle>          <Volume>280<\/Volume>          <Issue>9<\/Issue>          <Page>1918<\/Page>          <Year>2013<\/Year>          <Authors>            <Author>Pacher, P.<\/Author>            <Author>Kunos, G.<\/Author>          <\/Authors>        <\/Reference>        <Reference id=\"2291881\" medline_id=\"25245379\">          <Title>Cannabinoid receptor type 2 activation in atherosclerosis and acute cardiovascular diseases<\/Title>          <SourceTitle>Current Medicinal Chemistry<\/SourceTitle>          <PubMedTitle>Curr Med Chem<\/PubMedTitle>          <Volume>21<\/Volume>          <Issue>35<\/Issue>          <Page>4046<\/Page>          <Year>2014<\/Year>          <Authors>            <Author>Carbone, F.<\/Author>            <Author>Mach, F.<\/Author>            <Author>Vuilleumier, N.<\/Author>            <Author>Montecucco, F.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>  <\/Section>  <Section sectionId=\"3189\" modifiedDate=\"20150219125849\">    <Title>Combination Therapy<\/Title>    <Body>      <para>The use of two or more drugs in combination may be more effective in reducing cholesterol as compared to increasing the dose of single drug therapy, as well as causing fewer adverse effects (<REF id=\"2291789\">Catapano, A.L. et al., 2014<\/REF>). Fixed-dose combinations also simplify treatment regimens and as such are associated with improved compliance. The following table presents combination therapies in active development at this time for the treatment of atherosclerosis. <COMPETITIVE id=\"1032\">          <TABLE>            <TR>              <TD>Combination therapies in development for the treatment of atherosclerosis<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Mechanism of Action<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=965042&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bempedoic acid/ezetimibe<\/a>              <\/TD>              <TD>Esperion Therapeutics<\/TD>              <TD>Liver Bile Acid Transporter (LBAT) Inhibitors/ AMP-Activated Protein Kinase (AMPK) Activators/ Niemann-Pick C1-Like protein 1 (NPC1L1) Inhibitors/ Cholesterol Absorption Inhibitors/ ATP Citrate Lyase Inhibitors/ Signal Transduction Modulators<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=904512&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/rosuvastatin calcium/telmisartan<\/a>              <\/TD>              <TD>Yuhan<\/TD>              <TD>Angiotensin AT1 Receptor Antagonists/ PPARalpha Partial Agonists/ PPARgamma Modulators/ Calcium Channel Blockers/ P-Glycoprotein (MDR-1; ABCB1) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=910032&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Atorvastatin calcium/choline fenofibrate<\/a>              <\/TD>              <TD>Chong Kun Dang Holdings<\/TD>              <TD>Dipeptidyl Peptidase IV (CD26; DPP-IV; DP-IV) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ TNFSF6 Expression Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=852638&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Atorvastatin calcium/metformin hydrochloride<\/a>              <\/TD>              <TD>Daewoong/ CJ HealthCare<\/TD>              <TD>AMP-Activated Protein Kinase (AMPK) Activators/ Dipeptidyl Peptidase IV (CD26; DPP-IV; DP-IV) Inhibitors/ Insulin Sensitizers/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ TNFSF6 Expression Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=864982&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Fenofibrate/pitavastatin calcium<\/a>              <\/TD>              <TD>Hanlim Pharmaceutical<\/TD>              <TD>PPARalpha Agonists/ APOA1 Expression Enhancers/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ SPP1 (Osteopontin) Expression Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=832868&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rosuvastatin calcium/metformin hydrochloride<\/a>              <\/TD>              <TD>Jeil Pharmaceutical<\/TD>              <TD>AMP-Activated Protein Kinase (AMPK) Activators/ Insulin Sensitizers/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=848752&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">YH-14755<\/a>              <\/TD>              <TD>Yuhan<\/TD>              <TD/>              <TD>Phase III<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"2291789\" medline_id=\"25299967\">        <Title>Combination therapy in dyslipidemia: Where are we now?<\/Title>        <SourceTitle>Atherosclerosis<\/SourceTitle>        <PubMedTitle>Atherosclerosis<\/PubMedTitle>        <Volume>237<\/Volume>        <Issue>1<\/Issue>        <Page>319<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Catapano, A.L.<\/Author>          <Author>Farnier, M.<\/Author>          <Author>Foody, J.M.<\/Author>          <Author>Toth, P.P.<\/Author>          <Author>Tomassini, J.E.<\/Author>          <Author>Brudi, P.<\/Author>          <Author>Tershakovec, A.M.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"1419\" modifiedDate=\"20151106113537\">    <Title>Gene Therapy<\/Title>    <Body>      <para>Potential targets for somatic gene therapy of dyslipidemias include low- as well as high-density lipoprotein receptors, apolipoproteins and enzymes in the lipoprotein metabolic pathway. Positive results have been obtained in animal studies evaluating adeno-associated virus (AAV)-mediated transfer of VLDL, the HDL receptor SR-BI and monocyte chemoattractant protein-1 (MCP-1). In these models, gene therapy was even effective in treating established atherosclerotic disease, inducing regression of established lesions. Anti-MCP-1 gene therapy, for example, stabilized vulnerable atheromatous plaques in addition to reducing atherogenesis. A more efficient vector than recombinant adenovirus will likely be required for the development of a clinically useful gene therapy, however, due to the low levels of hepatic transduction obtained with AAV (<REF id=\"662393\">Kozarsky, K.F. et al., 2000<\/REF>; <REF id=\"662387\">Quarck, R. et al., 2001<\/REF>; <REF id=\"2290701\">Lehrke, M. and Lebherz, C., 2014<\/REF>).<\/para>      <para>Apolipoproteins (ApoA-I, ApoE, ApoB-100) have also been identified as attractive targets for gene therapy of atherosclerosis (<REF id=\"2290701\">Lehrke, M. and Lebherz, C., 2014<\/REF>; <REF id=\"2290580\">Khoo, B., 2014<\/REF>). Studies in genetically engineered mice overexpressing the human apoA-I gene showed significant reductions in atherosclerotic lesions, findings that were later replicated in rabbits. Other promising candidates for HDL-targeted gene therapy include PLTP (phospholipid transfer protein), ABC1 and cubilin (<REF id=\"662262\">Rong, J.X. and Fisher, E.A., 2000<\/REF>).<\/para>      <para>In patients with familial hypercholesterolemia (FH), which is caused by defects in the hepatic LDL receptor, hepatic gene transfer of LDLR has been pursued as a potentially curative therapy. Some success has been obtained in a transgenic mouse model of FH in which the animals were treated with a modified adenovirus (AAV8) expressing the human LDL receptor, supporting the feasibility of this approach (<REF id=\"2290701\">Lehrke, M. and Lebherz, C., 2014<\/REF>; <REF id=\"2290580\">Khoo, B., 2014<\/REF>).<\/para>      <para>Other gene therapy approaches are targeted to the inflammatory processes implicated in atherogenesis. These are directed to certain cytokines and chemokines (IL-10, TGF-beta1) and other inflammatory mediators (Lp-PLA2) (<REF id=\"662387\">Quarck, R. et al., 2001<\/REF>; <REF id=\"2290701\">Lehrke, M. and Lebherz, C., 2014<\/REF>).<COMPETITIVE id=\"675\">          <TABLE>            <TR>              <TD>Gene therapy for atherosclerosis<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Description<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=763317&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RGX-501<\/a>              <\/TD>              <TD>REGENXBIO<\/TD>              <TD>NAV adeno - associated virus serotype 8 vector expressing the human low - density lipoprotein receptor (hLDLR) gene<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References>      <Reference id=\"662262\" medline_id=\"11209972\">        <Title>High-density lipoprotein: Gene-based approaches to the prevention of atherosclerosis<\/Title>        <SourceTitle>Annals of Medicine<\/SourceTitle>        <PubMedTitle>Ann Med<\/PubMedTitle>        <Volume>32<\/Volume>        <Issue>9<\/Issue>        <Page>642<\/Page>        <Year>2000<\/Year>        <Authors>          <Author>Rong, J.X.<\/Author>          <Author>Fisher, E.A.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"662387\" medline_id=\"11369691\">        <Title>Adenovirus-mediated gene transfer of human platelet-activating factor-acetylhydrolase prevents injury-induced neointima formation and acetylhydrolase prevents injury-induced neointima formation and reduces spontaneous atherosclerosis in apolipoprotein E-deficient mice<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>103<\/Volume>        <Issue>20<\/Issue>        <Page>2495<\/Page>        <Year>2001<\/Year>        <Authors>          <Author>Quarck, R.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290580\" medline_id=\"25542072\">        <Title>Genetic therapies to lower cholesterol<\/Title>        <SourceTitle>Vascular Pharmacology<\/SourceTitle>        <PubMedTitle>Vascul Pharmacol<\/PubMedTitle>        <Volume>64C<\/Volume>        <Page>11<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Khoo, B.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2290701\" medline_id=\"25085755\">        <Title>AAV-mediated gene therapy for atherosclerosis<\/Title>        <SourceTitle>Current Atherosclerosis Reports<\/SourceTitle>        <PubMedTitle>Curr Atheroscler Rep<\/PubMedTitle>        <Volume>16<\/Volume>        <Issue>9<\/Issue>        <Page>434<\/Page>        <Year>2014<\/Year>        <Authors>          <Author>Lehrke, M.<\/Author>          <Author>Lebherz, C.<\/Author>        <\/Authors>      <\/Reference>    <\/References>    <Section sectionId=\"5402\" modifiedDate=\"20170124041917\">      <Title>Antisense Therapy<\/Title>      <Body>        <para>Antisense therapy is based on the use of a short, single-stranded synthetic analogue of a DNA or RNA sequence with the reverse orientation (i.e., opposite &quot;sense&quot;; antisense oligonucleotide) of the DNA or RNA sequence present in a specific disease-causing target gene. When administered to a patient with the disease, the antisense agent will bind to the target gene and inhibit its expression. In the case of atherosclerosis, the greatest success to date has been obtained with antisense agents directed to APOB (<REF id=\"2291878\">Lippi, G. and Favaloro, E.J., 2011<\/REF>), as exemplified by mipomersen. Antisense drugs are especially indicated for forms of hypercholesterolemia that have a genetic basis, where they show superior efficacy as compared to statins (<REF id=\"2291878\">Lippi, G. and Favaloro, E.J., 2011<\/REF>).<\/para>        <para>Mipomersen sodium is a second-generation antisense drug that selectively targets apolipoprotein B, a protein critical to the synthesis and transport of LDL and VLDL cholesterol, It was launched in 2013 for the treatment of familial hypercholesterolemia (see <I>APOB Expression Inhibitors<\/I>, above). <COMPETITIVE id=\"1519\">            <TABLE>              <TR>                <TD>Antisense therapies under active development for treatment of dyslipidemia<\/TD>              <\/TR>              <TR>                <TD>Drug Name<\/TD>                <TD>Organization<\/TD>                <TD>Mechanism of Action<\/TD>                <TD>Status<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AKCEA-APOCIII-LRx<\/a>                <\/TD>                <TD>Akcea Therapeutics<\/TD>                <TD>APOC3 Expression Inhibitors<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=879261&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">TQJ-230<\/a>                <\/TD>                <TD>Akcea Therapeutics<\/TD>                <TD>APOA Expression Inhibitors<\/TD>                <TD>Phase II<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=951993&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CiVi-007<\/a>                <\/TD>                <TD>CiVi Biopharma<\/TD>                <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>                <TD>Phase I<\/TD>              <\/TR>              <TR>                <TD>                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=943504&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IONIS-AZ4-2.5-LRx<\/a>                <\/TD>                <TD>AstraZeneca<\/TD>                <TD/>                <TD>Phase I<\/TD>              <\/TR>            <\/TABLE>          <\/COMPETITIVE>        <\/para>      <\/Body>      <References>        <Reference id=\"2291878\" medline_id=\"22075277\">          <Title>Antisense therapy in the treatment of hypercholesterolemia<\/Title>          <SourceTitle>European Journal of Internal Medicine<\/SourceTitle>          <PubMedTitle>Eur J Intern Med<\/PubMedTitle>          <Volume>22<\/Volume>          <Issue>6<\/Issue>          <Page>541<\/Page>          <Year>2011<\/Year>          <Authors>            <Author>Lippi, G.<\/Author>            <Author>Favaloro, E.J.<\/Author>          <\/Authors>        <\/Reference>      <\/References>    <\/Section>  <\/Section>  <Section sectionId=\"1420\" modifiedDate=\"20150223032321\">    <Title>Natural Products and Herbal Remedies<\/Title>    <Body>      <para>Garlic (<I>Allium sativum<\/I>) is thought to have hypoglycemic, hypocholesterolemic and hypolipidemic effects. It appears to induce the mobilization of cholesterol from the arterial walls as well as decrease hepatic cholesterogenesis and inhibit fatty acid synthesis. While some clinical studies claim to confirm this efficacy, others insist that is is devoid of any significant lipid-lowering effects. This inconsistency may be due to the many different garlic preparations that have been studied (<REF id=\"2295910\">Ried, K. et al., 2013<\/REF>). <\/para>      <para>Flaxseed has been consumed in the diet for hundreds of years, especially in Asian countries. This product is the richest known source of alpha-linolenic acid (n-3 fatty acid), which comprises 51-55% of the mass of flaxseed. Flaxseed has hypocholesterolemic and antiatherosclerotic activity, most likely exerted by the non-oily part rather than the alpha-linolenic acid component, as well as antioxidant activity and variable effects on inflammatory mediators (<REF id=\"1591103\">Prasad, K., 2009<\/REF>). In a double-blind, randomized, controlled clinical trial in 62 men and women with elevated LDL cholesterol at baseline, use of flaxseed-containing baked goods for 10 weeks was associated with a modest, albeit short-lived, reduction in LDL cholesterol. In men, however, the product also reduced HDL cholesterol levels, an undesired effect that should be investigated further (<REF id=\"1591100\">Bloedon, L.T. et al., 2008<\/REF>). A meta-analysis of 28 randomized, controlled clinical studies investigating the lipid-lowering effects of flaxseed has concluded that the product significantly reduces both total and LDL-cholesterol concentrations, although the magnitude of change depends on factors including baseline cholesterol concentration, type of intervension and gender. Greater efficacy was observed in women, particularly those in the postmenopausal period (<REF id=\"1591098\">Pan, A. et al., 2009<\/REF>).<\/para>      <para>Soy has been shown to have cholesterol-lowering benefits when 25 mg of soy per day is consumed. Although the mechanism by which soy proteins are thought to decrease serum lipid levels is unclear, possible theories include decreased cholesterol absorption, decreased bile reabsorption in the gut or a change of endocrine status associated with the isoflavones or saponins present in soy. One study has shown an average decrease of 9% in total cholesterol, 13% in LDL cholesterol and 10% in triglycerides in subjects taking soy, while another has shown a 6% decrease in total cholesterol among postmenopausal women with hypercholesterolemia who substituted animal fat with soy protein (<REF id=\"660657\">Morelli, V. and Zoorob, R.J., 2000<\/REF>).<\/para>      <para>Cholestin, a red yeast rice product, has been used for centuries in China, and has been claimed to reduce cholesterol levels by 11 to 32%. In one study in patients with hypercholesterolemia taking cholestin, total cholesterol decreased by approximately 15%. Furthermore, cholestin may be a cost-saving option in patients requiring lipid-lowering medication who cannot afford commercially available medications (<REF id=\"660657\">Morelli, V. and Zoorob, R.J., 2000<\/REF>), and for patients who are intolerant of statins (<REF id=\"1619020\">Becker, D.J. et al., 2009<\/REF>).<\/para>      <para>        <I>Commiphora mukul<\/I> (guggul gum) has been used for more than 1,000 years in India, Bangladesh and Pakistan for the treatment of hypercholesterolemia (<REF id=\"1226715\">Deng, R., 2007<\/REF>). It was found to reduce total cholesterol levels by 22% compared with placebo in 70% of patients in a multicenter trial of 205 subjects. The suggested dosage is the equivalent of 75 mg of guggulsterone per day (<REF id=\"660657\">Morelli, V. and Zoorob, R.J., 2000<\/REF>). Researchers from Baylor College of Medicine found that guggulsterone blocks the FXR receptor, which regulates cholesterol and metabolism (<REF id=\"674301\">Urizar, N.L. et al., 2002<\/REF>). Since that time, other mechanisms associated with the antihyperlipidemic activity of guggulsterone have been identified: the compound was shown to upregulate the bile salt export pump, facilitating the elimination of cholesterol by the liver, and to inhibit nuclear factor kappa-B activation, leading to antiinflammatory effects (<REF id=\"1226715\">Deng, R., 2007<\/REF>).<\/para>      <para>Other herbal remedies reported to prevent or reduce atherosclerosis include <I>Aloe barbadensis<\/I>, <I>Capsicum annum<\/I> (red hot chili pepper), <I>Cicer arientinum<\/I> (Bengal gram), <I>Emblica officinalis<\/I> (amla) (<REF id=\"608780\">Udupa, S.L., 2001<\/REF>), <I>Plantago ovata<\/I> (psyllium) (<REF id=\"1536327\">Solà, R. et al., 2010<\/REF>), <I>Glycyrrhiza glabra<\/I>, black tea, green tea, licorice and more (<REF id=\"1619024\">Hasani-Ranjbar, S. et al., 2010<\/REF>).<\/para>      <para>The following table presents natural products and herbal medicines in active development for the treatment of hyperlipidemia.<COMPETITIVE id=\"924\"/>      <\/para>    <\/Body>    <References>      <Reference id=\"608780\">        <Title>Indigenous drugs and atherosclerosis<\/Title>        <SourceTitle>Drugs of Today<\/SourceTitle>        <PubMedTitle>Drugs Today<\/PubMedTitle>        <Volume>37<\/Volume>        <Issue>1<\/Issue>        <Page>37<\/Page>        <Year>2001<\/Year>        <Authors>          <Author>Udupa, S.L.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"660657\" medline_id=\"11011861\">        <Title>Alternative therapies: Part II. Congestive heart failure and hypercholesterolemia<\/Title>        <SourceTitle>American Family Physician (1970)<\/SourceTitle>        <PubMedTitle>Am Fam Physician<\/PubMedTitle>        <Volume>62<\/Volume>        <Issue>6<\/Issue>        <Page>1325<\/Page>        <Year>2000<\/Year>        <Authors>          <Author>Morelli, V.<\/Author>          <Author>Zoorob, R.J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"674301\" medline_id=\"11988537\">        <Title>A natural product that lowers cholesterol as an antagonist ligand for FXR<\/Title>        <SourceTitle>Science<\/SourceTitle>        <PubMedTitle>Science<\/PubMedTitle>        <Volume>296<\/Volume>        <Issue>5573<\/Issue>        <Page>1703<\/Page>        <Year>2002<\/Year>        <Authors>          <Author>Urizar, N.L.<\/Author>          <Author>Liverman, A.B.<\/Author>          <Author>Dodds, D.T.<\/Author>          <Author>Silva, F.V.<\/Author>          <Author>Ordentlich, P.<\/Author>          <Author>Yan, Y.<\/Author>          <Author>Gonzalez, F.J.<\/Author>          <Author>Heyman, R.A.<\/Author>          <Author>Mangelsdorf, D.J.<\/Author>          <Author>Moore, D.D.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1226715\" medline_id=\"18078436\">        <Title>Therapeutic effects of guggul and its constituent guggulsterone: Cardiovascular benefits<\/Title>        <SourceTitle>Cardiovascular Drug Reviews<\/SourceTitle>        <PubMedTitle>Cardiovasc Drug Rev<\/PubMedTitle>        <Volume>25<\/Volume>        <Issue>4<\/Issue>        <Page>375<\/Page>        <Year>2007<\/Year>        <Authors>          <Author>Deng, R.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1536327\" medline_id=\"20413122\">        <Title>Soluble fibre (Plantago ovata husk) reduces plasma low-density lipoprotein (LDL) cholesterol, triglycerides, insulin, oxidised LDL and systolic blood pressure in hypercholesterolaemic patients: A randomised trial<\/Title>        <SourceTitle>Atherosclerosis<\/SourceTitle>        <PubMedTitle>Atherosclerosis<\/PubMedTitle>        <Volume>211<\/Volume>        <Issue>2<\/Issue>        <Page>630<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Solà, R.<\/Author>          <Author>Bruckert, E.<\/Author>          <Author>Valls, R.M.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1591098\" medline_id=\"19515737\">        <Title>Meta-analysis of the effects of flaxseed interventions on blood lipids<\/Title>        <SourceTitle>American Journal of Clinical Nutrition<\/SourceTitle>        <PubMedTitle>Am J Clin Nutr<\/PubMedTitle>        <Volume>90<\/Volume>        <Issue>2<\/Issue>        <Page>288<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Pan, A.<\/Author>          <Author>Yu, D.<\/Author>          <Author>Demark-Wahnefried, W.<\/Author>          <Author>Franco, O.H.<\/Author>          <Author>Lin, X.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1591100\" medline_id=\"18460483\">        <Title>Flaxseed and cardiovascular risk factors: Results from a double blind, randomized, controlled clinical trial<\/Title>        <SourceTitle>Journal of the American College of Nutrition<\/SourceTitle>        <PubMedTitle>J Am Coll Nutr<\/PubMedTitle>        <Volume>27<\/Volume>        <Issue>1<\/Issue>        <Page>65<\/Page>        <Year>2008<\/Year>        <Authors>          <Author>Bloedon, L.T.<\/Author>          <Author>Balikai, S.<\/Author>          <Author>Chittams, J.<\/Author>          <Author>Cunnane, S.C.<\/Author>          <Author>Berlin, J.A.<\/Author>          <Author>Rader, D.J.<\/Author>          <Author>Szapary, P.O.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1591103\" medline_id=\"19568181\">        <Title>Flaxseed and cardiovascular health<\/Title>        <SourceTitle>Journal of Cardiovascular Pharmacology<\/SourceTitle>        <PubMedTitle>J Cardiovasc Pharmacol<\/PubMedTitle>        <Volume>54<\/Volume>        <Issue>5<\/Issue>        <Page>369<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Prasad, K.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1619020\" medline_id=\"19528562\">        <Title>Red yeast rice for dyslipidemia in statin-intolerant patients: A randomized trial<\/Title>        <SourceTitle>Annals of Internal Medicine<\/SourceTitle>        <PubMedTitle>Ann Intern Med<\/PubMedTitle>        <Volume>150<\/Volume>        <Issue>12<\/Issue>        <Page>830<\/Page>        <Year>2009<\/Year>        <Authors>          <Author>Becker, D.J.<\/Author>          <Author>Gordon, R.Y.<\/Author>          <Author>Halbert, S.C.<\/Author>          <Author>French, B.<\/Author>          <Author>Morris, P.B.<\/Author>          <Author>Rader, D.J.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1619024\" medline_id=\"20858178\">        <Title>The efficacy and safety of herbal medicines used in the treatment of hyperlipidemia; a systematic review<\/Title>        <SourceTitle>Current Pharmaceutical Design<\/SourceTitle>        <PubMedTitle>Curr Pharm Des<\/PubMedTitle>        <Volume>16<\/Volume>        <Issue>26<\/Issue>        <Page>2935<\/Page>        <Year>2010<\/Year>        <Authors>          <Author>Hasani-Ranjbar, S.<\/Author>          <Author>Nayebi, N.<\/Author>          <Author>Moradi, L.<\/Author>          <Author>Mehri, A.<\/Author>          <Author>Larijani, B.<\/Author>          <Author>Abdollahi, M.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"2295910\" medline_id=\"23590705\">        <Title>Effect of garlic on serum lipids: An updated meta-analysis<\/Title>        <SourceTitle>Nutrition Reviews<\/SourceTitle>        <PubMedTitle>Nutr Rev<\/PubMedTitle>        <Volume>71<\/Volume>        <Issue>5<\/Issue>        <Page>282<\/Page>        <Year>2013<\/Year>        <Authors>          <Author>Ried, K.<\/Author>          <Author>Toben, C.<\/Author>          <Author>Fakler, P.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section>  <Section sectionId=\"1417\" modifiedDate=\"20141010022128\">    <Title>Current Atherosclerosis Pipeline<\/Title>    <Body>      <para>Consult the tables below for an overview of all products mentioned in this review, including drugs, biologics and diagnostic agents that have been marketed or are under active development for this indication. Tables may also include drugs not covered in the preceding sections because their mechanism of action is unknown or not well characterized.<FREETABLE id=\"75\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>      <TR>      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Lipid-lowering drugs marketed for the prevention and treatment of atherosclerosis<\/B><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Drug name<\/B><\/TD>      <TD WIDTH=\"120\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Company<\/B><\/TD>      <TD WIDTH=\"100\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B>Year and country of first launch<\/B><\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Bile acid sequestrants<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91567&p_type=L&p_origen=BGR&p_tsearch=A\">Cholestyramine resin<\/a> (Questran, LoCholest)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1961<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=285607&p_type=L&p_origen=BGR&p_tsearch=A\">Colestipol hydrochloride<\/a> (Colestid)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1977 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=185277&p_type=L&p_origen=BGR&p_tsearch=A\">Colestilan<\/a> (Cholebine)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Mitsubishi Chemical/Mitsubishi Tanabe Pharma/Astellas<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1999 (Japan)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=222457&p_type=L&p_origen=BGR&p_tsearch=A\">Colesevelam hydrochloride<\/a> (Welchol)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Daiichi Sankyo/Genzyme/Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2000 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Fibric acid derivatives<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=296346&p_type=L&p_origen=BGR&p_tsearch=A\">Clofibrate<\/a> (Atromid-S)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1963<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=282546&p_type=L&p_origen=BGR&p_tsearch=A\">Bezafibrate<\/a> (Bezatol)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Roche<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1978<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91117&p_type=L&p_origen=BGR&p_tsearch=A\">Clinofibrate<\/a> (Lipoclin)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Dainippon Sumitomo Pharma<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1981 (Japan)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=91114&p_type=L&p_origen=BGR&p_tsearch=A\">Gemfibrozil<\/a> (Lopid)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1982 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=122952&p_type=L&p_origen=BGR&p_tsearch=A\">Ronifibrate<\/a> (Cloprane)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Daiichi Sankyo<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1985 (Italy)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90802&p_type=L&p_origen=BGR&p_tsearch=A\">Binifibrate<\/a> (Biniwas)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Soc. Esp. Esp. Farmaco-Terapeuticas<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1987 (Spain)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=276065&p_type=L&p_origen=BGR&p_tsearch=A\">Fenofibrate<\/a> (Lipidil)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1987 (France)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=115067&p_type=L&p_origen=BGR&p_tsearch=A\">Ciprofibrate<\/a> (Ciprol)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1995 (France)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=422591&p_type=L&p_origen=BGR&p_tsearch=A\">Choline fenofibrate<\/a> (Trilipix)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2008 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>HMG-CoA reductase inhibitors (statins)<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90077&p_type=L&p_origen=BGR&p_tsearch=A\">Lovastatin<\/a> (Mevacor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1987 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=122234&p_type=L&p_origen=BGR&p_tsearch=A\">Simvastatin<\/a> (Zocor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1988 (Sweden)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=103471&p_type=L&p_origen=BGR&p_tsearch=A\">Pravastatin sodium<\/a> (Lipostat)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Daiichi Sankyo<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1989 (Japan)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=129568&p_type=L&p_origen=BGR&p_tsearch=A\">Fluvastatin sodium<\/a> (Locol)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Novartis<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1993 (U.K., U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=180072&p_type=L&p_origen=BGR&p_tsearch=A\">Atorvastatin calcium<\/a> (Lipitor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1997 (Germany)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=192009&p_type=L&p_origen=BGR&p_tsearch=A\">Pitavastatin calcium<\/a> (Livalo)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Nissan Chemical/Daiichi Sankyo/Kowa<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (Japan)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=243619&p_type=L&p_origen=BGR&p_tsearch=A\">Rosuvastatin calcium<\/a> (Crestor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AstraZeneca<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2003 (Canada)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=967945&p_type=L&p_origen=BGR&p_tsearch=A\">Pitavastatin magnesium<\/a> (Zypitamag)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Zydus Cadilla<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2017 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Nicotinic acid derivatives<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=115061&p_type=L&p_origen=BGR&p_tsearch=A\">Acipimox<\/a> (Olbetam)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1985 (Italy)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=256792&p_type=L&p_origen=BGR&p_tsearch=A\">Niacin<\/a> (Niaspan)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1998 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Cholesterol absorption inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=224366&p_type=L&p_origen=BGR&p_tsearch=A\">Ezetimibe<\/a> (Zetia, Ezetrol)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2002 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>MTTP inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=235523&p_type=L&p_origen=BGR&p_tsearch=A\">Lomitapide<\/a> (Juxtapid)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Novelion Therapeutics<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (U.S.) (familial hypercholesterolemia)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>APOB expression inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=339511&p_type=L&p_origen=BGR&p_tsearch=A\">Mipomersen sodium<\/a> (Kynamro)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Ionis/Genzyme<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (U.S.) (homozygous familial hypercholesterolemia)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>PPAR modulators<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=802540&p_type=L&p_origen=BGR&p_tsearch=A\">Saroglitazar magnesium<\/a> (Lipoglyn)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Zydus<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (India) (diabetic dyslipidemia)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=400569&p_type=L&p_origen=BGR&p_tsearch=A\">Pemafibrate<\/a> (Parmodia)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Kowa<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2018 (Japan)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>PCSK9 inhibitors<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=687774&p_type=L&p_origen=BGR&p_tsearch=A\">Alirocumab<\/a> (Praluent)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi/Regeneron<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2015 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661832&p_type=L&p_origen=BGR&p_tsearch=A\">Evolocumab<\/a> (Repatha)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Amgen<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2015 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Antiplatelet therapy<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=142672&p_type=L&p_origen=BGR&p_tsearch=A\">Clopidogrel bisulfate<\/a> (Iscover, Plavix)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Sanofi/Bristol-Myers Squibb<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1998 (U.S.)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Combination products<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=342656&p_type=L&p_origen=BGR&p_tsearch=A\">Amlodipine besylate/atorvastatin calcium<\/a> (Caduet)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Pfizer<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=289928&p_type=L&p_origen=BGR&p_tsearch=A\">Ezetimibe/simvastatin<\/a> (Inegy)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2004 (Germany, Mexico, U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=632487&p_type=L&p_origen=BGR&p_tsearch=A\">Atorvastatin/ramipril<\/a> (Atocor-R)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Dr. Reddy's<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2008 (India)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=348069&p_type=L&p_origen=BGR&p_tsearch=A\">Niacin/simvastatin<\/a> (Simcor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      AbbVie<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2008 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=448662&p_type=L&p_origen=BGR&p_tsearch=A\">Ezetimibe/atorvastatin<\/a> (Liptruzet)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Merck & Co.<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (U.S.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=644223&p_type=L&p_origen=BGR&p_tsearch=A\">Fenofibrate/simvastatin<\/a> (Cholib)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Abbott<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2014 (Croatia, Slovenia, Bulgaria)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=822508&p_type=L&p_origen=BGR&p_tsearch=A\">Rosuvastatin/olmesartan<\/a> (Olostar)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Daewoong<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2014 (Korea)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=858600&p_type=L&p_origen=BGR&p_tsearch=A\">Fimasartan/rosuvastatin calcium<\/a> (Tuvero)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Boryung<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2016 (Korea)<\/TD>      <\/TR>      <TR>      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>      <B><I>Miscellaneous lipid-lowering agents<\/B><\/I><\/FONT><\/TD>            <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=167987&p_type=L&p_origen=BGR&p_tsearch=A\">Icosapent ethyl ester<\/a> (Epadel)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Mochida<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1990 (Japan)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=213604&p_type=L&p_origen=BGR&p_tsearch=A\">Omega-3-acid ethyl esters<\/a> (Omacor)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Abbott/GlaxoSmithKline<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      1995 (Norway)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=321631&p_type=L&p_origen=BGR&p_tsearch=A\">Reducol<\/a><\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Forbes Medi-Tech<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2005 (U.K.)<\/TD>      <\/TR>      <TR>      <TD WIDTH=\"223\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=167987&p_type=L&p_origen=BGR&p_tsearch=A\">Icosapent ethyl ester<\/a>, ultra pure (Vascepa)<\/TD>      <TD WIDTH=\"120\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      Amarin<\/TD>      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>      2013 (U.S.)<\/TD>      <\/TR><\/TABLE>]]><\/FREETABLE>        <COMPETITIVE id=\"287\">          <TABLE>            <TR>              <TD>Drugs in development for the treatment of atherosclerosis and hypercholesterolemia<\/TD>            <\/TR>            <TR>              <TD>Drug Name<\/TD>              <TD>Organization<\/TD>              <TD>Mechanism of Action<\/TD>              <TD>Status<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=369130&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bempedoic acid<\/a>              <\/TD>              <TD>Esperion Therapeutics<\/TD>              <TD>AMP-Activated Protein Kinase (AMPK) Activators/ ATP Citrate Lyase Inhibitors/ Signal Transduction Modulators<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=965042&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bempedoic acid/ezetimibe<\/a>              <\/TD>              <TD>Esperion Therapeutics<\/TD>              <TD>Liver Bile Acid Transporter (LBAT) Inhibitors/ AMP-Activated Protein Kinase (AMPK) Activators/ Niemann-Pick C1-Like protein 1 (NPC1L1) Inhibitors/ Cholesterol Absorption Inhibitors/ ATP Citrate Lyase Inhibitors/ Signal Transduction Modulators<\/TD>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=723186&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HS-25<\/a>              <\/TD>              <TD>Zhejiang Hisun Pharmaceutical<\/TD>              <TD/>              <TD>Pre-Registered<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=777277&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AKR-963<\/a>              <\/TD>              <TD>FMC<\/TD>              <TD/>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=904512&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amlodipine besylate/rosuvastatin calcium/telmisartan<\/a>              <\/TD>              <TD>Yuhan<\/TD>              <TD>Angiotensin AT1 Receptor Antagonists/ PPARalpha Partial Agonists/ PPARgamma Modulators/ Calcium Channel Blockers/ P-Glycoprotein (MDR-1; ABCB1) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=910032&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Atorvastatin calcium/choline fenofibrate<\/a>              <\/TD>              <TD>Chong Kun Dang Holdings<\/TD>              <TD>Dipeptidyl Peptidase IV (CD26; DPP-IV; DP-IV) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ TNFSF6 Expression Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=766632&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Atorvastatin calcium/losartan potassium<\/a>              <\/TD>              <TD>HanAll BioPharma<\/TD>              <TD>Angiotensin AT1 Receptor Antagonists/ Dipeptidyl Peptidase IV (CD26; DPP-IV; DP-IV) Inhibitors/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ TNFSF6 Expression Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=852638&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Atorvastatin calcium/metformin hydrochloride<\/a>              <\/TD>              <TD>Daewoong/ CJ HealthCare<\/TD>              <TD>AMP-Activated Protein Kinase (AMPK) Activators/ Dipeptidyl Peptidase IV (CD26; DPP-IV; DP-IV) Inhibitors/ Insulin Sensitizers/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ TNFSF6 Expression Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=695207&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CER-001<\/a>              <\/TD>              <TD>Cerenis Therapeutics<\/TD>              <TD>HDL-Cholesterol Increasing Agents<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=932137&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CJ-30061<\/a>              <\/TD>              <TD>CJ HealthCare<\/TD>              <TD/>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=862928&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">D-5884<\/a>              <\/TD>              <TD>AstraZeneca<\/TD>              <TD/>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=798084&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Evinacumab<\/a>              <\/TD>              <TD>Regeneron<\/TD>              <TD>Anti-ANGPTL3 (Angiopoietin-Related Protein 3)<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=864982&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Fenofibrate/pitavastatin calcium<\/a>              <\/TD>              <TD>Hanlim Pharmaceutical<\/TD>              <TD>PPARalpha Agonists/ APOA1 Expression Enhancers/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors/ SPP1 (Osteopontin) Expression Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=441754&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Inclisiran<\/a>              <\/TD>              <TD>The Medicines Co.<\/TD>              <TD>PCSK9 Expression Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=755425&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NKPL-66<\/a>              <\/TD>              <TD>Acasti Pharma<\/TD>              <TD/>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=832868&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rosuvastatin calcium/metformin hydrochloride<\/a>              <\/TD>              <TD>Jeil Pharmaceutical<\/TD>              <TD>AMP-Activated Protein Kinase (AMPK) Activators/ Insulin Sensitizers/ Signal Transduction Modulators/ HMG-CoA Reductase Inhibitors<\/TD>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=706381&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">V-6<\/a>              <\/TD>              <TD>Immunitor<\/TD>              <TD/>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=848752&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">YH-14755<\/a>              <\/TD>              <TD>Yuhan<\/TD>              <TD/>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=318921&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">[18F]Methylcholine<\/a>              <\/TD>              <TD>Universiteit Maastricht<\/TD>              <TD/>              <TD>Phase III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=641444&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">TRIA-662<\/a>              <\/TD>              <TD>Cortria<\/TD>              <TD/>              <TD>Phase II/III<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=474661&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">(+)-Antroquinonol<\/a>              <\/TD>              <TD>Golden Biotech<\/TD>              <TD>Antioxidants<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=775119&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">99mTc-Anx-128<\/a>              <\/TD>              <TD>Advanced Accelerator Applications (AAA)<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AKCEA-APOCIII-LRx<\/a>              <\/TD>              <TD>Akcea Therapeutics<\/TD>              <TD>APOC3 Expression Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=724838&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ARI-3037-MO<\/a>              <\/TD>              <TD>Arisaph<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931744&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Alprostadil liposomes<\/a>              <\/TD>              <TD>Guangzhou Yipinhong Pharmaceutical<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=934837&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CBW-511<\/a>              <\/TD>              <TD>Caliway Biopharmaceuticals<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=390047&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CI-201<\/a>              <\/TD>              <TD>Vascular Biogenics (d/b/a VBL Ther)<\/TD>              <TD>Motile Sperm Domain-Containing Protein 2 (MOSPD2) Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=242854&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Gemcabene calcium<\/a>              <\/TD>              <TD>Gemphire Therapeutics<\/TD>              <TD>PPAR Agonists/ HDL-Cholesterol Increasing Agents/ Signal Transduction Modulators<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=985966&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IBI-306<\/a>              <\/TD>              <TD>Innovent Biologics<\/TD>              <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=755883&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ISIS-494372<\/a>              <\/TD>              <TD>Ionis Pharmaceuticals<\/TD>              <TD>APOA Expression Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1005624&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LIB-003<\/a>              <\/TD>              <TD>LIB Therapeutics<\/TD>              <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=727488&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Nicodicosapent<\/a>              <\/TD>              <TD>Catabasis Pharmaceuticals<\/TD>              <TD>Sterol Regulatory Element Binding Protein (SREBP) Inhibitors/ Lipid Lowering Agents/ Signal Transduction Modulators<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=628880&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Obicetrapib<\/a>              <\/TD>              <TD>Amgen<\/TD>              <TD>Cholesteryl Ester Transfer Protein (CETP) Inhibitors/ HDL-Cholesterol Increasing Agents/ Lipid Lowering Agents/ Triglyceride Lowering Agents<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=887202&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PVT-100<\/a>              <\/TD>              <TD>Pivotal Therapeutics<\/TD>              <TD/>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=444128&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Resmetirom<\/a>              <\/TD>              <TD>Madrigal Pharmaceuticals<\/TD>              <TD>Thyroid Hormone Receptor beta Agonists/ Signal Transduction Modulators<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395545&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Revacept<\/a>              <\/TD>              <TD>advanceCOR<\/TD>              <TD>Platelet Adhesion Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=642113&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">S-556971<\/a>              <\/TD>              <TD>Kotobuki<\/TD>              <TD>Niemann-Pick C1-Like protein 1 (NPC1L1) Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=410531&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SLx-4090<\/a>              <\/TD>              <TD>NT Life Sciences<\/TD>              <TD>ApoB Secretion Inhibitors/ Microsomal Triglyceride Transfer Protein (MTTP) Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=330079&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Selexipag<\/a>              <\/TD>              <TD>Nippon Shinyaku<\/TD>              <TD>Prostanoid IP Receptor Agonists/ Signal Transduction Modulators/ Prostacyclin Mimetics<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=879261&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">TQJ-230<\/a>              <\/TD>              <TD>Akcea Therapeutics<\/TD>              <TD>APOA Expression Inhibitors<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=157617&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tipelukast<\/a>              <\/TD>              <TD>MediciNova<\/TD>              <TD>5-Lipoxygenase Inhibitors/ Leukotriene CysLT1 (LTD4) Receptor Antagonists/ Prostanoid TP Receptor Antagonists/ Leukotriene CysLT2 (LTC4) Receptor Antagonists/ Phosphodiesterase PDE3 Inhibitors/ Phosphodiesterase PDE4 Inhibitors/ Signal Transduction Modulators<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=885328&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VK-2809<\/a>              <\/TD>              <TD>Viking Therapeutics<\/TD>              <TD>Thyroid Hormone Receptor beta Agonists/ Signal Transduction Modulators<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=759971&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rhLCAT<\/a>              <\/TD>              <TD>MedImmune<\/TD>              <TD>Phosphatidylcholine-Sterol Acyltransferase (LCAT) Mimetics/ APOA1 Expression Enhancers<\/TD>              <TD>Phase II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=334355&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AEM-28<\/a>              <\/TD>              <TD>LipimetiX Development<\/TD>              <TD>Lipid Lowering Agents<\/TD>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=821938&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MAT-9001<\/a>              <\/TD>              <TD>Matinas BioPharma<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=763317&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RGX-501<\/a>              <\/TD>              <TD>REGENXBIO<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=929478&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ursodeoxycholic acid berberine<\/a>              <\/TD>              <TD>HighTide Biopharma<\/TD>              <TD/>              <TD>Phase I/II<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=946287&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AMG-890<\/a>              <\/TD>              <TD>Amgen<\/TD>              <TD>APOA Expression Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=975475&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ARO-ANG3<\/a>              <\/TD>              <TD>Arrowhead Pharmaceuticals<\/TD>              <TD>ANGPTL3 Expression Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=975471&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ARO-APOC3<\/a>              <\/TD>              <TD>Arrowhead Pharmaceuticals<\/TD>              <TD>APOC3 Expression Inhibitors<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=896528&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AT-04A<\/a>              <\/TD>              <TD>AFFiRiS<\/TD>              <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=896536&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AT-06A<\/a>              <\/TD>              <TD>AFFiRiS<\/TD>              <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=912881&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Allo-ADMPC<\/a>              <\/TD>              <TD>Osaka University<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=462423&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CER-002<\/a>              <\/TD>              <TD>Cerenis Therapeutics<\/TD>              <TD>PPARdelta Agonists/ Signal Transduction Modulators<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=951993&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CiVi-007<\/a>              <\/TD>              <TD>CiVi Biopharma<\/TD>              <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=943504&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IONIS-AZ4-2.5-LRx<\/a>              <\/TD>              <TD>AstraZeneca<\/TD>              <TD/>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1017672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MEDI-6570<\/a>              <\/TD>              <TD>MedImmune<\/TD>              <TD>Anti-Oxidized Low-Density Lipoprotein Receptor 1 (OLR1, LOX1)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=791488&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rocacetrapib<\/a>              <\/TD>              <TD>Chong Kun Dang Holdings<\/TD>              <TD>Cholesteryl Ester Transfer Protein (CETP) Inhibitors/ HDL-Cholesterol Increasing Agents<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1016525&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SHR-1209<\/a>              <\/TD>              <TD>Jiangsu Hengrui<\/TD>              <TD>Anti-PCSK9 (Proprotein Convertase Subtilisin/Kexin-Type 9)<\/TD>              <TD>Phase I<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=413524&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Orticumab<\/a>              <\/TD>              <TD>CardioVax (d/b/a Abcentra)<\/TD>              <TD>Anti-APOB (Apolipoprotein B-100)<\/TD>              <TD>Clinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=329529&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">4-Guanidino-n-butyl syringate<\/a>              <\/TD>              <TD>Zhongzhu Healthcare Holding<\/TD>              <TD>Antioxidants/ Apoptosis Inhibitors<\/TD>              <TD>IND Filed<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931380&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AEM-28-14<\/a>              <\/TD>              <TD>LipimetiX Development<\/TD>              <TD>Lipid Lowering Agents<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=858549&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALN-AC3<\/a>              <\/TD>              <TD>Alnylam Pharmaceuticals<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=792968&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ANGPTL3-GalNAc<\/a>              <\/TD>              <TD>Alnylam Pharmaceuticals<\/TD>              <TD>Anti-ANGPTL3 (Angiopoietin-Related Protein 3)<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=861120&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Artpep-2<\/a>              <\/TD>              <TD>Artery Therapeutics<\/TD>              <TD>ABCA1 Expression Enhancers<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=402619&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CDX-085<\/a>              <\/TD>              <TD>Cardax<\/TD>              <TD>Antioxidants<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=926403&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CER-209<\/a>              <\/TD>              <TD>Cerenis Therapeutics<\/TD>              <TD>P2Y13 (GPR86; GPR94) Receptor Agonists/ Signal Transduction Modulators<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=760627&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">COR-2<\/a>              <\/TD>              <TD>advanceCOR<\/TD>              <TD>Low-Density Lipoprotein Receptor (LDLR) Ligands/ Signal Transduction Modulators<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=861288&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dipep<\/a>              <\/TD>              <TD>Artery Therapeutics<\/TD>              <TD>ABCA1 Expression Enhancers<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1015584&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NYX-330<\/a>              <\/TD>              <TD>Nyrada<\/TD>              <TD>Proprotein Convertase Subtilisin/Kexin-Type 9 (PCSK9) Inhibitors<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1022404&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">P-21<\/a>              <\/TD>              <TD>Shifa Biomedical<\/TD>              <TD>Proprotein Convertase Subtilisin/Kexin-Type 9 (PCSK9) Inhibitors<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=412318&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Reverse-D4F<\/a>              <\/TD>              <TD>Arisaph<\/TD>              <TD>Lipid Lowering Agents/ Lipid Peroxidation Inhibitors<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=952002&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">STT-5058<\/a>              <\/TD>              <TD>Staten Biotechnology<\/TD>              <TD>Anti-APOC3 (Apolipoprotein C-III)<\/TD>              <TD>Preclinical<\/TD>            <\/TR>            <TR>              <TD>                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=840069&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Sinoporphyrin sodium<\/a>              <\/TD>              <TD>First Affiliated Hosp Harbin Med Univ<\/TD>              <TD/>              <TD>Preclinical<\/TD>            <\/TR>          <\/TABLE>        <\/COMPETITIVE>      <\/para>    <\/Body>    <References/>  <\/Section>  <Section sectionId=\"1422\" modifiedDate=\"20121123045654\">    <Title>Surgical Treatment<\/Title>    <Body>      <para>If drug therapy is not successful in reducing atherosclerotic plaques, surgical intervention may be required. A variety of surgical options for coronary revascularization exist, including coronary artery bypass graft (CABG) surgery and percutaneous coronary intervention (PCI), which includes catheterization, balloon angioplasty and stenting. More than one million surgical revascularization procedures are performed each year in the US, at a cost of more than USD 6.7 billion in Medicare payments (<REF id=\"1635121\">Epstein, A.J. et al., 2011<\/REF>). Bypass surgery, in which blood vessels are taken from other parts of the body and grafted to create a detour around blocked arteries, is by far the most invasive option. Angioplasty is less traumatic and cheaper than bypass surgery, but has a much higher relapse rate: up to 40% of arteries opened with this method close up again within six months. Stents can be inserted to hold the vessel open, but often become blocked with plaque (a process called restenosis) as well. In recent years, the frequency of CABG sugery has decreased substantially (30% decrease from 2001-2008) in the U.S., while that of PCI has essentially remained unchanged (<REF id=\"1635121\">Epstein, A.J. et al., 2011<\/REF>).<\/para>      <para>Radiation therapy is sometimes used in combination with balloon angioplasty or to treat in-stent restenosis. Radioactive pellets emitting gamma- or beta-irradiation are inserted through a catheter to the site of blockage, where they are held in place for several minutes. The radiation inhibits --or at least delays-- cell division and the formation of scar tissue that could lead to restenosis, as well as reducing established restenosis (<REF id=\"662379\">Brenner, D.J. and Miller, R.C., 2001<\/REF>; <REF id=\"662388\">Waksman, R. et al., 2000<\/REF>).<\/para>    <\/Body>    <References>      <Reference id=\"662379\" medline_id=\"11238281\">        <Title>Long-term efficacy of intracoronary irradiation in inhibiting in-stent restenosis<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>103<\/Volume>        <Issue>9<\/Issue>        <Page>1330<\/Page>        <Year>2001<\/Year>        <Authors>          <Author>Brenner, D.J.<\/Author>          <Author>Miller, R.C.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"662388\" medline_id=\"10801757\">        <Title>Intracoronary gamma-radiation therapy after angioplasty inhibits recurrence in patients with in-stent restenosis<\/Title>        <SourceTitle>Circulation<\/SourceTitle>        <PubMedTitle>Circulation<\/PubMedTitle>        <Volume>101<\/Volume>        <Issue>18<\/Issue>        <Page>2165<\/Page>        <Year>2000<\/Year>        <Authors>          <Author>Waksman, R.<\/Author>          <Author>et al.<\/Author>        <\/Authors>      <\/Reference>      <Reference id=\"1635121\" medline_id=\"21540420\">        <Title>Coronary revascularization trends in the United States, 2001-2008<\/Title>        <SourceTitle>JAMA - Journal of the American Medical Association<\/SourceTitle>        <PubMedTitle>JAMA<\/PubMedTitle>        <Volume>305<\/Volume>        <Issue>17<\/Issue>        <Page>1769<\/Page>        <Year>2011<\/Year>        <Authors>          <Author>Epstein, A.J.<\/Author>          <Author>Polsky, D.<\/Author>          <Author>Yang, F.<\/Author>          <Author>Yang, L.<\/Author>          <Author>Groeneveld, P.W.<\/Author>        <\/Authors>      <\/Reference>    <\/References>  <\/Section><\/Section><Section sectionId=\"4583\" modifiedDate=\"20160801091637\">  <Title>Targets for Therapeutic Intervention<\/Title>  <Body>    <para>For an overview of validated therapeutic targets for this indication, consult the targetscape below. The targetscape shows an overall cellular and molecular landscape or comprehensive network of connections among the current therapeutic targets for the treatment of the condition and their biological actions. An arrow indicates a positive effect; a dash indicates a negative effect. Gray or lighter symbols are protein targets that are not validated (i.e., not under active development [UAD]). Pink text boxes with red borders indicate validated gene targets. Yellow text boxes are gene targets not UAD. Purple and pink text boxes indicate extracellular and intracellular effects, respectively. Green text boxes indicate a related disease/condition/symptom. For in-depth information on a specific target or mechanism of action, see the corresponding section in this report.<\/para>  <\/Body>  <References/><\/Section><\/Sections>","DiseaseTitle":"Atherosclerosis","Id":10,"LastReviewDate":"2019-05-21T00:00:00Z","DatePublished":"2001-05-28T00:00:00Z"}}"}],"title":"I pass a &quot;id = 10&quot; as parameter to &quot;getDiseaseBriefingRecordV2&quot; operation","status":"passed"},{"date":"2019-06-14 23:59:13","title":"response contains &quot;Id&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:13","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:13","title":"response contains &quot;DatePublished&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:13","title":"response contains &quot;LastReviewDate&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:13","title":"response contains &quot;DiseaseInfo&quot; in json fields","status":"passed"},{"date":"2019-06-14 23:59:13","title":"response contains &quot;DiseaseTitle&quot; in json fields","status":"passed"}],"status":"passed"}}],"os":"Windows Server 2008 R2 6.1 x86","ip":"10.152.84.170","name":"Feature_getDiseaseBriefingRecordREST","time":"2019-06-14 23:59:08","url":"http://mwa.eu-west-1.prodeu.prod.cortellis.int.clarivate.com","targettestcycle":"DDAPI_Smoke_RT77"}}]