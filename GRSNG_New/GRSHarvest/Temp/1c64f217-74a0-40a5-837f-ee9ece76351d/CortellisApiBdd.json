[{"testset":{"tests":[{"testcase":{"tag":"@TestCaseId(\"getDiseaseBriefingRecordREST_002\")","time":"2019-04-01 14:21:48","title":"Validate the authToken.","steps":[{"date":"2019-04-01 14:21:48","title":"I am authenticated user accessing &quot;REST&quot; API","status":"passed"},{"date":"2019-04-01 14:21:48","StepAttachment":[{"mime":"TXT","content":"aHR0cHM6Ly9wcm9kZXUtYXBpLmNvcnRlbGxpcy5pbnQuY2xhcml2YXRlLmNvbS9hcGktd3Mvd3MvcnMvYXV0aC12Mi90b2tlbg=="},{"mime":"TXT","content":"MGE4MzhiMDUtNzMwZi00OGNkLWI4MWMtNmJiZDkwMmZiOTky"},{"mime":"TXT","content":"MGE4MzhiMDUtNzMwZi00OGNkLWI4MWMtNmJiZDkwMmZiOTky"}],"title":"I pass a &quot;&quot; as parameter to &quot;getTokenV2&quot; operation","status":"passed"},{"date":"2019-04-01 14:21:49","substeps":[{"date":"2019-04-01 14:21:49","message":"Valid token received","status":"passed"}],"title":"I should get token in the response","status":"passed"},{"date":"2019-04-01 14:21:48","StepAttachment":[{"mime":"TXT","content":"aHR0cHM6Ly9wcm9kZXUtYXBpLmNvcnRlbGxpcy5pbnQuY2xhcml2YXRlLmNvbS9hcGktd3Mvd3MvcnMvZGlzZWFzZWJyaWVmaW5ncy12Mi9kaXNlYXNlQnJpZWZpbmcvMQ=="},{"mime":"TXT","content":""}],"title":"I pass a &quot;id = 1&quot; as parameter to &quot;getDiseaseBriefingRecordV2&quot; operation","status":"passed"},{"date":"2019-04-01 14:21:48","title":"response contains &quot;Id&quot; in json fields","status":"passed"}],"status":"passed"}}],"os":"Windows Server 2016 10.0 x86","ip":"10.152.84.249","name":"Feature_getDiseaseBriefingRecordREST","time":"2019-04-01 14:21:48","url":"http://mwa.eu-west-1.prodeu.prod.cortellis.int.clarivate.com","targettestcycle":"Services/API_Regression"}}]