[{"testset":{"tests":[{"testcase":{"tag":"@TestCaseId(\"siDiseaseBriefings_01\")","time":"2019-06-15 01:12:35","title":"Check the presence of all the tags","steps":[{"date":"2019-06-15 01:12:35","title":"I am authenticated user accessing &quot;REST&quot; API","status":"passed"},{"date":"2019-06-15 01:12:35","StepAttachment":[{"mime":"TXT","content":"ICAgICAgICAgIHNlbGVjdCAqIGZyb20gKHNlbGVjdCBiZ2JfYmFja2dyb3VuZGVyX2lkIGZyb20gc2NpX3B1YmxpYy5iZ3JfYmFja2dyb3VuZGVyc19tdil3aGVyZSByb3dudW08MiAgICAg"},{"mime":"TXT","content":"aHR0cDovL213Yi5ldS13ZXN0LTEucHJvZGV1LnByb2QuY29ydGVsbGlzLmludC5jbGFyaXZhdGUuY29tOjgzNDYvbXIvUmV0cmlldmVTZXJ2aWNlL3Jlc3QvdjMvcmV0cmlldmUvZGlzZWFzZUJyaWVmaW5nP2lkTGlzdD0xJmRhdGFzZXQ9ZGlzZWFzZWJyaWVmaW5ncyZmaWVsZExpc3Q9ZGlzZWFzZVRpdGxlJTJDZGF0ZVB1Ymxpc2hlZCUyQ2Rpc2Vhc2VJbmZv"},{"mime":"TXT","content":"{"RetrieveDiseaseBriefingOutput":{"DiseaseBriefings":[{"id":"1","DiseaseTitle":"HIV and AIDS","DatePublished":"2001-07-25T00:00:00Z","DiseaseInfo":"<Sections><Section sectionId=\"397\" modifiedDate=\"20181214085055\">\n  <Title>Facts about HIV and AIDS</Title>\n  <Body>\n    <para>The human immunodeficiency virus (HIV) is a retrovirus belonging to the Retroviridae family, lentivirus genus, which was first identified in 1983. Initially the virus was designated human T-cell lymphotrophic virus type III (HTLV-III) or lymphadenopathy-associated virus (LAV) (<REF id=\"1162638\">De Clercq, E., 2007</REF>). There are two main forms of the virus that cause human disease: HIV-1 and HIV-2. These forms are similar in their genetic structure and modes of transmission, although their DNA sequences differ by as much as 40% (<REF id=\"1199753\">Cohen, M.S. et al., 2008</REF>). HIV-2 has historically be considered less virulent (<REF id=\"2552673\">Azevedo-Pereira, J.M. and Santos-Costa, Q., 2016</REF>), progressing to AIDS less frequently and associated with lower mortality; however, a long-term study comparing HIV-1- and HIV-2-infected subjects in Guinea-Bissau suggests that HIV-2 is more pathogenic and deadly than previously believed (<REF id=\"2931416\">Esbjörnsson, J. et al., 2018</REF>).\n\n\n\n</para>\n    <para>Untreated, HIV causes the acquired immune deficiency syndrome (AIDS), a gradual deterioration of the immune system, leading to opportunistic infections and ultimately, death. The outlook for HIV-infected individuals has improved significantly with the introduction in 1996 of highly active antiretroviral therapy (HAART), which--if initiated early and taken correctly--can transform the disease from a life sentence to a chronic pathology (<REF id=\"1955205\">Le Douce, V. et al., 2012</REF>; <REF id=\"2209456\">Maartens, G. et al., 2014</REF>).\n\n</para>\n    <para>The World Health Organization (WHO) estimates that there were approximately 36.9 million adults and children living with HIV/AIDS worldwide in 2017, but that only 75% of HIV-positive individuals worldwide were aware of their status, and even fewer were receiving antiretroviral drug therapy (<a href=\"http://www.who.int/hiv/data/en/\">HIV/AIDS -- data and statistics (World Health Organization)</a>, consulted December 3, 2018). The Joint United Nations Programme on HIV/AIDS (UNAIDS)  has set the ambitious goal of tackling underdiagnosis and undertreatment of HIV, and thus of ending the global AIDS epidemic, by the year 2030 (<REF id=\"2552676\">Harries, A.D. et al., 2016</REF>; <REF id=\"2949697\">Medlock, J. et al., 2017</REF>). If this goal is successfully achieved, an estimated 73% of all people in the world with HIV will have undetectable viral levels. At this level of viral suppression, the trajectory of the AIDS epidemic would hit an inflection point, no longer reaching pandemic proportions (<REF id=\"2948271\">Fauci, A.S., 2017</REF>). The cost-benefit ratio of such an approach is significant: each U.S. dollar invested in a fast-track version of this HIV elimination strategy will reap USD 6.44 in economic benefits (<REF id=\"2944307\">Lamontagne, E. et al., 2018</REF>). \n\n</para>\n  </Body>\n  <References>\n    <Reference id=\"1162638\" medline_id=\"18049474\">\n      <Title>The design of drugs for HIV and HCV</Title>\n      <SourceTitle>Nature Reviews Drug Discovery</SourceTitle>\n      <PubMedTitle>Nat Rev Drug Discov</PubMedTitle>\n      <Volume>6</Volume>\n      <Issue>12</Issue>\n      <Page>1001</Page>\n      <Year>2007</Year>\n      <Authors>\n        <Author>De Clercq, E.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"1199753\" medline_id=\"18382737\">\n      <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic</Title>\n      <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n      <PubMedTitle>J Clin Invest</PubMedTitle>\n      <Volume>118</Volume>\n      <Issue>4</Issue>\n      <Page>1244</Page>\n      <Year>2008</Year>\n      <Authors>\n        <Author>Cohen, M.S.</Author>\n        <Author>Hellmann, N.</Author>\n        <Author>Levy, J.A.</Author>\n        <Author>Decock, K.</Author>\n        <Author>Lange, J.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"1955205\" medline_id=\"22294645\">\n      <Title>Achieving a cure for HIV infection: Do we have reasons to be optimistic?</Title>\n      <SourceTitle>Journal of Antimicrobial Chemotherapy</SourceTitle>\n      <PubMedTitle>J Antimicrob Chemother</PubMedTitle>\n      <Volume>67</Volume>\n      <Issue>5</Issue>\n      <Page>1063</Page>\n      <Year>2012</Year>\n      <Authors>\n        <Author>Le Douce, V.</Author>\n        <Author>Janossy, A.</Author>\n        <Author>Hallay, H.</Author>\n        <Author>Ali, S.</Author>\n        <Author>Riclet, R.</Author>\n        <Author>Rohr, O.</Author>\n        <Author>Schwartz, C.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2209456\" medline_id=\"24907868\">\n      <Title>HIV infection: Epidemiology, pathogenesis, treatment, and prevention</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>384</Volume>\n      <Issue>9939</Issue>\n      <Page>258</Page>\n      <Year>2014</Year>\n      <Authors>\n        <Author>Maartens, G.</Author>\n        <Author>Celum, C.</Author>\n        <Author>Lewin, S.R.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2552673\" medline_id=\"26936760\">\n      <Title>HIV interaction with human host: HIV-2 as a model of a less virulent infection</Title>\n      <SourceTitle>AIDS Reviews</SourceTitle>\n      <PubMedTitle>AIDS Rev</PubMedTitle>\n      <Volume>18</Volume>\n      <Issue>1</Issue>\n      <Page>44</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Azevedo-Pereira, J.M.</Author>\n        <Author>Santos-Costa, Q.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2552676\" medline_id=\"27703672\">\n      <Title>Ending the HIV/AIDS epidemic in low- and middle-income countries by 2030: Is it possible?</Title>\n      <SourceTitle>F1000Research</SourceTitle>\n      <PubMedTitle>F1000Res</PubMedTitle>\n      <Volume>5</Volume>\n      <Page>2328</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Harries, A.D.</Author>\n        <Author>Suthar, A.B.</Author>\n        <Author>Takarinda, K.C.</Author>\n        <Author>Tweya, H.</Author>\n        <Author>Kyaw, N.T.</Author>\n        <Author>Tayler-Smith, K.</Author>\n        <Author>Zachariah, R.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2931416\" medline_id=\"30392769\">\n      <Title>Long-term follow-up of HIV-2-related AIDS and mortality in Guinea-Bissau: A prospective open cohort study</Title>\n      <SourceTitle>The Lancet. HIV</SourceTitle>\n      <PubMedTitle>Lancet HIV</PubMedTitle>\n      <Volume>6</Volume>\n      <Issue>1</Issue>\n      <Page>E25</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Esbjörnsson, J.</Author>\n        <Author>Månsson, F.</Author>\n        <Author>Kvist, A.</Author>\n        <Author>et al.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2944307\" medline_id=\"30497785\">\n      <Title>The economic returns of ending the AIDS epidemic as a public health threat</Title>\n      <SourceTitle>Health Policy</SourceTitle>\n      <PubMedTitle>Health Policy</PubMedTitle>\n      <Volume>123</Volume>\n      <Issue>1</Issue>\n      <Page>104</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Lamontagne, E.</Author>\n        <Author>Over, M.</Author>\n        <Author>Stover, J.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2948271\" medline_id=\"29052689\">\n      <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic</Title>\n      <SourceTitle>JAMA - Journal of the American Medical Association</SourceTitle>\n      <PubMedTitle>JAMA</PubMedTitle>\n      <Volume>318</Volume>\n      <Issue>16</Issue>\n      <Page>1535</Page>\n      <Year>2017</Year>\n      <Authors>\n        <Author>Fauci, A.S.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2949697\" medline_id=\"28320938\">\n      <Title>Effectiveness of UNAIDS targets and HIV vaccination across 127 countries</Title>\n      <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)</SourceTitle>\n      <PubMedTitle>Proc Natl Acad Sci U S A</PubMedTitle>\n      <Volume>114</Volume>\n      <Issue>15</Issue>\n      <Page>4017</Page>\n      <Year>2017</Year>\n      <Authors>\n        <Author>Medlock, J.</Author>\n        <Author>Pandey, A.</Author>\n        <Author>Parpia, A.S.</Author>\n        <Author>Tang, A.</Author>\n        <Author>Skrip, L.A.</Author>\n        <Author>Galvani, A.P.</Author>\n      </Authors>\n    </Reference>\n  </References>\n  <Section sectionId=\"5848\" modifiedDate=\"20181213034904\">\n    <Title>The HIV Virus</Title>\n    <Body>\n      <para>The human immunodeficiency virus, or HIV, is a small (100 nm in diameter) spherical enveloped virus containing two copies of a 9-kb single-stranded RNA genome encoding 15 proteins. The mature virus particle is surrounded by a single membrane or envelope, which contains several spikes formed by a membrane protein complex, consisting of the transmembrane glycoprotein gp41, non-covalently associated with the protein gp120. The viral matrix (MA) protein lines the inside of the membrane whereas other proteins are associated with the core, containing the two 9-kb genomic RNA molecules, and whose main constituent is the capsid (CA) protein. There are two main types: HIV-1, which is found worldwide, and HIV-2, which was first detected in West Africa but has since been found in other parts of the world (e.g., Portugal, France and India) (<REF id=\"1689288\">Campbell-Yesufu, O.T. and Gandhi, R.T., 2011</REF>; <REF id=\"2947850\">Sharp, P.M. and Hahn, B.H., 2011</REF>; <REF id=\"2931416\">Esbjörnsson, J. et al., 2018</REF>). The types are distinguished on the basis of serological and sequence criteria and small differences in protein composition, such as the presence of an additional accessory protein Vpx, and the absence of other accessory proteins in HIV-2 (<REF id=\"2872874\">Mahdi, M. et al., 2018</REF>).\n\n\n\n</para>\n      <para>The host range of HIV is limited to human beings. Although chimpanzees can be infected, the clinical course of the disease in these apes is different and infection is not fatal. Other species can be infected by related viruses that cause AIDS-like syndromes; these include simian immunodeficiency virus (SIV), which infects African monkeys, and feline immunodeficiency virus (FIV), which infects cats. HIV-1 evolved following zoonotic transmission from nonhuman primates at the beginning of the 20th century (<REF id=\"2947850\">Sharp, P.M. and Hahn, B.H., 2011</REF>; <REF id=\"2947496\">Hemelaar, J. et al., 2019</REF>). The less prevalent HIV-2 likely originated from an SIV strain infecting sooty mangabeys (<REF id=\"2710609\">Schmitt, K. et al., 2017</REF>). The genetically related strains of HIV-1 causing the global AIDS pandemic belong to the group M (main). Other groups have been characterized (N, O), but are much less prevalent. The group M viruses are further subdivided into 9 clades (A-D, F-H, J and K) which differ in their viral DNA by approximately 15-20%. Clade B is most common in North America and Europe, although diversity in these populations is increasing (<REF id=\"2947851\">Siemieniuk, R.A. et al., 2013</REF>). The African continent has the widest diversity of HIV subtypes in circulation, with predominance of clades A, C and D as well as their recombinants (<REF id=\"2947852\">Kamali, A. et al., 2015</REF>). Clade C was responsible for 46.6% of all new HIV-1 infections diagnosed worldwide from 2010-2015 (<REF id=\"2947496\">Hemelaar, J. et al., 2019</REF>). Over the course of the global HIV pandemic, new variants of the retrovirus continue to emerge. In geographic areas in which several genetic forms of the virus coexist, the pivotal role of recombination as a driving force in the emergence of novel genetic forms of HIV has become evident (<REF id=\"2947496\">Hemelaar, J. et al., 2019</REF>). \n\n<FREETABLE id=\"296\"><![CDATA[  <TABLE WIDTH=\"483\" CELLSPACING=0 CELLPADDING=4 BORDER>\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B>Important RNA viruses and the diseases they produce in humans</B></FONT></TD>      \n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B>Family/Characteristics</B></TD>\n      <TD WIDTH=\"143\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B>Viruses</B></TD>\n      <TD WIDTH=\"190\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B>Diseases</B></TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Orthomyxoviruses (Orthomyxoviridae)  Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; segmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Influenza A and B virus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Upper respiratory infection, croup</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Paramyxoviruses (Paramyxoviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; nonsegmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Parainfluenza 1-3 virus<br><br>Respiratory syncytial virus<br><br>Measles virus<br><br>Mumps</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Upper respiratory infection, croup<br><br>Upper respiratory infection, croup<br><br>Measles<br><br>Aseptic meningitis</TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Coronaviruses (Coronaviridae) Single-stranded RNA,enveloped (No DNA step in replication; positive-sense genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Human coronaviruses</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Upper respiratory infection</TD>\n      </TR>\n\n      \n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Rhabdoviruses (Rhabdoviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; nonsegmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Rabies virus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Rabies</TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Picornaviruses (Picornaviridae) Single-stranded RNA, nonenveloped</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Rhinoviruses<br><br>Hepatitis A virus<br><br>Enteroviruses:<br> - Polioviruses<br>- Coxsackie A24 viruses<br>- Coxsackie B viruses<br>- Coxsackie B1-5 viruses<br>- Coxsackie A9 viruses<br>- Echoviruses</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Common cold<br><br>Hepatitis<br><br><br>Paralysis<br>Acute hemorrhagic conjunctivitis<br>Myocarditis, pericarditis<br>Aseptic meningitis<br>Aseptic meningitis<br>Aseptic meningitis, encephalitis</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Caliciviruses (Calciviridae) Single-stranded RNA, nonenveloped</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Norwalk virus<br><br></TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gastroenteritis<br><br></TD>\n      </TR>\n\n\n\n<TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Hepeviruses (Hepeviridae) Single-stranded RNA, nonenveloped</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Hepatitis E</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Hepatitis</TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Togaviruses (Togaviridae) Single-stranded RNA, enveloped (No DNA step in replication; positive-sense genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Alphaviruses (Group A arboviruses)<br><br>Rubivirus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Encephalitis, hemorrhagic fever, chikungunya<br><br>Rubella</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Flaviviruses (Flaviviridae) Single-stranded RNA, enveloped (No DNA step in replication; positive-sense genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Group B arboviruses<br><br>Hepatitis C virus<br><br>Dengue virus<br><br>Zika virus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Encephalitis, hemorrhagic fever<br><br>Hepatitis<br><br>Dengue fever<br><br>Zika</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bunyaviruses (Bunyaviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; segmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Some arboviruses<br><br>Hantavirus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Encephalitis, hemorrhagic fevers<br><br>Fever, renal involvement</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reoviruses (Reoviridae) Double-stranded RNA, nonenveloped</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Human rotaviruses</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gastroenteritis</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Arenaviruses (Arenaviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome;segmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Lymphocytic choriomeningitis (LCM virus)<br><br>Lassa virus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Meningitis<br><br><br>Hemorrhagic fever</TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Retroviruses (Retroviridae) Single-stranded RNA, enveloped (DNA step in replication)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      HTLV-I, HTLV-II<br><br>HIV-1, HIV-2</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      T cell leukemia, lymphoma, paresis<br><br>AIDS</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Filoviruses (Filoviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; nonsegmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Marburg virus<br><br>Ebola virus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Marburg disease<br><br>Ebola hemorrhagic fever</TD>\n      </TR>\n\n      </TABLE>\n]]></FREETABLE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1689288\" medline_id=\"21367732\">\n        <Title>Update on human immunodeficiency virus (HIV)-2 infection</Title>\n        <SourceTitle>Clinical Infectious Diseases</SourceTitle>\n        <PubMedTitle>Clin Infect Dis</PubMedTitle>\n        <Volume>52</Volume>\n        <Issue>6</Issue>\n        <Page>780</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Campbell-Yesufu, O.T.</Author>\n          <Author>Gandhi, R.T.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2710609\" medline_id=\"28750321\">\n        <Title>Modeling the evolution of SIV sooty mangabey progenitor virus towards HIV-2 using humanized mice</Title>\n        <SourceTitle>Virology</SourceTitle>\n        <PubMedTitle>Virology</PubMedTitle>\n        <Volume>510</Volume>\n        <Page>175</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Schmitt, K.</Author>\n          <Author>Kumar, D.M.</Author>\n          <Author>Curlin, J.</Author>\n          <Author>Remling-Mulder, L.</Author>\n          <Author>Stenglein, M.</Author>\n          <Author>O&apos;Connor, S.</Author>\n          <Author>Marx, P.</Author>\n          <Author>Akkina, R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2872874\" medline_id=\"29743354\">\n        <Title>Inhibitory effects of HIV-2 Vpx on replication of HIV-1</Title>\n        <SourceTitle>Journal of Virology</SourceTitle>\n        <PubMedTitle>J Virol</PubMedTitle>\n        <Volume>92</Volume>\n        <Issue>14</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Mahdi, M.</Author>\n          <Author>Szojka, Z.</Author>\n          <Author>Mótyán, J.A.</Author>\n          <Author>Tozsér, J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2931416\" medline_id=\"30392769\">\n        <Title>Long-term follow-up of HIV-2-related AIDS and mortality in Guinea-Bissau: A prospective open cohort study</Title>\n        <SourceTitle>The Lancet. HIV</SourceTitle>\n        <PubMedTitle>Lancet HIV</PubMedTitle>\n        <Volume>6</Volume>\n        <Issue>1</Issue>\n        <Page>E25</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Esbjörnsson, J.</Author>\n          <Author>Månsson, F.</Author>\n          <Author>Kvist, A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947496\" medline_id=\"30509777\">\n        <Title>Global and regional molecular epidemiology of HIV-1, 1990-2015: A systematic review, global survey, and trend analysis</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>19</Volume>\n        <Issue>2</Issue>\n        <Page>143</Page>\n        <Year>2019</Year>\n        <Authors>\n          <Author>Hemelaar, J.</Author>\n          <Author>Elangovan, R.</Author>\n          <Author>Yun, J.</Author>\n          <Author>Dickson-Tetteh, L.</Author>\n          <Author>Fleminger, I.</Author>\n          <Author>Kirtley, S.</Author>\n          <Author>Williams, B.</Author>\n          <Author>Gouws-Williams, E.</Author>\n          <Author>Ghys, P.D.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947850\" medline_id=\"22229120\">\n        <Title>Origins of HIV and the AIDS pandemic</Title>\n        <SourceTitle>Cold Spring Harbor Perspectives in Medicine</SourceTitle>\n        <PubMedTitle>Cold Spring Harb Perspect Med</PubMedTitle>\n        <Volume>1</Volume>\n        <Issue>1</Issue>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Sharp, P.M.</Author>\n          <Author>Hahn, B.H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947851\" medline_id=\"24421804\">\n        <Title>Increasing HIV subtype diversity and its clinical implications in a sentinel North American population</Title>\n        <SourceTitle>The Canadian Journal of Infectious Diseases &amp; Medical Microbiology</SourceTitle>\n        <PubMedTitle>Can J Infect Dis Med Microbiol</PubMedTitle>\n        <Volume>24</Volume>\n        <Issue>2</Issue>\n        <Page>69</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Siemieniuk, R.A.</Author>\n          <Author>Beckthold, B.</Author>\n          <Author>Gill, M.J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947852\" medline_id=\"25602351\">\n        <Title>Creating an African HIV clinical research and prevention trials network: HIV prevalence, incidence and transmission</Title>\n        <SourceTitle>PLoS ONE</SourceTitle>\n        <PubMedTitle>PLoS One</PubMedTitle>\n        <Volume>10</Volume>\n        <Issue>1</Issue>\n        <Year>2015</Year>\n        <Authors>\n          <Author>Kamali, A.</Author>\n          <Author>Price, M.A.</Author>\n          <Author>Lakhi, S.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"2291\" modifiedDate=\"20190502091557\">\n    <Title>Transmission</Title>\n    <Body>\n      <para>HIV-1 transmission occurs most commonly through sexual intercourse, with heterosexual intercourse the route of transmission 85% of the time, and the likelihood of contagion closely correlates with the number of partners. AIDS can also be spread by blood transfusion and other forms of contact between infected blood, and the blood or the mucosa of another person, such as needle sharing in drug addicts. In the early years of the pandemic, transmission to hemophiliacs and polytransfused patients receiving blood from high-risk donors was documented; strict controls have since been introduced to minimize this route of infection. Vertical transmission also occurs: infection of the fetus or newborn from mothers with HIV is possible during pregnancy, childbirth or breastfeeding (<REF id=\"1135290\">Simon, V. et al., 2006</REF>). Within the hospital setting, outbreaks of HIV-1 infection have also been linked to nosocomial transmission; In 2016, a potential HIV outbreak in China was caused by lymphocyte immunotherapy involving a HIV-positive donor (<REF id=\"2989517\">Pan, X. et al., 2018</REF>). In each of these scenarios, the efficiency of disease transmission is highly dependent upon the concentration of the virus and of virus-infected cells within the infected host, or index case, as well as the susceptibility of the recipient (<REF id=\"1135290\">Simon, V. et al., 2006</REF>; <REF id=\"1199753\">Cohen, M.S. et al., 2008</REF>). \n\n</para>\n      <para>Results from a research collaboration led by scientists in Germany may help explain why the vast majority of HIV infections are transmitted via sexual intercourse. In screening a protein library derived from human semen, the scientists discovered a seminal fluid component that greatly enhanced HIV infection. This factor is an amyloid fibril formed in large numbers by naturally occurring fragments of prostatic acidic phosphatase (PAP), a protein secreted by the prostate gland. Structural analysis of these fibrils revealed that they can sequester HIV and facilitate its binding and fusion to target cells, thereby raising the viral titer by 50- to as high as 100,000-fold. Thus, the PAP fibrils have been named Semen-derived Enhancer of Virus Infection (SEVI). In vitro, incubation with physiological levels of SEVI enhanced HIV infection of macrophages, T cells and human tonsillar tissue. Beyond promoting cellular infection at the site of exposure, the presence of SEVI in co-cultures of T cells with infected dendritic or epithelial cells increased the incidence of intercellular infection. Studies in transgenic rats showed that animals injected with SEVI-treated HIV had five-fold higher viral cDNA levels than those animals injected with HIV alone. Notably, the scientists found that if PAP peptides do not assemble into aggregates or into amyloid fibers they are unable to enhance viral transmission. Thus, these peptides may present a novel target for HIV prevention (<REF id=\"1165021\">Münch, J. et al., 2007</REF>).\n\n</para>\n      <para>The relative reproduction number (R0) of HIV, an indicator of the ability of the virus to spread, is only slightly greater than 1 in most populations. In order for any infection to spread, the relative reproductive rate must be &gt;1 (meaning that each infected individual must infect more than one other person, on average). In healthy persons, this means that the chance of contracting HIV via heterosexual intercourse is approximately 1 in 1,000 per sexual act (<REF id=\"1065930\">Short, R.V., 2006</REF>). R0 is higher in high-risk groups such as injection-drug users, men who have sex with men, and female sex workers, as well as in healthy individuals living in populations (transmission networks) with a large concentration of high-risk subgroups (<REF id=\"2947861\">Williams, B.G. and Dye, C., 2018</REF>). </para>\n    </Body>\n    <References>\n      <Reference id=\"1065930\" medline_id=\"16627296\">\n        <Title>New ways of preventing HIV infection: Thinking simply, simply thinking</Title>\n        <SourceTitle>Philosophical Transactions - Royal Society. Biological Sciences</SourceTitle>\n        <PubMedTitle>Philos Trans R Soc Lond B Biol Sci</PubMedTitle>\n        <Volume>361</Volume>\n        <Issue>1469</Issue>\n        <Page>811</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Short, R.V.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1135290\" medline_id=\"16890836\">\n        <Title>HIV/AIDS epidemiology, pathogenesis, prevention, and treatment</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>368</Volume>\n        <Issue>9534</Issue>\n        <Page>489</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Simon, V.</Author>\n          <Author>Ho, D.D.</Author>\n          <Author>Abdool Karim, Q.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1165021\" medline_id=\"18083097\">\n        <Title>Semen-derived amyloid fibrils drastically enhance HIV infection</Title>\n        <SourceTitle>Cell</SourceTitle>\n        <PubMedTitle>Cell</PubMedTitle>\n        <Volume>131</Volume>\n        <Issue>6</Issue>\n        <Page>1059</Page>\n        <Year>2007</Year>\n        <Authors>\n          <Author>Münch, J.</Author>\n          <Author>Rücker, E.</Author>\n          <Author>Ständker, L.</Author>\n          <Author>Adermann, K.</Author>\n          <Author>Goffinet, C.</Author>\n          <Author>Schindler, M.</Author>\n          <Author>Wildum, S.</Author>\n          <Author>Chinnadurai, R.</Author>\n          <Author>Rajan, D.</Author>\n          <Author>Specht, A.</Author>\n          <Author>Giménez-Gallego, G.</Author>\n          <Author>Sánchez, P.C.</Author>\n          <Author>Fowler, D.M.</Author>\n          <Author>Koulov, A.</Author>\n          <Author>Kelly, J.W.</Author>\n          <Author>Mothes, W.</Author>\n          <Author>Grivel, J.C.</Author>\n          <Author>Margolis, L.</Author>\n          <Author>Keppler, O.T.</Author>\n          <Author>Forssmann, W.G.</Author>\n          <Author>Kirchhoff, F.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1199753\" medline_id=\"18382737\">\n        <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic</Title>\n        <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n        <PubMedTitle>J Clin Invest</PubMedTitle>\n        <Volume>118</Volume>\n        <Issue>4</Issue>\n        <Page>1244</Page>\n        <Year>2008</Year>\n        <Authors>\n          <Author>Cohen, M.S.</Author>\n          <Author>Hellmann, N.</Author>\n          <Author>Levy, J.A.</Author>\n          <Author>Decock, K.</Author>\n          <Author>Lange, J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947861\" medline_id=\"29137859\">\n        <Title>Dynamics and control of infections on social networks of population types</Title>\n        <SourceTitle>Epidemics</SourceTitle>\n        <PubMedTitle>Epidemics</PubMedTitle>\n        <Volume>23</Volume>\n        <Page>11</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Williams, B.G.</Author>\n          <Author>Dye, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2989517\" medline_id=\"30457542\">\n        <Title>Outbreak of HIV infection linked to nosocomial transmission, China, 2016-2017</Title>\n        <SourceTitle>Emerging Infectious Diseases </SourceTitle>\n        <PubMedTitle>Emerg Infect Dis</PubMedTitle>\n        <Volume>24</Volume>\n        <Issue>12</Issue>\n        <Page>2141</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Pan, X.</Author>\n          <Author>Jiang, J.</Author>\n          <Author>Ma, Q.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"406\" modifiedDate=\"20181213035649\">\n    <Title>The Viral Life Cycle</Title>\n    <Body>\n      <para>The life cycle of the HIV virus is exceptionally well characterized (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014</REF>). It begins when HIV enters its host cell through membrane fusion. The viral gp120/gp41 membrane glycoprotein complex first binds to the cellular transmembrane protein CD4, present on T helper cells and macrophages. Binding induces a conformational change in gp120/gp41, leading to binding of yet another cellular transmembrane glycoprotein (&quot;coreceptor&quot;), typically a molecule belonging to the class of chemokine receptors. For primary virus strains transmitted from one patient to the next, this coreceptor is nearly always CCR5; evolution of the virus in the body of an infected patient gives rise to strains that recognize predominantly the coreceptor CXCR4 or that have dual or mixed tropism (<REF id=\"1789081\">Gilliam, B.L. et al., 2011</REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018</REF>). Other coreceptors have also been described.\n\n\n\n</para>\n      <para>Coreceptor binding induces another conformational change in gp120/gp41, which then leads to fusion of the viral and the host cell membrane, delivering the viral core into the cytoplasm (<REF id=\"1505539\">Tilton, J.C. and Doms, R.W., 2010</REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018</REF>). Peptides or peptidomimetics that inhibit the conformational changes in gp120/gp41, exemplified by enfuvirtide, have been developed. \n\n\n\n</para>\n      <para>After fusion, a poorly defined step called &quot;uncoating&quot; of this core exposes the viral nucleoprotein complex, which consists of HIV RNA and the proteins integrase (IN), reverse transcriptase (RT), matrix (MA) and Vpr. The latter protein targets the complex to nuclear pores. Inside the nucleus, RT reverse-transcribes the viral RNA into linear duplex DNA, starting at an annealed tRNA3Lys primer (which is present in the virion) near the 5&apos; end of the genomic RNA. After elongation, RT catalyses two DNA strand transfer reactions that are important for priming the synthesis of both minus and plus strands (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014</REF>). RT is a major target of antiviral drugs, which fall into two categories: nucleoside analogues such as AZT and ddI and non-nucleoside inhibitors such as nevirapine. Non-nucleoside inhibitors bind to and inactivate the polymerase, whereas nucleoside analogues inhibit elongation of the viral DNA strands.\n\n<FREETABLE id=\"291\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>\n      <TR>\n      <TD COLSPAN=4 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B>Prokaryotic and eukaryotic DNA polymerases</B></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"110\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B></B></TD>\n      <TD WIDTH=\"113\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B><I>Direction of Synthesis</I></B></TD>\n      <TD WIDTH=\"110\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B><I>Exonuclease Activity</I></B></TD>\n      <TD WIDTH=\"110\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B><I>Actions</I></B></TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=4 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B><I>Prokaryotic</B></I></FONT></TD>      \n      </TR>\n\n      \n\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase I</TD>\n      <TD WIDTH=\"113\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3' and 3'&#8594; 5'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gap filling after primer removal; DNA repair</TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase II</TD>\n      <TD WIDTH=\"113\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3' </TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      3' &#8594; 5'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gap filling after primer removal; DNA repair</TD>\n      </TR>\n\n      \n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase III</TD>\n      <TD WIDTH=\"113\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3' and 3'&#8594; 5' <BR></TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Primary replication enzyme<BR></TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=4 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B><I>Eukaryotic</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase alpha</TD>\n      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      None</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Primary replication enzyme with polymerase delta</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase beta</TD>\n      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      None</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      DNA repair</TD>\n      </TR>\n\n       \n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase gamma</TD>\n      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      3' &#8594; 5'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Primary replication enzyme of mitochondria and chloroplasts</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase delta</TD>\n      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      3' &#8594; 5'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Primary replication enzyme with polymerase alpha</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase epsilon</TD>\n      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      3' &#8594; 5'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      DNA repair; may also cooperate with polymerases alpha and delta in primary replication</TD>\n      </TR>\n\n\n</TABLE>\n]]></FREETABLE>\n      </para>\n      <para>The zinc-finger protein IN then integrates a complete viral minus-strand of DNA and a plus-strand containing several gaps into a host chromosome, by first removing two 3&apos; nucleotides from each strand of the linear viral DNA, producing overhanging CA ends, joining these 3&apos; ends covalently to the 5&apos; ends of the host cell DNA, and removing unpaired nucleotides at the viral 5&apos; ends, which are joined with the host cell&apos;s 3&apos; ends (<REF id=\"2947863\">Choi, E. et al., 2018</REF>). \n\n</para>\n      <para>The gaps in the plus-strands are then probably repaired by host cell enzymes. Transcription of the integrated provirus by RNA polymerase II begins at a promoter in the 5&apos; long terminal repeat (LTR). Several start sites for cellular transcription factors are present upstream, but elongation by these factors is rather inefficient, and the viral protein Tat (transactivator) is required to enhance their processivity. Tat binds to the RNA hairpin Tar (trans-activating response element), and not to DNA, at the 5&apos; end of viral transcripts. \n\n\n\n</para>\n      <para>A single 9-kb RNA is produced, encoding (from 5&apos; to 3&apos;) the usual retroviral polyproteins Gag, Pol and Env, which has the following features: The TAR hairpin, the tRNA3Lys primer binding site, a packaging signal Psi that binds to the viral NC (nucleocapsid) protein and is responsible for its incorporation into a virion, a Gag-Pol frameshifting region that allows translation of the Gag-Pol polyprotein at a frequency of 5-10%, a REV response element that is the Rev-binding site and a polyadenylation signal at the 3&apos; end. There is a single major splice donor site and a number of splice acceptor sites. The 9-kb RNA and a set of spliced products are exported to the cytoplasm for translation or packaging.\n\n</para>\n      <para>Early mRNAs produced encode the proteins Rev, Tat and Nef. Later in infection, other less spliced transcripts are produced. The early/late switch is controlled by Rev; the presence of Rev is required to export unspliced RNAs that contain an REV-Responsive Element (RRE) to the cytoplasm. A total of nine open reading frames are encoded&lt;/A&gt; by the HIV-1 genome. Proteolysis of the usual retroviral gag, pol and env polyproteins gives rise to the proteins that are common to all retroviruses, like the protease (PR), RT, and IN from the pol region. However, HIV also produces six &quot;accessory&quot; proteins: Tat, Rev, Vpu, and the three structural proteins Vif, Nef and Vpr. Not all of these proteins are druggable targets, however (<REF id=\"1162632\">Flexner, C., 2007</REF>).\n\n</para>\n      <para>The env region encodes the gp160 precursor of the gp120/gp41 membrane glycoprotein complex, a protein produced in the endoplasmic reticulum (ER). The cellular receptor protein CD4 is also produced in the ER. To prevent this protein from sticking to gp160, retaining the complex in the ER, Vpu causes the degradation of CD4. After proteolysis of gp160 into gp120/gp41 in the late Golgi, gp120/gp41 is transported to the plasma membrane, where it is prevented from CD4 binding by the action of Nef, which induces internalization and degradation of plasma membrane CD4. In the plasma membrane gp120/gp41 probably localizes to specific domains known as &quot;glycolipid rafts&quot; (<REF id=\"655852\">Nguyen, D.H. and Hildreth, J.E., 2000</REF>). Virus assembly begins at these sites by an interaction between the intracellular domain of gp41, and the beginning of capsid formation by Gag and Gag-Pol polyproteins. A virus particle then buds from the plasma membrane. While the particle is budding, the viral protease PR (aided by Vif) cleaves the Gag and Gag-Pol polyproteins to IN, RT, p6, CA, NC, PR. &quot;Immature&quot; virus particles with uncleaved polyproteins are not infectious (<REF id=\"2947854\">Ghosh, A.K. et al., 2016</REF>).\n\n</para>\n      <para>The crystal structure of PR and of a number of PR-inhibitor complexes have been solved. In its active form, PR is a dimer; the active site contains a catalytically important aspartic acid from each of the monomers and is very similar to that of other retroviral aspartyl proteases. The lack of similar cellular proteases has made the activity of PR a major target for antiviral drugs (<REF id=\"2947854\">Ghosh, A.K. et al., 2016</REF>).</para>\n    </Body>\n    <References>\n      <Reference id=\"655852\" medline_id=\"10708443\">\n        <Title>Evidence for budding of human immunodeficiency virus type 1 selectively from glycolipid-enriched membrane lipid rafts</Title>\n        <SourceTitle>Journal of Virology</SourceTitle>\n        <PubMedTitle>J Virol</PubMedTitle>\n        <Volume>74</Volume>\n        <Issue>7</Issue>\n        <Page>3264</Page>\n        <Year>2000</Year>\n        <Authors>\n          <Author>Nguyen, D.H.</Author>\n          <Author>Hildreth, J.E.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1162632\" medline_id=\"17932493\">\n        <Title>HIV drug development: The next 25 years</Title>\n        <SourceTitle>Nature Reviews Drug Discovery</SourceTitle>\n        <PubMedTitle>Nat Rev Drug Discov</PubMedTitle>\n        <Volume>6</Volume>\n        <Issue>12</Issue>\n        <Page>959</Page>\n        <Year>2007</Year>\n        <Authors>\n          <Author>Flexner, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1505539\" medline_id=\"19683546\">\n        <Title>Entry inhibitors in the treatment of HIV-1 infection</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>91</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Tilton, J.C.</Author>\n          <Author>Doms, R.W.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1789081\" medline_id=\"21284908\">\n        <Title>Clinical use of CCR5 inhibitors in HIV and beyond</Title>\n        <SourceTitle>Journal of Translational Medicine (Online)</SourceTitle>\n        <PubMedTitle>J Transl Med</PubMedTitle>\n        <Volume>9</Volume>\n        <Issue>Suppl. 1</Issue>\n        <Page>S9</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Gilliam, B.L.</Author>\n          <Author>Riedel, D.J.</Author>\n          <Author>Redfield, R.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2229129\" medline_id=\"25151562\">\n        <Title>Antiretroviral therapy: Current drugs</Title>\n        <SourceTitle>Infectious Disease Clinics of North America</SourceTitle>\n        <PubMedTitle>Infect Dis Clin North Am</PubMedTitle>\n        <Volume>28</Volume>\n        <Issue>3</Issue>\n        <Page>371</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Pau, A.K.</Author>\n          <Author>George, J.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947854\" medline_id=\"26799988\">\n        <Title>Recent progress in the development of HIV-1 protease inhibitors for the treatment of HIV/AIDS</Title>\n        <SourceTitle>Journal of Medicinal Chemistry</SourceTitle>\n        <PubMedTitle>J Med Chem</PubMedTitle>\n        <Volume>59</Volume>\n        <Issue>11</Issue>\n        <Page>5172</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Ghosh, A.K.</Author>\n          <Author>Osswald, H.L.</Author>\n          <Author>Prato, G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947858\" medline_id=\"29932942\">\n        <Title>CCR5 revisited: How mechanisms of HIV entry govern AIDS pathogenesis</Title>\n        <SourceTitle>Journal of Molecular Biology</SourceTitle>\n        <PubMedTitle>J Mol Biol</PubMedTitle>\n        <Volume>430</Volume>\n        <Issue>17</Issue>\n        <Page>2557</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Brelot, A.</Author>\n          <Author>Chakrabarti, L.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947863\" medline_id=\"30416746\">\n        <Title>Recent advances in the discovery of small-molecule inhibitors of HIV-1 integrase</Title>\n        <SourceTitle>Future Science OA</SourceTitle>\n        <PubMedTitle>Future Sci OA</PubMedTitle>\n        <Volume>4</Volume>\n        <Issue>9</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Choi, E.</Author>\n          <Author>Mallareddy, J.R.</Author>\n          <Author>Lu, D.</Author>\n          <Author>Kolluru, S.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"2911\" modifiedDate=\"20181212120011\">\n    <Title>Pathogenesis and Natural History</Title>\n    <Body>\n      <para>Lentivirus infections are characterized by the long interval between infection and the onset of clinical disease. For HIV, the time between the infection and the development of AIDS, which is in fact the last stage of disease (<REF id=\"1135290\">Simon, V. et al., 2006</REF>), can range from several months in children to some years (up to 10 or more) in adults. However, in spite of the frequent absence of symptoms during the early and chronic stages of infection, HIV-1 replicates in a dynamic fashion throughout the course of the disease (<REF id=\"1135290\">Simon, V. et al., 2006</REF>). The first cells to be infected are probably dendritic cells, followed by macrophages and monocytes. During the acute phase of infection the number of virus particles in the blood is high and HIV spreads rapidly, infecting large numbers of CD4+ cells in the lymphoid organs. Normal levels of CD4+ T helper cells are about 800-1200 cells per mm3 of blood. These numbers drop by 20-40% during the acute phase. Fourteen to 28 days after infection some patients may report flu-like symptoms and may develop a mononucleosis-like syndrome (<REF id=\"1678176\">Cohen, M.S. et al., 2011</REF>). HIV-specific cytotoxic T cells then limit the infection, and CD4+ counts return to near-normal levels. This is followed by a period of clinical latency, which may last several years and is characterized by HIV DNA integration into the host genome without virus production (<REF id=\"2798862\">Cary, D.C. et al., 2016</REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).\n\n\n\n</para>\n      <para>HIV depletes infected as well as uninfected CD4+ cells; the latter may be due to induction of T cell apoptosis through a mechanism involving chronic antigenic stimulation (<REF id=\"655840\">Badley, A.D. et al., 2000</REF>). Other factors also contribute to this stimulation such as fixation of gp120 on target cells and enhanced production of cytoxic ligands by cells from the immune system, which results in the killing of uninfected CD4+ cells. Paradoxically, the concentration of CD8+ cells in the blood does not decrease, probably because these cells divide more rapidly than CD4+ cells do.</para>\n    </Body>\n    <References>\n      <Reference id=\"655840\" medline_id=\"11049971\">\n        <Title>Mechanisms of HIV-associated lymphocyte apoptosis</Title>\n        <SourceTitle>Blood</SourceTitle>\n        <PubMedTitle>Blood</PubMedTitle>\n        <Volume>96</Volume>\n        <Issue>9</Issue>\n        <Page>2951</Page>\n        <Year>2000</Year>\n        <Authors>\n          <Author>Badley, A.D.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1135290\" medline_id=\"16890836\">\n        <Title>HIV/AIDS epidemiology, pathogenesis, prevention, and treatment</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>368</Volume>\n        <Issue>9534</Issue>\n        <Page>489</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Simon, V.</Author>\n          <Author>Ho, D.D.</Author>\n          <Author>Abdool Karim, Q.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1678176\" medline_id=\"21767103\">\n        <Title>Prevention of HIV-1 infection with early antiretroviral therapy</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>385</Volume>\n        <Issue>6</Issue>\n        <Page>493</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Cohen, M.S.</Author>\n          <Author>Chen, Y.Q.</Author>\n          <Author>McCauley, M.</Author>\n          <Author>Gamble, T.</Author>\n          <Author>Hosseinipour, M.C.</Author>\n          <Author>Kumarasamy, N.</Author>\n          <Author>Hakim, J.G.</Author>\n          <Author>Kumwenda, J.</Author>\n          <Author>Grinsztejn, B.</Author>\n          <Author>Pilotto, J.H.</Author>\n          <Author>Godbole, S.V.</Author>\n          <Author>Mehendale, S.</Author>\n          <Author>Chariyalertsak, S.</Author>\n          <Author>Santos, B.R.</Author>\n          <Author>Mayer, K.H.</Author>\n          <Author>Hoffman, I.F.</Author>\n          <Author>Eshleman, S.H.</Author>\n          <Author>Piwowar-Manning, E.</Author>\n          <Author>Wang, L.</Author>\n          <Author>Makhema, J.</Author>\n          <Author>Mills, L.A.</Author>\n          <Author>de Bruyn, G.</Author>\n          <Author>Sanne, I.</Author>\n          <Author>Eron, J.</Author>\n          <Author>Gallant, J.</Author>\n          <Author>Havlir, D.</Author>\n          <Author>Swindells, S.</Author>\n          <Author>Ribaudo, H.</Author>\n          <Author>Elharrar, V.</Author>\n          <Author>Burns, D.</Author>\n          <Author>Taha, T.E.</Author>\n          <Author>Nielsen-Saines, K.</Author>\n          <Author>Celentano, D.</Author>\n          <Author>Essex, M.</Author>\n          <Author>Fleming, T.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798862\" medline_id=\"26731470\">\n        <Title>Molecular mechanisms of HIV latency</Title>\n        <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n        <PubMedTitle>J Clin Invest</PubMedTitle>\n        <Volume>126</Volume>\n        <Issue>2</Issue>\n        <Page>448</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Cary, D.C.</Author>\n          <Author>Fujinaga, K.</Author>\n          <Author>Peterlin, B.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"3253\" modifiedDate=\"20190502093726\">\n    <Title>Epidemiology</Title>\n    <Body>\n      <para>At the end of 2017, the World Health Organization estimated that there were approximately 36.9 million adults and children living with HIV/AIDS worldwide (<a href=\"http://www.who.int/hiv/data/en/\">HIV/AIDS -- data and statistics (World Health Organization)</a>, consulted December 3, 2018). Global prevalence currently stands at 0.8%. HIV-1 is far more prevalent, although there are an estimated one to two million individuals infected with HIV-2 (<REF id=\"2931416\">Esbjörnsson, J. et al., 2018</REF>). According to WHO, 1.8  million new infections with HIV occurred in 2017 (<a href=\"http://www.who.int/hiv/data/en/\">HIV/AIDS -- data and statistics (World Health Organization)</a>, consulted December 3, 2018), a decrease from previous years. In 2015, UNAIDS reports that there were 1.9 million (range 1.7 to 2.2 million) new infections (<a href=\"http://www.unaids.org/sites/default/files/media_asset/global-AIDS-update-2016_en.pdf\">Global AIDS update 2016 (UNAIDS, 2016)</a>), while GBD 2015 estimated that there were 2.45 million (range 2.24-2.68 million) new infections globally (<REF id=\"2529079\">Wang, H. et al., 2016</REF>). The global prevalence of HIV continues to increase--in spite of the aforementioned decrease in new infections--because of effective new drug therapies, which enable patients to live longer (<REF id=\"2209456\">Maartens, G. et al., 2014</REF>; <REF id=\"2529079\">Wang, H. et al., 2016</REF>). Nonetheless, UNAIDS has set the global goal of ending the global AIDS pandemic by 2030. In order to meet this goal, the agency has established a 90-90-90 goal to be achieved by 2020, which specifies that 90% of HIV-positive individuals worldwide must be aware of their status; 90% of those aware must be receiving sustained combination antiretroviral therapy; and 90% of those on treatment must be virologically suppressed (<REF id=\"2552675\">Badowski, M.E. et al., 2016</REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). The potential impact of a fast-track version of this strategy (95-95-95 by 2030) is even more significant. In contrast with an estimated 49 million new HIV cases that would be diagnosed globally from 2015 to 2035 under current levels of diagnosis and treatment, 25 million of these new infections could be avoided if 95-95-95 goals are met. Moreover, an additional 6.3 million new infections could hypothetically be averted if a vaccine with at least 50% efficacy were introduced by 2020 (<REF id=\"2949697\">Medlock, J. et al., 2017</REF>).\n\n</para>\n      <para>The highest concentration of HIV-infected individuals continues to be in sub-Saharan Africa, which accounts for only 13% of the world&apos;s population overall, but is home to 70% of the world&apos;s HIV-infected individuals, including 56% of the world&apos;s HIV-infected children (<a href=\"http://kff.org/global-health-policy/fact-sheet/the-global-hivaids-epidemic/\">The global HIV/AIDS epidemic: Fact sheet (Kaiser Family Foundation)</a>, consulted December 3, 2018) and 82% of HIV-infected adolescents (age 10-19 years) (<REF id=\"2218070\">Idele, P. et al., 2014</REF>). According to GBD 2015, an estimated 1.85 million (range 1.66-2.05 million) people in this region were newly infected with HIV in 2015, equivalent to 75.4% of all new infections worldwide (<REF id=\"2529079\">Wang, H. et al., 2016</REF>). In Kenya, which has a population of 40 million, 1.2 million people of all ages were living with HIV in 2012 and an estimated 106,000 of these had acquired HIV infection within the preceding year, making Kenya&apos;s HIV epidemic the fourth largest worldwide. Nonetheless, HIV prevalence in that country declined significantly from 7.2% in 2007 to 5.6% in 2012 (<REF id=\"2228297\">Kimanga, D.O. et al., 2014</REF>). Unlike most parts of the world, where the HIV epidemic is now concentrated in certain high-risk population groups (i.e., injection drug users, men who have sex with men, sex workers), the HIV epidemic in sub-Saharan Africa is generalized, or self-sustaining in the population as a whole, albeit with certain subgroups at increased risk of infection (<REF id=\"1199753\">Cohen, M.S. et al., 2008</REF>). After sub-Saharan Africa, the hardest-hit regions of the world are the Caribbean, Eastern Europe and Central Asia (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)</a>).\n\n</para>\n      <para>As of 2017, there were approximately 2.2 million people living with HIV/AIDS in the combined UNAIDS region of Western and Central Europe and North America (<a href=\"http://kff.org/global-health-policy/fact-sheet/the-global-hivaids-epidemic/\">The global HIV/AIDS epidemic: Fact sheet (Kaiser Family Foundation)</a>, consulted December 3, 2018). The incidence of new HIV infections in the combined region in 2013 was estimated to be 88,000 (range 44,000 to 160,000). France and the United Kingdom each accounted for 8% of new infections in the region, while Canada, Germany, Italy and Spain each accounted for 4% of the total (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)</a>). Injection drug use accounted for 8% of new HIV infections in the U.S. in 2010 (<REF id=\"2218071\">Broz, D. et al., 2014</REF>).\n\n</para>\n      <para>CDC analysis of data obtained from the National HIV Behavioral Surveillance System shows that there was a difference in infection rates between blacks and whites (2.1% vs. 1.1%), but low socioeconomic status, and not race, remained the best determinant for infection after adjusting for other variables. Between 2007 to 2009, overall HIV incidence remained steady at approximately 50,000 new infections per year; however a significant increase was seen among those aged 13-29 and and the largest increase occurred in black men who have sex with men (<REF id=\"1689291\">Prejean, J. et al., 2011</REF>; <REF id=\"1689294\">Anonymous, 2011</REF>). Nearly 50% of all U.S. AIDS cases are concentrated in the southern states, which account for just 37% of the country&apos;s population (<REF id=\"2327612\">Reif, S.S. et al., 2014</REF>). Transgender women also have an extraordinarily high burden of HIV disease, both at the national level in the U.S. as well as globally. The pooled prevalence of HIV among transgender women worldwide is over 19% (<REF id=\"1957367\">Baral, S.D. et al., 2013</REF>). \n\n</para>\n      <para>More than two million people were living with HIV/AIDS in the WHO European region in 2017. Nearly 160,000 new HIV infections were diagnosed in the region as a whole in 2017, of which 130,000 were in the eastern part of the region. Prevalence and incidence rates continue to increase in the WHO European region as a whole, in spite of significant decreases in the rate of new diagnoses in the EU/EEA (3,130 in 28 countries in 2017) (<a href=\"http://ecdc.europa.eu/en/publications-data/hivaids-surveillance-europe-2018-2017-data\">HIV/AIDS surveillance in Europe 2018 - 2017 data (European Centre for Disease Prevention and Control, November 2018)</a>). An estimated total of 101,600 prevalent HIV infections as well as 4,363 new HIV diagnoses were reported in the U.K. in 2017. Public Health England announced in November 2018 that the 90-90-90 targets had been met, making that country one of the first to achieve the UNAID objective. In 2017, 92% of people living with HIV in the U.K. had been diagnosed; of those, 98% were on treatment; and of those, 97% were virally suppressed (<a href=\"http://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/759408/HIV_annual_report_2018.pdf\">Progress towards ending the HIV epidemic in the United Kingdom - 2018 report (Public Health England, November 2018)</a>). \n\n</para>\n      <para>The HIV epidemic in East Asia began later than in the rest of the world, and was initially associated with injecting drug use. Government intervention quickly stopped that trend, however, and sexual transmission, especially among men who have sex with men (MSM), is now the most common route (<REF id=\"2151003\">Suguimoto, S.P. et al., 2014</REF>). According to Japan&apos;s National Institute of Infectious Diseases, there were 1,056 incident cases of HIV infection (994 men and 62 women) in 2011, the fourth highest number since HIV surveillance began in that country in 1989. During the same year there were 473 new cases of AIDS reported, which is the highest number since surveillance began (<a href=\"http://www.nih.go.jp/niid/en/iasren/865-iasr/2649-tpc391.html\">HIV/AIDS in Japan, 2011 (Infectious Agents Surveillance Report, September 2012)</a>). In China, HIV is most common in three high-risk groups: injecting drug users, female sex workers and MSM. In 2010, HIV prevalence in these groups was 9.08%, 0.36% and 5.98%, respectively. Incidence of new HIV infections in these groups was 0.57, 0.02 and 0.98 per 100 person-years, respectively (<REF id=\"2134794\">Zhang, L. et al., 2013</REF>). In 2016, HIV prevalence in MSM was reported to be 10.2%, while incidence of new cases was 6.63% (<REF id=\"2989513\">Chen, Q. et al., 2018</REF>). HIV infections predominate Han Chinese, males, young and the middle-aged (<REF id=\"2989521\">Wang, L. et al., 2019</REF>). China is far from achieving the 90-90-90 target for 2020, as identified by the Joint United Nations Program on HIV and AIDS. In 2016, only 36% of PLHIV (people living with HIV) on ART achieved viral suppression (viral load &lt; 1000 copies/mL) (<REF id=\"2989515\">Da, W. et al., 2018</REF>).\n\n</para>\n      <para>For more epidemiology information, consult the Incidence and Prevalence Database (IPD): <a href=\"http://www.tdrdata.com/ipd/IPD_SearchIPDByKeyword_Excel.aspx?keyword=hiv\">IPD: HIV</a>.</para>\n    </Body>\n    <References>\n      <Reference id=\"1199753\" medline_id=\"18382737\">\n        <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic</Title>\n        <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n        <PubMedTitle>J Clin Invest</PubMedTitle>\n        <Volume>118</Volume>\n        <Issue>4</Issue>\n        <Page>1244</Page>\n        <Year>2008</Year>\n        <Authors>\n          <Author>Cohen, M.S.</Author>\n          <Author>Hellmann, N.</Author>\n          <Author>Levy, J.A.</Author>\n          <Author>Decock, K.</Author>\n          <Author>Lange, J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1689291\" medline_id=\"21826193\">\n        <Title>Estimated HIV incidence in the United States, 2006-2009</Title>\n        <SourceTitle>PLoS ONE</SourceTitle>\n        <PubMedTitle>PLoS One</PubMedTitle>\n        <Volume>6</Volume>\n        <Issue>8</Issue>\n        <Page>e17502</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Prejean, J.</Author>\n          <Author>Song, R.</Author>\n          <Author>Hernandez, A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1689294\" medline_id=\"21832975\">\n        <Title>Characteristics Associated with HIV Infection Among Heterosexuals in Urban Areas with High AIDS Prevalence - 24 Cities, United States, 2006-2007</Title>\n        <SourceTitle>MMWR. Morbidity and Mortality Weekly Report</SourceTitle>\n        <PubMedTitle>MMWR Morb Mortal Wkly Rep</PubMedTitle>\n        <Volume>60</Volume>\n        <Page>1045</Page>\n        <Year>2011</Year>\n        <Authors/>\n      </Reference>\n      <Reference id=\"1957367\" medline_id=\"23260128\">\n        <Title>Worldwide burden of HIV in transgender women: A systematic review and meta-analysis</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>13</Volume>\n        <Issue>3</Issue>\n        <Page>214</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Baral, S.D.</Author>\n          <Author>Poteat, T.</Author>\n          <Author>Strömdahl, S.</Author>\n          <Author>Wirtz, A.L.</Author>\n          <Author>Guadamuz, T.E.</Author>\n          <Author>Beyrer, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2134794\" medline_id=\"24107261\">\n        <Title>HIV prevalence in China: Integration of surveillance data and a systematic review</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>13</Volume>\n        <Issue>11</Issue>\n        <Page>955</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Zhang, L.</Author>\n          <Author>Chow, E.P.</Author>\n          <Author>Jing, J.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2151003\" medline_id=\"24664878\">\n        <Title>Changing patterns of HIV epidemic in 30 years in East Asia</Title>\n        <SourceTitle>Current HIV/AIDS Reports</SourceTitle>\n        <PubMedTitle>Curr HIV/AIDS Rep</PubMedTitle>\n        <Volume>11</Volume>\n        <Issue>2</Issue>\n        <Page>134</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Suguimoto, S.P.</Author>\n          <Author>Techasrivichien, T.</Author>\n          <Author>Musumari, P.M.</Author>\n          <Author>El-Saaidi, C.</Author>\n          <Author>Lukhele, B.W.</Author>\n          <Author>Ono-Kihara, M.</Author>\n          <Author>Kihara, M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2209456\" medline_id=\"24907868\">\n        <Title>HIV infection: Epidemiology, pathogenesis, treatment, and prevention</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>384</Volume>\n        <Issue>9939</Issue>\n        <Page>258</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Maartens, G.</Author>\n          <Author>Celum, C.</Author>\n          <Author>Lewin, S.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2218070\" medline_id=\"24918590\">\n        <Title>Epidemiology of HIV and AIDS among adolescents: Current status, inequities, and data gaps</Title>\n        <SourceTitle>Journal of Acquired Immune Deficiency Syndromes (JAIDS)</SourceTitle>\n        <PubMedTitle>J Acquir Immune Defic Syndr</PubMedTitle>\n        <Volume>66</Volume>\n        <Issue>Suppl. 2</Issue>\n        <Page>S144</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Idele, P.</Author>\n          <Author>Gillespie, A.</Author>\n          <Author>Porth, T.</Author>\n          <Author>Suzuki, C.</Author>\n          <Author>Mahy, M.</Author>\n          <Author>Kasedde, S.</Author>\n          <Author>Luo, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2218071\" medline_id=\"24990587\">\n        <Title>HIV infection and risk, prevention, and testing behaviors among injecting drug users - National HIV Behavioral Surveillance System, 20 U.S. cities, 2009</Title>\n        <SourceTitle>MMWR. Surveillance summaries</SourceTitle>\n        <PubMedTitle>MMWR Surveill Summ</PubMedTitle>\n        <Volume>63</Volume>\n        <Issue>6</Issue>\n        <Page>1</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Broz, D.</Author>\n          <Author>Wejnert, C.</Author>\n          <Author>Pham, H.T.</Author>\n          <Author>DiNenno, E.</Author>\n          <Author>Heffelfinger, J.D.</Author>\n          <Author>Cribbin, M.</Author>\n          <Author>Krishna, N.</Author>\n          <Author>Teshale, E.H.</Author>\n          <Author>Paz-Bailey, G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2228297\" medline_id=\"24445338\">\n        <Title>Prevalence and incidence of HIV infection, trends, and risk factors among persons aged 15-64 years in Kenya: Results from a nationally representative study</Title>\n        <SourceTitle>Journal of Acquired Immune Deficiency Syndromes (JAIDS)</SourceTitle>\n        <PubMedTitle>J Acquir Immune Defic Syndr</PubMedTitle>\n        <Volume>66</Volume>\n        <Issue>Suppl. 1</Issue>\n        <Page>S13</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Kimanga, D.O.</Author>\n          <Author>Ogola, S.</Author>\n          <Author>Umuro, M.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2327612\" medline_id=\"23944833\">\n        <Title>HIV/AIDS in the Southern USA: A disproportionate epidemic</Title>\n        <SourceTitle>AIDS Care</SourceTitle>\n        <PubMedTitle>AIDS Care</PubMedTitle>\n        <Volume>26</Volume>\n        <Issue>3</Issue>\n        <Page>351</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Reif, S.S.</Author>\n          <Author>Whetten, K.</Author>\n          <Author>Wilson, E.R.</Author>\n          <Author>McAllaster, C.</Author>\n          <Author>Pence, B.W.</Author>\n          <Author>Legrand, S.</Author>\n          <Author>Gong, W.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2529079\" medline_id=\"27470028\">\n        <Title>Estimates of global, regional, and national incidence, prevalence, and mortality of HIV, 1980-2015: The Global Burden of Disease Study 2015</Title>\n        <SourceTitle>The Lancet. HIV</SourceTitle>\n        <PubMedTitle>Lancet HIV</PubMedTitle>\n        <Volume>3</Volume>\n        <Issue>8</Issue>\n        <Page>e361</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Wang, H.</Author>\n          <Author>Wolock, T.M.</Author>\n          <Author>Carter, A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2552675\" medline_id=\"27539455\">\n        <Title>New antiretroviral treatment for HIV</Title>\n        <SourceTitle>Infectious Diseases and Therapy</SourceTitle>\n        <PubMedTitle>Infect Dis Ther</PubMedTitle>\n        <Volume>5</Volume>\n        <Issue>3</Issue>\n        <Page>329</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Badowski, M.E.</Author>\n          <Author>Pérez, S.E.</Author>\n          <Author>Biagi, M.</Author>\n          <Author>Littler, J.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2931416\" medline_id=\"30392769\">\n        <Title>Long-term follow-up of HIV-2-related AIDS and mortality in Guinea-Bissau: A prospective open cohort study</Title>\n        <SourceTitle>The Lancet. HIV</SourceTitle>\n        <PubMedTitle>Lancet HIV</PubMedTitle>\n        <Volume>6</Volume>\n        <Issue>1</Issue>\n        <Page>E25</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Esbjörnsson, J.</Author>\n          <Author>Månsson, F.</Author>\n          <Author>Kvist, A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2949697\" medline_id=\"28320938\">\n        <Title>Effectiveness of UNAIDS targets and HIV vaccination across 127 countries</Title>\n        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)</SourceTitle>\n        <PubMedTitle>Proc Natl Acad Sci U S A</PubMedTitle>\n        <Volume>114</Volume>\n        <Issue>15</Issue>\n        <Page>4017</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Medlock, J.</Author>\n          <Author>Pandey, A.</Author>\n          <Author>Parpia, A.S.</Author>\n          <Author>Tang, A.</Author>\n          <Author>Skrip, L.A.</Author>\n          <Author>Galvani, A.P.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2989513\" medline_id=\"30092072\">\n        <Title>Trends of HIV incidence and prevalence among men who have sex with men in Beijing, China: Nine consecutive cross-sectional surveys, 2008-2016</Title>\n        <SourceTitle>PLoS ONE</SourceTitle>\n        <PubMedTitle>PLoS One</PubMedTitle>\n        <Volume>13</Volume>\n        <Issue>8</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Chen, Q.</Author>\n          <Author>Sun, Y.</Author>\n          <Author>Sun, W.</Author>\n          <Author>Hao, M.</Author>\n          <Author>Li, G.</Author>\n          <Author>Su, X.</Author>\n          <Author>Xin, R.</Author>\n          <Author>Lu, H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2989515\" medline_id=\"30161177\">\n        <Title>Evaluation of self-report adherence measures and their associations with detectable viral load among people living with HIV (PLHIV) in China</Title>\n        <SourceTitle>PLoS ONE</SourceTitle>\n        <PubMedTitle>PLoS One</PubMedTitle>\n        <Volume>13</Volume>\n        <Issue>8</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Da, W.</Author>\n          <Author>Li, X.</Author>\n          <Author>Qiao, S.</Author>\n          <Author>Zhou, Y.</Author>\n          <Author>Shen, Z.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2989521\" medline_id=\"30651975\">\n        <Title>HIV infection in Xi&apos;an, China: Epidemic characterization, risk factors to false positives and potential utility of the sample-to-cutoff index to identify true positives using Architect HIV Ag/Ab combo</Title>\n        <SourceTitle>Antimicrobial Resistance and Infection Control</SourceTitle>\n        <PubMedTitle>Antimicrob Resist Infect Control</PubMedTitle>\n        <Volume>8</Volume>\n        <Page>9</Page>\n        <Year>2019</Year>\n        <Authors>\n          <Author>Wang, L.</Author>\n          <Author>Xiao, Y.</Author>\n          <Author>Tian, X.D.</Author>\n          <Author>Ruan, J.X.</Author>\n          <Author>Chen, W.</Author>\n          <Author>Yu, Y.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"3214\" modifiedDate=\"20190410091630\">\n    <Title>Morbidity and Mortality</Title>\n    <Body>\n      <para>Patients with more than 500 CD4+ cells per mm3 (CDC category 1) are usually asymptomatic. At counts of between 200 and 500 CD4+ cells per mm3 (category 2) some opportunistic infections such as herpes zoster and oral thrush, an overgrowth of <I>Candida albicans</I> in the mouth or on other mucous membranes, are frequently seen. Most AIDS-related opportunistic infections start when the CD4+ count falls below 200 cells per mm3 (category 3). These may involve <I>Pneumocystis jirovecii</I> pneumonia, toxoplasmosis, candidiasis, cryptosporidiosis, <I>Mycobacterium avium</I> complex, <BACKGROUNDER id=\"20\">Cytomegalovirus</BACKGROUNDER> retinitis often leading to blindness, and malignancies such as <BACKGROUNDER id=\"168\">Non-Hodgkin&apos;s Lymphoma</BACKGROUNDER>, <BACKGROUNDER id=\"164\">Hodgkin&apos;s Lymphoma</BACKGROUNDER>, invasive <BACKGROUNDER id=\"125\">Cervical Cancer</BACKGROUNDER> and Kaposi&apos;s sarcoma (<REF id=\"1635117\">Shiels, M.S. et al., 2011</REF>), as well as anal cancer (in MSM) and lung and liver cancers (in injection drug users) (<REF id=\"2317668\">Robbins, H.A. et al., 2015</REF>). Concomitant infection with <BACKGROUNDER id=\"37\">Hepatitis B</BACKGROUNDER> (HBV), <BACKGROUNDER id=\"38\">Hepatitis C</BACKGROUNDER> (HCV), <BACKGROUNDER id=\"118\">Malaria</BACKGROUNDER> or <BACKGROUNDER id=\"116\">Tuberculosis</BACKGROUNDER> also contributes to morbidity and mortality in a significant percentage of AIDS patients. An estimated 2-4 million HIV-positive people are coinfected with HBV (<REF id=\"1446956\">Lacombe, K. et al., 2010</REF>) and another 6.8 to 10.2 million are coinfected with HCV (<REF id=\"2308297\">Webster, D.P. et al., 2015</REF>). Noninfectious complications of AIDS and HIV include dyslipidemia (<REF id=\"1497895\">Tarr, P.E. et al., 2010</REF>), neurological complications (<REF id=\"1955209\">Manji, H. et al., 2013</REF>), cardiovascular disease, nephropathy and consequent kidney failure (<REF id=\"1642730\">Papeta, N. et al., 2011</REF>), wasting (e.g., <BACKGROUNDER id=\"102\">Cachexia</BACKGROUNDER>, sarcopenia and frailty) and--conversely-- obesity (<REF id=\"2944303\">Mankal, P.K. and Kotler, D.P., 2014</REF>).\n\n</para>\n      <para>The cumulative death toll over the first 30 years of the HIV pandemic was in excess of 35 million, according to WHO (<a href=\"http://www.who.int/en/news-room/fact-sheets/detail/hiv-aids\">HIV/AIDS key facts (World Health Organization, updated July 2018)</a>). UNAIDS estimated in 2014 that 39 million (range 35-43 million) people worldwide had died of AIDS-related illness since the start of the epidemic (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)</a>). A total of 1.5 million (range 1.4 to 1.7 million) people died of HIV/AIDS-related causes in 2013, a 35% decrease with respect to the peak year of 2005. Important reductions were achieved in sub-Saharan Africa, where AIDS-related deaths decreased by 39% between 2005 and 2013; however, the region still accounts for 79% of global AIDS-related mortalities. Mortality rates decreased by 54% in the Caribbean and by 31% in Latin America during the same period (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)</a>). According to an analysis of data collected for the Global Burden of Disease (GBD) study, global HIV mortality was 1.3 million (range 1.3 to 1.5 million) in 2013 (<REF id=\"2206340\">Murray, C.J. et al., 2014</REF>) and was 1.2 million (range 1.1 to 1.3 million) in 2015 (<REF id=\"2551327\">Wang, H.D. et al., 2016</REF>). Expressed in other terms, the impact of HIV/AIDS in 2013 was equivalent to 40.6 million YLDs, according to the GBD 2013 study (<REF id=\"2351164\">Vos, T. et al., 2015</REF>). According to WHO, 940,000 people died from HIV-related causes globally in 2017 (<a href=\"http://www.who.int/en/news-room/fact-sheets/detail/hiv-aids\">HIV/AIDS key facts (World Health Organization, updated July 2018)</a>).\n\n</para>\n      <para>In the D:A:D cohort study, which followed nearly 50,000 HIV/AIDS patients at 212 clinics in the U.S., Europe and Australia, the mortality rate in this population was 12.7 per 1,000 person-years over the period 1999-2011, equivalent to 308,719 person-years of follow-up. The leading causes of death were AIDS-related (29%), non-AIDS-defining cancers (15%), liver disease (13%) and cardiovascular disease (11%). AIDS-related causes of death decreased in significance over time, however, accounting for 34% of all deaths during 1999-2000 vs. 22% in 2009-2011, confirming the efficacy of antiretroviral drug therapy (<REF id=\"2312359\">Smith, C.J. et al., 2014</REF>).\n\n</para>\n      <para>Increased survival following a diagnosis of HIV has led to new challenges for physicians, who are now increasingly treating middle-aged and older patients with age-related disorders that are unrelated to HIV but which nonetheless occur at a higher rate than in the non-HIV-positive population; these include cardiovascular disease, cognitive impairment, osteopenia and osteoporosis, frailty, and malignancy (<REF id=\"2799389\">McGettrick, P. et al., 2018</REF>). The incidence of non-AIDS-defining cancers among HIV-positive individuals has increased in recent decades. This increase, which is the direct result of improved survival to older ages, where these cancers typically begin to develop, will require the development of new prevention and treatment strategies that are appropriate for the needs of this patient group (<REF id=\"1635117\">Shiels, M.S. et al., 2011</REF>).\n\n</para>\n      <para>Opportunistic infections are a main cause of mortality in HIV infected individuals. Pneumocystis pneumonia (PCP) is the most predominant opportunistic infection in the HIV-infected population, with a prevalence of about 22.4% in China. One study reported an in-hospital mortality rate of 17.3% among HIV-infected patients with PCP (<REF id=\"2989525\">Wu, L. et al., 2019</REF>).</para>\n    </Body>\n    <References>\n      <Reference id=\"1339497\" medline_id=\"18800017\">\n        <Title>HIV, reproductive aging, and health implications in women: A literature review</Title>\n        <SourceTitle>Menopause (New York)</SourceTitle>\n        <PubMedTitle>Menopause</PubMedTitle>\n        <Volume>16</Volume>\n        <Issue>1</Issue>\n        <Page>199</Page>\n        <Year>2009</Year>\n        <Authors>\n          <Author>Conde, D.M.</Author>\n          <Author>Silva, E.T.</Author>\n          <Author>Amaral, W.N.</Author>\n          <Author>Finotti, M.F.</Author>\n          <Author>Ferreira, R.G.</Author>\n          <Author>Costa-Paiva, L.</Author>\n          <Author>Pinto-Neto, A.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1446956\" medline_id=\"19900950\">\n        <Title>HIV/hepatitis B virus co-infection: Current challenges and new strategies</Title>\n        <SourceTitle>Journal of Antimicrobial Chemotherapy</SourceTitle>\n        <PubMedTitle>J Antimicrob Chemother</PubMedTitle>\n        <Volume>65</Volume>\n        <Issue>1</Issue>\n        <Page>10</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Lacombe, K.</Author>\n          <Author>Bottero, J.</Author>\n          <Author>Lemoine, M.</Author>\n          <Author>Boyd, A.</Author>\n          <Author>Girard, P.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1497895\" medline_id=\"20350140\">\n        <Title>Dyslipidemia in HIV-infected individuals: From pharmacogenetics to pharmacogenomics</Title>\n        <SourceTitle>Pharmacogenomics (London)</SourceTitle>\n        <PubMedTitle>Pharmacogenomics</PubMedTitle>\n        <Volume>11</Volume>\n        <Issue>4</Issue>\n        <Page>587</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Tarr, P.E.</Author>\n          <Author>Rotger, M.</Author>\n          <Author>Telenti, A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1635117\" medline_id=\"21483021\">\n        <Title>Cancer Burden in the HIV-infected population in the United States</Title>\n        <SourceTitle>Journal of the National Cancer Institute</SourceTitle>\n        <PubMedTitle>J Natl Cancer Inst</PubMedTitle>\n        <Volume>103</Volume>\n        <Issue>9</Issue>\n        <Page>753</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Shiels, M.S.</Author>\n          <Author>Pfeiffer, R.M.</Author>\n          <Author>Gail, M.H.</Author>\n          <Author>Hall, H.I.</Author>\n          <Author>Li, J.</Author>\n          <Author>Chaturvedi, A.K.</Author>\n          <Author>Bhatia, K.</Author>\n          <Author>Uldrick, T.S.</Author>\n          <Author>Yarchoan, R.</Author>\n          <Author>Goedert, J.J.</Author>\n          <Author>Engels, E.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1642730\" medline_id=\"21221512\">\n        <Title>The molecular pathogenesis of HIV-1 associated nephropathy: Recent advances</Title>\n        <SourceTitle>Journal of Molecular Medicine</SourceTitle>\n        <PubMedTitle>J Mol Med</PubMedTitle>\n        <Volume>89</Volume>\n        <Issue>5</Issue>\n        <Page>429</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Papeta, N.</Author>\n          <Author>Sterken, R.</Author>\n          <Author>Kiryluk, K.</Author>\n          <Author>Kalyesubula, R.</Author>\n          <Author>Gharavi, A.G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1955209\" medline_id=\"23378642\">\n        <Title>HIV, dementia and antiretroviral drugs: 30 years of an epidemic</Title>\n        <SourceTitle>Journal of Neurology, Neurosurgery and Psychiatry</SourceTitle>\n        <PubMedTitle>J Neurol Neurosurg Psychiatry</PubMedTitle>\n        <Volume>84</Volume>\n        <Issue>10</Issue>\n        <Page>1126</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Manji, H.</Author>\n          <Author>Jäger, H.R.</Author>\n          <Author>Winston, A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2206340\" medline_id=\"25059949\">\n        <Title>Global, regional, and national incidence and mortality for HIV, tuberculosis, and malaria during 1990-2013: A systematic analysis for the Global Burden of Disease Study 2013</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>384</Volume>\n        <Issue>9947</Issue>\n        <Page>1005</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Murray, C.J.</Author>\n          <Author>Ortblad, K.F.</Author>\n          <Author>Guinovart, C.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2308297\" medline_id=\"25687730\">\n        <Title>Hepatitis C</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>385</Volume>\n        <Issue>9973</Issue>\n        <Page>1124</Page>\n        <Year>2015</Year>\n        <Authors>\n          <Author>Webster, D.P.</Author>\n          <Author>Klenerman, P.</Author>\n          <Author>Dusheiko, G.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2312359\" medline_id=\"25042234\">\n        <Title>Trends in underlying causes of death in people with HIV from 1999 to 2011 (D:A:D): a multicohort collaboration</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>384</Volume>\n        <Issue>9939</Issue>\n        <Page>241</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Smith, C.J.</Author>\n          <Author>Ryom, L.</Author>\n          <Author>Weber, R.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2317668\" medline_id=\"25663691\">\n        <Title>Excess cancers among HIV-infected people in the United States</Title>\n        <SourceTitle>Journal of the National Cancer Institute</SourceTitle>\n        <PubMedTitle>J Natl Cancer Inst</PubMedTitle>\n        <Volume>107</Volume>\n        <Issue>4</Issue>\n        <Page>dju503</Page>\n        <Year>2015</Year>\n        <Authors>\n          <Author>Robbins, H.A.</Author>\n          <Author>Pfeiffer, R.M.</Author>\n          <Author>Shiels, M.S.</Author>\n          <Author>Li, J.</Author>\n          <Author>Hall, H.I.</Author>\n          <Author>Engels, E.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2351164\" medline_id=\"26063472\">\n        <Title>Global, regional, and national incidence, prevalence, and years lived with disability for 301 acute and chronic diseases and injuries in 188 countries, 1990-2013: A systematic analysis for the Global Burden of Disease Study 2013</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>386</Volume>\n        <Issue>9995</Issue>\n        <Page>743</Page>\n        <Year>2015</Year>\n        <Authors>\n          <Author>Vos, T.</Author>\n          <Author>Barber, R.M.</Author>\n          <Author>Bell, B.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2551327\">\n        <Title>Global, regional, and national life expectancy, all-cause mortality, and cause-specific mortality for 249 causes of death, 1980-2015: A systematic analysis for the Global Burden of Disease Study 2015</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>388</Volume>\n        <Issue>10053</Issue>\n        <Page>1459</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Wang, H.D.</Author>\n          <Author>Naghavi, M.</Author>\n          <Author>Allen, C.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2799389\" medline_id=\"29443936\">\n        <Title>Ageing with HIV</Title>\n        <SourceTitle>Healthcare (Basel)</SourceTitle>\n        <PubMedTitle>Healthcare (Basel)</PubMedTitle>\n        <Volume>6</Volume>\n        <Issue>1</Issue>\n        <Page>E17</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>McGettrick, P.</Author>\n          <Author>Barco, E.A.</Author>\n          <Author>Mallon, P.W.G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944303\" medline_id=\"25169559\">\n        <Title>From wasting to obesity, changes in nutritional concerns in HIV/AIDS</Title>\n        <SourceTitle>Endocrinology and Metabolism Clinics of North America</SourceTitle>\n        <PubMedTitle>Endocrinol Metab Clin North Am</PubMedTitle>\n        <Volume>43</Volume>\n        <Issue>3</Issue>\n        <Page>647</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Mankal, P.K.</Author>\n          <Author>Kotler, D.P.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2989525\" medline_id=\"30906778\">\n        <Title>A model to predict in-hospital mortality in HIV/AIDS patients with pneumocystis pneumonia in China: The clinical practice in real world</Title>\n        <SourceTitle>BioMed Research International</SourceTitle>\n        <PubMedTitle>Biomed Res Int</PubMedTitle>\n        <Volume>2019</Volume>\n        <Year>2019</Year>\n        <Authors>\n          <Author>Wu, L.</Author>\n          <Author>Zhang, Z.</Author>\n          <Author>Wang, Y.</Author>\n          <Author>Hao, Y.</Author>\n          <Author>Wang, F.</Author>\n          <Author>Gao, G.</Author>\n          <Author>Yang, D.</Author>\n          <Author>Xiao, J.</Author>\n          <Author>Zhao, H.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"2292\" modifiedDate=\"20181212115958\">\n    <Title>Cost</Title>\n    <Body>\n      <para>According to the Centers for Disease Control and Prevention (CDC), the total lifetime direct medical cost associated with HIV infection in persons of all ages infected with the virus in 2008 in the United States was USD 12.6 billion (range USD 9.5 to 15.7 billion) (<REF id=\"1955210\">Owusu-Edusei, K. Jr. et al., 2013</REF>). According to a study by researchers at Cornell University, the lifetime cost of treating a patient with HIV, calculated in 2004 U.S. dollars and estimating a life expectancy of 24.2 years from time of beginning anti-HIV care, is USD 618,900. The calculation was based on current standards of care, and reflects the substantial improvements in survival that are derived from effective antiretroviral therapy. Furthermore, the researchers determined that the treatment expense that could be avoided by preventing  HIV infection is USD 303,100 per individual (<REF id=\"1157336\">Schackman, B.R. et al., 2006</REF>). \n\n</para>\n      <para>A cost-of-illness study conducted in Bogotá, Colombia, determined that in that country, where the GDP per capita was USD 7,904 in 2014, the mean cost per patient was USD 11,505 +/- 18,658 per year. The total cost of the disease in that country was pegged at USD 1.43 billion in 2014 (<REF id=\"2944304\">Kuhlmann, J. et al., 2017</REF>).\n</para>\n    </Body>\n    <References>\n      <Reference id=\"1157336\" medline_id=\"17063130\">\n        <Title>Lifetime cost and life expectancy for current human immunodeficiency virus care in the United States</Title>\n        <SourceTitle>Medical Care</SourceTitle>\n        <PubMedTitle>Med Care</PubMedTitle>\n        <Volume>44</Volume>\n        <Issue>11</Issue>\n        <Page>990</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Schackman, B.R.</Author>\n          <Author>Gebo, K.A.</Author>\n          <Author>Walensky, R.P.</Author>\n          <Author>Losina, E.</Author>\n          <Author>Muccio, T.</Author>\n          <Author>Sax, P.E.</Author>\n          <Author>Weinstein, M.C.</Author>\n          <Author>Seage, G.R. 3rd.</Author>\n          <Author>Moore, R.D.</Author>\n          <Author>Freedberg, K.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1955210\" medline_id=\"23403600\">\n        <Title>The estimated direct medical cost of selected sexually transmitted infections in the United States, 2008</Title>\n        <SourceTitle>Sexually Transmitted Diseases</SourceTitle>\n        <PubMedTitle>Sex Transm Dis</PubMedTitle>\n        <Volume>40</Volume>\n        <Issue>3</Issue>\n        <Page>197</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Owusu-Edusei, K. Jr.</Author>\n          <Author>Chesson, H.W.</Author>\n          <Author>Gift, T.L.</Author>\n          <Author>Tao, G.</Author>\n          <Author>Mahajan, R.</Author>\n          <Author>Ocfemia, M.C.</Author>\n          <Author>Kent, C.K.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944304\" medline_id=\"29254533\">\n        <Title>A cost-of-illness study of patients with HIV/AIDS in Bogotá, Colombia</Title>\n        <SourceTitle>Value in Health Regional Issues</SourceTitle>\n        <PubMedTitle>Value Health Reg Issues</PubMedTitle>\n        <Volume>14</Volume>\n        <Page>103</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Kuhlmann, J.</Author>\n          <Author>Keaei, M.</Author>\n          <Author>Conde, R.</Author>\n          <Author>Evers, S.M.A.A.</Author>\n          <Author>Gonzalez, J.</Author>\n          <Author>Govers, M.</Author>\n          <Author>Hiligsmann, M.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n</Section>\n<Section sectionId=\"398\" modifiedDate=\"20190502092113\">\n  <Title>Diagnosis</Title>\n  <Body>\n    <para>As described above (see Epidemiology), UNAID&apos;s program of 90-90-90 includes the goal--arguably the most critical of the three--that 90% of all HIV-positive individuals worldwide be aware of their status. This underlines the importance of robust programs for HIV screening and diagnosis (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).  \n\n</para>\n    <para>In addition to specific questioning about drug use and sexual activities and the detection of symptoms of typical opportunistic infections, specific diagnosis of an HIV infection requires the detection of HIV-specific antibodies, antigens or both. Several tests are available and can be done reliably using plasma, serum, whole blood or saliva samples. Anti-HIV antibodies and p24 antigen can be simultanously detected by fourth-generation enzyme immunoassays (EIA); rapid third-generation EIA detects antibodies only. However, EIAs are unable to detect acute HIV infection, prior to the production of a sufficient level of antibodies (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Rapid antibody tests are similarly not useful for diagnosing HIV in infants younger than 18 months, due to the possible persistence of maternal antibodies (<REF id=\"1135290\">Simon, V. et al., 2006</REF>); in these situations, using an antigen/antibody detection system (such as the Architect HIV Ag/Ab Combo) may be more appropriate (<REF id=\"2989521\">Wang, L. et al., 2019</REF>).\n\n</para>\n    <para>Alternately, nucleic acid testing can be performed. Polymerase chain reaction (PCR) is used to quantify viral load, determine prognosis and establish correct antiviral therapy. Available tests include the branched chain DNA test (Quantiplex HIV RNA assay, Chiron), the HIV RNA polymerase chain reaction (PCR) test (Amplicor HIV-1, Roche) and the nucleic acid sequence-based amplification assay (Organon Technika/Advanced Bioscience Laboratories). Flow cytometry is used to monitor the number of CD4+ cells in the blood.\n\n\n\n</para>\n    <para>The duration of HIV infection at diagnosis can be determined using models of disease progression (<REF id=\"2989512\">Li, A.H. et al., 2018</REF>).\n\n</para>\n  </Body>\n  <References>\n    <Reference id=\"1135290\" medline_id=\"16890836\">\n      <Title>HIV/AIDS epidemiology, pathogenesis, prevention, and treatment</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>368</Volume>\n      <Issue>9534</Issue>\n      <Page>489</Page>\n      <Year>2006</Year>\n      <Authors>\n        <Author>Simon, V.</Author>\n        <Author>Ho, D.D.</Author>\n        <Author>Abdool Karim, Q.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2944306\" medline_id=\"30049419\">\n      <Title>HIV</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>392</Volume>\n      <Issue>10148</Issue>\n      <Page>685</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Ghosn, J.</Author>\n        <Author>Taiwo, B.</Author>\n        <Author>Seedat, S.</Author>\n        <Author>Autran, B.</Author>\n        <Author>Katlama, C.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2989512\" medline_id=\"30082524\">\n      <Title>Duration of human immunodeficiency virus infection at diagnosis among new human immunodeficiency virus cases in Dehong, Yunnan, China, 2008-2015</Title>\n      <SourceTitle>Chinese Medical Journal</SourceTitle>\n      <PubMedTitle>Chin Med J (Engl)</PubMedTitle>\n      <Volume>131</Volume>\n      <Issue>16</Issue>\n      <Page>1936</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Li, A.H.</Author>\n        <Author>Wu, Z.Y.</Author>\n        <Author>Jiang, Z.</Author>\n        <Author>McGoogan, J.M.</Author>\n        <Author>Zhao, Y.</Author>\n        <Author>Duan, S.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2989521\" medline_id=\"30651975\">\n      <Title>HIV infection in Xi&apos;an, China: Epidemic characterization, risk factors to false positives and potential utility of the sample-to-cutoff index to identify true positives using Architect HIV Ag/Ab combo</Title>\n      <SourceTitle>Antimicrobial Resistance and Infection Control</SourceTitle>\n      <PubMedTitle>Antimicrob Resist Infect Control</PubMedTitle>\n      <Volume>8</Volume>\n      <Page>9</Page>\n      <Year>2019</Year>\n      <Authors>\n        <Author>Wang, L.</Author>\n        <Author>Xiao, Y.</Author>\n        <Author>Tian, X.D.</Author>\n        <Author>Ruan, J.X.</Author>\n        <Author>Chen, W.</Author>\n        <Author>Yu, Y.</Author>\n      </Authors>\n    </Reference>\n  </References>\n  <Section sectionId=\"4756\" modifiedDate=\"20190502093000\">\n    <Title>Screening</Title>\n    <Body>\n      <para>Routine HIV screening of all individuals in the United States aged 13-64 years has been recommended by the Centers for Disease Control and Prevention since 2006 (<a href=\"http://www.cdc.gov/mmwr/preview/mmwrhtml/rr5514a1.htm\">Revised recommendations for HIV testing of adults, adolescents, and pregnant women in health-care settings (Centers for Disease Control and Prevention, September 2006)</a>). In 2013, the U.S. Preventive Services Task Force issued a guideline containing a similar recommendation for routine screening of all individuals aged 15-65 years, as well as all pregnant women (<a href=\"http://www.uspreventiveservicestaskforce.org/uspstf13/hiv/hivdraftrec.htm\">Screening for HIV: U.S. Preventive Services Task Force recommendation statement (U.S. Preventive Services Task Force, April 2013)</a>). The recommendations are supported by evidence demonstrating the significant benefits to both patient and partner(s) of early diagnosis and treatment of HIV infection.\n\n</para>\n      <para>In European Union, the European Centre for Disease Prevention and Control has issued its own HIV screening recommendations. While acknowledging that each country must establish its own guidelines, there are certain high-risk population groups to whom screening should always be offered: men who have sex with men; immigrants (especially those from countries with high HIV endemicity); and injecting drug users. Enzyme immunoassay is the gold standard for screening and diagnosis, although rapid HIV (point-of-care) tests are an acceptable alternative and may increase the uptake among individuals who would otherwise be unwilling to be tested (<a href=\"http://ecdc.europa.eu/en/publications/publications/101129_gui_hiv_testing.pdf\">HIV testing: Increasing uptake and effectiveness in the European Union (European Centre for Disease Prevention and Control, December 2010)</a>). \n\n</para>\n    </Body>\n    <References/>\n  </Section>\n  <Section sectionId=\"404\" modifiedDate=\"20190502092931\">\n    <Title>Resistance Testing</Title>\n    <Body>\n      <para>After primary infection, as a consequence of mutations introduced by the reverse transcriptase, which is error-prone and generates a large number of mutations, viral heterogeneity increases and after a while patients are infected by different populations of HIV. Viruses evolving in patients, especially those who have received nonsuppressive therapy, may develop drug resistance due to mutations in the regions coding for the targets of therapy, such as protease, reverse transcriptase and gp41. Transmitted drug resistance may also occur.\n\n</para>\n      <para>Although resistance may be due to different factors (reduced absorption of the drug, activation, interactions with food or other drugs, poor compliance to drug schedules), the presence of HIV-resistant strains accounts for more than 70% of all HIV treatment failures. The success of highly active antiretroviral therapy (HAART) is significantly lower in patients who have previously taken anti-HIV drugs; if the previous therapy did not completely suppress viral replication, the resistant variants are likely to evolve into new variants resistant to one of more of the new combination drugs. Cross-resistance occurs when mutations conferring resistance to a particular drug also confer resistance to other drugs, usually of the same therapeutic class.\n\n</para>\n      <para>Recent trials have confirmed the benefit of resistance testing in directing drug selection for drug therapy. Resistance testing could help in determining the optimal drug cocktail to use or to substitute in case that ongoing therapy is failing (<REF id=\"1689287\">Hirsch, M.S. et al., 2008</REF>; <REF id=\"1689286\">Wainberg, M.A. et al., 2011</REF>). Testing may also improve patient outcome, reduce exposure to unnecessary side effects, and reduce costs associated with treatment. The International AIDS Society - USA has concluded that resistance testing should be used for patient management in several situations, such as newly diagnosed patients, virologic failure or pregnancy. \n\n</para>\n      <para>Different companies have developed methods for resistance testing, based on phenotyping and on genotyping. Phenotyping consists in the analysis of selected regions associated with mutations conferring drug resistance (RT and protease), which are amplified by PCR and integrated into an infectious strain of HIV-1. This assay measures the level of drug needed to block the virus. Monogram and Virco both offer phenotyping services for HIV.\n\n</para>\n      <para>Genotyping consists in the direct examination of PCR-amplified sequences or on methods based on the analysis of specific codons associated with resistance. The sequence is compared with sequences known to cause resistance. Genotyping results are generally available more quickly than phenotyping. However the results are more difficult to interpret because the physician must compare them against a growing database of characterized mutations. \n\n</para>\n      <para>Virtual phenotyping, available through Virco, involves genotyping the virus and then predicting phenotypic susceptibility based on large database of genotypic/phenotypic correlations.  \n\n</para>\n      <para>Genotyping and phenotyping are tests based on an evolving field, and interpretation requires analysis by someone with experience using these assays. The following table presents information on some commercially available drug resistance assays.<FREETABLE id=\"18\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>\n\n      <TR>\n      <TD COLSPAN=4 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Representative drug resistance assays available for analysis of HIV</B></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Company</B></TD>\n      <TD WIDTH=\"100\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Name of Test</B></TD>\n      <TD WIDTH=\"100\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Kind of Test</B></TD>\n      <TD WIDTH=\"143\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Analysis</B></TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Affymetrix</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      GeneChip HIV PRT</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ABI/Perkin Elmer</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      HIV genotyping system</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Applied Sciences</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping test</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Chiron</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping test</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Innogenetics</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      INNO-LiPA</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Specialty Labs</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      GenotypeR Plus</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Stanford</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ABL</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Virco</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      VircoGEN</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Virco</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Antivirogram</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Phenotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Monogram</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      PhenoSense</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Phenotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease; also gp41 and integrase</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Visible Genetics</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      TruGene</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n</TABLE>\n]]></FREETABLE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1689286\" medline_id=\"21848464\">\n        <Title>Development of antiretroviral drug resistance</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>365</Volume>\n        <Issue>7</Issue>\n        <Page>637</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Wainberg, M.A.</Author>\n          <Author>Zaharatos, G.J.</Author>\n          <Author>Brenner, B.G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1689287\" medline_id=\"18549313\">\n        <Title>Antiretroviral drug resistance testing in adult HIV-1 infection: 2008 recommendations of an International AIDS Society-USA panel</Title>\n        <SourceTitle>Clinical Infectious Diseases</SourceTitle>\n        <PubMedTitle>Clin Infect Dis</PubMedTitle>\n        <Volume>47</Volume>\n        <Issue>2</Issue>\n        <Page>266</Page>\n        <Year>2008</Year>\n        <Authors>\n          <Author>Hirsch, M.S.</Author>\n          <Author>Günthard, H.F.</Author>\n          <Author>Schapiro, J.M.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n</Section>\n<Section sectionId=\"2936\" modifiedDate=\"20181213032631\">\n  <Title>Prevention</Title>\n  <Body>\n    <para>While an effective AIDS vaccine is clearly needed in order to end the AIDS pandemic, no such product has yet been successfully developed. This means that alternative and effective prevention strategies must be consistently applied to reduce the rate of new HIV infections until an AIDS vaccine does become available (<REF id=\"2948271\">Fauci, A.S., 2017</REF>). Prevention packages should be individualized for specific regions and countries, based on the prevalent risk behaviors and patterns of transmission (<REF id=\"1199753\">Cohen, M.S. et al., 2008</REF>). Efforts to improve availability and ensure maximum usage of said methods is equally important, and will require the commitment of governments, NGOs and international agencies. \n\n</para>\n    <para>Despite the lack of an effective vaccine, progress has been made toward the prevention of HIV, as explained further in the following sections. Barrier methods were among the earliest prevention strategies, and are still useful. Used consistently, condoms can reduce HIV transmission in HIV-serodiscordant heterosexual couples by more than 70% (<REF id=\"2947853\">Giannou, F.K. et al., 2016</REF>). Male circumcision has been shown to reduce a man&apos;s risk of HIV acquisition from an infected female partner (<REF id=\"2947862\">Schenker, I., 2018</REF>). Topical microbicides show promise for HIV prevention in women. A vaginal gel containing the antiretroviral drug, tenofovir, prevented heterosexual acquisition of HIV in women in a trial conducted in South Africa (CAPRISA 004) (<REF id=\"1530496\">Karim, Q.A. et al., 2010</REF>). Preexposure prophylaxis (PrEP) can prevent HIV infection in men who have sex with men as well as in heterosexual men and women (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Based on findings of the HPTN 052 study, which showed that treating to undetectable levels in the infected partner reduced HIV transmission in serodiscordant couples by 96% (<REF id=\"1678176\">Cohen, M.S. et al., 2011</REF>), the Prevention Access Campaign was launched in 2016 (<REF id=\"2947855\">Anonymous, 2017</REF>). Modeling studies indicate that that universal testing and aggressive treatment of HIV-infected people could eventually extinguish the HIV epidemic (<REF id=\"1689284\">Granich, R.M. et al., 2009</REF>); this strategy, known as &quot;test and treat,&quot; has been incorporated into UNAID&apos;s 90-90-90 plan (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).\n\n</para>\n    <para>Proven strategies available at this time for the prevention of HIV transmission include: \n<LI>rapid, routine HIV testing</LI>\n      <LI>education</LI>\n      <LI>sexual abstinence, monogamy, limiting the number of sexual partners</LI>\n      <LI>barrier methods (e.g., condoms)</LI>\n      <LI>provision of clean needles and syringes to drug users</LI>\n      <LI>programs to interrupt mother-to-infant transmission (e.g., caesarean delivery, antiretroviral therapy)</LI>\n      <LI>preexposure prophylaxis</LI>\n      <LI>medical male circumcision</LI>\n      <LI>treatment of the infected partner in serodiscordant couples</LI>\n    </para>\n  </Body>\n  <References>\n    <Reference id=\"1199753\" medline_id=\"18382737\">\n      <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic</Title>\n      <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n      <PubMedTitle>J Clin Invest</PubMedTitle>\n      <Volume>118</Volume>\n      <Issue>4</Issue>\n      <Page>1244</Page>\n      <Year>2008</Year>\n      <Authors>\n        <Author>Cohen, M.S.</Author>\n        <Author>Hellmann, N.</Author>\n        <Author>Levy, J.A.</Author>\n        <Author>Decock, K.</Author>\n        <Author>Lange, J.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"1530496\">\n      <Title>Effectiveness and safety of tenofovir gel, an antiretroviral microbicide, for the prevention of HIV infection in women</Title>\n      <SourceTitle>Science</SourceTitle>\n      <PubMedTitle>Science</PubMedTitle>\n      <Volume>329</Volume>\n      <Issue>5996</Issue>\n      <Page>1168</Page>\n      <Year>2010</Year>\n      <Authors>\n        <Author>Karim, Q.A.</Author>\n        <Author>Karim, S.S.</Author>\n        <Author>Frohlich, J.A.</Author>\n        <Author>et al.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"1678176\" medline_id=\"21767103\">\n      <Title>Prevention of HIV-1 infection with early antiretroviral therapy</Title>\n      <SourceTitle>New England Journal of Medicine</SourceTitle>\n      <PubMedTitle>N Engl J Med</PubMedTitle>\n      <Volume>385</Volume>\n      <Issue>6</Issue>\n      <Page>493</Page>\n      <Year>2011</Year>\n      <Authors>\n        <Author>Cohen, M.S.</Author>\n        <Author>Chen, Y.Q.</Author>\n        <Author>McCauley, M.</Author>\n        <Author>Gamble, T.</Author>\n        <Author>Hosseinipour, M.C.</Author>\n        <Author>Kumarasamy, N.</Author>\n        <Author>Hakim, J.G.</Author>\n        <Author>Kumwenda, J.</Author>\n        <Author>Grinsztejn, B.</Author>\n        <Author>Pilotto, J.H.</Author>\n        <Author>Godbole, S.V.</Author>\n        <Author>Mehendale, S.</Author>\n        <Author>Chariyalertsak, S.</Author>\n        <Author>Santos, B.R.</Author>\n        <Author>Mayer, K.H.</Author>\n        <Author>Hoffman, I.F.</Author>\n        <Author>Eshleman, S.H.</Author>\n        <Author>Piwowar-Manning, E.</Author>\n        <Author>Wang, L.</Author>\n        <Author>Makhema, J.</Author>\n        <Author>Mills, L.A.</Author>\n        <Author>de Bruyn, G.</Author>\n        <Author>Sanne, I.</Author>\n        <Author>Eron, J.</Author>\n        <Author>Gallant, J.</Author>\n        <Author>Havlir, D.</Author>\n        <Author>Swindells, S.</Author>\n        <Author>Ribaudo, H.</Author>\n        <Author>Elharrar, V.</Author>\n        <Author>Burns, D.</Author>\n        <Author>Taha, T.E.</Author>\n        <Author>Nielsen-Saines, K.</Author>\n        <Author>Celentano, D.</Author>\n        <Author>Essex, M.</Author>\n        <Author>Fleming, T.R.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"1689284\" medline_id=\"19038438\">\n      <Title>Universal voluntary HIV testing with immediate antiretroviral therapy as a strategy for elimination of HIV transmission: a mathematical model</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>373</Volume>\n      <Issue>9657</Issue>\n      <Page>48</Page>\n      <Year>2009</Year>\n      <Authors>\n        <Author>Granich, R.M.</Author>\n        <Author>Gilks, C.F.</Author>\n        <Author>Dye, C.</Author>\n        <Author>De Cock, K.M.</Author>\n        <Author>Williams, B.G.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2944306\" medline_id=\"30049419\">\n      <Title>HIV</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>392</Volume>\n      <Issue>10148</Issue>\n      <Page>685</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Ghosn, J.</Author>\n        <Author>Taiwo, B.</Author>\n        <Author>Seedat, S.</Author>\n        <Author>Autran, B.</Author>\n        <Author>Katlama, C.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2947853\" medline_id=\"26488070\">\n      <Title>Condom effectiveness in reducing heterosexual HIV transmission: A systematic review and meta-analysis of studies on HIV serodiscordant couples</Title>\n      <SourceTitle>Expert Review of Pharmacoeconomics &amp; Outcomes Research</SourceTitle>\n      <PubMedTitle>Expert Rev Pharmacoecon Outcomes Res</PubMedTitle>\n      <Volume>16</Volume>\n      <Issue>4</Issue>\n      <Page>489</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Giannou, F.K.</Author>\n        <Author>Tsiara, C.G.</Author>\n        <Author>Nikolopoulos, G.K.</Author>\n        <Author>Talias, M.</Author>\n        <Author>Benetou, V.</Author>\n        <Author>Kantzanou, M.</Author>\n        <Author>Bonovas, S.</Author>\n        <Author>Hatzakis, A.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2947855\" medline_id=\"29096785\">\n      <Title>U=U taking off in 2017</Title>\n      <SourceTitle>The Lancet. HIV</SourceTitle>\n      <PubMedTitle>Lancet HIV</PubMedTitle>\n      <Volume>4</Volume>\n      <Issue>11</Issue>\n      <Page>e475</Page>\n      <Year>2017</Year>\n      <Authors/>\n    </Reference>\n    <Reference id=\"2947862\" medline_id=\"29969309\">\n      <Title>Cutting-edge success in preventing heterosexual HIV transmission in Africa: Voluntary medical male circumcision has reached 15 million men</Title>\n      <SourceTitle>AIDS Education and Prevention</SourceTitle>\n      <PubMedTitle>AIDS Educ Prev</PubMedTitle>\n      <Volume>30</Volume>\n      <Issue>3</Issue>\n      <Page>232</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Schenker, I.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2948271\" medline_id=\"29052689\">\n      <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic</Title>\n      <SourceTitle>JAMA - Journal of the American Medical Association</SourceTitle>\n      <PubMedTitle>JAMA</PubMedTitle>\n      <Volume>318</Volume>\n      <Issue>16</Issue>\n      <Page>1535</Page>\n      <Year>2017</Year>\n      <Authors>\n        <Author>Fauci, A.S.</Author>\n      </Authors>\n    </Reference>\n  </References>\n  <Section sectionId=\"399\" modifiedDate=\"20181220120037\">\n    <Title>Prophylactic HIV Vaccines</Title>\n    <Body>\n      <para>The development of a vaccine capable of protecting against HIV infection presents a series of unique difficulties, and has been challenging researchers since the virus was identified (<REF id=\"944030\">Markel, H., 2005</REF>). In contrast to other viruses for which vaccines have been successfully developed, HIV replication is controlled primarily by cellular, rather than humoral, immune responses. \n\n\n\n</para>\n      <para>The main obstacle to vaccine development is the rapid replication, compounded by the genetic diversity and high rate of mutation and recombination of this virus, which evolves rapidly in the host. Protective immunity elicited by a vaccine must exceed the efficacy of the natural immune response, which is unable to clear the virus, and should be effective against the many clades and strains existing both globally and within a single infected individual (<REF id=\"1024845\">Girard, M.P. et al., 2006</REF>; <REF id=\"1164361\">Montefiori, D. et al., 2007</REF>; <REF id=\"2947496\">Hemelaar, J. et al., 2019</REF>). In spite of the many recognized challenges, at least a moderately effective HIV vaccine is needed in order to achieve a durable end to the AIDS pandemic (<REF id=\"2948271\">Fauci, A.S., 2017</REF>).\n\n</para>\n      <para>Several potential HIV-1 vaccine strategies have been tested to date in clinical trials, including HIV-1 envelope (Env) gp120 subunit vaccines, adenovirus serotype 5 (Ad5) vectors expressing internal proteins (Gag/Pol/Nef), DNA vaccine prime plus Ad5 vector boost, canarypox ALVAC vector prime plus Env gp120 boost, and--most recently--mosaic HIV-1 vaccines. The latter are potentially the most promising, as they incorporate global mosaic antigens from various group M strains of the virus, and thus may circumvent the issue of viral diversity. The phase I/II APPROACH trial confirmed the safety and immunogenicity of a mosaic Ad26/Ad26 plus gp140 HIV-1 vaccine, consisting in priming with Ad26 vectors expressing bioinformatically optimised mosaic HIV-1 envelope (Env)/Gag/Pol immunogens and boosting with Ad26 vectors plus adjuvanted Env gp140 protein. The trial recruited 393 healthy, HIV-negative adults in Africa, Thailand and the U.S. who were randomly assigned to receive 1 of 7 vaccine combinations or placebo. All of the vaccine regimens triggered immunogenic responses in the study subjects, with good tolerability. In a parallel study in rhesus monkeys, two-thirds of animals given the candidate vaccine that was most immunogenic in humans were fully protected against repeated challenge with simian-HIV (<REF id=\"2869568\">Barouch, D.H. et al., 2018</REF>).\n\n</para>\n      <para>Information on candidate AIDS vaccines in active clinical and preclinical development appears in the following table.<COMPETITIVE id=\"78\">\n          <TABLE>\n            <TR>\n              <TD>Vaccines under investigation for the prevention or treatment of AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Description</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=197440&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-1 Immunogen</a>\n              </TD>\n              <TD>Immune Response BioPharma</TD>\n              <TD>Inactivated gp120 - depleted HIV - 1 immunogen (strain HHZ - 321 from Zaire) inactivated by beta - propiolactone and irradiation,  emulsified in mineral oil (Incomplete Freud&apos;s Adjuvant)</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795404&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ITV-1</a>\n              </TD>\n              <TD>Immunotech Laboratories</TD>\n              <TD>AIDS vaccine consisting of an inactivated purified extract of porcine pepsin recognizing HIV gp41 and gp120 proteins</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291052&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AIDSVAX gp120 B/E</a>\n              </TD>\n              <TD>Walter Reed Army Institute</TD>\n              <TD>HIV - 1 vaccine consisting of a recombinant CHO - produced fusion protein containing two different gp120 envelope antigens: MN derived from a T - cell tropic or syncytium - inducing HIV - 1 B subtype,  and A244,  derived from the macrophage - tropic CM244 HIV E subtype</TD>\n              <TD>Phase III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=877379&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC-HIV</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Canarypox - based vaccine expressing HIV - 1 envelope glycoprotein (clade C),  glycoprotein gp41 (clade B),  gag (clade B) and protease (clade B) antigens</TD>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789554&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">TV1.C gp120 Env/1086.C gp120 Env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Bivalent AIDS vaccine consisting of two recombinant HIV - 1 subtype C gp120 antigens,  TV1.C and 1086.C; expressed in CHO cells</TD>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435169&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AGS-004</a>\n              </TD>\n              <TD>Argos Therapeutics</TD>\n              <TD>AIDS vaccine consisting of dendritic cells electroporated with autologous amplified HIV - 1 gag,  nef,  rev and vpr RNA antigens and CD40 ligand RNA</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=301127&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC E120TMG</a>\n              </TD>\n              <TD>Walter Reed Army Institute/ Sanofi Pasteur</TD>\n              <TD>AIDS vaccine consisting of a recombinant canarypox vector expressing HIV - 1 subtype E envelope gp120 - TM (from a primary isolate) and gag and pol/protease genes from HIV - 1 subtype B - (LAI),  under the control of vaccine virus H6 and I3L promoters,  respectively</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915290&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos.HIV</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD>Recombinant replication - deficient Ad26 vectored vaccine consisting of 3 Ad26 vectors,  one containing a mosaic insert of envelope (Env) sequence,  and 2 vectors containing mosaic inserts of Gag and Pol sequences</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925145&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos4.HIV</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD>Tetravalent human immunodeficiency virus (HIV) vaccine comprising a mixture of four replication - deficient adenoviral serotype 26 (rAd26) vectors encoding a mosaic synthetic cytoplasmic domain fragment (7aa) of HIV envelope protein C4 (C4D7/mos2SEnv),  and non - synthetic envelope glycoproteins mos1Env,  mos1GagPol and mos2GagPol,  respectively</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925146&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Clade C gp140</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD>HIV vaccine containing clade C gp140 protein mixed with aluminum phosphate adjuvant</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392675&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-LIPO-5</a>\n              </TD>\n              <TD>ANRS</TD>\n              <TD>AIDS vaccine consisting of a mixture of 5 lipopeptides containing CTL epitopes from HIV - 1 subtype B. Two peptides from Gag (aa 17 - 35; aa 253 - 284),  two peptides from Nef (aa 66 - 97; aa 116 - 145) and one peptide from Pol (aa 325 - 355). Each peptide is modified in the C - terminal position by the addition of a palmitoyl - lysylamide group [K(Palm) - NH2] to form the lipopeptide</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315937&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LC-002</a>\n              </TD>\n              <TD>Genetic Immunity</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid (pLWXu1) encoding for 15 HIV proteins and formulated into a mannosilated particle using the Genetic Immunity&apos;s immune amplification platform technology</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=429800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-HIV62B</a>\n              </TD>\n              <TD>GeoVax Labs/ National Institute Allergy Infect Dis</TD>\n              <TD>HIV vaccine comprising a non - replicating recombinant modified vaccinia Ankara (rMVA62B) encoding HIV - 1 HXB2 gag/pol,  and a truncated HIV - 1 ADA envelope (env) protein lacking the cytoplasmic tail</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=758734&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVAmos</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD>AIDS vaccine consisting of two recombinant modified vaccinia Ankara (MVA) viruses,  one encoding for the HIV - 1 mosaic 1 (M1) env,  gag and  pol genes,  and the other one encoding for the HIV - 1 mosaic 2 (M2) env,  gag and pol genes</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=736800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VAC-3S</a>\n              </TD>\n              <TD>InnaVirVax</TD>\n              <TD>Therapeutic HIV vaccine directed to the highly conserved gp41,  3S motif of HIV - 1</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=833319&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VIH-TriMix-ARNm</a>\n              </TD>\n              <TD>IDIBAPS</TD>\n              <TD>AIDS therapeutic vaccine consisting of the combination of mRNA,  rationally designed HIV antigens and TriMix</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=375612&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV014-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine composed of 4 adenoviral vectors (in a 3:1:1:1 ratio) that encode the HIV - 1 Gag/Pol polyprotein from clade B (AdtGagPol(B).11D) and HIV - 1 Env glycoproteins from clades A (Adgp140(A).11D),  B (Adtgp140dv12(B).11D),  and C (Adgp140(C).11D),  respectively</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=400981&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVDNA016-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Multiclade,  multivalent HIV - 1 DNA vaccine composed of six plasmids respectively encoding Gag clade B (VRC - 4401),  Pol clade B (VRC - 4409),  Nef clade B (VRC - 4404),  Env clade A (VRC - 5736),  Env clade B (VRC - 5737) and Env clade C (VRC - 5738)</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=871553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp140</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD>Trimeric glycoprotein 140</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428304&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pGA2/JS7</a>\n              </TD>\n              <TD>GeoVax Labs/ National Institute Infectious Dis</TD>\n              <TD>DNA plasmid containing gag,  pro,  RT,  env,  tat,  rev,  vpu genes from HIV - 1 clade B</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=754344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad35-GRIN</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>AIDS vaccine consisting of recombinant adenoviral - 35 vector encoding GRIN fusion protein based on gag,  RT,  integrase and nef (HIV - 1 subtype A)</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709822&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CEvac</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV vaccine consisting of DNA encoding for HIV - 1 group M p24gag conserved elements (p24Core 1 and p24Core2)</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789679&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ChAdV63.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD>HIV vaccine consisting of a replication - incompetent chimpanzee adenovirus (ChAdV - 63) encoding a chimeric fusion protein (HIVCON) comprising the most highly conserved regions of HIV - 1 Gag,  Pol,  Vif,  and Env</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-C</a>\n              </TD>\n              <TD>EuroVacc Foundation</TD>\n              <TD>HIV DNA - vaccine based on a representative Chinese subtype C isolate CN54</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805333&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-PT123</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of DNA plasmids encoding for the clade C ZM96 Gag and gp140 and CN54 Pol - Nef HIV - 1 genes</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=463084&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FIT-06</a>\n              </TD>\n              <TD>FIT Biotech</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid (GTU(R)) expressing HIV - 1 B - clade nef,  rev,  tat,  gag,  pol,  env and CTL epitopes</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1012613&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">INO-6145</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals</TD>\n              <TD>Human immunodeficiency virus (HIV) vaccine comprising plasmid DNA encoding synthethic HIV - 1 - derived multiclade consensus Gag and Pol </TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=879292&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA HIV-B</a>\n              </TD>\n              <TD>ANRS</TD>\n              <TD>Recombinant modified Vaccinia virus ankara vectored vaccine,  encoding for full - length sequence of gag (aa 1 - 512),  fragments from pol (aa 172 - 219,  325 - 383,  461 - 519) and nef (66 - 147,  182 - 206) from HIV - 1 (isolate BRU/LAI)</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=439426&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD>Modified vaccinia Ankara (MVA) virus encoding a chimeric fusion protein (HIVCON) comprising the most highly conserved regions of HIV Gag,  Pol,  Vif,  and Env</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=981286&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Mosaic gp140</a>\n              </TD>\n              <TD>Janssen</TD>\n              <TD>HIV - 1 mosaic M gp140 Env trimer</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709739&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-GP</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals</TD>\n              <TD>Multi - subtype vaccine based on synthetic HIV - 1 immunogens targeting two env antigens as well as gag and pol antigens</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795545&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">THV-01</a>\n              </TD>\n              <TD>Theravectys</TD>\n              <TD>AIDS therapeutic live recombinant vaccine consisting of the combination of THV01 - 1 and THV01 - 2 lentiviral vectors encoding HIV antigens under the regulation of THV - PROM human promoter</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=471960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tat Oyi</a>\n              </TD>\n              <TD>Biosantech</TD>\n              <TD>AIDS vaccine consisting of a synthetic Tat variant of 101 residues (HIV - 1 Oyi strain)</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=882712&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">p55(gag)</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of plasmid DNA encoding the full length p55gag from HIV - 1 group M</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789680&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pSG2.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD>HIV vaccine consisting of a DNA plasmid (pSG2) encoding a chimeric fusion protein (HIVCON) comprising the most highly conserved regions of HIV - 1 Gag,  Pol,  Vif,  and Env</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923551&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AD4-EnvC150</a>\n              </TD>\n              <TD>PaxVax/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a replication - competent adenovirus type 4 vector encoding an optimized HIV clade C env protein (gp150 1086.C)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661464&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.ENVA.01 HIV-1</a>\n              </TD>\n              <TD>Crucell/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of recombinant adenovirus serotype 26 expressing HIV clade A Env antigen</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991353&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-EnvCN54</a>\n              </TD>\n              <TD>Imperial College</TD>\n              <TD>HIV vaccine consisting of live replication - competent adenovirus 4 vector encoding envelope glycoprotein derived from HIV - 1 clade C strain CN54</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923549&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-mGag</a>\n              </TD>\n              <TD>PaxVax/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a replication - competent adenovirus type 4 vector encoding an optimized HIV Gag antigen (mosaic Gag)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661445&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad5.ENVA.48HIV-1</a>\n              </TD>\n              <TD>Crucell/ National Institute Allergy Infect Dis/ Beth Israel Deaconess Medical Center</TD>\n              <TD>Chimeric adenovirus serotype 5 (Ad5) with seven hexon variable regions (HVRs) derived from Ad48 HIV - 1 expressing the VRC EnvA antigen</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=861091&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BG505 SOSIP.664 gp140 trimers</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>Multiepitope AIDS vaccine consisting of soluble cleaved gp140 trimers based on HIV - 1 BG505 subtype A T/F virus Env gene,  in which each monomer comprises an A501C mutated HIV - 1 gp120 and a T605C mutated HIV - 1 gp41 linked by a disulfide bond,  trimer - stabilizing I559P and T322N mutations in gp41 and gp120 regions,  respectively and MPER domain deletion,  expressed in HEK293 cells</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=899722&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CH505TF</a>\n              </TD>\n              <TD>Duke University</TD>\n              <TD>Human immunodeficiency virus vaccine comprising gp120 envelope glycoproteins</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=741669&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CN54gp140</a>\n              </TD>\n              <TD>Medical Research Council (MRC)/ Imperial College</TD>\n              <TD>HIV vaccine consisting of a recombinant trimeric envelope glycoprotein gp140 derived from HIV - 1 clade C strain CN54</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=687890&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DCV3</a>\n              </TD>\n              <TD>Hospital Clinic</TD>\n              <TD>AIDS vaccine consisting of autologous monocyte - derived dendritic cells pulsed ex vivo with autologous heat - inactivated HIV - 1</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923518&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA CON-S env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid encoding for a group M consensus envelope gene with shortened consensus variable loops (CON - S) env gene </TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923534&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Mosaic env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid encoding for a designed env gene (Mosaic env)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923514&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Nat-B env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid encoding for Nat - B env gene</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=821845&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA.HTI/MVA.HTI</a>\n              </TD>\n              <TD>Aelix Therapeutics</TD>\n              <TD>HIV vaccine consisting of a prime vaccine composed of 298H plasmid vector encoding T - cell immunogen comprising 16 polypeptide segments p17 (aa 17 - 94),  p24 (aa 30 - 43,  61 - 71,  91 - 150,  164 - 177,  217 - 231),  p2p7plp6 (aa 63 - 89),  protease (aa 45 - 99),  reverse transcriptase (RT,  aa 34 - 50,  210 - 264,  309 - 342),  integrase (aa 210 - 243,  266 - 282),  Vif (aa 25 - 50,  166 - 184),  Nef (aa 56 - 68) derived from HIV - 1 genome and linked via alanine linkers and a boost vaccine composed of modified vaccinia virus Ankara (MVA) vector encoding HIVCAT T - cell immunogen (HIT) comprising 16 polypeptide segments -  p17 (aa 17 - 94),  p24 (aa 30 - 43,  61 - 71,  91 - 150,  164 - 177,  217 - 231),  p2p7plp6 (aa 63 - 89),  protease (aa 45 - 99),  reverse transcriptase (RT,  aa 34 - 50,  210 - 264,  309 - 342),  integrase (aa 210 - 243,  266 - 282),  Vif (aa 25 - 50,  166 - 184),  Nef (aa 56 - 68) derived from HIV - 1 genome and linked via alanine linkers,  both under the control of cytomegalovirus (CMV) promoter</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=900317&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FLSC</a>\n              </TD>\n              <TD>National Institutes of Health (NIH)/ Profectus BioSciences</TD>\n              <TD>AIDS vaccines comprising a full - lenght single - chain (FLSC) analogue of the gp120 - CD4 receptor complex consisting of HIV - 1 Bal gp120 protein joined to the D1and D2 domains of CD4 by a 20 - amino - acid linker</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719339&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV MAG pDNA</a>\n              </TD>\n              <TD>Profectus BioSciences</TD>\n              <TD>Therapeutic HIV DNA vaccine based on two plasmid vectors: ProfectusVax HIV - 1 gag/pol and ProfectusVax HIV - 1 nef/tat/vif, env and containing bupivacaine</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=783050&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIVAX</a>\n              </TD>\n              <TD>University of Miami (UM)/ GeneCure</TD>\n              <TD>AIDS vaccine consisting of a live attenuated replication - defective HIV - 1 strain pseudotyped with vesicular somatitis virus type G (VSV - G) envelope protein</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=927219&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LFn-p24B/C</a>\n              </TD>\n              <TD>Vaccine Technologies (VTI)</TD>\n              <TD>AIDS vaccine consisting of detoxified anthrax lethal factor (LFn) fused to HIV - 1 p24 of subtype B/C</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435114&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CMDR</a>\n              </TD>\n              <TD>Walter Reed Army Institute</TD>\n              <TD>AIDS vaccine consisting of a recombinant modified vaccinia ankara  - Chiang Mai vector encoding for the HIV - 1 (subtype CRF_A/E,  Thailand) env (clade E,  CM235 isolate),  gag (clade A,  CM240 isolate) and pol (clade E,  CM240 isolate) genes</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991354&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CN54</a>\n              </TD>\n              <TD>Imperial College</TD>\n              <TD>HIV vaccine consisting of live non - replicating modified vaccinia Ankara (MVA) vector encoding envelope glycoprotein derived from HIV - 1 clade C strain CN54</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037346&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv3</a>\n              </TD>\n              <TD>University North Carolina, Chapel Hill</TD>\n              <TD>AIDS vaccine consisting of non - replicating poxvirus - modified vaccinia Ankara (MVA) virus transduced with a codon - optimized self - amplifying mRNA (saRNA) encoding second - generation M3 mosaic of conserved epitopes derived from HIV - 1 Gag/Pol</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037349&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv4</a>\n              </TD>\n              <TD>University North Carolina, Chapel Hill</TD>\n              <TD>AIDS vaccine consisting of non - replicating poxvirus - modified vaccinia Ankara (MVA) virus transduced with a codon - optimized self - amplifying mRNA (saRNA) encoding second - generation M4 mosaic of conserved epitopes derived from HIV - 1 Gag/Pol</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=308599&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MYM-V101</a>\n              </TD>\n              <TD>Mymetics</TD>\n              <TD>AIDS vaccine consisting of influenza virosomes composed of enveloped virus - like particles displaying a trimeric recombinant HIV - 1 gp41 (rGp41) and the 35aa lipopeptide P1 containing MPER and galactosyl ceramide mucosal receptor binding motif</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805334&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NYVAC-HIV-PT1</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccines based on recombinant NYVAC vaccinia viruses encoding for the clade C ZM96 Gag and gp140 and CN54 Pol - Nef HIV - 1 genes</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=469002&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-G</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals/ Walter Reed Army Institute</TD>\n              <TD>AIDS DNA vaccine consisting of SynCon immunogens targeting HIV - 1 clade A,  C and D gag,  pol and env proteins</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915203&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax DNA plasmid HIV-1 nef/tat/vif,env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid encoding for nef,  tat,  vif and env</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915206&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax VSV IN HIV envC</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a recombinant vesicular stomatitis virus (rVSV) encoding for the HIV envC gene</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=456307&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI DNA-C2</a>\n              </TD>\n              <TD>South African AIDS Vaccine Initiative/ University of Witwatersrand/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of two DNA plasmids expressing an HIV - 1 subtype C polyprotein comprising Gag - RT - Tat - Nef and an HIV - 1 subtype C truncated gp160 (gp150CT)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=409360&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI MVA-C</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of recombinant modified vaccinia Ankara vector (MVA) expressing polyprotein Gag - RT - Tat - Nef and truncated Env from HIV - 1 subtype C</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=451282&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VLP-TBI-pcDNA-TCI</a>\n              </TD>\n              <TD>State Res Cent Virology Biotech VECTOR</TD>\n              <TD>AIDS vaccine consisting of virus - like particles containing a DNA plasmid encoding about 80 CD8+ CTL and CD4+ Th epitopes from HIV - 1 Env,  Gag,  Pol and Nef (pcDNA - TCI) as a core,  encapsulated within a spermidine - polyglucin - TBI protein conjugate (TBI protein containing T -  and B - cell epitopes from Env and Gag proteins)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455063&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-027-00-VP</a>\n              </TD>\n              <TD>GenVec/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of adenoviral type 35 vector encoding HIV Env Clade A\n</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455064&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-038-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of adenoviral type - 5 vector encoding Env clade A\n</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923291&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-053-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of adenoviral type - 5 vector encoding env clade C</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923293&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-054-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of adenoviral type - 5 vector encoding gag and pol</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1030241&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVRGP096-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a stabilized variant of the HIV - Env trimer</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006783&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">eOD-GT8 60mer</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>HIV vaccine consisting of self - assembling 60 - unit nanoparticles comprising an engineered outer domain (eOD) from HIV gp120 fused to a lumazine synthase protein via a G/S linker</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993174&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">env (A,B,C,A/E)/gag (C) DNA vaccine</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV - 1 DNA vaccine composed of a polyvalent DNA plasmid expressing clade C gag and clades A,  B,  C and A/E envelope constructs</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993181&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120 (A,B,C,A/E) protein vaccine</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV - 1 vaccine composed of gp 120 clade A,  B,  C and A/E recombinant proteins</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120-NefTat/AS01B</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD>HIV vaccine consisting of recombinant Nef and Tat regulatory proteins along with envelope glycoprotein gp120 derived from Clade C HIV isolate,  formulated with the AS01B adjuvant</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987944&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp145 C.6980</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV vaccine consisting of recombinant oligomeric gp145 clade C Env protein 6980</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=745516&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rAd5 EnvB</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of recombinant adenovirus serotype 5 expressing Env B</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=467570&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rVSVIN-N4CT9-Gag1</a>\n              </TD>\n              <TD>Profectus BioSciences</TD>\n              <TD>AIDS vaccine consisting of a highly attenuated (G gene truncations and N gene translocations) recombinant vesicular stomatitis virus (rVSV) Indiana serotype encoding human immunodeficiency virus type 1 gag\n</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878268&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rcAd26.MOS1.HIV-Env</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative/ Beth Israel Deaconess Medical Center</TD>\n              <TD>HIV vaccine consisting of a recombinant replication - competent E3 -  adenoviral vector serotype 26 (AD26) encoding mosaic1envelope (Mos1Env) of HIV serotype1(HIV1) antigen,  consisting of a peptide of length15 aa overlapping with11aa covering the sequence mosaic Env protein</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357275&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">recombinant o-gp140/MF59 adjuvant</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>HIV vaccine consisting of V2 - deleted oligomeric (o - gp140) envelope derived from the R5 HIV - 1 SF162 isolate,  adjuvanted in MF59</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027124&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027124</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD>AIDS vaccine consisting of autologous dendritic cells matured with an optimized cocktail (a1DC) and loaded with a conserved HIV gag and pol peptide pool (a1DC + conserved HIV peptides)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027126&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027126</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD>AIDS vaccine consisting of autologous dendritic cells matured with a standard prostaglandin E2 cocktail (pgDC) and loaded with a conserved HIV gag and pol peptide pool (pgDC + conserved HIV peptides)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027125&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027125</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD>AIDS vaccine consisting of autologous dendritic cells matured with a standard prostaglandin E2 cocktail (pgDC) and loaded with autologous  - inactivated HIV (pgDC + inactivated whole autologous HIV)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027123&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027123</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD>AIDS vaccine consisting of autologous dendritic cells matured with an optimized cocktail (a1DC) and loaded with autologous  - inactivated HIV (a1DC + inactivated whole autologous HIV)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=417670&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SHIV vaccine</a>\n              </TD>\n              <TD>IGXBio</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid encoding the genome of the simian human immunodeficiency virus (SHIV_KU2) with deletions of the reverse transcriptase,  integrase and vif genes,  substitiution of the 3&apos; long terminal repeat with SV40 poly A sequences and substitution of SIV env and gag - nef with HIV - 1 env and gag - nef</TD>\n              <TD>IND Filed</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1035036&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ConM SOSIP</a>\n              </TD>\n              <TD>Universiteit Van Amsterdam/ Imperial College</TD>\n              <TD>AIDS vaccine consisting of a native - like Env (SOSIP) BG505 trimer - derived based on a group M consensus sequence with two disulfide bond added (A501C - T605C and A73C - A561C) and the following mutations: I559P,  H66R,  A316W,  I535M,  Q543N and the TD8 mutations: E47D,  K49E,  V65K,  E106T,  I165L,  E429R,  R432Q,  and A500R; expressed in HEK293T cells</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038073&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-11</a>\n              </TD>\n              <TD>Enochian BioSciences</TD>\n              <TD>Preventive HIV vaccine consisting of genetically engineered autologous human stem cells (HSC)</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038088&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-12</a>\n              </TD>\n              <TD>Enochian BioSciences</TD>\n              <TD>Therapeutic HIV vaccine consisting of genetically engineered autologous human stem cells (HSC)</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1003524&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-BN HIV</a>\n              </TD>\n              <TD>Janssen Pharmaceuticals/ Bavarian Nordic</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1029754&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vacc-CRX</a>\n              </TD>\n              <TD>Bionor</TD>\n              <TD>AIDS vaccine targeting neutralizing epitopes</TD>\n              <TD>Preclinical</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"944030\" medline_id=\"16120854\">\n        <Title>The search for effective HIV vaccines</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>353</Volume>\n        <Issue>8</Issue>\n        <Page>753</Page>\n        <Year>2005</Year>\n        <Authors>\n          <Author>Markel, H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1024845\" medline_id=\"16530298\">\n        <Title>A review of vaccine research and development: The human immunodeficiency virus (HIV)</Title>\n        <SourceTitle>Vaccine</SourceTitle>\n        <PubMedTitle>Vaccine</PubMedTitle>\n        <Volume>24</Volume>\n        <Issue>19</Issue>\n        <Page>4062</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Girard, M.P.</Author>\n          <Author>Osmanov, S.K.</Author>\n          <Author>Kieny, M.P.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2869568\">\n        <Title>Evaluation of a mosaic HIV-1 vaccine in a multicentre, randomised, double-blind, placebo-controlled, phase 1/2a clinical trial (APPROACH) and in rhesus monkeys (NHP 13-19)</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10143</Issue>\n        <Page>232</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Barouch, D.H.</Author>\n          <Author>Tomaka, F.L.</Author>\n          <Author>Wegmann, F.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947496\" medline_id=\"30509777\">\n        <Title>Global and regional molecular epidemiology of HIV-1, 1990-2015: A systematic review, global survey, and trend analysis</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>19</Volume>\n        <Issue>2</Issue>\n        <Page>143</Page>\n        <Year>2019</Year>\n        <Authors>\n          <Author>Hemelaar, J.</Author>\n          <Author>Elangovan, R.</Author>\n          <Author>Yun, J.</Author>\n          <Author>Dickson-Tetteh, L.</Author>\n          <Author>Fleminger, I.</Author>\n          <Author>Kirtley, S.</Author>\n          <Author>Williams, B.</Author>\n          <Author>Gouws-Williams, E.</Author>\n          <Author>Ghys, P.D.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2948271\" medline_id=\"29052689\">\n        <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic</Title>\n        <SourceTitle>JAMA - Journal of the American Medical Association</SourceTitle>\n        <PubMedTitle>JAMA</PubMedTitle>\n        <Volume>318</Volume>\n        <Issue>16</Issue>\n        <Page>1535</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Fauci, A.S.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"405\" modifiedDate=\"20181211114602\">\n    <Title>Topical Microbicides</Title>\n    <Body>\n      <para>Worldwide, nearly half of the adults living with HIV/AIDS and, in the United States, one-fourth of individuals estimated to be living with HIV/AIDS, are women. More than 90% of new infections are spread through unprotected sex, and heterosexual contact represents the primary source of risk for women (<REF id=\"1376618\">Cutler, B. and Justman, J., 2008</REF>). Topical microbicides act as chemical, biological and/or physical barriers to virus entry in the host, and may constitute an effective method for preventing HIV infection and breaking the chain of transmission that can be controlled by women, even in settings where female disempowerment is a significant driver of disease transmission (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). In the absence of an effective AIDS vaccine and in communities where use of condoms is low, effective topical microbicides (virucides) are the best alternative (<REF id=\"2798863\">Alexandre, K.B. et al., 2016</REF>; see also the <a href=\"http://www.ipmglobal.org\">International Partnership for Microbicides</a> web site). \n\n</para>\n      <para>Topical (intravaginal or intrarectal) microbicides may be formulated as gels, foams, films, tablets, suppositories or rings that can be inserted into the vagina or rectum, where the product is secreted. Microbicides can be broken down into three major groups: non-HIV-specific, moderately specific or highly specific to HIV (<REF id=\"2798863\">Alexandre, K.B. et al., 2016</REF>). \n\n</para>\n      <para>Nonspecific microbicides include buffering agents (e.g., BufferGel) and detergents or surfactants (e.g., spermicides such as nonoxynol-9, Savvy). Buffering agents alter the local pH, thereby inactivating the microorganism. Detergents act by solubilizing membrane proteins, which destroys the viral envelope. However, they may also disrupt the protective membranes of the vaginal epithelium, causing lesions that facilitate viral entry and actually increase the risk of infection. This was in fact observed in a study evaluating the HIV protective activity of nonoxynol-9 (<REF id=\"2798863\">Alexandre, K.B. et al., 2016</REF>). Another drawback of the nonspecific microbicides is their limited therapeutic window. \n\n</para>\n      <para>Products classified as moderately specific microbicides (e.g., Carraguard, PRO-2000) target the processes of viral adsorption and fusion, and have a somewhat wider therapeutic window. Due to their mechanism of action, they may prevent infection by other enveloped viruses such as <BACKGROUNDER id=\"39\">Herpes Simplex Virus</BACKGROUNDER>, in addition to HIV (<REF id=\"1078726\">Balzarini, J. and Van Damme, L., 2007</REF>). However, these products have not been successful at preventing HIV acquisition (<REF id=\"2798863\">Alexandre, K.B. et al., 2016</REF>).\n\n</para>\n      <para>Highly specific microbicides are based on compounds that target HIV replication at a step prior to virus integration into the target cell. They may act at the level of virus entry, reverse transcription of the viral RNA, or proviral DNA integration into the host cells. In vitro these compounds have been shown to block both virus-cell infection and cell-cell transmission of the virus (<REF id=\"1078726\">Balzarini, J. and Van Damme, L., 2007</REF>). In vivo in macaque monkeys, protection against SHIV challenge has been described with CCR5 inhibitors (<REF id=\"2798869\">Hartley, O. et al., 2018</REF>). \n\n</para>\n      <para>Positive results were reported in July 2010 from the CAPRISA 004 microbicide study, which evaluated a vaginal gel formulation of tenofovir disoproxil fumarate for the prevention of HIV infection in women. In the study, women using the tenofovir gel had 50% fewer HIV infections after one year of use compared to those using placebo; after 30 months of use, the incidence of HIV infection remained nearly 40% lower in the active treatment group (<REF id=\"1530496\">Karim, Q.A. et al., 2010</REF>). CAPRISA 004 was conducted by the Centre for the AIDS Programme of Research in South Africa (CAPRISA) with the support of the National Institute of Allergy and Infectious Diseases (NIAID). \n\n</para>\n      <para>The HIV reverse transcriptase inhibitor dapivirine has been formulated as a monthly vaginal ring for HIV prevention. In the ASPIRE trial, a phase III, randomized, double-blind, placebo-controlled trial enrolling 2,629 sexually active, HIV-seronegative women in four African countries, the incidence of HIV-1 infection in the dapivirine group was 27% lower than in the placebo group. In a post hoc analysis, higher rates of protection were observed among women over the age of 21 years; treatment adherence was also greater in this age group (<REF id=\"2467239\">Baeten, J.M. et al., 2016</REF>). In the DREAM study, womens&apos; risk of HIV acquisition was reduced by more than half through use of the dapivirine ring. The dapivirine ring is currently under regulatory review by the European Medicines Agency (EMA) through an Article 58 application. This procedure allows the EMA, in cooperation with WHO, to provide a scientific opinion on the safety, efficacy and quality of medicines that would be marketed exclusively outside of the European Union--specifically in low- and middle-income countries--for diseases of major public health interest.\n\n</para>\n      <para>Several pharmaceutical companies are responding to the call for microbicide development, as indicated in the table below. Approximately 50 different compounds are in various stages of development, according to one estimate (<REF id=\"1639462\">Hladik, F. and Doncel, G.F., 2010</REF>; see also <a href=\"http://www.mtnstopshiv.org\">Microbicide Trials Network</a>). \n\n<COMPETITIVE id=\"79\">\n          <TABLE>\n            <TR>\n              <TD>Microbicides in development for the prevention of HIV and other sexually transmitted infections</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Description</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=281553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>4 - [4 - (2, 4, 6 - Trimethylphenylamino)pyrimidin - 2 - ylamino]benzonitrile </TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=321981&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amphora</a>\n              </TD>\n              <TD>Evofem</TD>\n              <TD>Acid - buffering (pH 3.55) bioadhesive vaginal gel consisting of L - lactic acid,  citric acid,  potassium bitartrate (buffer salts),  benzoic acid (preservative),  xantham gum,  alginic acid (gelling agents),  glycerol (humectant) and water</TD>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=675477&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DS-003</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>2 - [1 - [2 - [4 - Methoxy - 7 - (2 - pyrazinyl) - 1H - pyrrolo[2, 3 - c]pyridin - 3 - yl]oxalyl]piperidin - 4 - ylidene] - 2 - phenylacetonitrile</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Combination of dapivirine and maraviroc delivered through a vaginal ring</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=658522&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Griffithsin</a>\n              </TD>\n              <TD>Population Council</TD>\n              <TD>12.7 kD protein isolated from red algae Griffithsia sp.</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528</a>\n              </TD>\n              <TD>ImQuest BioSciences</TD>\n              <TD>1 - (Cyclopropylmethyl) - 6 - (3, 5 - dimethylbenzoyl) - 5 - isopropylpyrimidine - 2, 4(1H, 3H) - dione</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Combination of vicriviroc and MK - 2048</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=773475&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5P12-RANTES</a>\n              </TD>\n              <TD>Orion Biotechnology</TD>\n              <TD>Fully recombinant human chemokine protein RANTES/CCL5 analog,  expressed in Pichia pastoris strain Bg08</TD>\n              <TD>Preclinical</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1078726\" medline_id=\"17336656\">\n        <Title>Microbicide drug candidates to prevent HIV infection</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>369</Volume>\n        <Issue>9563</Issue>\n        <Page>787</Page>\n        <Year>2007</Year>\n        <Authors>\n          <Author>Balzarini, J.</Author>\n          <Author>Van Damme, L.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1376618\" medline_id=\"18992405\">\n        <Title>Vaginal microbicides and the prevention of HIV transmission</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>8</Volume>\n        <Issue>11</Issue>\n        <Page>685</Page>\n        <Year>2008</Year>\n        <Authors>\n          <Author>Cutler, B.</Author>\n          <Author>Justman, J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1530496\">\n        <Title>Effectiveness and safety of tenofovir gel, an antiretroviral microbicide, for the prevention of HIV infection in women</Title>\n        <SourceTitle>Science</SourceTitle>\n        <PubMedTitle>Science</PubMedTitle>\n        <Volume>329</Volume>\n        <Issue>5996</Issue>\n        <Page>1168</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Karim, Q.A.</Author>\n          <Author>Karim, S.S.</Author>\n          <Author>Frohlich, J.A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1639462\">\n        <Title>Preventing mucosal HIV transmission with topical microbicides: Challenges and opportunities</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>88</Volume>\n        <Page>S3</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Hladik, F.</Author>\n          <Author>Doncel, G.F.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2467239\" medline_id=\"26900902\">\n        <Title>Use of a vaginal ring containing dapivirine for HIV-1 prevention in women</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>375</Volume>\n        <Issue>22</Issue>\n        <Page>2121</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Baeten, J.M.</Author>\n          <Author>Palanee-Phillips, T.</Author>\n          <Author>Brown, E.R.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798863\" medline_id=\"27429040\">\n        <Title>Progress and Perspectives on HIV-1 microbicide development</Title>\n        <SourceTitle>Virology</SourceTitle>\n        <PubMedTitle>Virology</PubMedTitle>\n        <Volume>497</Volume>\n        <Page>69</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Alexandre, K.B.</Author>\n          <Author>Mufhandu, H.T.</Author>\n          <Author>London, G.M.</Author>\n          <Author>Chakauya, E.</Author>\n          <Author>Khati, M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798869\" medline_id=\"29376550\">\n        <Title>Preventing HIV transmission through blockade of CCR5: Rationale, progress and perspectives</Title>\n        <SourceTitle>Swiss Medical Weekly</SourceTitle>\n        <PubMedTitle>Swiss Med Wkly</PubMedTitle>\n        <Volume>148</Volume>\n        <Page>w14580</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Hartley, O.</Author>\n          <Author>Martins, E.</Author>\n          <Author>Scurci, I.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"2964\" modifiedDate=\"20181213081941\">\n    <Title>Preexposure Prophylaxis</Title>\n    <Body>\n      <para>Preexposure prophylaxis (PrEP) involves the regular administration of suppressive antiretroviral therapy during periods of risk to healthy, non-HIV-infected individuals who are considered to be at high risk of exposure. This strategy has been successfully utilized to prevent mother-to-child transmission of HIV during pregnancy, childbirth and breastfeeding, as well as to prevent viral acquisition through sexual contact in men who have sex with men, heterosexual discordant couples, and individuals with multiple partners (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Like microbicides and vaccines, PrEP is useful in high-risk HIV-negative individuals who are not able to influence the behavior of their sexual partners, including women in the developing world. Although PrEP is ever more widely used as a method of preventing HIV infection (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>), use of this strategy remains suboptimal. Only 10% of individuals in the U.S. who are candidates for PrEP are using it, and in other countries this figure is even lower (<REF id=\"2948271\">Fauci, A.S., 2017</REF>).\n\n</para>\n      <para>The Pre-Exposure Prophylaxis Initiative (iPrEX) study evaluated the efficacy of a fixed-dose, single-tablet, coformulation of tenofovir disoproxil fumarate and emtricitabine (FTC-TDF) or placebo administered once daily to 1,251 and 1,248 randomized subjects, respectively. The iPrEx study was conducted in Peru, Ecuador, Brazil, Thailand, South Africa and the United States. The participants were HIV-seronegative men or transgender women who have sex with men. All individuals received testing for HIV infection, risk reduction counseling, condoms and management of sexually transmitted infections. Emergent infection with HIV was reported in 36 and 64 individuals in the active treatment and placebo group, respectively, indicating a relative reduction in the incidence of infection of 44% in the modified intention-to-treat population. The levels of HIV RNA in the plasma and T cell surface glycoprotein CD4+ T cell counts were found to be comparable among individuals with seroconversion in the two treatment cohorts. Similar time to seroconversion after RNA detection was also observed between the two cohorts. Safety evaluation revealed elevations in the concentration of creatinine in the serum of at least 1.1 times the upper limit of the normal range or &gt;1.5 times the baseline level in 2% and 1% of participants receiving the combination regimen and placebo, respectively. Increases in the levels of creatinine in the serum were resolved following discontinuation of treatment. Moderate nausea and unintentional weight loss of &gt;= 5% were observed more frequently in subjects treated with FTC-TDF than in those receiving placebo (<REF id=\"1572338\">Grant, R.M. et al., 2010</REF>). \n\n</para>\n      <para>Initially studied in MSM, the use of PrEP has since been extended to other at-risk groups. In the landmark HPTN 052 study, treating the infected partner reduced HIV transmission in serodiscordant couples by 96% (<REF id=\"1678176\">Cohen, M.S. et al., 2011</REF>). In July 2012, the FDA approved Truvada (tenofovir disoproxil fumarate/emtricitabine) for preexposure prophylaxis, to reduce the risk of HIV-1 infection among uninfected adults at high risk. The product was immediately made available for this new indication. In 2017, the combination was approved in Scotland, the first European country to give the nod to Truvada, in combination with safer sex practices, for pre-exposure prophylaxis to reduce the risk of sexually acquired HIV-1 infection in adults at high risk (<REF id=\"2649816\">Nandwani, R., 2017</REF>). Generic FTC-TDF combination formulations are now available in some countries, which should result in making PrEP a more widely accessible option (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). \n\n</para>\n      <para>More recently, attention has turned to HIV entry inhibitors, particularly those targeting the chemokine receptor CCR5, which is required for binding and entry of the virus into the host cell. Although in earlier stages of development, CCR5 inhibitors are envisioned for both oral and topical administration in PrEP (<REF id=\"2798869\">Hartley, O. et al., 2018</REF>).</para>\n    </Body>\n    <References>\n      <Reference id=\"1572338\" medline_id=\"21091279\">\n        <Title>Preexposure chemoprophylaxis for HIV prevention in men who have sex with men</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>363</Volume>\n        <Issue>27</Issue>\n        <Page>2587</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Grant, R.M.</Author>\n          <Author>Lama, J.R.</Author>\n          <Author>Anderson, P.L.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1678176\" medline_id=\"21767103\">\n        <Title>Prevention of HIV-1 infection with early antiretroviral therapy</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>385</Volume>\n        <Issue>6</Issue>\n        <Page>493</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Cohen, M.S.</Author>\n          <Author>Chen, Y.Q.</Author>\n          <Author>McCauley, M.</Author>\n          <Author>Gamble, T.</Author>\n          <Author>Hosseinipour, M.C.</Author>\n          <Author>Kumarasamy, N.</Author>\n          <Author>Hakim, J.G.</Author>\n          <Author>Kumwenda, J.</Author>\n          <Author>Grinsztejn, B.</Author>\n          <Author>Pilotto, J.H.</Author>\n          <Author>Godbole, S.V.</Author>\n          <Author>Mehendale, S.</Author>\n          <Author>Chariyalertsak, S.</Author>\n          <Author>Santos, B.R.</Author>\n          <Author>Mayer, K.H.</Author>\n          <Author>Hoffman, I.F.</Author>\n          <Author>Eshleman, S.H.</Author>\n          <Author>Piwowar-Manning, E.</Author>\n          <Author>Wang, L.</Author>\n          <Author>Makhema, J.</Author>\n          <Author>Mills, L.A.</Author>\n          <Author>de Bruyn, G.</Author>\n          <Author>Sanne, I.</Author>\n          <Author>Eron, J.</Author>\n          <Author>Gallant, J.</Author>\n          <Author>Havlir, D.</Author>\n          <Author>Swindells, S.</Author>\n          <Author>Ribaudo, H.</Author>\n          <Author>Elharrar, V.</Author>\n          <Author>Burns, D.</Author>\n          <Author>Taha, T.E.</Author>\n          <Author>Nielsen-Saines, K.</Author>\n          <Author>Celentano, D.</Author>\n          <Author>Essex, M.</Author>\n          <Author>Fleming, T.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2649816\" medline_id=\"28416197\">\n        <Title>Pre-exposure prophylaxis is approved in Scotland</Title>\n        <SourceTitle>The Lancet. HIV</SourceTitle>\n        <PubMedTitle>Lancet HIV</PubMedTitle>\n        <Volume>4</Volume>\n        <Issue>6</Issue>\n        <Page>e238</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Nandwani, R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798869\" medline_id=\"29376550\">\n        <Title>Preventing HIV transmission through blockade of CCR5: Rationale, progress and perspectives</Title>\n        <SourceTitle>Swiss Medical Weekly</SourceTitle>\n        <PubMedTitle>Swiss Med Wkly</PubMedTitle>\n        <Volume>148</Volume>\n        <Page>w14580</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Hartley, O.</Author>\n          <Author>Martins, E.</Author>\n          <Author>Scurci, I.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2948271\" medline_id=\"29052689\">\n        <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic</Title>\n        <SourceTitle>JAMA - Journal of the American Medical Association</SourceTitle>\n        <PubMedTitle>JAMA</PubMedTitle>\n        <Volume>318</Volume>\n        <Issue>16</Issue>\n        <Page>1535</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Fauci, A.S.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"3018\" modifiedDate=\"20190409081634\">\n    <Title>Male Circumcision</Title>\n    <Body>\n      <para>On the basis of studies conducted more than a decade ago, the practice of voluntary medical male circumcision--performed by a medical doctor under proper hygienic conditions--has become established as a method of reducing a man&apos;s risk of acquiring HIV  through heterosexual intercourse with an infected female partner (<REF id=\"2947862\">Schenker, I., 2018</REF>). In late 2006, the U.S. National Institutes of Health prematurely terminated two randomized controlled trials of adult male circumcision on the basis of the significant efficacy detected in an interim analysis. The studies, which enrolled 2,784 Kenyan men and 4,996 Ugandan men, demonstrated 53% and 51% reductions, respectively, in the incidence of new HIV infections among circumcised participants (<REF id=\"1083121\">Bailey, R.C. et al., 2007</REF>; <REF id=\"1083122\">Gray, R.H. et al., 2007</REF>). A previous study conducted in South Africa had also demonstrated a greater than 50% protective benefit (<REF id=\"1083116\">Auvert, B. et al., 2005</REF>). A study reported in early 2009 demonstrated that in addition to protecting against HIV, circumcision may reduce the incidence of <BACKGROUNDER id=\"39\">Herpes Simplex Virus</BACKGROUNDER> type 2 (HSV-2) infection as well as the prevalence of <BACKGROUNDER id=\"124\">Human Papillomavirus</BACKGROUNDER> (HPV) infection. The study enrolled more than 5,500 HIV-negative, uncircumcised adolescent boys and men (<REF id=\"1345730\">Tobian, A.A. et al., 2009</REF>). Circumcision of HIV-infected men does not prevent transmission of the infection to their HIV-negative female partners, however, according to a large trial also conducted in Uganda (<REF id=\"1394499\">Wawer, M.J. et al., 2009</REF>).\n\n</para>\n      <para>In 2006, a multinational campaign was launched with the aim of circumcising 27 million men in sub-Saharan Africa by 2021. It is estimated that by 2030, the practice of voluntary medical male circumcision will avert at least 500,000 HIV infections in Africa alone (<REF id=\"2947862\">Schenker, I., 2018</REF>). Between 2007 and 2017, with support from PEPFAR (the U.S. President&apos;s Emergency Fund for AIDS Relief), more than 15 million men and boys in 14 countries in sub-Saharan Africa underwent voluntary medical male circumcision (<REF id=\"2949342\">Davis, S.M. et al., 2018</REF>).</para>\n    </Body>\n    <References>\n      <Reference id=\"1083116\" medline_id=\"16231970\">\n        <Title>Randomized, controlled intervention trial of male circumcision for reduction of HIV infection risk: The ANRS 1265 Trial</Title>\n        <SourceTitle>PLoS Medicine</SourceTitle>\n        <PubMedTitle>PLoS Med</PubMedTitle>\n        <Volume>2</Volume>\n        <Issue>11</Issue>\n        <Page>e298</Page>\n        <Year>2005</Year>\n        <Authors>\n          <Author>Auvert, B.</Author>\n          <Author>Taljaard, D.</Author>\n          <Author>Lagarde, E.</Author>\n          <Author>Sobngwi-Tambekou, J.</Author>\n          <Author>Sitta, R.</Author>\n          <Author>Puren, A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1083121\" medline_id=\"17321310\">\n        <Title>Male circumcision for HIV prevention in young men in Kisumu, Kenya: A randomised controlled trial</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>369</Volume>\n        <Issue>9562</Issue>\n        <Page>643</Page>\n        <Year>2007</Year>\n        <Authors>\n          <Author>Bailey, R.C.</Author>\n          <Author>Moses, S.</Author>\n          <Author>Parker, C.B.</Author>\n          <Author>Agot, K.</Author>\n          <Author>Maclean, I.</Author>\n          <Author>Krieger, J.N.</Author>\n          <Author>Williams, C.F.</Author>\n          <Author>Campbell, R.T.</Author>\n          <Author>Ndinya-Achola, J.O.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1083122\" medline_id=\"17321311\">\n        <Title>Male circumcision for HIV prevention in men in Rakai, Uganda: A randomised trial</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>369</Volume>\n        <Issue>9562</Issue>\n        <Page>657</Page>\n        <Year>2007</Year>\n        <Authors>\n          <Author>Gray, R.H.</Author>\n          <Author>Kigozi, G.</Author>\n          <Author>Serwadda, D.</Author>\n          <Author>Makumbi, F.</Author>\n          <Author>Watya, S.</Author>\n          <Author>Nalugoda, F.</Author>\n          <Author>Kiwanuka, N.</Author>\n          <Author>Moulton, L.H.</Author>\n          <Author>Chaudhary, M.A.</Author>\n          <Author>Chen, M.Z.</Author>\n          <Author>Sewankambo, N.K.</Author>\n          <Author>Wabwire-Mangen, F.</Author>\n          <Author>Bacon, M.C.</Author>\n          <Author>Williams, C.F.</Author>\n          <Author>Opendi, P.</Author>\n          <Author>Reynolds, S.J.</Author>\n          <Author>Laeyendecker, O.</Author>\n          <Author>Quinn, T.C.</Author>\n          <Author>Wawer, M.J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1345730\" medline_id=\"19321868\">\n        <Title>Male circumcision for the prevention of HSV-2 and HPV infections and syphilis</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>360</Volume>\n        <Issue>13</Issue>\n        <Page>1298</Page>\n        <Year>2009</Year>\n        <Authors>\n          <Author>Tobian, A.A.</Author>\n          <Author>Serwadda, D.</Author>\n          <Author>Quinn, T.C.</Author>\n          <Author>Kigozi, G.</Author>\n          <Author>Gravitt, P.E.</Author>\n          <Author>Laeyendecker, O.</Author>\n          <Author>Charvat, B.</Author>\n          <Author>Ssempijja, V.</Author>\n          <Author>Riedesel, M.</Author>\n          <Author>Oliver, A.E.</Author>\n          <Author>Nowak, R.G.</Author>\n          <Author>Moulton, L.H.</Author>\n          <Author>Chen, M.Z.</Author>\n          <Author>Reynolds, S.J.</Author>\n          <Author>Wawer, M.J.</Author>\n          <Author>Gray, R.H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1394499\" medline_id=\"19616720\">\n        <Title>Circumcision in HIV-infected men and its effect on HIV transmission to female partners in Rakai, Uganda: A randomised controlled trial</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>374</Volume>\n        <Issue>9685</Issue>\n        <Page>229</Page>\n        <Year>2009</Year>\n        <Authors>\n          <Author>Wawer, M.J.</Author>\n          <Author>Makumbi, F.</Author>\n          <Author>Kigozi, G.</Author>\n          <Author>Serwadda, D.</Author>\n          <Author>Watya, S.</Author>\n          <Author>Nalugoda, F.</Author>\n          <Author>Buwembo, D.</Author>\n          <Author>Ssempijja, V.</Author>\n          <Author>Kiwanuka, N.</Author>\n          <Author>Moulton, L.H.</Author>\n          <Author>Sewankambo, N.K.</Author>\n          <Author>Reynolds, S.J.</Author>\n          <Author>Quinn, T.C.</Author>\n          <Author>Opendi, P.</Author>\n          <Author>Iga, B.</Author>\n          <Author>Ridzon, R.</Author>\n          <Author>Laeyendecker, O.</Author>\n          <Author>Gray, R.H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947862\" medline_id=\"29969309\">\n        <Title>Cutting-edge success in preventing heterosexual HIV transmission in Africa: Voluntary medical male circumcision has reached 15 million men</Title>\n        <SourceTitle>AIDS Education and Prevention</SourceTitle>\n        <PubMedTitle>AIDS Educ Prev</PubMedTitle>\n        <Volume>30</Volume>\n        <Issue>3</Issue>\n        <Page>232</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Schenker, I.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2949342\" medline_id=\"30173159\">\n        <Title>Progress in voluntary medical male circumcision for HIV prevention supported by the US president&apos;s emergency plan for AIDS relief through 2017: Longitudinal and recent cross-sectional programme data</Title>\n        <SourceTitle>BMJ Open</SourceTitle>\n        <PubMedTitle>BMJ Open</PubMedTitle>\n        <Volume>8</Volume>\n        <Issue>8</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Davis, S.M.</Author>\n          <Author>Hines, J.Z.</Author>\n          <Author>Habel, M.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"3747\" modifiedDate=\"20181212115043\">\n    <Title>Prevention of Perinatal Transmission</Title>\n    <Body>\n      <para>Prevention of transmission of HIV from an infected pregnant woman to her unborn child has been one of the most successful methods developed to date for preventing future cases of HIV and AIDS. In the absence of appropriate prophylactic therapy, the likelihood of mother-to-infant transmission is between 15% and 40%. By 2016, however, as a result of the widespread implementation of prophylactic antiretroviral therapy in pregnant HIV-positive women, the global rate of perinatal infection was less than 5%. More than 95% of HIV-positive pregnant and breastfeeding women must be diagnosed, treated and monitored in order to reduce this number further. In high-income settings, where antiretroviral therapy is typically initiated prior to pregnancy, the rate of mother-to-infant transmission is already close to zero (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Each year, women living with HIV give birth to more than one million HIV-exposed but uninfected (HEU) infants, versus just 160,000 HIV-positive infants (<REF id=\"2947507\">Bengtson, A.M. et al., 2019</REF>).</para>\n    </Body>\n    <References>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947507\" medline_id=\"30529212\">\n        <Title>Maternal immunisation to improve the health of HIV-exposed infants</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>19</Volume>\n        <Issue>4</Issue>\n        <Page>e120</Page>\n        <Year>2019</Year>\n        <Authors>\n          <Author>Bengtson, A.M.</Author>\n          <Author>Sanfilippo, A.M.</Author>\n          <Author>Hughes, B.L.</Author>\n          <Author>Savitz, D.A.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n</Section>\n<Section sectionId=\"400\" modifiedDate=\"20190508024306\">\n  <Title>Treatment</Title>\n  <Body>\n    <para>Earlier treatment guidelines recommended treatment for patients on the basis of CD4 count and/or viral load. Since 2015, however, WHO has recommended immediate initiation of antiretroviral therapy for all individuals confirmed to be HIV-positive, regardless of CD4 cell count or age (<a href=\"http://www.who.int/hiv/pub/guidelines/earlyrelease-arv/en/\">Guideline on when to start antiretroviral therapy and on pre-exposure prophylaxis for HIV (World Health Organization, September 2015)</a>). This strategy, known as test and treat, is now standard in all major treatment guidelines (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Experimental evidence suggests that early initiation of antiretroviral drug therapy results in restriction of viral reservoirs, decreased inflammatory response and suppression of chronic, systemic immune activation (<REF id=\"2552671\">Krebs, S.J. and Ananworanich, J., 2016</REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).\n\n</para>\n    <para>A growing number of antiretroviral agents and combinations are currently on the market. The availability of these drugs, at least in Western nations where patients are able to afford them, has changed AIDS from a death sentence to a potentially chronic disease. In resource-poor countries, however, antiretroviral drugs have been available only for a short period of time, and largely due to the intervention of the UNAIDS, World Bank and other supragovernmental organizations. Although significant inroads have been made, antiretroviral coverage remains inadequate in resource-poor countries and is hindered further by the lack of financial resources, trained healthcare workers and technology (<REF id=\"2948271\">Fauci, A.S., 2017</REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Of an estimated 36.9 million people worldwide living with HIV, 21.7 million were currently on antiretroviral therapy in 2017 (<a href=\"http://www.unaids.org/en/resources/fact-sheet\">Global HIV &amp; AIDS statistics - 2018 fact sheet (UNAIDS, 2018)</a>, consulted December 3, 2018). \n\n</para>\n    <para>Combination therapy using three or more anti-HIV drugs, termed HAART or cART, results in sustained reductions in viral load and increases in CD4 cell counts and is the state of the art in HIV treatment. In the decades since HAART first became available, treatment has been simplified and streamlined thanks to the development of long-acting, fixed-dose combination formulations. Many patients can now be treated with as little as one pill daily, versus up to ten pills daily in three divided doses prior to the introduction of these formulations (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). In countries where it is standard therapy, HAART has had an enormous impact on the demographics of AIDS and HIV disease. In these countries the number of patients dying from AIDS has dropped markedly, while the population of individuals living with HIV has increased (<REF id=\"2552675\">Badowski, M.E. et al., 2016</REF>). \n\n</para>\n    <para>HAART has greatly reduced HIV-associated mortality and morbidity, but does not completely eliminate the virus from sanctuary reservoirs (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014</REF>). Viral load declines in a biphasic pattern with HAART, falling off by about 2-3 logs in the first month, and then by another 1-2 logs over the next two months, reaching stable levels of &lt;50 copies per mL of blood thereafter (<REF id=\"657419\">Kaufmann, G.R. and Cooper, D.A., 2000</REF>). HIV-1 persists indefinitely in resting memory CD4 T cells in patients on HAART (<REF id=\"2798862\">Cary, D.C. et al., 2016</REF>; <REF id=\"2849566\">Pitman, M.C. et al., 2018</REF>), and is capable of rebounding upon discontinuation of drug therapy (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).\n\n</para>\n    <para>Drugs and drug combinations marketed for the treatment of HIV and AIDS are listed in the following table.\n\n<FREETABLE id=\"19\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Marketed anti-HIV drugs</B></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Drug name</B></TD>\n      <TD WIDTH=\"160\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Organization</B></TD>\n      <TD WIDTH=\"83\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Year and country of first launch</B></TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Nucleoside analogue reverse transcriptase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=113563&p_type=L&p_origen=BGR&p_tsearch=A\">Zidovudine</a> (Retrovir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1987 (U.S., U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=143041&p_type=L&p_origen=BGR&p_tsearch=A\">Didanosine</a> (Videx)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1991 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=137195&p_type=L&p_origen=BGR&p_tsearch=A\">Stavudine</a> (Zerit)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1994 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=184356&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine</a> (Epivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Shire BioChem/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1995 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=173602&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate</a> (Ziagen)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      GlaxoSmithKline/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1999 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=201671&p_type=L&p_origen=BGR&p_tsearch=A\">Phosphazid</a> (Nikavir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AZT-Pharma</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1999 (Russian Federation)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=246665&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate</a> (Viread)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2001 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=190016&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine</a> (Emtriva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Nonnucleoside reverse transcriptase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=170581&p_type=L&p_origen=BGR&p_tsearch=A\">Nevirapine</a> (Viramune)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Hikma</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=196540&p_type=L&p_origen=BGR&p_tsearch=A\">Delavirdine mesilate</a> (Rescriptor)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207217&p_type=L&p_origen=BGR&p_tsearch=A\">Efavirenz</a> (Sustiva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1998 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=290137&p_type=L&p_origen=BGR&p_tsearch=A\">Etravirine</a> (Intelence)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen-Cilag</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2008 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=336587&p_type=L&p_origen=BGR&p_tsearch=A\">Rilpivirine hydrochloride</a> (Edurant)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2011 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=431792&p_type=L&p_origen=BGR&p_tsearch=A\">Elsulfavirine sodium</a> (Elpida)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Viriom</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (Russian Federation)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=748272&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine</a> (Pifeltro)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>HIV protease inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=168103&p_type=L&p_origen=BGR&p_tsearch=A\">Saquinavir mesilate</a> (Invirase)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Roche</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1995 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=199183&p_type=L&p_origen=BGR&p_tsearch=A\">Indinavir sulfate</a> (Crixivan)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck &#38; Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207282&p_type=L&p_origen=BGR&p_tsearch=A\">Ritonavir</a> (Norvir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AbbVie</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=211732&p_type=L&p_origen=BGR&p_tsearch=A\">Nelfinavir mesilate</a> (Viracept)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=257722&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate</a> (Reyataz)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=285394&p_type=L&p_origen=BGR&p_tsearch=A\">Fosamprenavir calcium</a> (Lexiva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Vertex/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=240094&p_type=L&p_origen=BGR&p_tsearch=A\">Tipranavir</a> (Aptivus)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Boehringer Ingelheim</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2005 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=310828&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir</a> (Prezista)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2006 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>HIV entry and fusion inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=217659&p_type=L&p_origen=BGR&p_tsearch=A\">Enfuvirtide</a> (Fuzeon)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Alexion/Roche</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=313738&p_type=L&p_origen=BGR&p_tsearch=A\">Maraviroc</a> (Selzentry)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2007 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=434971&p_type=L&p_origen=BGR&p_tsearch=A\">Albuvirtide</a> (Aikening)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Frontier Biotechnologies</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (China)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=204505&p_type=L&p_origen=BGR&p_tsearch=A\">Ibalizumab</a> (Trozargo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      TaiMed Biologics/ Theratechnologies</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Integrase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428015&p_type=L&p_origen=BGR&p_tsearch=A\">Raltegravir potassium</a> (Isentress)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2007 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=466915&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir sodium</a> (Tivicay)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2013 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=414415&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir</a> (Vitekta)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Pharmacoenhancing agents</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=644627&p_type=L&p_origen=BGR&p_tsearch=A\">Cobicistat</a> (Tybost)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Combination products</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=258524&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/Zidovudine</a> (Combivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=284325&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/zidovudine/abacavir sulfate</a> (Trizivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2000 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291602&p_type=L&p_origen=BGR&p_tsearch=A\">Lopinavir/ritonavir</a> (Kaletra)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AbbVie</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2000 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315122&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate/lamivudine</a> (Epzicom)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=344908&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine</a> (Truvada)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (U.S.) (treatment)<BR>2012 (U.S.) (prevention)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368895&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/efavirenz</a> (Atripla)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb/Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2006 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=676928&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/rilpivirine hydrochloride</a> (Complera)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2011 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=651752&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/GS-9350/Truvada</a> (Stribild)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2012 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=780137&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/Cobicistat</a> (Prezcobix)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (Canada)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=725107&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/abacavir/ lamivudine</a> (Triumeq)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=845715&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate/cobicistat</a> (Evotaz)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=760199&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/cobicistat/tenofovir alafenamide/emtricitabine</a> (Genvoya)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868925&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/tenofovir alafenamide fumarate</a> (Descovy)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2016 (U.S., U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=876185&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/rilpivirine hydrochloride/tenofovir alafenamide fumarate</a> (Odefsey)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead/Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2016 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=792693&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/cobicistat/emtricitabine/tenofovir alafenamide fumarate</a> (Symtuza)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen-Cilag</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (U.K., Germany)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=880143&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/rilpivirine</a> (Juluca)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=902852&p_type=L&p_origen=BGR&p_tsearch=A\">Bictegravir/emtricitabine/tenofovir alafenamide fumarate</a> (Biktarvy)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=889785&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine/lamivudine/tenofovir disoproxil fumarate</a> (Delstrigo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=994460&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/tenofovir disoproxil fumarate</a> (Cimduo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Mylan</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=919756&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/lamivudine</a> (Dovato)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2019 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Immunoglobulins</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=335137&p_type=L&p_origen=BGR&p_tsearch=A\">Immunoglobulin, normal (human)</a> (Gamunex)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bayer</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (Canada)</TD>\n      </TR>\n\n</TABLE>\n]]></FREETABLE>\n    </para>\n  </Body>\n  <References>\n    <Reference id=\"657419\" medline_id=\"11050451\">\n      <Title>Antiretroviral therapy of HIV-1 infection: Established treatment strategies and new therapeutic options</Title>\n      <SourceTitle>Current Opinion in Microbiology</SourceTitle>\n      <PubMedTitle>Curr Opin Microbiol</PubMedTitle>\n      <Volume>3</Volume>\n      <Issue>5</Issue>\n      <Page>508</Page>\n      <Year>2000</Year>\n      <Authors>\n        <Author>Kaufmann, G.R.</Author>\n        <Author>Cooper, D.A.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2229129\" medline_id=\"25151562\">\n      <Title>Antiretroviral therapy: Current drugs</Title>\n      <SourceTitle>Infectious Disease Clinics of North America</SourceTitle>\n      <PubMedTitle>Infect Dis Clin North Am</PubMedTitle>\n      <Volume>28</Volume>\n      <Issue>3</Issue>\n      <Page>371</Page>\n      <Year>2014</Year>\n      <Authors>\n        <Author>Pau, A.K.</Author>\n        <Author>George, J.M.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2552671\" medline_id=\"26599167\">\n      <Title>Immune activation during acute HIV infection and the impact of early antiretroviral therapy</Title>\n      <SourceTitle>Current Opinion in HIV and AIDS</SourceTitle>\n      <PubMedTitle>Curr Opin HIV AIDS</PubMedTitle>\n      <Volume>11</Volume>\n      <Issue>2</Issue>\n      <Page>163</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Krebs, S.J.</Author>\n        <Author>Ananworanich, J.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2552675\" medline_id=\"27539455\">\n      <Title>New antiretroviral treatment for HIV</Title>\n      <SourceTitle>Infectious Diseases and Therapy</SourceTitle>\n      <PubMedTitle>Infect Dis Ther</PubMedTitle>\n      <Volume>5</Volume>\n      <Issue>3</Issue>\n      <Page>329</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Badowski, M.E.</Author>\n        <Author>Pérez, S.E.</Author>\n        <Author>Biagi, M.</Author>\n        <Author>Littler, J.A.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2798862\" medline_id=\"26731470\">\n      <Title>Molecular mechanisms of HIV latency</Title>\n      <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n      <PubMedTitle>J Clin Invest</PubMedTitle>\n      <Volume>126</Volume>\n      <Issue>2</Issue>\n      <Page>448</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Cary, D.C.</Author>\n        <Author>Fujinaga, K.</Author>\n        <Author>Peterlin, B.M.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2849566\">\n      <Title>Barriers and strategies to achieve a cure for HIV</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>5</Volume>\n      <Issue>6</Issue>\n      <Page>e317</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Pitman, M.C.</Author>\n        <Author>Lau, J.S.Y.</Author>\n        <Author>McMahon, J.H.</Author>\n        <Author>Lewin, S.R.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2944306\" medline_id=\"30049419\">\n      <Title>HIV</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>392</Volume>\n      <Issue>10148</Issue>\n      <Page>685</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Ghosn, J.</Author>\n        <Author>Taiwo, B.</Author>\n        <Author>Seedat, S.</Author>\n        <Author>Autran, B.</Author>\n        <Author>Katlama, C.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2948271\" medline_id=\"29052689\">\n      <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic</Title>\n      <SourceTitle>JAMA - Journal of the American Medical Association</SourceTitle>\n      <PubMedTitle>JAMA</PubMedTitle>\n      <Volume>318</Volume>\n      <Issue>16</Issue>\n      <Page>1535</Page>\n      <Year>2017</Year>\n      <Authors>\n        <Author>Fauci, A.S.</Author>\n      </Authors>\n    </Reference>\n  </References>\n  <Section sectionId=\"412\" modifiedDate=\"20181213041351\">\n    <Title>Reverse Transcriptase Inhibitors</Title>\n    <Body>\n      <para>A unique characteristic of retroviruses is the retrotranscription of single-stranded viral RNA into double-stranded DNA, which is then integrated into the host cell&apos;s genome. The enzyme reverse transcriptase (RT), responsible for this activity, can be inhibited in two different ways. Elongation of the nascent viral DNA can be abrogated by the incorporation into the DNA of a nucleoside or nucleotide analogue that cannot be coupled to another nucleoside by the enzyme. Non-nucleoside inhibitors bind directly to an allosteric binding site on the enzyme that is exposed upon ligand binding, thereby inactivating it. Either way, HIV-1 replication is thwarted as a result of chain termination of HIV-1 proviral DNA (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014</REF>).\n\n</para>\n      <para>The discovery in 1985 of zidovudine, the first HIV reverse transcriptase inhibitor (RTI), marked a turning moment in AIDS research, as it was shown for the first time that replication the virus could be controlled with chemotherapy. In the intervening decades, RTIs have become established as a cornerstone of highly active antiretroviral therapy (<REF id=\"1505562\">Cihlar, T. and Ray, A.S., 2010</REF>; <REF id=\"1505496\">de Béthune, M.P., 2010</REF>; <REF id=\"2229129\">Pau, A.K. and George, J.M., 2014</REF>).\n\n</para>\n      <para>Information on reverse transcriptase inhibitors--including fixed-dose combination products incorporating an RTI--in development for the treatment of HIV is summarized in the next table.<COMPETITIVE id=\"81\">\n          <TABLE>\n            <TR>\n              <TD>Reverse transcriptase inhibitors in clinical and preclinical development</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1044377&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir/rilpivirine</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ HIV Integrase Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=281553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=817657&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">2838232</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Maturation Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=351007&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Censavudine</a>\n              </TD>\n              <TD>Oncolys</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395968&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Islatravir</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=419201&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rovafovir etalafenamide</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir/levonorgestrel</a>\n              </TD>\n              <TD>Eastern Virginia Medical School</TD>\n              <TD>Progesterone Receptor Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ Signal Transduction Modulators/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949733&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Abacavir/lamivudine/lopinavir/ritonavir</a>\n              </TD>\n              <TD>Drugs for Neglected Diseases Initiative</TD>\n              <TD>HIV-1 Protease Inhibitors/ Tumor Necrosis Factor Receptor Superfamily Member 6 (CD95)/PLC-gamma-1 Interaction Inhibitors/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Alcohol Dehydrogenase Inhibitors/ HIV Protease Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/levonorgestrel</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Progesterone Receptor Agonists/ Estrogen Receptor (ER) Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528</a>\n              </TD>\n              <TD>ImQuest BioSciences</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Entry Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=738992&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">KM-023</a>\n              </TD>\n              <TD>Kainos Medicine</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=965041&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8504</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006618&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8583</a>\n              </TD>\n              <TD>Merck Sharp &amp; Dohme (MSD)</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719391&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PC-1005</a>\n              </TD>\n              <TD>Population Council</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ ICAM1 Expression Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=459875&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RO-0335</a>\n              </TD>\n              <TD>Viriom</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=874960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir disoproxil orotate</a>\n              </TD>\n              <TD>Dong-A ST</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1505496\" medline_id=\"19781578\">\n        <Title>Non-nucleoside reverse transcriptase inhibitors (NNRTIs), their discovery, development, and use in the treatment of HIV-1 infection: A review of the last 20 years (1989-2009)</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>75</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>de Béthune, M.P.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1505562\" medline_id=\"19887088\">\n        <Title>Nucleoside and nucleotide HIV reverse transcriptase inhibitors: 25 years after zidovudine</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>39</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Cihlar, T.</Author>\n          <Author>Ray, A.S.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2229129\" medline_id=\"25151562\">\n        <Title>Antiretroviral therapy: Current drugs</Title>\n        <SourceTitle>Infectious Disease Clinics of North America</SourceTitle>\n        <PubMedTitle>Infect Dis Clin North Am</PubMedTitle>\n        <Volume>28</Volume>\n        <Issue>3</Issue>\n        <Page>371</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Pau, A.K.</Author>\n          <Author>George, J.M.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"411\" modifiedDate=\"20181213024734\">\n    <Title>Protease Inhibitors</Title>\n    <Body>\n      <para>HIV-1 protease inhibitors inhibit viral protein maturation, resulting in the production of noninfectious virus. Noncompetitive inhibitors block the virus-specific aspartyl protease (PR), which plays an important role in the maturation of the infectious virus particle. The newly formed virus particle contains uncleaved Gag and Gag-Pol polyproteins, and is not infectious. Cleavage of these polyproteins by PR results in the formation of mature (i.e., infectious) virus (<REF id=\"1505495\">Wensing, A.M. et al., 2010</REF>; <REF id=\"2947854\">Ghosh, A.K. et al., 2016</REF>). The first PR inhibitor, saquinavir, was launched in 1995; use of this drug in combination with reverse transcriptase inhibitors marked the beginning of HAART, now standard practice. PR inhibitors are initially very effective in reducing the viral load, but resistant mutants develop within weeks, and clearance of the virus cannot be attained. The second-generation protease inhibitor darunavir has a higher barrier to resistance (<REF id=\"2947854\">Ghosh, A.K. et al., 2016</REF>). Currently available protease inhibitors are effective only against HIV-1, whereas HIV-2 protease (PR2) is naturally resistant to most of these agents (<REF id=\"2947857\">Triki, D. et al., 2018</REF>).<COMPETITIVE id=\"80\">\n          <TABLE>\n            <TR>\n              <TD>HIV protease inhibitors in clinical and preclinical development</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949733&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Abacavir/lamivudine/lopinavir/ritonavir</a>\n              </TD>\n              <TD>Drugs for Neglected Diseases Initiative</TD>\n              <TD>HIV-1 Protease Inhibitors/ Tumor Necrosis Factor Receptor Superfamily Member 6 (CD95)/PLC-gamma-1 Interaction Inhibitors/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Alcohol Dehydrogenase Inhibitors/ HIV Protease Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=399012&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PPL-100</a>\n              </TD>\n              <TD>TaiMed Biologics</TD>\n              <TD>HIV Protease Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1505495\" medline_id=\"19853627\">\n        <Title>Fifteen years of HIV protease inhibitors: Raising the barrier to resistance</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>59</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Wensing, A.M.</Author>\n          <Author>van Maarseveen, N.M.</Author>\n          <Author>Nijhuis, M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947854\" medline_id=\"26799988\">\n        <Title>Recent progress in the development of HIV-1 protease inhibitors for the treatment of HIV/AIDS</Title>\n        <SourceTitle>Journal of Medicinal Chemistry</SourceTitle>\n        <PubMedTitle>J Med Chem</PubMedTitle>\n        <Volume>59</Volume>\n        <Issue>11</Issue>\n        <Page>5172</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Ghosh, A.K.</Author>\n          <Author>Osswald, H.L.</Author>\n          <Author>Prato, G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947857\" medline_id=\"29636521\">\n        <Title>Exploration of the effect of sequence variations located inside the binding pocket of HIV-1 and HIV-2 proteases</Title>\n        <SourceTitle>Scientific Reports</SourceTitle>\n        <PubMedTitle>Sci Rep</PubMedTitle>\n        <Volume>8</Volume>\n        <Issue>1</Issue>\n        <Page>5789</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Triki, D.</Author>\n          <Author>Billot, T.</Author>\n          <Author>Visseaux, B.</Author>\n          <Author>Descamps, D.</Author>\n          <Author>Flatters, D.</Author>\n          <Author>Camproux, A.C.</Author>\n          <Author>Regad, L.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"2909\" modifiedDate=\"20181211121138\">\n    <Title>Viral Maturation Inhibitors</Title>\n    <Body>\n      <para>One of the newer classes of investigational antiretroviral agents are the so-called maturation inhibitors. These drugs have a mechanism of action differing from those of approved HIV drugs and potent activity against both wild-type HIV and strains resistant to current therapies, including inhibitors of reverse transcriptase and viral protease. Maturation inhibitors block viral replication by disrupting a late stage in Gag processing, a series of events required for the process of structural rearrangement that is known as virus maturation. During maturation, the immature virus particle makes the transition to a mature, infectious virion. Maturation inhibitors prevent this event by interrupting the conversion of the capsid precursor (p25) to a mature capsid protein (p24), resulting in the formation of defective, noninfectious virus particles (<REF id=\"761076\">Li, F. et al., 2003</REF>; <REF id=\"997796\">Sakalian, M. et al., 2006</REF>; <REF id=\"1505517\">Adamson, C.S. and Freed, E.O., 2010</REF>). \n<COMPETITIVE id=\"926\">\n          <TABLE>\n            <TR>\n              <TD>HIV maturation inhibitors in active development for the treatment of AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=817657&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">2838232</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Maturation Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949705&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GSK-3640254</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Viral Maturation Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"761076\" medline_id=\"14573704\">\n        <Title>PA-457: A potent HIV inhibitor that disrupts core condensation by targeting a late step in Gag processing</Title>\n        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)</SourceTitle>\n        <PubMedTitle>Proc Natl Acad Sci U S A</PubMedTitle>\n        <Volume>100</Volume>\n        <Issue>23</Issue>\n        <Page>13555</Page>\n        <Year>2003</Year>\n        <Authors>\n          <Author>Li, F.</Author>\n          <Author>Goila-Gaur, R.</Author>\n          <Author>Salzwedel, K.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"997796\" medline_id=\"16731910\">\n        <Title>3-O-(3&apos;,3&apos;-Dimethysuccinyl) betulinic acid inhibits maturation of the human immunodeficiency virus type 1 Gag precursor assembled in vitro</Title>\n        <SourceTitle>Journal of Virology</SourceTitle>\n        <PubMedTitle>J Virol</PubMedTitle>\n        <Volume>80</Volume>\n        <Issue>12</Issue>\n        <Page>5716</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Sakalian, M.</Author>\n          <Author>McMurtrey, C.P.</Author>\n          <Author>Deeg, F.J.</Author>\n          <Author>Maloy, C.W.</Author>\n          <Author>Li, F.</Author>\n          <Author>Wild, C.T.</Author>\n          <Author>Salzwedel, K.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1505517\" medline_id=\"19782103\">\n        <Title>Novel approaches to inhibiting HIV-1 replication</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>119</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Adamson, C.S.</Author>\n          <Author>Freed, E.O.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"414\" modifiedDate=\"20181213021318\">\n    <Title>HIV Entry and Fusion Inhibitors</Title>\n    <Body>\n      <para>In order for HIV-1 to enter into a host cell, its envelope protein (Env) must first engage CD4, thereby anchoring the virus to the cell, and then bind to a chemokine coreceptor (CCR5 or CXCR4). This process triggers a series of conformational changes in the Env protein, eventually enabling fusion between the HIV virus and the host cell membrane (<REF id=\"1944780\">Henrich, T. and Kuritzkes, D.R., 2013</REF>; <REF id=\"2798861\">Hou, W. et al., 2015</REF>). The sequential processes of viral attachment, coreceptor binding and fusion provide multiple opportunities for therapeutic intervention (<REF id=\"1944780\">Henrich, T. and Kuritzkes, D.R., 2013</REF>; <REF id=\"2798866\">Iacob, S.A. and Iacob, D.G., 2017</REF>). \n\n\n\n</para>\n      <para>Unlike earlier AIDS drugs that work inside the cell and target viral enzymes involved in the replication of the virus, fusion inhibitors block the fusion of HIV with host cells before the virus enters the cell and begins its replication process. The viral genome gains access to the host cell&apos;s cytoplasm by fusing its membrane with the host cell&apos;s plasma membrane. Fusion is induced by a series of conformational changes in the gp120/gp41 protein. This process can be blocked by substances that bind to intermediate conformations of gp120/gp41, inhibiting transition to the full, fusion-active conformation (<REF id=\"974999\">Tamamura, H. et al., 2005</REF>; <REF id=\"1505539\">Tilton, J.C. and Doms, R.W., 2010</REF>). The first drug from this class of anti-HIV drugs, Roche&apos;s enfuvirtide, was launched in 2003. \n\n</para>\n      <para>The activity of CXCR4 antagonists is related to that of the fusion inhibitors: fusion between the viral envelope and the host cell membrane allows the virus to enter its host cell.  Fusion is induced by further gp120/gp41 conformational changes triggered by the binding of gp120/gp41 to chemokine receptors, or coreceptors. This binding can be blocked by chemokine antagonists. Note that the CXCR4 receptor is used by viruses that generally develop after years of HIV infection; &quot;primary&quot; virus strains that are transmitted from one patient to the next typically use another receptor, CCR5. \n\n\n\n</para>\n      <para>The turnover of plasma virions and of CD4+ lymphocytes is extremely rapid in asymptomatic patients, leading to the suggestion that a promising chemotherapic strategy would be to interfere with the infection by HIV of newly produced CD4+ cells. A breakthrough in the studies on the mechanism of HIV infection led to the identification of several chemokine receptors as potential HIV coreceptors. CCR5 and CXCR4 are the two major coreceptors for HIV-1: 60% of HIV strains bind exclusively to CCR5 receptors (i.e., R5-tropic strains), while 5% are purely CXCR4 receptor-binding. The remaining 35% use both CCR5 and CXCR4 (<REF id=\"1789081\">Gilliam, B.L. et al., 2011</REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018</REF>).\n\n</para>\n      <para>A 32-base pair deletion allele (CCR5-delta32) in the gene coding for CCR5 has been identified in some individuals of northern European descent. Homozygosity was associated with a significant degree of protection from HIV-1 infection, and the frequency of heterozygotes was very high in people who survived HIV infection for 10 years or more. Survival analysis showed that the progression of the disease is significantly slower in individuals carrying this deletion. This indicates that the presence of this allele confers a certain degree of resistance to HIV infection, and highlights the importance of CCR5 in viral acquisition. However, it should be noted that the CCR5 receptor is expressed on a variety of hematopoietic cells and is implicated in a plethora of biological processes. Ongoing studies are uncovering a growing number of roles for CCR5 in inflammatory, autoimmune and neoplastic diseases. As such, CCR5 receptor inhibition or gene editing, while preventing HIV entry, could have unforeseen and potentially significant off-target effects (<REF id=\"2947856\">Vangelista, L. and Vento, S., 2017</REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018</REF>).\n\n</para>\n      <para>In August 2007, the U.S. FDA approved Pfizer&apos;s maraviroc, a negative allosteric modulator of the CCR5 receptor and competitive CCR5 inhibitor, for use along with other antiretroviral agents for treatment-experienced patients infected with CCR5-tropic HIV-1. In the pivotal MOTIVATE trials, nearly twice as many treatment-experienced CCR5-tropic HIV-1 infected patients treated with maraviroc plus optimized background therapy (OBT) achieved undetectable viral loads at 24 weeks compared to those receiving placebo plus OBT. There were no significant increases in hepatotoxicity, malignancy or mortality in maraviroc&apos;s treatment arms, while there were slight increases in upper respiratory and herpes simplex virus infections as well as with ischemic events, consistent with the rate observed in treatment-experienced HIV/AIDs patients. The drug was launched in September 2007. Shortly thereafter, 48-week study results were reported, providing further evidence of the ability of maraviroc, given in addition to an optimized anti-HIV treatment regimen, to boost CD4 counts as compared to an optimized regimen alone (<REF id=\"1254596\">Gulick, R.M. et al., 2008</REF>). \n\n</para>\n      <para>Unlike protease inhibitors and reverse transcriptase inhibitors, whose activity and potency depend on viral factors, the activity of HIV entry inhibitors depends more directly on host cell factors: density of chemokine receptors, rate of virus-cell fusion, and variations in CCR5 processing. Viral factors mediating the rate and efficiency of virus-cell fusion may also come into play, but in the case of entry inhibitors, interindividual variability of response is much more closely dependent upon host factors (<REF id=\"752043\">Moore, J.P. and Doms, R.W., 2003</REF>). \n\n</para>\n      <para>More recently, the focus of investigators has turned to a new class of agents acting as HIV attachment (or post-attachment) inhibitors. These compounds bind to gp120 and prevent its attachment to CD4+ lymphocytes. There are several advantages to this approach, including the fact that because they target a viral protein rather than a host cell receptor, attachment inhibitors may have fewer unwanted effects on the host immune response (<REF id=\"1593326\">Hanna, G.J. et al., 2011</REF>; <REF id=\"1944780\">Henrich, T. and Kuritzkes, D.R., 2013</REF>). In March 2018, the FDA approved the first HIV post-attachment inhibitor, as well as the first monoclonal antibody (MAb) to be approved for HIV: the anti-CD4 MAb ibalizumab, indicated for the treatment of HIV-1 infection in heavily treatment-experienced adults with multidrug-resistant (MDR) HIV-1 infection failing their current antiretroviral regimen. Ibalizumab is a CD4-directed post-attachment HIV-1 inhibitor that binds to CD4+ receptors on host cells and blocks the HIV virus from infecting the cells (<REF id=\"2798866\">Iacob, S.A. and Iacob, D.G., 2017</REF>). The BLA was based on data from the phase III TMB-301 study, a single-arm, 24-week study of ibalizumab plus an optimized background regimen in treatment-experienced patients infected with MDR HIV-1 (NCT02475629). The primary efficacy endpoint--the proportion of patients achieving a 0.5 log10 (70%) or greater decrease in HIV-1 RNA 7 days after initiating ibalizumab therapy, day 14 of the study--was met by at least 80% of the study participants. Ibalizumab (Trogarzo) was launched in the U.S., its first market, in late April 2018.\n\n\n\n</para>\n      <para>The table below presents information on HIV entry and fusion inhibitors in active development for the treatment of HIV and AIDS.<COMPETITIVE id=\"83\">\n          <TABLE>\n            <TR>\n              <TD>HIV entry and fusion inhibitors in clinical and preclinical development</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leronlimab</a>\n              </TD>\n              <TD>CytoDyn</TD>\n              <TD>Anti-CD195 (CCR5)/ Signal Transduction Modulators/ Viral Entry Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=680262&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Fostemsavir</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>HIV Attachment Inhibitors</TD>\n              <TD>Phase III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528</a>\n              </TD>\n              <TD>ImQuest BioSciences</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Entry Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ HIV Integrase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368000&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RPI-MN</a>\n              </TD>\n              <TD>ReceptoPharm</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=773475&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5P12-RANTES</a>\n              </TD>\n              <TD>Orion Biotechnology</TD>\n              <TD>Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931208&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cholesterol-PIE12-2-trimer with PEG32 fourth-arm spacer</a>\n              </TD>\n              <TD>Navigen</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=474274&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HiviCide-1</a>\n              </TD>\n              <TD>NanoViricides</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"752043\" medline_id=\"12960367\">\n        <Title>The entry of entry inhibitors: A fusion of science and medicine</Title>\n        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)</SourceTitle>\n        <PubMedTitle>Proc Natl Acad Sci U S A</PubMedTitle>\n        <Volume>100</Volume>\n        <Issue>19</Issue>\n        <Page>10598</Page>\n        <Year>2003</Year>\n        <Authors>\n          <Author>Moore, J.P.</Author>\n          <Author>Doms, R.W.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"974999\" medline_id=\"16250877\">\n        <Title>Development of anti-HIV agents targeting dynamic supramolecular mechanism: Entry and fusion inhibitors based on CXCR4/CCR5 antagonists and gp41-C34-remodeling peptides</Title>\n        <SourceTitle>Current HIV Research</SourceTitle>\n        <PubMedTitle>Curr HIV Res</PubMedTitle>\n        <Volume>3</Volume>\n        <Issue>4</Issue>\n        <Page>289</Page>\n        <Year>2005</Year>\n        <Authors>\n          <Author>Tamamura, H.</Author>\n          <Author>Otaka, A.</Author>\n          <Author>Fujii, N.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1254596\" medline_id=\"18832244\">\n        <Title>Maraviroc for previously treated patients with R5 HIV-1 infection</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>359</Volume>\n        <Issue>14</Issue>\n        <Page>1429</Page>\n        <Year>2008</Year>\n        <Authors>\n          <Author>Gulick, R.M.</Author>\n          <Author>Lalezari, J.</Author>\n          <Author>Goodrich, J.</Author>\n          <Author>Clumeck, N.</Author>\n          <Author>DeJesus, E.</Author>\n          <Author>Horban, A.</Author>\n          <Author>Nadler, J.</Author>\n          <Author>Clotet, B.</Author>\n          <Author>Karlsson, A.</Author>\n          <Author>Wohlfeiler, M.</Author>\n          <Author>Montana, J.B.</Author>\n          <Author>McHale, M.</Author>\n          <Author>Sullivan, J.</Author>\n          <Author>Ridgway, C.</Author>\n          <Author>Felstead, S.</Author>\n          <Author>Dunne, M.W.</Author>\n          <Author>van der Ryst, E.</Author>\n          <Author>Mayer, H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1505539\" medline_id=\"19683546\">\n        <Title>Entry inhibitors in the treatment of HIV-1 infection</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>91</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Tilton, J.C.</Author>\n          <Author>Doms, R.W.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1593326\" medline_id=\"21078951\">\n        <Title>Antiviral activity, pharmacokinetics, and safety of BMS-488043, a novel oral small-molecule HIV-1 attachment inhibitor, in HIV-1-infected subjects</Title>\n        <SourceTitle>Antimicrobial Agents &amp; Chemotherapy</SourceTitle>\n        <PubMedTitle>Antimicrob Agents Chemother</PubMedTitle>\n        <Volume>55</Volume>\n        <Issue>2</Issue>\n        <Page>722</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Hanna, G.J.</Author>\n          <Author>Lalezari, J.</Author>\n          <Author>Hellinger, J.A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1789081\" medline_id=\"21284908\">\n        <Title>Clinical use of CCR5 inhibitors in HIV and beyond</Title>\n        <SourceTitle>Journal of Translational Medicine (Online)</SourceTitle>\n        <PubMedTitle>J Transl Med</PubMedTitle>\n        <Volume>9</Volume>\n        <Issue>Suppl. 1</Issue>\n        <Page>S9</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Gilliam, B.L.</Author>\n          <Author>Riedel, D.J.</Author>\n          <Author>Redfield, R.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1944780\" medline_id=\"23290628\">\n        <Title>HIV-1 entry inhibitors: Recent development and clinical use</Title>\n        <SourceTitle>Current Opinion in Virology</SourceTitle>\n        <PubMedTitle>Curr Opin Virol</PubMedTitle>\n        <Volume>3</Volume>\n        <Issue>1</Issue>\n        <Page>51</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Henrich, T.</Author>\n          <Author>Kuritzkes, D.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798861\" medline_id=\"26259811\">\n        <Title>Molecular insights into the inhibition of HIV-1 infection using a CD4 domain-1-specific monoclonal antibody</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>122</Volume>\n        <Page>101</Page>\n        <Year>2015</Year>\n        <Authors>\n          <Author>Hou, W.</Author>\n          <Author>Fang, C.</Author>\n          <Author>Liu, J.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798866\" medline_id=\"29230203\">\n        <Title>Ibalizumab targeting CD4 receptors, an emerging molecule in HIV therapy</Title>\n        <SourceTitle>Frontiers in Microbiology</SourceTitle>\n        <PubMedTitle>Front Microbiol</PubMedTitle>\n        <Volume>8</Volume>\n        <Page>2323</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Iacob, S.A.</Author>\n          <Author>Iacob, D.G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947856\" medline_id=\"29375583\">\n        <Title>The expanding therapeutic perspective of CCR5 blockade</Title>\n        <SourceTitle>Frontiers in Immunology</SourceTitle>\n        <PubMedTitle>Front Immunol</PubMedTitle>\n        <Volume>8</Volume>\n        <Page>1981</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Vangelista, L.</Author>\n          <Author>Vento, S.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947858\" medline_id=\"29932942\">\n        <Title>CCR5 revisited: How mechanisms of HIV entry govern AIDS pathogenesis</Title>\n        <SourceTitle>Journal of Molecular Biology</SourceTitle>\n        <PubMedTitle>J Mol Biol</PubMedTitle>\n        <Volume>430</Volume>\n        <Issue>17</Issue>\n        <Page>2557</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Brelot, A.</Author>\n          <Author>Chakrabarti, L.A.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"1795\" modifiedDate=\"20181213111818\">\n    <Title>HIV Integrase Inhibitors</Title>\n    <Body>\n      <para>After fusion of the HIV virus with the host cell membrane, a poorly defined step called &quot;uncoating&quot; of this core exposes the viral nucleoprotein complex, which consists of RNA and the proteins integrase (IN), reverse transcriptase (RT), matrix (MA) and Vpr. \n\n</para>\n      <para>After reverse transcription, the zinc-finger protein IN facilitates the integration of viral DNA into the host genome, culminating in the establishment of both active and latent viral reservoirs (<REF id=\"1505558\">McColl, D.J. and Chen, X., 2010</REF>). Integrase integrates a complete viral minus-strand of DNA and a plus-strand containing several gaps into a host chromosome, by first removing two 3&apos; nucleotides from each strand of the linear viral DNA, producing overhanging CA ends, joining these 3&apos; ends covalently to the 5&apos; ends of the host cell DNA, and removing unpaired nucleotides at the viral 5&apos; ends, which are joined with the host cell&apos;s 3&apos; ends. The gaps in the plus-strands are then probably repaired by host cell enzymes. IN is a unique therapeutic target, as it is the viral protein with least similarity to its human counterpart; consequently, its inhibition is less likely to cause off-target adverse effects (<REF id=\"2947863\">Choi, E. et al., 2018</REF>).\n\n</para>\n      <para>In the fall of 2007, following accelerated approval from the FDA, Merck &amp; Co. launched raltegravir potassium (Isentress), the first integrase inhibitor to reach the market worldwide. Raltegravir works by preventing the integrase enzyme from inserting HIV DNA into human DNA. It is indicated for use in combination with other antiretroviral agents against HIV-1 infection in treatment-experienced adult patients who have evidence of viral replication and HIV-1 strains resistant to multiple antiretroviral agents. The FDA&apos;s decision was based on a 24-week analysis of clinical trials in which raltegravir, in combination with optimized background therapy in treatment-experienced patients, provided significant reductions in HIV RNA viral load and increases in CD4 cell counts. The use of other active agents with raltegravir is associated with a greater likelihood of treatment response. Raltegravir has also been approved in the U.S. and E.U. for use in treatment-naive patients. In 2010, the FDA approved Merck&apos;s labeling update for raltegravir, which incorporates 96-week data obtained in three studies enrolling treatment-experienced and -naive patients. The drawbacks of raltegravir are the need for twice-daily dosing and the potential for resistance (<REF id=\"2947863\">Choi, E. et al., 2018</REF>).\n\n</para>\n      <para>In 2013, the world&apos;s second integrase inhibitor, dolutegravir, was approved and launched in the U.S. A third HIV integrase inhibitor, elvitegravir, was launched for the first time in the U.S. in early 2015. Elvitegravir is indicated for use in combination with an HIV protease inhibitor, coadministered with ritonavir and with other antiretroviral drug(s), for the treatment of HIV-1 infection in antiretroviral treatment-experienced adults. In clinical trials, elvitegravir was effective in suppressing HIV among patients with drug-resistant strains of HIV. It can be taken once daily, but is extensively cross-resistant with raltegravir (<REF id=\"2947863\">Choi, E. et al., 2018</REF>). Dolutegravir is well tolerated and can be taken once daily without a pharmacological enhancer, and has relatively low cross-resistance with raltegravir (<REF id=\"2947863\">Choi, E. et al., 2018</REF>).\n\n</para>\n      <para>At this time, U.S. treatment guidelines recommend integrase inhibitor-based combination drug therapy. Other international guidelines increasingly favor this approach as well (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).\n\n</para>\n      <para>HIV integrase inhibitors in active development for the treatment of HIV and AIDS are presented in the following table.<COMPETITIVE id=\"587\">\n          <TABLE>\n            <TR>\n              <TD>HIV integrase inhibitors in development for the treatment of AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=437811&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1044377&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir/rilpivirine</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ HIV Integrase Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=854294&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bictegravir</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ HIV Integrase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=939977&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Sondashi Formula</a>\n              </TD>\n              <TD>Tropical Diseases Research Centre</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1505558\" medline_id=\"19925830\">\n        <Title>Strand transfer inhibitors of HIV-1 integrase: Bringing IN a new era of antiretroviral therapy</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>101</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>McColl, D.J.</Author>\n          <Author>Chen, X.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947863\" medline_id=\"30416746\">\n        <Title>Recent advances in the discovery of small-molecule inhibitors of HIV-1 integrase</Title>\n        <SourceTitle>Future Science OA</SourceTitle>\n        <PubMedTitle>Future Sci OA</PubMedTitle>\n        <Volume>4</Volume>\n        <Issue>9</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Choi, E.</Author>\n          <Author>Mallareddy, J.R.</Author>\n          <Author>Lu, D.</Author>\n          <Author>Kolluru, S.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"4727\" modifiedDate=\"20181211121123\">\n    <Title>Pharmacoenhancing Agents</Title>\n    <Body>\n      <para>Protease inhibitors have a low systemic exposure and short half-life after oral administration due to their rapid metabolism by cytochrome P450 3A (CYP3A) enzymes in the intestine and liver. During the early days of protease inhibitor therapy, the mechanism-based inhibition of CYP3A enzymes by subtherapeutic doses of ritonavir was discovered by serendipity. In fact, the concomitant administration of ritonavir enhances plasma levels of other protease inhibitors that are metabolized by CYP3A enzymes, allowing reduced pill burden and dosing frequency. Apart from protease inhibitors, other important antiviral drugs that are CYP3A substrates can be combined with ritonavir, such as the integrase inhibitor elvitegravir and the chemokine CCR5 receptor antagonist maraviroc (<REF id=\"1572275\">Sevrioukova, I.F. and Poulos, T.L., 2010</REF>; <REF id=\"1831464\">Gras, J., 2012</REF>). As a class, these compounds are known as pharmacoenhancing or boosting agents.\n\n</para>\n      <para>Scientists at Gilead Sciences succeeded in improving ritonavir and discovered cobicistat, a pharmacoenhancer with no inherent anti-HIV activity. Cobicistat produces mechanism-based CYP3A inhibition similar to that of ritonavir, with better physicochemical properties that allow coformulation with antiretrovirals, reduced off-target drug interactions and improved tolerability (<REF id=\"1831464\">Gras, J., 2012</REF>; <REF id=\"2552672\">von Hentig, N., 2016</REF>).\n\n</para>\n      <para>In 2012, the U.S. FDA approved Stribild (elvitegravir/cobicistat/emtricitabine/tenofovir disoproxil fumarate), a once-daily combination product indicated for the treatment of HIV-1 infection in adults who are antiretroviral treatment-naive. Stribild is the first fixed-dose anti-HIV combination to incorporate the CYP3A4 inhibitor cobicistat. The incorporation of cobicistat enables the once-daily dosing of elvitegravir, an integrase inhibitor that is otherwise metabolized by the enzyme. The safety and efficacy of the combination product were demonstrated in phase III trials involving more than 1,700 HIV-positive patients (<REF id=\"1868512\">Sax, P.E. et al., 2012</REF>; <REF id=\"1868525\">DeJesus, E. et al., 2012</REF>). \n\n</para>\n      <para>Cobicistat has also been developed as a stand-alone product. In September 2013, the European Commission approved cobicistat as a boosting agent for the HIV protease inhibitors atazanavir (300 mg once daily) and darunavir (800 mg once daily) as part of antiretroviral combination therapy in adults with HIV-1 infection. It was launched in the U.K., its first market, in 2014.\n\n</para>\n      <para>The following table provides an overview of pharmacoenhancing agents under active development for the treatment of patients with HIV and AIDS. \n<COMPETITIVE id=\"1327\">\n          <TABLE>\n            <TR>\n              <TD>Pharmacoenhancing agents under active development for the treatment of patients with HIV and AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir/levonorgestrel</a>\n              </TD>\n              <TD>Eastern Virginia Medical School</TD>\n              <TD>Progesterone Receptor Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ Signal Transduction Modulators/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=230535&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vorinostat</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Histone Deacetylase 6 (HDAC6) Inhibitors/ Histone Deacetylase 1 (HDAC1) Inhibitors/ Apoptosis Inducers/ Histone Deacetylase 2 (HDAC2) Inhibitors/ Histone Deacetylase 3 (HDAC3) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Epigenetic Modifier Modulators</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=135177&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Deferiprone</a>\n              </TD>\n              <TD>Apotex</TD>\n              <TD>Cytochrome P450 CYP4F2 Inhibitors/ Chelating Agents</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=874960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir disoproxil orotate</a>\n              </TD>\n              <TD>Dong-A ST</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1572275\" medline_id=\"20937904\">\n        <Title>Structure and mechanism of the complex between cytochrome P4503A4 and ritonavir</Title>\n        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)</SourceTitle>\n        <PubMedTitle>Proc Natl Acad Sci U S A</PubMedTitle>\n        <Volume>107</Volume>\n        <Issue>43</Issue>\n        <Page>18422</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Sevrioukova, I.F.</Author>\n          <Author>Poulos, T.L.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1831464\">\n        <Title>Cobicistat</Title>\n        <SourceTitle>Drugs of the Future</SourceTitle>\n        <PubMedTitle>Drugs Fut</PubMedTitle>\n        <Volume>037</Volume>\n        <Issue>05</Issue>\n        <Page>0315</Page>\n        <Year>2012</Year>\n        <Authors>\n          <Author>Gras, J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1868512\" medline_id=\"22748591\">\n        <Title>Co-formulated elvitegravir, cobicistat, emtricitabine, and tenofovir versus co-formulated efavirenz, emtricitabine, and tenofovir for initial treatment of HIV-1 infection: A randomised, double-blind, phase 3 trial, analysis of results after 48 weeks</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>379</Volume>\n        <Issue>9835</Issue>\n        <Page>2439</Page>\n        <Year>2012</Year>\n        <Authors>\n          <Author>Sax, P.E.</Author>\n          <Author>DeJesus, E.</Author>\n          <Author>Mills, A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1868525\" medline_id=\"22748590\">\n        <Title>Co-formulated elvitegravir, cobicistat, emtricitabine, and tenofovir disoproxil fumarate versus ritonavir-boosted atazanavir plus co-formulated emtricitabine and tenofovir disoproxil fumarate for initial treatment of HIV-1 infection: A randomised, double-blind, phase 3, non-inferiority trial</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>379</Volume>\n        <Issue>9835</Issue>\n        <Page>2429</Page>\n        <Year>2012</Year>\n        <Authors>\n          <Author>DeJesus, E.</Author>\n          <Author>Rockstroh, J.K.</Author>\n          <Author>Henry, K.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2552672\" medline_id=\"26730211\">\n        <Title>Clinical use of cobicistat as a pharmacoenhancer of human immunodeficiency virus therapy</Title>\n        <SourceTitle>HIV/AIDS (Auckland, N.Z.)</SourceTitle>\n        <PubMedTitle>HIV AIDS (Auckl)</PubMedTitle>\n        <Volume>8</Volume>\n        <Page>1</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>von Hentig, N.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"4730\" modifiedDate=\"20181211121119\">\n    <Title>Latency-Reversing Agents</Title>\n    <Body>\n      <para>Although antiretroviral drug therapy may keep HIV infection under control, it is unable to completely eliminate the virus. A reservoir persists within latently infected memory CD4+ T cells, where the virus is inaccessible to antiretroviral agents (<REF id=\"2798862\">Cary, D.C. et al., 2016</REF>). The latent virus may become reactivated at any time, particularly if HAART is discontinued or immune status is compromised. The complete inactivation and elimination of this reservoir continues to be the ultimate objective of drug researchers, who have not succeeded in achieving this goal using traditional antiretroviral agents (<REF id=\"2849566\">Pitman, M.C. et al., 2018</REF>). \n\n</para>\n      <para>In recent years, attention has turned to the histone deacetylase (HDAC) inhibitors. The chromatin remodeling HDAC enzymes, of which 18 are known to exist, play an important role in processes of cell proliferation, migration, differentiation and apoptosis; class 1 HDACs also promote HIV latency (<REF id=\"2798868\">Zaikos, T.D. et al., 2018</REF>).  \n\n\n\n</para>\n      <para>Alterations in the balance of nucleosomal histones within chromatin has been implicated in the maintenance of viral quiescence in latently infected cells, and HDAC inhibitors have been proposed as a class of agents capable of upsetting the balance that enables HIV to remain integrated and to persist within CD4+ T cells. Administration of these agents, particularly class 1-selective HDAC inhibitors, may induce the virus to reemerge so that it can then be eliminated with antiretroviral agents (<REF id=\"1944628\">Matalon, S. et al., 2011</REF>; <REF id=\"1995769\">Ververis , K. and Karagiannis, T.C., 2013</REF>; <REF id=\"2798868\">Zaikos, T.D. et al., 2018</REF>). \n\n</para>\n      <para>In an early proof-of-concept study, the HDAC inhibitor valproic acid was evaluated in a small group of HIV-positive volunteers. Subjects received HAART intensified with the HIV fusion inhibitor enfuvirtide for 4-6 weeks, after which time the HDAC inhibitor valproic acid was added to the treatment regimen for three months. At the end of the treatment period, a decline was confirmed in the frequency of replication-competent HIV in circulating resting CD4+ T cells in this patient group (<REF id=\"1945309\">Lehrman, G. et al., 2005</REF>). However, valproic acid has only weak activity as an inducer of viral emergence from the latent reservoir. Thus subsequent studies evaluated newer, more potent and selective HDAC inhibitors such as vorinostat, belinostat and givinostat (<REF id=\"1944628\">Matalon, S. et al., 2011</REF>). \n\n</para>\n      <para>Administered to a small group of 8 HIV-positive patients, a single dose of vorinostat was shown to be effective in inducing an increase in the expression of HIV RNA in circulating resting CD4+ T cells, supporting further evaluation of this strategy (<REF id=\"1874784\">Archin, N.M. et al., 2012</REF>). However, other researchers suggest that HDAC inhibitors alone may not be sufficiently effective in reducing the pool of latent virus (<REF id=\"1944629\">Sahu, G.K. and Cloyd, M.W., 2011</REF>; <REF id=\"2798862\">Cary, D.C. et al., 2016</REF>). \n\n</para>\n      <para>Other drug classes with potential as latency-reversing agents include bromodomain and extraterminal (BET) bromodomain inhibitors (BETis), protein kinase C (PKC) activators and MAP kinase agonists, as well as drugs that affect DNA methylation (e.g., 5-azacytidine) (<REF id=\"2798862\">Cary, D.C. et al., 2016</REF>).<COMPETITIVE id=\"1331\">\n          <TABLE>\n            <TR>\n              <TD>Latency-reversing agents under active development for the treatment of HIV and AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=932649&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">APH-0812</a>\n              </TD>\n              <TD>Aphios</TD>\n              <TD>Protein Kinase C (PKC) Activators/ Histone Deacetylase (HDAC) Inhibitors/ Epigenetic Modifier Modulators/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1874784\" medline_id=\"22837004\">\n        <Title>Administration of vorinostat disrupts HIV-1 latency in patients on antiretroviral therapy</Title>\n        <SourceTitle>Nature</SourceTitle>\n        <PubMedTitle>Nature</PubMedTitle>\n        <Volume>487</Volume>\n        <Issue>7408</Issue>\n        <Page>482</Page>\n        <Year>2012</Year>\n        <Authors>\n          <Author>Archin, N.M.</Author>\n          <Author>Liberty, A.L.</Author>\n          <Author>Kashuba, A.D.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1944628\" medline_id=\"21424110\">\n        <Title>Histone deacetylase inhibitors for purging HIV-1 from the latent reservoir</Title>\n        <SourceTitle>Molecular Medicine (Cambridge)</SourceTitle>\n        <PubMedTitle>Mol Med</PubMedTitle>\n        <Volume>17</Volume>\n        <Issue>5-6</Issue>\n        <Page>466</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Matalon, S.</Author>\n          <Author>Rasmussen, T.A.</Author>\n          <Author>Dinarello, C.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1944629\" medline_id=\"21838863\">\n        <Title>Latent HIV in primary T lymphocytes is unresponsive to histone deacetylase inhibitors</Title>\n        <SourceTitle>Virology Journal (Online)</SourceTitle>\n        <PubMedTitle>Virol J</PubMedTitle>\n        <Volume>8</Volume>\n        <Page>400</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Sahu, G.K.</Author>\n          <Author>Cloyd, M.W.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1945309\" medline_id=\"16099290\">\n        <Title>Depletion of latent HIV-1 infection in vivo: A proof-of-concept study</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>366</Volume>\n        <Issue>9485</Issue>\n        <Page>549</Page>\n        <Year>2005</Year>\n        <Authors>\n          <Author>Lehrman, G.</Author>\n          <Author>Hogue, I.B.</Author>\n          <Author>Palmer, S.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1995769\">\n        <Title>The potential role of HDAC inhibitors in de-silencing latent HIV virus</Title>\n        <SourceTitle>Drugs of the Future</SourceTitle>\n        <PubMedTitle>Drugs Fut</PubMedTitle>\n        <Volume>038</Volume>\n        <Issue>08</Issue>\n        <Page>0575</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Ververis , K.</Author>\n          <Author>Karagiannis, T.C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798862\" medline_id=\"26731470\">\n        <Title>Molecular mechanisms of HIV latency</Title>\n        <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n        <PubMedTitle>J Clin Invest</PubMedTitle>\n        <Volume>126</Volume>\n        <Issue>2</Issue>\n        <Page>448</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Cary, D.C.</Author>\n          <Author>Fujinaga, K.</Author>\n          <Author>Peterlin, B.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798868\" medline_id=\"29298886\">\n        <Title>Class 1-selective histone deacetylase (HDAC) inhibitors enhance HIV latency reversal while preserving the activity of HDAC isoforms necessary for maximal HIV gene expression</Title>\n        <SourceTitle>Journal of Virology</SourceTitle>\n        <PubMedTitle>J Virol</PubMedTitle>\n        <Volume>92</Volume>\n        <Issue>6</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Zaikos, T.D.</Author>\n          <Author>Painter, M.M.</Author>\n          <Author>Kettinger, N.T.S.</Author>\n          <Author>Terry, V.H.</Author>\n          <Author>Collins, K.L.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2849566\">\n        <Title>Barriers and strategies to achieve a cure for HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>5</Volume>\n        <Issue>6</Issue>\n        <Page>e317</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Pitman, M.C.</Author>\n          <Author>Lau, J.S.Y.</Author>\n          <Author>McMahon, J.H.</Author>\n          <Author>Lewin, S.R.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"415\" modifiedDate=\"20181211121114\">\n    <Title>Immunotherapeutic Strategies</Title>\n    <Body>\n      <para>With the adoption and widespread use of HAART (highly active antiretroviral therapy), AIDS-related mortality has decreased significantly in the developed world. Nonetheless, the many limitations of HAART --which include side effects, compliance issues, cost and the failure to completely eradicate the HIV virus-- have contributed in recent years to a resurgence of interest in the development of strategies to boost the host immune response in AIDS patients. Immunotherapeutic agents may be used as adjuncts to HAART and potentially as HAART-sparing treatments. No immunotherapeutic agents have yet been licensed specifically for the treatment of HIV, but research in this area is gathering momentum.</para>\n    </Body>\n    <References/>\n    <Section sectionId=\"416\" modifiedDate=\"20190521100200\">\n      <Title>Monoclonal Antibodies</Title>\n      <Body>\n        <para>Although monoclonal antibodies (MAbs) have long been used by virologists as research tools, the development of neutralizing humanized MAb as therapeutic agents for the treatment of prevention of viral infections has been much slower. Fortunately, advances in recent years have provided clearer insight into the mechanism of action of MAbs as well as methods for improving their therapeutic efficacy, and is now driving the development of MAb therapies for infectious diseases, including HIV and AIDS. \n\n</para>\n        <para>Antibodies have a dual functionality that makes them extremely attractive as immunotherapeutic agents, with potential in both the treatment and prevention of HIV-1. MAbs consist of a variable domain that targets a specific viral epitopes, together with a constant domain that is able to harness host effector functions via engaging host Fc receptors on immune cells (<REF id=\"3011908\">Caskey, M. et al., 2019</REF>).\n\n</para>\n        <para>Monoclonal antibodies are classified by their method of production. Murine MAbs are created by challenging mice with a desired antigen and then creating a hybridoma. Chimeric MAbs consist of both human (approximately 65%) and murine sequences. They are less immunogenic than murine MAbs and thus have longer serum half-lives. Human MAbs are almost entirely (95%) of human origin, and can be produced using transgenic mice or phage display libraries. They are the least immunogenic form. Several fully human or humanized versions of murine MAbs acting on a variety of retroviral targets are in development for the treatment of AIDS. \n\n\n\n</para>\n        <para>In 2018, the first anti-HIV MAb was approved for marketing worldwide: TaiMed Biologics&apos; anti-CD4 MAb ibalizumab, indicated for the treatment of HIV-1 infection in heavily treatment-experienced adults with multidrug-resistant HIV-1 infection failing their current antiretroviral regimen (see HIV Entry and Fusion Inhibitors, above). \n\n<COMPETITIVE id=\"84\">\n            <TABLE>\n              <TR>\n                <TD>Monoclonal antibodies in development for the treatment of AIDS</TD>\n              </TR>\n              <TR>\n                <TD>Drug Name</TD>\n                <TD>Organization</TD>\n                <TD>Description</TD>\n                <TD>Status</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leronlimab</a>\n                </TD>\n                <TD>CytoDyn</TD>\n                <TD>Humanized monoclonal IgG4 kappa antibody,  derived from murine PA14 antibody,  targeting human C - C chemokine receptor type 5 (CCR5),  expressed in SP2/0 myeloma cells</TD>\n                <TD>Pre-Registered</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795510&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117</a>\n                </TD>\n                <TD>Rockefeller University</TD>\n                <TD>Broadly neutralizing human monoclonal IgG1 lambda antibody against CD4 - binding site of HIV - 1 gp120</TD>\n                <TD>Phase II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701671&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">UB-421</a>\n                </TD>\n                <TD>United BioPharma</TD>\n                <TD>Humanized IgG1 monoclonal antibody targeting domain 1 of CD4</TD>\n                <TD>Phase II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701846&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-01</a>\n                </TD>\n                <TD>National Institute Allergy Infect Dis</TD>\n                <TD>Human monoclonal IgG1 kappa 3 antibody against the CD4 binding site region of HIV - 1 gp120 envelope glycoprotein,  purifed from HIV infected individuals</TD>\n                <TD>Phase II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=280344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cytolin</a>\n                </TD>\n                <TD>CytoDyn</TD>\n                <TD>Murine anti - human LFA - 1 monoclonal antibody</TD>\n                <TD>Phase I/II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915332&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGDM1400</a>\n                </TD>\n                <TD>International AIDS Vaccine Initiative</TD>\n                <TD>Broadly neutralizing fully human IgG1 monoclonal antibody (bnAb) derived from human monoclonal antibody (PGT145),  targeting V1 and V2 epitope regions of trimeric envelop (env) protein of human immunodeficiency virus type - 1 (HIV1)</TD>\n                <TD>Phase I/II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=742023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGT-121</a>\n                </TD>\n                <TD>International AIDS Vaccine Initiative</TD>\n                <TD>Broadly neutralizing fully human IgG1 monoclonal antibody (bnAb) targeting V3 glycan - dependent epitope region of HIV - 1 envelope glycoprotein gp120</TD>\n                <TD>Phase I/II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878049&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-07-523</a>\n                </TD>\n                <TD>International AIDS Vaccine Initiative</TD>\n                <TD>Human monoclonal IgG1neutralizing antibody targeting CD4 binding site region of HIV - 1 gp120 envelope glycoprotein</TD>\n                <TD>Phase I/II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=837370&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074</a>\n                </TD>\n                <TD>National Institutes of Health (NIH)/ Rockefeller University</TD>\n                <TD>Human monoclonal IgG1 lambda antibody targeting N - glycan V3 region of HIV - 1 glycoprotein (gp120)</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=999467&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074-LS</a>\n                </TD>\n                <TD>Rockefeller University</TD>\n                <TD>Human monoclonal IgG1 lambda antibody targeting N - glycan V3 region of HIV - 1 glycoprotein (gp120) harboring a LS substitution in the heavy chain</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=974250&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117-LS</a>\n                </TD>\n                <TD>Rockefeller University</TD>\n                <TD>Human monoclonal broadly neutralizing antibody,  derived from the 3BNC117 MAb,  with LS substitution on the heavy chain</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=901797&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MB-66</a>\n                </TD>\n                <TD>LeafBio</TD>\n                <TD>Vaginal film comprising anti - HIV VRC01 - N and anti - HSV HSV8 - N monoclonal antibodies</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=785468&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB080-00-AB</a>\n                </TD>\n                <TD>National Institute Allergy Infect Dis</TD>\n                <TD>Human monoclonal IgG1 kappa 3 antibody against the CD4 binding site region of HIV - 1 gp120 envelope glycoprotein,  harboring a M428L/N434S substitution in the Fc region</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006069&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB091-00-AB</a>\n                </TD>\n                <TD>National Institute Allergy Infect Dis</TD>\n                <TD>Human monoclonal antibody targeting the human immunodeficiency virus 1 (HIV - 1) CD4 binding site</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1009345&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB095-00-AB</a>\n                </TD>\n                <TD>National Institute Allergy Infect Dis</TD>\n                <TD>Human monoclonal antibody targeting the membrane proximal external region and proximal viral membrane lipid region of HIV - 1</TD>\n                <TD>Phase I</TD>\n              </TR>\n            </TABLE>\n          </COMPETITIVE>\n        </para>\n      </Body>\n      <References>\n        <Reference id=\"3011908\" medline_id=\"30936546\">\n          <Title>Broadly neutralizing anti-HIV-1 monoclonal antibodies in the clinic</Title>\n          <SourceTitle>Nature Medicine</SourceTitle>\n          <PubMedTitle>Nat Med</PubMedTitle>\n          <Volume>25</Volume>\n          <Issue>4</Issue>\n          <Page>547</Page>\n          <Year>2019</Year>\n          <Authors>\n            <Author>Caskey, M.</Author>\n            <Author>Klein, F.</Author>\n            <Author>Nussenzweig, M.C.</Author>\n          </Authors>\n        </Reference>\n      </References>\n    </Section>\n    <Section sectionId=\"417\" modifiedDate=\"20130205022126\">\n      <Title>Therapeutic AIDS Vaccines</Title>\n      <Body>\n        <para>The development of an effective prophylactic AIDS vaccine has been complicated by the many unique characteristics of the virus, as discussed in the <I>Prevention</I> section above. To date the vaccines studied in humans have shown little efficacy in protecting healthy subjects against infection. Somewhat more promising results have been obtained in the setting of therapeutic vaccination. Several approaches have been used to boost cell- and/or antibody-mediated immunity, including whole inactivated viral vaccines, protein subunits, synthetic peptides, DNA vaccines and viral vectors expressing HIV-1 (<REF id=\"975000\">Puls, R.L. and Emery, S., 2006</REF>). The most promising vaccines being studied at the moment are immunogens that produce a cytotoxic T lymphocyte (CTL) response, designed to contain the virus in infected individuals rather than to providing sterile protection for healthy subjects (<REF id=\"878006\">Letvin, N.L., 2005</REF>).\n\n</para>\n        <para>Another promising, potentially curative HIV vaccine approach is that of dendritic cell vaccines. Promising preliminary results have been obtained by Spanish investigators in a phase I/II trial using autologous, monocyte-derived dendritic cells. The vaccine has been shown in animal models and in patients with chronic HIV-1 infection to generate a host immune response leading to a decrease in plasma viral load (<REF id=\"1932194\">Garcia, F. et al., 2013</REF>).\n\n</para>\n      </Body>\n      <References>\n        <Reference id=\"878006\" medline_id=\"15660510\">\n          <Title>Progress toward an HIV vaccine</Title>\n          <SourceTitle>Annual Review of Medicine</SourceTitle>\n          <PubMedTitle>Annu Rev Med</PubMedTitle>\n          <Volume>56</Volume>\n          <Page>213</Page>\n          <Year>2005</Year>\n          <Authors>\n            <Author>Letvin, N.L.</Author>\n          </Authors>\n        </Reference>\n        <Reference id=\"975000\" medline_id=\"16336205\">\n          <Title>Therapeutic vaccination against HIV: Current progress and future possibilities</Title>\n          <SourceTitle>Clinical Science (1979)</SourceTitle>\n          <PubMedTitle>Clin Sci (Lond)</PubMedTitle>\n          <Volume>110</Volume>\n          <Issue>1</Issue>\n          <Page>59</Page>\n          <Year>2006</Year>\n          <Authors>\n            <Author>Puls, R.L.</Author>\n            <Author>Emery, S.</Author>\n          </Authors>\n        </Reference>\n        <Reference id=\"1932194\">\n          <Title>A dendritic cell-based vaccine elicits T cell responses associated with control of HIV-1 replication</Title>\n          <SourceTitle>Science Translational Medicine</SourceTitle>\n          <PubMedTitle>Sci Transl Med</PubMedTitle>\n          <Volume>5</Volume>\n          <Issue>166</Issue>\n          <Page>166ra2</Page>\n          <Year>2013</Year>\n          <Authors>\n            <Author>Garcia, F.</Author>\n            <Author>Climent, N.</Author>\n            <Author>Guardo, A.C.</Author>\n            <Author>et al.</Author>\n          </Authors>\n        </Reference>\n      </References>\n    </Section>\n    <Section sectionId=\"2286\" modifiedDate=\"20121114125710\">\n      <Title>Cytokine Therapy</Title>\n      <Body>\n        <para>The use of cytokines to treat HIV, first described nearly three decades ago, has reemerged into the spotlight in recent years as experience has begun to reveal some of the shortcomings of antiretroviral therapy. \n\n\n\n</para>\n        <para>The immune system of patients with HIV infection do not produce enough interleukin-2 (IL-2), a substance that helps activate CD4+ cells to respond to various infections, including HIV. The drug aldesleukin (recombinant interleukin-2, marketed by Chiron as Proleukin) acts the same way in the body as IL-2 and has helped to increase CD4+ T-cells in HIV-infected patients. However, aldesleukin causes some serious side effects, perhaps because of its stimulation of various immune system cells. \n\n</para>\n        <para>The SILCAAT and ESPRIT trials were conducted in order to further elucidate the role of IL-2 in HIV therapy. The 1,695 patients in the SILCAAT study and the 4,111 patients in the ESPRIT study were randomized to treatment with antiretroviral therapy plus IL-2 or antiretroviral therapy alone. Patients had baseline CD4+ cell counts of 50-299/mm3 in SILCAAT and of at least 300/mm3 in ESPRIT. In both studies, the primary endpoint was opportunistic disease or death from any cause. The results of the two studies revealed that, in spite of significantly increasing in CD4+ cell counts as compared to antiretroviral therapy alone, treatment with IL-2 did not result in any clinical benefits in either study (<REF id=\"1414470\">Abrams, D. et al., 2009</REF>). \n\n</para>\n        <para>Interleukin-2 has to date been the most widely studied cytokine in the setting of HIV and AIDS; at least 15 clinical trials have been conducted to date of IL-2, usually in combination with antiretroviral therapy. However, many other cytokines are also believed to hold potential in this indication, either as adjuncts to antiviral therapy or as adjuncts to AIDS vaccines. Preclinical and clinical studies have provided promising evidence of the favorable therapeutic effects of IL-1, IL-7, IL-12, IL-15, IFN-alpha, IFN-gamma and the colony-stimulating factors G-CSF and GM-CSF, to name a few (<REF id=\"1021499\">Pett, S.L. and Kelleher, A.D., 2003</REF>). \n\n\n\n</para>\n        <para>The following table summarizes progress in the development of cytokines for the treatment of AIDS and AIDS-related complex. <COMPETITIVE id=\"671\">\n            <TABLE>\n              <TR>\n                <TD>Cytokines in development for the treatment of AIDS and AIDS-related complex</TD>\n              </TR>\n              <TR>\n                <TD>Drug Name</TD>\n                <TD>Organization</TD>\n                <TD>Description</TD>\n                <TD>Status</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=261662&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Peginterferon alfa-2a</a>\n                </TD>\n                <TD>National Institute Allergy Infect Dis</TD>\n                <TD>Mono(N2, N6 - dicarboxy - L - lysyl)interferon alfa - 2a,  diesters with polyethylene glycol monomethyl ether</TD>\n                <TD>Phase II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=769347&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALT-803</a>\n                </TD>\n                <TD>University of Minnesota</TD>\n                <TD>Fusion protein complex consisting of a superagonist human interleukin 15 (IL - l5) variant harboring N72D mutation,  fused to a dimeric IL - 15 receptor alpha sushi domain/IgG1 Fc complex; expressed in CHO cells</TD>\n                <TD>Phase I</TD>\n              </TR>\n            </TABLE>\n          </COMPETITIVE>\n        </para>\n      </Body>\n      <References>\n        <Reference id=\"1021499\" medline_id=\"15482104\">\n          <Title>Cytokine therapies in HIV-1 infection: Present and future</Title>\n          <SourceTitle>Expert Review of Anti-infective Therapy</SourceTitle>\n          <PubMedTitle>Expert Rev Anti Infect Ther</PubMedTitle>\n          <Volume>1</Volume>\n          <Issue>1</Issue>\n          <Page>83</Page>\n          <Year>2003</Year>\n          <Authors>\n            <Author>Pett, S.L.</Author>\n            <Author>Kelleher, A.D.</Author>\n          </Authors>\n        </Reference>\n        <Reference id=\"1414470\">\n          <Title>Interleukin-2 therapy in patients with HIV infection</Title>\n          <SourceTitle>New England Journal of Medicine</SourceTitle>\n          <PubMedTitle>N Engl J Med</PubMedTitle>\n          <Volume>361</Volume>\n          <Issue>16</Issue>\n          <Page>1548</Page>\n          <Year>2009</Year>\n          <Authors>\n            <Author>Abrams, D.</Author>\n            <Author>Losso, M.H.</Author>\n            <Author>Babilker, A.</Author>\n            <Author>Collins, G.</Author>\n            <Author>Cooper, D.A.</Author>\n            <Author>Darbyshire, J.</Author>\n            <Author>Emery, S.</Author>\n            <Author>Fox, L.</Author>\n            <Author>Gordin, F.</Author>\n            <Author>Lane, H.C.</Author>\n            <Author>Lundgren, J.D.</Author>\n            <Author>Mitsuyasu, R.</Author>\n            <Author>Neaton, J.D.</Author>\n            <Author>Phillips, A.</Author>\n            <Author>Routy, J.P.</Author>\n            <Author>Tambussi, G.</Author>\n            <Author>Wentworth, D.</Author>\n          </Authors>\n        </Reference>\n      </References>\n    </Section>\n    <Section sectionId=\"418\" modifiedDate=\"20131128025024\">\n      <Title>Immunomodulators</Title>\n      <Body>\n        <para>Immunomodulating agents are administered to HIV-infected patients in an attempt to boost native immune responses, slowing the infectious processes and reducing susceptibility to secondary infections. \n\n\n\n</para>\n        <para>Among the more promising immunomodulating agents are those acting on toll-like receptors. Toll-like receptors (TLRs) are the key recognition structures of the innate immune system that recognize molecules shared by pathogens but distinct from host molecules. When activated, they initiate the production of inflammatory cytokines, chemokines, tissue degrading enzymes and type I interferons (IFNs). TLR signaling is also involved in activation of the adaptive immune system via upregulation of costimulatory molecules of antigen presenting cells. TLRs therefore can link thus linking innate and acquired immune responses. \n\n\n\n\n\n</para>\n        <para>Due to its ability to detect double-stranded RNA, TLR3 is considered to be of interest as a target for the treatment of HIV infection. TLR3 agonists have been shown to inhibit HIV infection and replication in macrophages (<REF id=\"1944738\">Zhou, Y. et al., 2010</REF>). TLR3 agonists have also been proposed for use as adjuvants in anti-HIV vaccines (<REF id=\"1944739\">Stevceva, L., 2011</REF>).\n\n</para>\n        <para>Several immunomodulating agents are currently under clinical evaluation, as seen in the following table.<COMPETITIVE id=\"85\">\n            <TABLE>\n              <TR>\n                <TD>Immunomodulating agents in development for AIDS and HIV</TD>\n              </TR>\n              <TR>\n                <TD>Drug Name</TD>\n                <TD>Organization</TD>\n                <TD>Mechanism of Action</TD>\n                <TD>Status</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=197440&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-1 Immunogen</a>\n                </TD>\n                <TD>Immune Response BioPharma</TD>\n                <TD/>\n                <TD>Pre-Registered</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357687&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tubercin T-5</a>\n                </TD>\n                <TD>Artec</TD>\n                <TD/>\n                <TD>Phase III</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=132660&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Poly I:CLC</a>\n                </TD>\n                <TD>Oncovir</TD>\n                <TD>Toll-Like Receptor 3 (TLR3) Agonists/ Interferon Inducers/ Signal Transduction Modulators</TD>\n                <TD>Phase I/II</TD>\n              </TR>\n            </TABLE>\n          </COMPETITIVE>\n        </para>\n      </Body>\n      <References>\n        <Reference id=\"1944738\" medline_id=\"20636339\">\n          <Title>A critical function of toll-like receptor-3 in the induction of anti-human immunodeficiency virus activities in macrophages</Title>\n          <SourceTitle>Immunology</SourceTitle>\n          <PubMedTitle>Immunology</PubMedTitle>\n          <Volume>131</Volume>\n          <Issue>1</Issue>\n          <Page>40</Page>\n          <Year>2010</Year>\n          <Authors>\n            <Author>Zhou, Y.</Author>\n            <Author>Wang, X.</Author>\n            <Author>Liu, M.</Author>\n            <Author>Hu, Q.</Author>\n            <Author>Song, L.</Author>\n            <Author>Ye, L.</Author>\n            <Author>Zhou, D.</Author>\n            <Author>Ho, W.</Author>\n          </Authors>\n        </Reference>\n        <Reference id=\"1944739\" medline_id=\"22050755\">\n          <Title>Toll-like receptor agonists as adjuvants for HIV vaccines</Title>\n          <SourceTitle>Current Medicinal Chemistry</SourceTitle>\n          <PubMedTitle>Curr Med Chem</PubMedTitle>\n          <Volume>18</Volume>\n          <Issue>33</Issue>\n          <Page>5079</Page>\n          <Year>2011</Year>\n          <Authors>\n            <Author>Stevceva, L.</Author>\n          </Authors>\n        </Reference>\n      </References>\n    </Section>\n  </Section>\n  <Section sectionId=\"419\" modifiedDate=\"20181211121105\">\n    <Title>Current HIV/AIDS Pipeline</Title>\n    <Body>\n      <para>Consult the tables below for an overview of all products mentioned in this review, including drugs, biologics and diagnostic agents that have been marketed or are under active development for this indication. Tables may also include drugs not covered in the preceding sections because their mechanism of action is unknown or not well characterized.\n\n<FREETABLE id=\"19\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Marketed anti-HIV drugs</B></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Drug name</B></TD>\n      <TD WIDTH=\"160\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Organization</B></TD>\n      <TD WIDTH=\"83\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Year and country of first launch</B></TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Nucleoside analogue reverse transcriptase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=113563&p_type=L&p_origen=BGR&p_tsearch=A\">Zidovudine</a> (Retrovir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1987 (U.S., U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=143041&p_type=L&p_origen=BGR&p_tsearch=A\">Didanosine</a> (Videx)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1991 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=137195&p_type=L&p_origen=BGR&p_tsearch=A\">Stavudine</a> (Zerit)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1994 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=184356&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine</a> (Epivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Shire BioChem/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1995 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=173602&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate</a> (Ziagen)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      GlaxoSmithKline/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1999 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=201671&p_type=L&p_origen=BGR&p_tsearch=A\">Phosphazid</a> (Nikavir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AZT-Pharma</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1999 (Russian Federation)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=246665&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate</a> (Viread)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2001 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=190016&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine</a> (Emtriva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Nonnucleoside reverse transcriptase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=170581&p_type=L&p_origen=BGR&p_tsearch=A\">Nevirapine</a> (Viramune)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Hikma</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=196540&p_type=L&p_origen=BGR&p_tsearch=A\">Delavirdine mesilate</a> (Rescriptor)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207217&p_type=L&p_origen=BGR&p_tsearch=A\">Efavirenz</a> (Sustiva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1998 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=290137&p_type=L&p_origen=BGR&p_tsearch=A\">Etravirine</a> (Intelence)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen-Cilag</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2008 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=336587&p_type=L&p_origen=BGR&p_tsearch=A\">Rilpivirine hydrochloride</a> (Edurant)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2011 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=431792&p_type=L&p_origen=BGR&p_tsearch=A\">Elsulfavirine sodium</a> (Elpida)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Viriom</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (Russian Federation)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=748272&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine</a> (Pifeltro)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>HIV protease inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=168103&p_type=L&p_origen=BGR&p_tsearch=A\">Saquinavir mesilate</a> (Invirase)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Roche</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1995 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=199183&p_type=L&p_origen=BGR&p_tsearch=A\">Indinavir sulfate</a> (Crixivan)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck &#38; Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207282&p_type=L&p_origen=BGR&p_tsearch=A\">Ritonavir</a> (Norvir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AbbVie</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=211732&p_type=L&p_origen=BGR&p_tsearch=A\">Nelfinavir mesilate</a> (Viracept)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=257722&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate</a> (Reyataz)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=285394&p_type=L&p_origen=BGR&p_tsearch=A\">Fosamprenavir calcium</a> (Lexiva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Vertex/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=240094&p_type=L&p_origen=BGR&p_tsearch=A\">Tipranavir</a> (Aptivus)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Boehringer Ingelheim</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2005 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=310828&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir</a> (Prezista)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2006 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>HIV entry and fusion inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=217659&p_type=L&p_origen=BGR&p_tsearch=A\">Enfuvirtide</a> (Fuzeon)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Alexion/Roche</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=313738&p_type=L&p_origen=BGR&p_tsearch=A\">Maraviroc</a> (Selzentry)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2007 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=434971&p_type=L&p_origen=BGR&p_tsearch=A\">Albuvirtide</a> (Aikening)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Frontier Biotechnologies</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (China)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=204505&p_type=L&p_origen=BGR&p_tsearch=A\">Ibalizumab</a> (Trozargo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      TaiMed Biologics/ Theratechnologies</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Integrase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428015&p_type=L&p_origen=BGR&p_tsearch=A\">Raltegravir potassium</a> (Isentress)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2007 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=466915&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir sodium</a> (Tivicay)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2013 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=414415&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir</a> (Vitekta)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Pharmacoenhancing agents</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=644627&p_type=L&p_origen=BGR&p_tsearch=A\">Cobicistat</a> (Tybost)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Combination products</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=258524&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/Zidovudine</a> (Combivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=284325&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/zidovudine/abacavir sulfate</a> (Trizivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2000 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291602&p_type=L&p_origen=BGR&p_tsearch=A\">Lopinavir/ritonavir</a> (Kaletra)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AbbVie</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2000 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315122&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate/lamivudine</a> (Epzicom)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=344908&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine</a> (Truvada)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (U.S.) (treatment)<BR>2012 (U.S.) (prevention)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368895&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/efavirenz</a> (Atripla)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb/Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2006 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=676928&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/rilpivirine hydrochloride</a> (Complera)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2011 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=651752&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/GS-9350/Truvada</a> (Stribild)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2012 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=780137&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/Cobicistat</a> (Prezcobix)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (Canada)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=725107&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/abacavir/ lamivudine</a> (Triumeq)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=845715&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate/cobicistat</a> (Evotaz)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=760199&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/cobicistat/tenofovir alafenamide/emtricitabine</a> (Genvoya)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868925&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/tenofovir alafenamide fumarate</a> (Descovy)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2016 (U.S., U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=876185&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/rilpivirine hydrochloride/tenofovir alafenamide fumarate</a> (Odefsey)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead/Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2016 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=792693&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/cobicistat/emtricitabine/tenofovir alafenamide fumarate</a> (Symtuza)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen-Cilag</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (U.K., Germany)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=880143&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/rilpivirine</a> (Juluca)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=902852&p_type=L&p_origen=BGR&p_tsearch=A\">Bictegravir/emtricitabine/tenofovir alafenamide fumarate</a> (Biktarvy)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=889785&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine/lamivudine/tenofovir disoproxil fumarate</a> (Delstrigo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=994460&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/tenofovir disoproxil fumarate</a> (Cimduo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Mylan</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=919756&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/lamivudine</a> (Dovato)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2019 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Immunoglobulins</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=335137&p_type=L&p_origen=BGR&p_tsearch=A\">Immunoglobulin, normal (human)</a> (Gamunex)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bayer</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (Canada)</TD>\n      </TR>\n\n</TABLE>\n]]></FREETABLE>\n        <COMPETITIVE id=\"767\">\n          <TABLE>\n            <TR>\n              <TD>Drugs and biologics in development for the treatment and prevention of HIV and AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=437811&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1044377&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir/rilpivirine</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ HIV Integrase Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=281553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=197440&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-1 Immunogen</a>\n              </TD>\n              <TD>Immune Response BioPharma</TD>\n              <TD/>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795404&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ITV-1</a>\n              </TD>\n              <TD>Immunotech Laboratories</TD>\n              <TD/>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leronlimab</a>\n              </TD>\n              <TD>CytoDyn</TD>\n              <TD>Anti-CD195 (CCR5)/ Signal Transduction Modulators/ Viral Entry Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291052&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AIDSVAX gp120 B/E</a>\n              </TD>\n              <TD>Walter Reed Army Institute</TD>\n              <TD/>\n              <TD>Phase III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=680262&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Fostemsavir</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>HIV Attachment Inhibitors</TD>\n              <TD>Phase III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357687&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tubercin T-5</a>\n              </TD>\n              <TD>Artec</TD>\n              <TD/>\n              <TD>Phase III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=877379&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC-HIV</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789554&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">TV1.C gp120 Env/1086.C gp120 Env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=447155&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tucidinostat</a>\n              </TD>\n              <TD>Shenzhen Chipscreen Biosciences</TD>\n              <TD>Histone Deacetylase 1 (HDAC1) Inhibitors/ Histone Deacetylase 10 (HDAC10) Inhibitors/ Histone Deacetylase 11 (HDAC11) Inhibitors/ Histone Deacetylase 2 (HDAC2) Inhibitors/ Histone Deacetylase 3 (HDAC3) Inhibitors/ Epigenetic Modifier Modulators</TD>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=817657&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">2838232</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Maturation Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795510&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117</a>\n              </TD>\n              <TD>Rockefeller University</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=818039&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ABX-464</a>\n              </TD>\n              <TD>Abivax</TD>\n              <TD>Rev (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435169&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AGS-004</a>\n              </TD>\n              <TD>Argos Therapeutics</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=301127&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC E120TMG</a>\n              </TD>\n              <TD>Walter Reed Army Institute/ Sanofi Pasteur</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915290&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos.HIV</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925145&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos4.HIV</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=420655&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BIT-225</a>\n              </TD>\n              <TD>Biotron Ltd.</TD>\n              <TD>p7 Protein Ion Channel (HCV) Inhibitors/ Drugs Targeting Hepatitis C Virus (HCV) Proteins/ Drugs Targeting Human Immunodeficiency Virus 1 (HIV-1) Proteins/ Nucleocapsid p7 Protein (NCp7) Zinc Finger Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=854294&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bictegravir</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=351007&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Censavudine</a>\n              </TD>\n              <TD>Oncolys</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925146&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Clade C gp140</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392675&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-LIPO-5</a>\n              </TD>\n              <TD>ANRS</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395968&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Islatravir</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315937&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LC-002</a>\n              </TD>\n              <TD>Genetic Immunity</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=321990&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Lexgenleucel-T</a>\n              </TD>\n              <TD>VIRxSYS</TD>\n              <TD>Env (HIV-1) Expression Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=429800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-HIV62B</a>\n              </TD>\n              <TD>GeoVax Labs/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=758734&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVAmos</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=261662&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Peginterferon alfa-2a</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=419201&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rovafovir etalafenamide</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=692914&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SB-728-T</a>\n              </TD>\n              <TD>Sangamo Therapeutics</TD>\n              <TD>CCR5 Expression Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir/levonorgestrel</a>\n              </TD>\n              <TD>Eastern Virginia Medical School</TD>\n              <TD>Progesterone Receptor Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ Signal Transduction Modulators/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90485&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Triptorelin</a>\n              </TD>\n              <TD>ISR Immune System Regulation Holding</TD>\n              <TD>Gonadotropin-Releasing Hormone Receptor (GNRHR) Receptor Agonists/ Signal Transduction Modulators</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701671&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">UB-421</a>\n              </TD>\n              <TD>United BioPharma</TD>\n              <TD>Anti-CD4</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=736800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VAC-3S</a>\n              </TD>\n              <TD>InnaVirVax</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=833319&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VIH-TriMix-ARNm</a>\n              </TD>\n              <TD>IDIBAPS</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701846&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-01</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=375612&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV014-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=400981&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVDNA016-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=230535&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vorinostat</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Histone Deacetylase 6 (HDAC6) Inhibitors/ Histone Deacetylase 1 (HDAC1) Inhibitors/ Apoptosis Inducers/ Histone Deacetylase 2 (HDAC2) Inhibitors/ Histone Deacetylase 3 (HDAC3) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Epigenetic Modifier Modulators</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=871553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp140</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428304&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pGA2/JS7</a>\n              </TD>\n              <TD>GeoVax Labs/ National Institute Infectious Dis</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=932649&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">APH-0812</a>\n              </TD>\n              <TD>Aphios</TD>\n              <TD>Protein Kinase C (PKC) Activators/ Histone Deacetylase (HDAC) Inhibitors/ Epigenetic Modifier Modulators/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949733&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Abacavir/lamivudine/lopinavir/ritonavir</a>\n              </TD>\n              <TD>Drugs for Neglected Diseases Initiative</TD>\n              <TD>HIV-1 Protease Inhibitors/ Tumor Necrosis Factor Receptor Superfamily Member 6 (CD95)/PLC-gamma-1 Interaction Inhibitors/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Alcohol Dehydrogenase Inhibitors/ HIV Protease Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=754344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad35-GRIN</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=165188&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bryostatin 1</a>\n              </TD>\n              <TD>Aphios</TD>\n              <TD>Antimitotic Drugs/ Apoptosis Inducers/ Protein Kinase C (PKC) Modulators/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709822&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CEvac</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=814698&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cal-1</a>\n              </TD>\n              <TD>Calimmune</TD>\n              <TD>CCR5 Expression Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789679&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ChAdV63.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=280344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cytolin</a>\n              </TD>\n              <TD>CytoDyn</TD>\n              <TD>Anti-CD11a/CD18 (LFA-1)/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-C</a>\n              </TD>\n              <TD>EuroVacc Foundation</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805333&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-PT123</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=463084&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FIT-06</a>\n              </TD>\n              <TD>FIT Biotech</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949705&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GSK-3640254</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Viral Maturation Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1021356&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Gammora</a>\n              </TD>\n              <TD>Zion Medical</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1012613&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">INO-6145</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=684732&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ixazomib citrate</a>\n              </TD>\n              <TD>Takeda</TD>\n              <TD>Proteasome Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=476530&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Lefitolimod</a>\n              </TD>\n              <TD>Mologen</TD>\n              <TD>Toll-Like Receptor 9 (TLR9) Agonists/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=879292&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA HIV-B</a>\n              </TD>\n              <TD>ANRS</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=439426&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=981286&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Mosaic gp140</a>\n              </TD>\n              <TD>Janssen</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915332&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGDM1400</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=742023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGT-121</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709739&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-GP</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=132660&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Poly I:CLC</a>\n              </TD>\n              <TD>Oncovir</TD>\n              <TD>Toll-Like Receptor 3 (TLR3) Agonists/ Interferon Inducers/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795545&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">THV-01</a>\n              </TD>\n              <TD>Theravectys</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=471960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tat Oyi</a>\n              </TD>\n              <TD>Biosantech</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878049&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-07-523</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=882712&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">p55(gag)</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789680&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pSG2.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=837370&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074</a>\n              </TD>\n              <TD>National Institutes of Health (NIH)/ Rockefeller University</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=999467&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074-LS</a>\n              </TD>\n              <TD>Rockefeller University</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=974250&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117-LS</a>\n              </TD>\n              <TD>Rockefeller University</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923551&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AD4-EnvC150</a>\n              </TD>\n              <TD>PaxVax/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=769347&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALT-803</a>\n              </TD>\n              <TD>University of Minnesota</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661464&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.ENVA.01 HIV-1</a>\n              </TD>\n              <TD>Crucell/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991353&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-EnvCN54</a>\n              </TD>\n              <TD>Imperial College</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923549&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-mGag</a>\n              </TD>\n              <TD>PaxVax/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661445&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad5.ENVA.48HIV-1</a>\n              </TD>\n              <TD>Crucell/ National Institute Allergy Infect Dis/ Beth Israel Deaconess Medical Center</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=861091&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BG505 SOSIP.664 gp140 trimers</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=906491&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BMS-986197</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Anti-CD4/ Anti-gp41</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=899722&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CH505TF</a>\n              </TD>\n              <TD>Duke University</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=741669&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CN54gp140</a>\n              </TD>\n              <TD>Medical Research Council (MRC)/ Imperial College</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=687890&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DCV3</a>\n              </TD>\n              <TD>Hospital Clinic</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923518&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA CON-S env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923534&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Mosaic env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923514&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Nat-B env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=821845&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA.HTI/MVA.HTI</a>\n              </TD>\n              <TD>Aelix Therapeutics</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=675477&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DS-003</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Glycoprotein 120 (gp120) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/levonorgestrel</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Progesterone Receptor Agonists/ Estrogen Receptor (ER) Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=135177&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Deferiprone</a>\n              </TD>\n              <TD>Apotex</TD>\n              <TD>Cytochrome P450 CYP4F2 Inhibitors/ Chelating Agents</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=900317&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FLSC</a>\n              </TD>\n              <TD>National Institutes of Health (NIH)/ Profectus BioSciences</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1001453&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GS-6207</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>Capsid Protein p24 Assembly (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=972399&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GS-9722</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1014519&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GSK-3810109</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=658522&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Griffithsin</a>\n              </TD>\n              <TD>Population Council</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719339&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV MAG pDNA</a>\n              </TD>\n              <TD>Profectus BioSciences</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=783050&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIVAX</a>\n              </TD>\n              <TD>University of Miami (UM)/ GeneCure</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528</a>\n              </TD>\n              <TD>ImQuest BioSciences</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Entry Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=738992&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">KM-023</a>\n              </TD>\n              <TD>Kainos Medicine</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=927219&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LFn-p24B/C</a>\n              </TD>\n              <TD>Vaccine Technologies (VTI)</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=901797&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MB-66</a>\n              </TD>\n              <TD>LeafBio</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=900637&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MGD-014</a>\n              </TD>\n              <TD>MacroGenics</TD>\n              <TD>Anti-CD3/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ HIV Integrase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=985113&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-4250</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=965041&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8504</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=853669&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8507</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1015995&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8527</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037890&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8558</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006618&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8583</a>\n              </TD>\n              <TD>Merck Sharp &amp; Dohme (MSD)</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435114&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CMDR</a>\n              </TD>\n              <TD>Walter Reed Army Institute</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991354&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CN54</a>\n              </TD>\n              <TD>Imperial College</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037346&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv3</a>\n              </TD>\n              <TD>University North Carolina, Chapel Hill</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037349&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv4</a>\n              </TD>\n              <TD>University North Carolina, Chapel Hill</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=308599&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MYM-V101</a>\n              </TD>\n              <TD>Mymetics</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=781084&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MazF-T cells</a>\n              </TD>\n              <TD>TaKaRa Bio/ University of Pennsylvania</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805334&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NYVAC-HIV-PT1</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719391&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PC-1005</a>\n              </TD>\n              <TD>Population Council</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ ICAM1 Expression Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=399012&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PPL-100</a>\n              </TD>\n              <TD>TaiMed Biologics</TD>\n              <TD>HIV Protease Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=469002&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-G</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals/ Walter Reed Army Institute</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915203&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax DNA plasmid HIV-1 nef/tat/vif,env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915206&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax VSV IN HIV envC</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=459875&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RO-0335</a>\n              </TD>\n              <TD>Viriom</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368000&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RPI-MN</a>\n              </TD>\n              <TD>ReceptoPharm</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=456307&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI DNA-C2</a>\n              </TD>\n              <TD>South African AIDS Vaccine Initiative/ University of Witwatersrand/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=409360&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI MVA-C</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=850686&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SB-728mR-HSPC</a>\n              </TD>\n              <TD>Sangamo Therapeutics</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=939977&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Sondashi Formula</a>\n              </TD>\n              <TD>Tropical Diseases Research Centre</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=874960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir disoproxil orotate</a>\n              </TD>\n              <TD>Dong-A ST</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=451282&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VLP-TBI-pcDNA-TCI</a>\n              </TD>\n              <TD>State Res Cent Virology Biotech VECTOR</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=986918&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVAAV070-00-GT</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-CD4</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455063&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-027-00-VP</a>\n              </TD>\n              <TD>GenVec/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455064&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-038-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923291&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-053-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923293&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-054-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=785468&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB080-00-AB</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006069&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB091-00-AB</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-gp41</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1009345&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB095-00-AB</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-gp41</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1030241&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVRGP096-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=975954&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC01/PGDM1400-10E8v4</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-gp120/ Anti-gp41</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=720406&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vesatolimod</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>Toll-Like Receptor 7 (TLR7) Agonists/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006783&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">eOD-GT8 60mer</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993174&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">env (A,B,C,A/E)/gag (C) DNA vaccine</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993181&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120 (A,B,C,A/E) protein vaccine</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120-NefTat/AS01B</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987944&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp145 C.6980</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=774420&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rAAV1-PG9DP</a>\n              </TD>\n              <TD>Children&apos;s Hospital of Philadelphia</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=745516&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rAd5 EnvB</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=467570&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rVSVIN-N4CT9-Gag1</a>\n              </TD>\n              <TD>Profectus BioSciences</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878268&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rcAd26.MOS1.HIV-Env</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative/ Beth Israel Deaconess Medical Center</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357275&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">recombinant o-gp140/MF59 adjuvant</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=882449&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">882449</a>\n              </TD>\n              <TD>Fred Hutchinson Cancer Research Center</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027125&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027125</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027126&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027126</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027124&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027124</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027123&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027123</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868222&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NOV-1003</a>\n              </TD>\n              <TD>Novicol</TD>\n              <TD/>\n              <TD>Clinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=963159&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">963159</a>\n              </TD>\n              <TD>307th Hospital People&apos;s Liberation Army</TD>\n              <TD/>\n              <TD>Clinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=413821&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5(R)-Hydroxytriptolide</a>\n              </TD>\n              <TD>Shanghai Pharmaceuticals</TD>\n              <TD>NOS2 Expression Inhibitors</TD>\n              <TD>IND Filed</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=417670&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SHIV vaccine</a>\n              </TD>\n              <TD>IGXBio</TD>\n              <TD/>\n              <TD>IND Filed</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=773475&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5P12-RANTES</a>\n              </TD>\n              <TD>Orion Biotechnology</TD>\n              <TD>Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=952917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AG-1105</a>\n              </TD>\n              <TD>American Gene Technologies International</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=990227&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AGT103-T</a>\n              </TD>\n              <TD>American Gene Technologies International</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=906488&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BMS-986173</a>\n              </TD>\n              <TD>Bristol-Myers Squibb</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=928135&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BiIA-SG</a>\n              </TD>\n              <TD>University of Hong Kong</TD>\n              <TD>Anti-CD4/ Anti-gp120</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=788997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CS-TATI-1</a>\n              </TD>\n              <TD/>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931208&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cholesterol-PIE12-2-trimer with PEG32 fourth-arm spacer</a>\n              </TD>\n              <TD>Navigen</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1035036&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ConM SOSIP</a>\n              </TD>\n              <TD>Universiteit Van Amsterdam/ Imperial College</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038073&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-11</a>\n              </TD>\n              <TD>Enochian BioSciences</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038088&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-12</a>\n              </TD>\n              <TD>Enochian BioSciences</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=843471&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GI-2010</a>\n              </TD>\n              <TD>GlobeImmune</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915342&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GS-986</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>Toll-Like Receptor 7 (TLR7) Agonists/ Signal Transduction Modulators</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=474274&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HiviCide-1</a>\n              </TD>\n              <TD>NanoViricides</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=736650&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leukotoxin</a>\n              </TD>\n              <TD>Actinobac Biomed</TD>\n              <TD>Integrin alphaLbeta2 (LFA-1) Ligands/ Signal Transduction Modulators</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1003524&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-BN HIV</a>\n              </TD>\n              <TD>Janssen Pharmaceuticals/ Bavarian Nordic</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868061&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">T-169</a>\n              </TD>\n              <TD>TGV-Laboratories</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=954592&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VS-2-370</a>\n              </TD>\n              <TD>Virostatics</TD>\n              <TD>Cyclin-Dependent Kinase 6 (CDK6) Inhibitors/ Cyclin-Dependent Kinase 4 (CDK4) Inhibitors/ Cyclin-Dependent Kinase 9 (CDK9) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1029754&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vacc-CRX</a>\n              </TD>\n              <TD>Bionor</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1017477&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1017477</a>\n              </TD>\n              <TD>University of Pennsylvania</TD>\n              <TD>Drugs Targeting T-Cell Surface Glycoprotein CD4</TD>\n              <TD>Preclinical</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References/>\n  </Section>\n</Section>\n<Section sectionId=\"4636\" modifiedDate=\"20160801112125\">\n  <Title>Targets for Therapeutic Intervention</Title>\n  <Body>\n    <para>For an overview of validated therapeutic targets for this indication, consult the targetscape below. The targetscape shows an overall cellular and molecular landscape or comprehensive network of connections among the current therapeutic targets for the treatment of the condition and their biological actions. An arrow indicates a positive effect; a dash indicates a negative effect. Gray or lighter symbols are protein targets that are not validated (i.e., not under active development [UAD]). Pink text boxes with red borders indicate validated gene targets. Yellow text boxes are gene targets not UAD. Purple and pink text boxes indicate extracellular and intracellular effects, respectively. Green text boxes indicate a related disease/condition/symptom. For in-depth information on a specific target or mechanism of action, see the corresponding section in this report.\n\n</para>\n  </Body>\n  <References/>\n</Section>\n</Sections>"}]}}"},{"mime":"TXT","content":"{"RetrieveDiseaseBriefingOutput":{"DiseaseBriefings":[{"id":"1","DiseaseTitle":"HIV and AIDS","DatePublished":"2001-07-25T00:00:00Z","DiseaseInfo":"<Sections><Section sectionId=\"397\" modifiedDate=\"20181214085055\">\n  <Title>Facts about HIV and AIDS</Title>\n  <Body>\n    <para>The human immunodeficiency virus (HIV) is a retrovirus belonging to the Retroviridae family, lentivirus genus, which was first identified in 1983. Initially the virus was designated human T-cell lymphotrophic virus type III (HTLV-III) or lymphadenopathy-associated virus (LAV) (<REF id=\"1162638\">De Clercq, E., 2007</REF>). There are two main forms of the virus that cause human disease: HIV-1 and HIV-2. These forms are similar in their genetic structure and modes of transmission, although their DNA sequences differ by as much as 40% (<REF id=\"1199753\">Cohen, M.S. et al., 2008</REF>). HIV-2 has historically be considered less virulent (<REF id=\"2552673\">Azevedo-Pereira, J.M. and Santos-Costa, Q., 2016</REF>), progressing to AIDS less frequently and associated with lower mortality; however, a long-term study comparing HIV-1- and HIV-2-infected subjects in Guinea-Bissau suggests that HIV-2 is more pathogenic and deadly than previously believed (<REF id=\"2931416\">Esbjörnsson, J. et al., 2018</REF>).\n\n\n\n</para>\n    <para>Untreated, HIV causes the acquired immune deficiency syndrome (AIDS), a gradual deterioration of the immune system, leading to opportunistic infections and ultimately, death. The outlook for HIV-infected individuals has improved significantly with the introduction in 1996 of highly active antiretroviral therapy (HAART), which--if initiated early and taken correctly--can transform the disease from a life sentence to a chronic pathology (<REF id=\"1955205\">Le Douce, V. et al., 2012</REF>; <REF id=\"2209456\">Maartens, G. et al., 2014</REF>).\n\n</para>\n    <para>The World Health Organization (WHO) estimates that there were approximately 36.9 million adults and children living with HIV/AIDS worldwide in 2017, but that only 75% of HIV-positive individuals worldwide were aware of their status, and even fewer were receiving antiretroviral drug therapy (<a href=\"http://www.who.int/hiv/data/en/\">HIV/AIDS -- data and statistics (World Health Organization)</a>, consulted December 3, 2018). The Joint United Nations Programme on HIV/AIDS (UNAIDS)  has set the ambitious goal of tackling underdiagnosis and undertreatment of HIV, and thus of ending the global AIDS epidemic, by the year 2030 (<REF id=\"2552676\">Harries, A.D. et al., 2016</REF>; <REF id=\"2949697\">Medlock, J. et al., 2017</REF>). If this goal is successfully achieved, an estimated 73% of all people in the world with HIV will have undetectable viral levels. At this level of viral suppression, the trajectory of the AIDS epidemic would hit an inflection point, no longer reaching pandemic proportions (<REF id=\"2948271\">Fauci, A.S., 2017</REF>). The cost-benefit ratio of such an approach is significant: each U.S. dollar invested in a fast-track version of this HIV elimination strategy will reap USD 6.44 in economic benefits (<REF id=\"2944307\">Lamontagne, E. et al., 2018</REF>). \n\n</para>\n  </Body>\n  <References>\n    <Reference id=\"1162638\" medline_id=\"18049474\">\n      <Title>The design of drugs for HIV and HCV</Title>\n      <SourceTitle>Nature Reviews Drug Discovery</SourceTitle>\n      <PubMedTitle>Nat Rev Drug Discov</PubMedTitle>\n      <Volume>6</Volume>\n      <Issue>12</Issue>\n      <Page>1001</Page>\n      <Year>2007</Year>\n      <Authors>\n        <Author>De Clercq, E.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"1199753\" medline_id=\"18382737\">\n      <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic</Title>\n      <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n      <PubMedTitle>J Clin Invest</PubMedTitle>\n      <Volume>118</Volume>\n      <Issue>4</Issue>\n      <Page>1244</Page>\n      <Year>2008</Year>\n      <Authors>\n        <Author>Cohen, M.S.</Author>\n        <Author>Hellmann, N.</Author>\n        <Author>Levy, J.A.</Author>\n        <Author>Decock, K.</Author>\n        <Author>Lange, J.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"1955205\" medline_id=\"22294645\">\n      <Title>Achieving a cure for HIV infection: Do we have reasons to be optimistic?</Title>\n      <SourceTitle>Journal of Antimicrobial Chemotherapy</SourceTitle>\n      <PubMedTitle>J Antimicrob Chemother</PubMedTitle>\n      <Volume>67</Volume>\n      <Issue>5</Issue>\n      <Page>1063</Page>\n      <Year>2012</Year>\n      <Authors>\n        <Author>Le Douce, V.</Author>\n        <Author>Janossy, A.</Author>\n        <Author>Hallay, H.</Author>\n        <Author>Ali, S.</Author>\n        <Author>Riclet, R.</Author>\n        <Author>Rohr, O.</Author>\n        <Author>Schwartz, C.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2209456\" medline_id=\"24907868\">\n      <Title>HIV infection: Epidemiology, pathogenesis, treatment, and prevention</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>384</Volume>\n      <Issue>9939</Issue>\n      <Page>258</Page>\n      <Year>2014</Year>\n      <Authors>\n        <Author>Maartens, G.</Author>\n        <Author>Celum, C.</Author>\n        <Author>Lewin, S.R.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2552673\" medline_id=\"26936760\">\n      <Title>HIV interaction with human host: HIV-2 as a model of a less virulent infection</Title>\n      <SourceTitle>AIDS Reviews</SourceTitle>\n      <PubMedTitle>AIDS Rev</PubMedTitle>\n      <Volume>18</Volume>\n      <Issue>1</Issue>\n      <Page>44</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Azevedo-Pereira, J.M.</Author>\n        <Author>Santos-Costa, Q.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2552676\" medline_id=\"27703672\">\n      <Title>Ending the HIV/AIDS epidemic in low- and middle-income countries by 2030: Is it possible?</Title>\n      <SourceTitle>F1000Research</SourceTitle>\n      <PubMedTitle>F1000Res</PubMedTitle>\n      <Volume>5</Volume>\n      <Page>2328</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Harries, A.D.</Author>\n        <Author>Suthar, A.B.</Author>\n        <Author>Takarinda, K.C.</Author>\n        <Author>Tweya, H.</Author>\n        <Author>Kyaw, N.T.</Author>\n        <Author>Tayler-Smith, K.</Author>\n        <Author>Zachariah, R.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2931416\" medline_id=\"30392769\">\n      <Title>Long-term follow-up of HIV-2-related AIDS and mortality in Guinea-Bissau: A prospective open cohort study</Title>\n      <SourceTitle>The Lancet. HIV</SourceTitle>\n      <PubMedTitle>Lancet HIV</PubMedTitle>\n      <Volume>6</Volume>\n      <Issue>1</Issue>\n      <Page>E25</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Esbjörnsson, J.</Author>\n        <Author>Månsson, F.</Author>\n        <Author>Kvist, A.</Author>\n        <Author>et al.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2944307\" medline_id=\"30497785\">\n      <Title>The economic returns of ending the AIDS epidemic as a public health threat</Title>\n      <SourceTitle>Health Policy</SourceTitle>\n      <PubMedTitle>Health Policy</PubMedTitle>\n      <Volume>123</Volume>\n      <Issue>1</Issue>\n      <Page>104</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Lamontagne, E.</Author>\n        <Author>Over, M.</Author>\n        <Author>Stover, J.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2948271\" medline_id=\"29052689\">\n      <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic</Title>\n      <SourceTitle>JAMA - Journal of the American Medical Association</SourceTitle>\n      <PubMedTitle>JAMA</PubMedTitle>\n      <Volume>318</Volume>\n      <Issue>16</Issue>\n      <Page>1535</Page>\n      <Year>2017</Year>\n      <Authors>\n        <Author>Fauci, A.S.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2949697\" medline_id=\"28320938\">\n      <Title>Effectiveness of UNAIDS targets and HIV vaccination across 127 countries</Title>\n      <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)</SourceTitle>\n      <PubMedTitle>Proc Natl Acad Sci U S A</PubMedTitle>\n      <Volume>114</Volume>\n      <Issue>15</Issue>\n      <Page>4017</Page>\n      <Year>2017</Year>\n      <Authors>\n        <Author>Medlock, J.</Author>\n        <Author>Pandey, A.</Author>\n        <Author>Parpia, A.S.</Author>\n        <Author>Tang, A.</Author>\n        <Author>Skrip, L.A.</Author>\n        <Author>Galvani, A.P.</Author>\n      </Authors>\n    </Reference>\n  </References>\n  <Section sectionId=\"5848\" modifiedDate=\"20181213034904\">\n    <Title>The HIV Virus</Title>\n    <Body>\n      <para>The human immunodeficiency virus, or HIV, is a small (100 nm in diameter) spherical enveloped virus containing two copies of a 9-kb single-stranded RNA genome encoding 15 proteins. The mature virus particle is surrounded by a single membrane or envelope, which contains several spikes formed by a membrane protein complex, consisting of the transmembrane glycoprotein gp41, non-covalently associated with the protein gp120. The viral matrix (MA) protein lines the inside of the membrane whereas other proteins are associated with the core, containing the two 9-kb genomic RNA molecules, and whose main constituent is the capsid (CA) protein. There are two main types: HIV-1, which is found worldwide, and HIV-2, which was first detected in West Africa but has since been found in other parts of the world (e.g., Portugal, France and India) (<REF id=\"1689288\">Campbell-Yesufu, O.T. and Gandhi, R.T., 2011</REF>; <REF id=\"2947850\">Sharp, P.M. and Hahn, B.H., 2011</REF>; <REF id=\"2931416\">Esbjörnsson, J. et al., 2018</REF>). The types are distinguished on the basis of serological and sequence criteria and small differences in protein composition, such as the presence of an additional accessory protein Vpx, and the absence of other accessory proteins in HIV-2 (<REF id=\"2872874\">Mahdi, M. et al., 2018</REF>).\n\n\n\n</para>\n      <para>The host range of HIV is limited to human beings. Although chimpanzees can be infected, the clinical course of the disease in these apes is different and infection is not fatal. Other species can be infected by related viruses that cause AIDS-like syndromes; these include simian immunodeficiency virus (SIV), which infects African monkeys, and feline immunodeficiency virus (FIV), which infects cats. HIV-1 evolved following zoonotic transmission from nonhuman primates at the beginning of the 20th century (<REF id=\"2947850\">Sharp, P.M. and Hahn, B.H., 2011</REF>; <REF id=\"2947496\">Hemelaar, J. et al., 2019</REF>). The less prevalent HIV-2 likely originated from an SIV strain infecting sooty mangabeys (<REF id=\"2710609\">Schmitt, K. et al., 2017</REF>). The genetically related strains of HIV-1 causing the global AIDS pandemic belong to the group M (main). Other groups have been characterized (N, O), but are much less prevalent. The group M viruses are further subdivided into 9 clades (A-D, F-H, J and K) which differ in their viral DNA by approximately 15-20%. Clade B is most common in North America and Europe, although diversity in these populations is increasing (<REF id=\"2947851\">Siemieniuk, R.A. et al., 2013</REF>). The African continent has the widest diversity of HIV subtypes in circulation, with predominance of clades A, C and D as well as their recombinants (<REF id=\"2947852\">Kamali, A. et al., 2015</REF>). Clade C was responsible for 46.6% of all new HIV-1 infections diagnosed worldwide from 2010-2015 (<REF id=\"2947496\">Hemelaar, J. et al., 2019</REF>). Over the course of the global HIV pandemic, new variants of the retrovirus continue to emerge. In geographic areas in which several genetic forms of the virus coexist, the pivotal role of recombination as a driving force in the emergence of novel genetic forms of HIV has become evident (<REF id=\"2947496\">Hemelaar, J. et al., 2019</REF>). \n\n<FREETABLE id=\"296\"><![CDATA[  <TABLE WIDTH=\"483\" CELLSPACING=0 CELLPADDING=4 BORDER>\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B>Important RNA viruses and the diseases they produce in humans</B></FONT></TD>      \n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B>Family/Characteristics</B></TD>\n      <TD WIDTH=\"143\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B>Viruses</B></TD>\n      <TD WIDTH=\"190\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B>Diseases</B></TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Orthomyxoviruses (Orthomyxoviridae)  Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; segmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Influenza A and B virus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Upper respiratory infection, croup</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Paramyxoviruses (Paramyxoviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; nonsegmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Parainfluenza 1-3 virus<br><br>Respiratory syncytial virus<br><br>Measles virus<br><br>Mumps</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Upper respiratory infection, croup<br><br>Upper respiratory infection, croup<br><br>Measles<br><br>Aseptic meningitis</TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Coronaviruses (Coronaviridae) Single-stranded RNA,enveloped (No DNA step in replication; positive-sense genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Human coronaviruses</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Upper respiratory infection</TD>\n      </TR>\n\n      \n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Rhabdoviruses (Rhabdoviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; nonsegmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Rabies virus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Rabies</TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Picornaviruses (Picornaviridae) Single-stranded RNA, nonenveloped</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Rhinoviruses<br><br>Hepatitis A virus<br><br>Enteroviruses:<br> - Polioviruses<br>- Coxsackie A24 viruses<br>- Coxsackie B viruses<br>- Coxsackie B1-5 viruses<br>- Coxsackie A9 viruses<br>- Echoviruses</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Common cold<br><br>Hepatitis<br><br><br>Paralysis<br>Acute hemorrhagic conjunctivitis<br>Myocarditis, pericarditis<br>Aseptic meningitis<br>Aseptic meningitis<br>Aseptic meningitis, encephalitis</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Caliciviruses (Calciviridae) Single-stranded RNA, nonenveloped</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Norwalk virus<br><br></TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gastroenteritis<br><br></TD>\n      </TR>\n\n\n\n<TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Hepeviruses (Hepeviridae) Single-stranded RNA, nonenveloped</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Hepatitis E</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Hepatitis</TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Togaviruses (Togaviridae) Single-stranded RNA, enveloped (No DNA step in replication; positive-sense genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Alphaviruses (Group A arboviruses)<br><br>Rubivirus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Encephalitis, hemorrhagic fever, chikungunya<br><br>Rubella</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Flaviviruses (Flaviviridae) Single-stranded RNA, enveloped (No DNA step in replication; positive-sense genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Group B arboviruses<br><br>Hepatitis C virus<br><br>Dengue virus<br><br>Zika virus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Encephalitis, hemorrhagic fever<br><br>Hepatitis<br><br>Dengue fever<br><br>Zika</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bunyaviruses (Bunyaviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; segmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Some arboviruses<br><br>Hantavirus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Encephalitis, hemorrhagic fevers<br><br>Fever, renal involvement</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reoviruses (Reoviridae) Double-stranded RNA, nonenveloped</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Human rotaviruses</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gastroenteritis</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Arenaviruses (Arenaviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome;segmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Lymphocytic choriomeningitis (LCM virus)<br><br>Lassa virus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Meningitis<br><br><br>Hemorrhagic fever</TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Retroviruses (Retroviridae) Single-stranded RNA, enveloped (DNA step in replication)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      HTLV-I, HTLV-II<br><br>HIV-1, HIV-2</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      T cell leukemia, lymphoma, paresis<br><br>AIDS</TD>\n      </TR>\n\n\n\n      <TR>\n      <TD WIDTH=\"150\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Filoviruses (Filoviridae) Single-stranded RNA, enveloped (No DNA step in replication; negative-sense genome; nonsegmented genome)</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Marburg virus<br><br>Ebola virus</TD>\n      <TD WIDTH=\"190\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Marburg disease<br><br>Ebola hemorrhagic fever</TD>\n      </TR>\n\n      </TABLE>\n]]></FREETABLE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1689288\" medline_id=\"21367732\">\n        <Title>Update on human immunodeficiency virus (HIV)-2 infection</Title>\n        <SourceTitle>Clinical Infectious Diseases</SourceTitle>\n        <PubMedTitle>Clin Infect Dis</PubMedTitle>\n        <Volume>52</Volume>\n        <Issue>6</Issue>\n        <Page>780</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Campbell-Yesufu, O.T.</Author>\n          <Author>Gandhi, R.T.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2710609\" medline_id=\"28750321\">\n        <Title>Modeling the evolution of SIV sooty mangabey progenitor virus towards HIV-2 using humanized mice</Title>\n        <SourceTitle>Virology</SourceTitle>\n        <PubMedTitle>Virology</PubMedTitle>\n        <Volume>510</Volume>\n        <Page>175</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Schmitt, K.</Author>\n          <Author>Kumar, D.M.</Author>\n          <Author>Curlin, J.</Author>\n          <Author>Remling-Mulder, L.</Author>\n          <Author>Stenglein, M.</Author>\n          <Author>O&apos;Connor, S.</Author>\n          <Author>Marx, P.</Author>\n          <Author>Akkina, R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2872874\" medline_id=\"29743354\">\n        <Title>Inhibitory effects of HIV-2 Vpx on replication of HIV-1</Title>\n        <SourceTitle>Journal of Virology</SourceTitle>\n        <PubMedTitle>J Virol</PubMedTitle>\n        <Volume>92</Volume>\n        <Issue>14</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Mahdi, M.</Author>\n          <Author>Szojka, Z.</Author>\n          <Author>Mótyán, J.A.</Author>\n          <Author>Tozsér, J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2931416\" medline_id=\"30392769\">\n        <Title>Long-term follow-up of HIV-2-related AIDS and mortality in Guinea-Bissau: A prospective open cohort study</Title>\n        <SourceTitle>The Lancet. HIV</SourceTitle>\n        <PubMedTitle>Lancet HIV</PubMedTitle>\n        <Volume>6</Volume>\n        <Issue>1</Issue>\n        <Page>E25</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Esbjörnsson, J.</Author>\n          <Author>Månsson, F.</Author>\n          <Author>Kvist, A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947496\" medline_id=\"30509777\">\n        <Title>Global and regional molecular epidemiology of HIV-1, 1990-2015: A systematic review, global survey, and trend analysis</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>19</Volume>\n        <Issue>2</Issue>\n        <Page>143</Page>\n        <Year>2019</Year>\n        <Authors>\n          <Author>Hemelaar, J.</Author>\n          <Author>Elangovan, R.</Author>\n          <Author>Yun, J.</Author>\n          <Author>Dickson-Tetteh, L.</Author>\n          <Author>Fleminger, I.</Author>\n          <Author>Kirtley, S.</Author>\n          <Author>Williams, B.</Author>\n          <Author>Gouws-Williams, E.</Author>\n          <Author>Ghys, P.D.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947850\" medline_id=\"22229120\">\n        <Title>Origins of HIV and the AIDS pandemic</Title>\n        <SourceTitle>Cold Spring Harbor Perspectives in Medicine</SourceTitle>\n        <PubMedTitle>Cold Spring Harb Perspect Med</PubMedTitle>\n        <Volume>1</Volume>\n        <Issue>1</Issue>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Sharp, P.M.</Author>\n          <Author>Hahn, B.H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947851\" medline_id=\"24421804\">\n        <Title>Increasing HIV subtype diversity and its clinical implications in a sentinel North American population</Title>\n        <SourceTitle>The Canadian Journal of Infectious Diseases &amp; Medical Microbiology</SourceTitle>\n        <PubMedTitle>Can J Infect Dis Med Microbiol</PubMedTitle>\n        <Volume>24</Volume>\n        <Issue>2</Issue>\n        <Page>69</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Siemieniuk, R.A.</Author>\n          <Author>Beckthold, B.</Author>\n          <Author>Gill, M.J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947852\" medline_id=\"25602351\">\n        <Title>Creating an African HIV clinical research and prevention trials network: HIV prevalence, incidence and transmission</Title>\n        <SourceTitle>PLoS ONE</SourceTitle>\n        <PubMedTitle>PLoS One</PubMedTitle>\n        <Volume>10</Volume>\n        <Issue>1</Issue>\n        <Year>2015</Year>\n        <Authors>\n          <Author>Kamali, A.</Author>\n          <Author>Price, M.A.</Author>\n          <Author>Lakhi, S.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"2291\" modifiedDate=\"20190502091557\">\n    <Title>Transmission</Title>\n    <Body>\n      <para>HIV-1 transmission occurs most commonly through sexual intercourse, with heterosexual intercourse the route of transmission 85% of the time, and the likelihood of contagion closely correlates with the number of partners. AIDS can also be spread by blood transfusion and other forms of contact between infected blood, and the blood or the mucosa of another person, such as needle sharing in drug addicts. In the early years of the pandemic, transmission to hemophiliacs and polytransfused patients receiving blood from high-risk donors was documented; strict controls have since been introduced to minimize this route of infection. Vertical transmission also occurs: infection of the fetus or newborn from mothers with HIV is possible during pregnancy, childbirth or breastfeeding (<REF id=\"1135290\">Simon, V. et al., 2006</REF>). Within the hospital setting, outbreaks of HIV-1 infection have also been linked to nosocomial transmission; In 2016, a potential HIV outbreak in China was caused by lymphocyte immunotherapy involving a HIV-positive donor (<REF id=\"2989517\">Pan, X. et al., 2018</REF>). In each of these scenarios, the efficiency of disease transmission is highly dependent upon the concentration of the virus and of virus-infected cells within the infected host, or index case, as well as the susceptibility of the recipient (<REF id=\"1135290\">Simon, V. et al., 2006</REF>; <REF id=\"1199753\">Cohen, M.S. et al., 2008</REF>). \n\n</para>\n      <para>Results from a research collaboration led by scientists in Germany may help explain why the vast majority of HIV infections are transmitted via sexual intercourse. In screening a protein library derived from human semen, the scientists discovered a seminal fluid component that greatly enhanced HIV infection. This factor is an amyloid fibril formed in large numbers by naturally occurring fragments of prostatic acidic phosphatase (PAP), a protein secreted by the prostate gland. Structural analysis of these fibrils revealed that they can sequester HIV and facilitate its binding and fusion to target cells, thereby raising the viral titer by 50- to as high as 100,000-fold. Thus, the PAP fibrils have been named Semen-derived Enhancer of Virus Infection (SEVI). In vitro, incubation with physiological levels of SEVI enhanced HIV infection of macrophages, T cells and human tonsillar tissue. Beyond promoting cellular infection at the site of exposure, the presence of SEVI in co-cultures of T cells with infected dendritic or epithelial cells increased the incidence of intercellular infection. Studies in transgenic rats showed that animals injected with SEVI-treated HIV had five-fold higher viral cDNA levels than those animals injected with HIV alone. Notably, the scientists found that if PAP peptides do not assemble into aggregates or into amyloid fibers they are unable to enhance viral transmission. Thus, these peptides may present a novel target for HIV prevention (<REF id=\"1165021\">Münch, J. et al., 2007</REF>).\n\n</para>\n      <para>The relative reproduction number (R0) of HIV, an indicator of the ability of the virus to spread, is only slightly greater than 1 in most populations. In order for any infection to spread, the relative reproductive rate must be &gt;1 (meaning that each infected individual must infect more than one other person, on average). In healthy persons, this means that the chance of contracting HIV via heterosexual intercourse is approximately 1 in 1,000 per sexual act (<REF id=\"1065930\">Short, R.V., 2006</REF>). R0 is higher in high-risk groups such as injection-drug users, men who have sex with men, and female sex workers, as well as in healthy individuals living in populations (transmission networks) with a large concentration of high-risk subgroups (<REF id=\"2947861\">Williams, B.G. and Dye, C., 2018</REF>). </para>\n    </Body>\n    <References>\n      <Reference id=\"1065930\" medline_id=\"16627296\">\n        <Title>New ways of preventing HIV infection: Thinking simply, simply thinking</Title>\n        <SourceTitle>Philosophical Transactions - Royal Society. Biological Sciences</SourceTitle>\n        <PubMedTitle>Philos Trans R Soc Lond B Biol Sci</PubMedTitle>\n        <Volume>361</Volume>\n        <Issue>1469</Issue>\n        <Page>811</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Short, R.V.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1135290\" medline_id=\"16890836\">\n        <Title>HIV/AIDS epidemiology, pathogenesis, prevention, and treatment</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>368</Volume>\n        <Issue>9534</Issue>\n        <Page>489</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Simon, V.</Author>\n          <Author>Ho, D.D.</Author>\n          <Author>Abdool Karim, Q.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1165021\" medline_id=\"18083097\">\n        <Title>Semen-derived amyloid fibrils drastically enhance HIV infection</Title>\n        <SourceTitle>Cell</SourceTitle>\n        <PubMedTitle>Cell</PubMedTitle>\n        <Volume>131</Volume>\n        <Issue>6</Issue>\n        <Page>1059</Page>\n        <Year>2007</Year>\n        <Authors>\n          <Author>Münch, J.</Author>\n          <Author>Rücker, E.</Author>\n          <Author>Ständker, L.</Author>\n          <Author>Adermann, K.</Author>\n          <Author>Goffinet, C.</Author>\n          <Author>Schindler, M.</Author>\n          <Author>Wildum, S.</Author>\n          <Author>Chinnadurai, R.</Author>\n          <Author>Rajan, D.</Author>\n          <Author>Specht, A.</Author>\n          <Author>Giménez-Gallego, G.</Author>\n          <Author>Sánchez, P.C.</Author>\n          <Author>Fowler, D.M.</Author>\n          <Author>Koulov, A.</Author>\n          <Author>Kelly, J.W.</Author>\n          <Author>Mothes, W.</Author>\n          <Author>Grivel, J.C.</Author>\n          <Author>Margolis, L.</Author>\n          <Author>Keppler, O.T.</Author>\n          <Author>Forssmann, W.G.</Author>\n          <Author>Kirchhoff, F.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1199753\" medline_id=\"18382737\">\n        <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic</Title>\n        <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n        <PubMedTitle>J Clin Invest</PubMedTitle>\n        <Volume>118</Volume>\n        <Issue>4</Issue>\n        <Page>1244</Page>\n        <Year>2008</Year>\n        <Authors>\n          <Author>Cohen, M.S.</Author>\n          <Author>Hellmann, N.</Author>\n          <Author>Levy, J.A.</Author>\n          <Author>Decock, K.</Author>\n          <Author>Lange, J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947861\" medline_id=\"29137859\">\n        <Title>Dynamics and control of infections on social networks of population types</Title>\n        <SourceTitle>Epidemics</SourceTitle>\n        <PubMedTitle>Epidemics</PubMedTitle>\n        <Volume>23</Volume>\n        <Page>11</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Williams, B.G.</Author>\n          <Author>Dye, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2989517\" medline_id=\"30457542\">\n        <Title>Outbreak of HIV infection linked to nosocomial transmission, China, 2016-2017</Title>\n        <SourceTitle>Emerging Infectious Diseases </SourceTitle>\n        <PubMedTitle>Emerg Infect Dis</PubMedTitle>\n        <Volume>24</Volume>\n        <Issue>12</Issue>\n        <Page>2141</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Pan, X.</Author>\n          <Author>Jiang, J.</Author>\n          <Author>Ma, Q.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"406\" modifiedDate=\"20181213035649\">\n    <Title>The Viral Life Cycle</Title>\n    <Body>\n      <para>The life cycle of the HIV virus is exceptionally well characterized (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014</REF>). It begins when HIV enters its host cell through membrane fusion. The viral gp120/gp41 membrane glycoprotein complex first binds to the cellular transmembrane protein CD4, present on T helper cells and macrophages. Binding induces a conformational change in gp120/gp41, leading to binding of yet another cellular transmembrane glycoprotein (&quot;coreceptor&quot;), typically a molecule belonging to the class of chemokine receptors. For primary virus strains transmitted from one patient to the next, this coreceptor is nearly always CCR5; evolution of the virus in the body of an infected patient gives rise to strains that recognize predominantly the coreceptor CXCR4 or that have dual or mixed tropism (<REF id=\"1789081\">Gilliam, B.L. et al., 2011</REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018</REF>). Other coreceptors have also been described.\n\n\n\n</para>\n      <para>Coreceptor binding induces another conformational change in gp120/gp41, which then leads to fusion of the viral and the host cell membrane, delivering the viral core into the cytoplasm (<REF id=\"1505539\">Tilton, J.C. and Doms, R.W., 2010</REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018</REF>). Peptides or peptidomimetics that inhibit the conformational changes in gp120/gp41, exemplified by enfuvirtide, have been developed. \n\n\n\n</para>\n      <para>After fusion, a poorly defined step called &quot;uncoating&quot; of this core exposes the viral nucleoprotein complex, which consists of HIV RNA and the proteins integrase (IN), reverse transcriptase (RT), matrix (MA) and Vpr. The latter protein targets the complex to nuclear pores. Inside the nucleus, RT reverse-transcribes the viral RNA into linear duplex DNA, starting at an annealed tRNA3Lys primer (which is present in the virion) near the 5&apos; end of the genomic RNA. After elongation, RT catalyses two DNA strand transfer reactions that are important for priming the synthesis of both minus and plus strands (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014</REF>). RT is a major target of antiviral drugs, which fall into two categories: nucleoside analogues such as AZT and ddI and non-nucleoside inhibitors such as nevirapine. Non-nucleoside inhibitors bind to and inactivate the polymerase, whereas nucleoside analogues inhibit elongation of the viral DNA strands.\n\n<FREETABLE id=\"291\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>\n      <TR>\n      <TD COLSPAN=4 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B>Prokaryotic and eukaryotic DNA polymerases</B></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"110\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B></B></TD>\n      <TD WIDTH=\"113\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B><I>Direction of Synthesis</I></B></TD>\n      <TD WIDTH=\"110\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B><I>Exonuclease Activity</I></B></TD>\n      <TD WIDTH=\"110\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B><I>Actions</I></B></TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=4 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B><I>Prokaryotic</B></I></FONT></TD>      \n      </TR>\n\n      \n\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase I</TD>\n      <TD WIDTH=\"113\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3' and 3'&#8594; 5'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gap filling after primer removal; DNA repair</TD>\n      </TR>\n\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase II</TD>\n      <TD WIDTH=\"113\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3' </TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      3' &#8594; 5'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gap filling after primer removal; DNA repair</TD>\n      </TR>\n\n      \n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase III</TD>\n      <TD WIDTH=\"113\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3' and 3'&#8594; 5' <BR></TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Primary replication enzyme<BR></TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=4 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <B><I>Eukaryotic</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase alpha</TD>\n      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      None</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Primary replication enzyme with polymerase delta</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase beta</TD>\n      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      None</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      DNA repair</TD>\n      </TR>\n\n       \n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase gamma</TD>\n      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      3' &#8594; 5'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Primary replication enzyme of mitochondria and chloroplasts</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase delta</TD>\n      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      3' &#8594; 5'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Primary replication enzyme with polymerase alpha</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Polymerase epsilon</TD>\n      <TD WIDTH=\"113\" VALIGzN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      5' &#8594; 3'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      3' &#8594; 5'</TD>\n      <TD WIDTH=\"110\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      DNA repair; may also cooperate with polymerases alpha and delta in primary replication</TD>\n      </TR>\n\n\n</TABLE>\n]]></FREETABLE>\n      </para>\n      <para>The zinc-finger protein IN then integrates a complete viral minus-strand of DNA and a plus-strand containing several gaps into a host chromosome, by first removing two 3&apos; nucleotides from each strand of the linear viral DNA, producing overhanging CA ends, joining these 3&apos; ends covalently to the 5&apos; ends of the host cell DNA, and removing unpaired nucleotides at the viral 5&apos; ends, which are joined with the host cell&apos;s 3&apos; ends (<REF id=\"2947863\">Choi, E. et al., 2018</REF>). \n\n</para>\n      <para>The gaps in the plus-strands are then probably repaired by host cell enzymes. Transcription of the integrated provirus by RNA polymerase II begins at a promoter in the 5&apos; long terminal repeat (LTR). Several start sites for cellular transcription factors are present upstream, but elongation by these factors is rather inefficient, and the viral protein Tat (transactivator) is required to enhance their processivity. Tat binds to the RNA hairpin Tar (trans-activating response element), and not to DNA, at the 5&apos; end of viral transcripts. \n\n\n\n</para>\n      <para>A single 9-kb RNA is produced, encoding (from 5&apos; to 3&apos;) the usual retroviral polyproteins Gag, Pol and Env, which has the following features: The TAR hairpin, the tRNA3Lys primer binding site, a packaging signal Psi that binds to the viral NC (nucleocapsid) protein and is responsible for its incorporation into a virion, a Gag-Pol frameshifting region that allows translation of the Gag-Pol polyprotein at a frequency of 5-10%, a REV response element that is the Rev-binding site and a polyadenylation signal at the 3&apos; end. There is a single major splice donor site and a number of splice acceptor sites. The 9-kb RNA and a set of spliced products are exported to the cytoplasm for translation or packaging.\n\n</para>\n      <para>Early mRNAs produced encode the proteins Rev, Tat and Nef. Later in infection, other less spliced transcripts are produced. The early/late switch is controlled by Rev; the presence of Rev is required to export unspliced RNAs that contain an REV-Responsive Element (RRE) to the cytoplasm. A total of nine open reading frames are encoded&lt;/A&gt; by the HIV-1 genome. Proteolysis of the usual retroviral gag, pol and env polyproteins gives rise to the proteins that are common to all retroviruses, like the protease (PR), RT, and IN from the pol region. However, HIV also produces six &quot;accessory&quot; proteins: Tat, Rev, Vpu, and the three structural proteins Vif, Nef and Vpr. Not all of these proteins are druggable targets, however (<REF id=\"1162632\">Flexner, C., 2007</REF>).\n\n</para>\n      <para>The env region encodes the gp160 precursor of the gp120/gp41 membrane glycoprotein complex, a protein produced in the endoplasmic reticulum (ER). The cellular receptor protein CD4 is also produced in the ER. To prevent this protein from sticking to gp160, retaining the complex in the ER, Vpu causes the degradation of CD4. After proteolysis of gp160 into gp120/gp41 in the late Golgi, gp120/gp41 is transported to the plasma membrane, where it is prevented from CD4 binding by the action of Nef, which induces internalization and degradation of plasma membrane CD4. In the plasma membrane gp120/gp41 probably localizes to specific domains known as &quot;glycolipid rafts&quot; (<REF id=\"655852\">Nguyen, D.H. and Hildreth, J.E., 2000</REF>). Virus assembly begins at these sites by an interaction between the intracellular domain of gp41, and the beginning of capsid formation by Gag and Gag-Pol polyproteins. A virus particle then buds from the plasma membrane. While the particle is budding, the viral protease PR (aided by Vif) cleaves the Gag and Gag-Pol polyproteins to IN, RT, p6, CA, NC, PR. &quot;Immature&quot; virus particles with uncleaved polyproteins are not infectious (<REF id=\"2947854\">Ghosh, A.K. et al., 2016</REF>).\n\n</para>\n      <para>The crystal structure of PR and of a number of PR-inhibitor complexes have been solved. In its active form, PR is a dimer; the active site contains a catalytically important aspartic acid from each of the monomers and is very similar to that of other retroviral aspartyl proteases. The lack of similar cellular proteases has made the activity of PR a major target for antiviral drugs (<REF id=\"2947854\">Ghosh, A.K. et al., 2016</REF>).</para>\n    </Body>\n    <References>\n      <Reference id=\"655852\" medline_id=\"10708443\">\n        <Title>Evidence for budding of human immunodeficiency virus type 1 selectively from glycolipid-enriched membrane lipid rafts</Title>\n        <SourceTitle>Journal of Virology</SourceTitle>\n        <PubMedTitle>J Virol</PubMedTitle>\n        <Volume>74</Volume>\n        <Issue>7</Issue>\n        <Page>3264</Page>\n        <Year>2000</Year>\n        <Authors>\n          <Author>Nguyen, D.H.</Author>\n          <Author>Hildreth, J.E.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1162632\" medline_id=\"17932493\">\n        <Title>HIV drug development: The next 25 years</Title>\n        <SourceTitle>Nature Reviews Drug Discovery</SourceTitle>\n        <PubMedTitle>Nat Rev Drug Discov</PubMedTitle>\n        <Volume>6</Volume>\n        <Issue>12</Issue>\n        <Page>959</Page>\n        <Year>2007</Year>\n        <Authors>\n          <Author>Flexner, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1505539\" medline_id=\"19683546\">\n        <Title>Entry inhibitors in the treatment of HIV-1 infection</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>91</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Tilton, J.C.</Author>\n          <Author>Doms, R.W.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1789081\" medline_id=\"21284908\">\n        <Title>Clinical use of CCR5 inhibitors in HIV and beyond</Title>\n        <SourceTitle>Journal of Translational Medicine (Online)</SourceTitle>\n        <PubMedTitle>J Transl Med</PubMedTitle>\n        <Volume>9</Volume>\n        <Issue>Suppl. 1</Issue>\n        <Page>S9</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Gilliam, B.L.</Author>\n          <Author>Riedel, D.J.</Author>\n          <Author>Redfield, R.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2229129\" medline_id=\"25151562\">\n        <Title>Antiretroviral therapy: Current drugs</Title>\n        <SourceTitle>Infectious Disease Clinics of North America</SourceTitle>\n        <PubMedTitle>Infect Dis Clin North Am</PubMedTitle>\n        <Volume>28</Volume>\n        <Issue>3</Issue>\n        <Page>371</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Pau, A.K.</Author>\n          <Author>George, J.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947854\" medline_id=\"26799988\">\n        <Title>Recent progress in the development of HIV-1 protease inhibitors for the treatment of HIV/AIDS</Title>\n        <SourceTitle>Journal of Medicinal Chemistry</SourceTitle>\n        <PubMedTitle>J Med Chem</PubMedTitle>\n        <Volume>59</Volume>\n        <Issue>11</Issue>\n        <Page>5172</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Ghosh, A.K.</Author>\n          <Author>Osswald, H.L.</Author>\n          <Author>Prato, G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947858\" medline_id=\"29932942\">\n        <Title>CCR5 revisited: How mechanisms of HIV entry govern AIDS pathogenesis</Title>\n        <SourceTitle>Journal of Molecular Biology</SourceTitle>\n        <PubMedTitle>J Mol Biol</PubMedTitle>\n        <Volume>430</Volume>\n        <Issue>17</Issue>\n        <Page>2557</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Brelot, A.</Author>\n          <Author>Chakrabarti, L.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947863\" medline_id=\"30416746\">\n        <Title>Recent advances in the discovery of small-molecule inhibitors of HIV-1 integrase</Title>\n        <SourceTitle>Future Science OA</SourceTitle>\n        <PubMedTitle>Future Sci OA</PubMedTitle>\n        <Volume>4</Volume>\n        <Issue>9</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Choi, E.</Author>\n          <Author>Mallareddy, J.R.</Author>\n          <Author>Lu, D.</Author>\n          <Author>Kolluru, S.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"2911\" modifiedDate=\"20181212120011\">\n    <Title>Pathogenesis and Natural History</Title>\n    <Body>\n      <para>Lentivirus infections are characterized by the long interval between infection and the onset of clinical disease. For HIV, the time between the infection and the development of AIDS, which is in fact the last stage of disease (<REF id=\"1135290\">Simon, V. et al., 2006</REF>), can range from several months in children to some years (up to 10 or more) in adults. However, in spite of the frequent absence of symptoms during the early and chronic stages of infection, HIV-1 replicates in a dynamic fashion throughout the course of the disease (<REF id=\"1135290\">Simon, V. et al., 2006</REF>). The first cells to be infected are probably dendritic cells, followed by macrophages and monocytes. During the acute phase of infection the number of virus particles in the blood is high and HIV spreads rapidly, infecting large numbers of CD4+ cells in the lymphoid organs. Normal levels of CD4+ T helper cells are about 800-1200 cells per mm3 of blood. These numbers drop by 20-40% during the acute phase. Fourteen to 28 days after infection some patients may report flu-like symptoms and may develop a mononucleosis-like syndrome (<REF id=\"1678176\">Cohen, M.S. et al., 2011</REF>). HIV-specific cytotoxic T cells then limit the infection, and CD4+ counts return to near-normal levels. This is followed by a period of clinical latency, which may last several years and is characterized by HIV DNA integration into the host genome without virus production (<REF id=\"2798862\">Cary, D.C. et al., 2016</REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).\n\n\n\n</para>\n      <para>HIV depletes infected as well as uninfected CD4+ cells; the latter may be due to induction of T cell apoptosis through a mechanism involving chronic antigenic stimulation (<REF id=\"655840\">Badley, A.D. et al., 2000</REF>). Other factors also contribute to this stimulation such as fixation of gp120 on target cells and enhanced production of cytoxic ligands by cells from the immune system, which results in the killing of uninfected CD4+ cells. Paradoxically, the concentration of CD8+ cells in the blood does not decrease, probably because these cells divide more rapidly than CD4+ cells do.</para>\n    </Body>\n    <References>\n      <Reference id=\"655840\" medline_id=\"11049971\">\n        <Title>Mechanisms of HIV-associated lymphocyte apoptosis</Title>\n        <SourceTitle>Blood</SourceTitle>\n        <PubMedTitle>Blood</PubMedTitle>\n        <Volume>96</Volume>\n        <Issue>9</Issue>\n        <Page>2951</Page>\n        <Year>2000</Year>\n        <Authors>\n          <Author>Badley, A.D.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1135290\" medline_id=\"16890836\">\n        <Title>HIV/AIDS epidemiology, pathogenesis, prevention, and treatment</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>368</Volume>\n        <Issue>9534</Issue>\n        <Page>489</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Simon, V.</Author>\n          <Author>Ho, D.D.</Author>\n          <Author>Abdool Karim, Q.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1678176\" medline_id=\"21767103\">\n        <Title>Prevention of HIV-1 infection with early antiretroviral therapy</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>385</Volume>\n        <Issue>6</Issue>\n        <Page>493</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Cohen, M.S.</Author>\n          <Author>Chen, Y.Q.</Author>\n          <Author>McCauley, M.</Author>\n          <Author>Gamble, T.</Author>\n          <Author>Hosseinipour, M.C.</Author>\n          <Author>Kumarasamy, N.</Author>\n          <Author>Hakim, J.G.</Author>\n          <Author>Kumwenda, J.</Author>\n          <Author>Grinsztejn, B.</Author>\n          <Author>Pilotto, J.H.</Author>\n          <Author>Godbole, S.V.</Author>\n          <Author>Mehendale, S.</Author>\n          <Author>Chariyalertsak, S.</Author>\n          <Author>Santos, B.R.</Author>\n          <Author>Mayer, K.H.</Author>\n          <Author>Hoffman, I.F.</Author>\n          <Author>Eshleman, S.H.</Author>\n          <Author>Piwowar-Manning, E.</Author>\n          <Author>Wang, L.</Author>\n          <Author>Makhema, J.</Author>\n          <Author>Mills, L.A.</Author>\n          <Author>de Bruyn, G.</Author>\n          <Author>Sanne, I.</Author>\n          <Author>Eron, J.</Author>\n          <Author>Gallant, J.</Author>\n          <Author>Havlir, D.</Author>\n          <Author>Swindells, S.</Author>\n          <Author>Ribaudo, H.</Author>\n          <Author>Elharrar, V.</Author>\n          <Author>Burns, D.</Author>\n          <Author>Taha, T.E.</Author>\n          <Author>Nielsen-Saines, K.</Author>\n          <Author>Celentano, D.</Author>\n          <Author>Essex, M.</Author>\n          <Author>Fleming, T.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798862\" medline_id=\"26731470\">\n        <Title>Molecular mechanisms of HIV latency</Title>\n        <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n        <PubMedTitle>J Clin Invest</PubMedTitle>\n        <Volume>126</Volume>\n        <Issue>2</Issue>\n        <Page>448</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Cary, D.C.</Author>\n          <Author>Fujinaga, K.</Author>\n          <Author>Peterlin, B.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"3253\" modifiedDate=\"20190502093726\">\n    <Title>Epidemiology</Title>\n    <Body>\n      <para>At the end of 2017, the World Health Organization estimated that there were approximately 36.9 million adults and children living with HIV/AIDS worldwide (<a href=\"http://www.who.int/hiv/data/en/\">HIV/AIDS -- data and statistics (World Health Organization)</a>, consulted December 3, 2018). Global prevalence currently stands at 0.8%. HIV-1 is far more prevalent, although there are an estimated one to two million individuals infected with HIV-2 (<REF id=\"2931416\">Esbjörnsson, J. et al., 2018</REF>). According to WHO, 1.8  million new infections with HIV occurred in 2017 (<a href=\"http://www.who.int/hiv/data/en/\">HIV/AIDS -- data and statistics (World Health Organization)</a>, consulted December 3, 2018), a decrease from previous years. In 2015, UNAIDS reports that there were 1.9 million (range 1.7 to 2.2 million) new infections (<a href=\"http://www.unaids.org/sites/default/files/media_asset/global-AIDS-update-2016_en.pdf\">Global AIDS update 2016 (UNAIDS, 2016)</a>), while GBD 2015 estimated that there were 2.45 million (range 2.24-2.68 million) new infections globally (<REF id=\"2529079\">Wang, H. et al., 2016</REF>). The global prevalence of HIV continues to increase--in spite of the aforementioned decrease in new infections--because of effective new drug therapies, which enable patients to live longer (<REF id=\"2209456\">Maartens, G. et al., 2014</REF>; <REF id=\"2529079\">Wang, H. et al., 2016</REF>). Nonetheless, UNAIDS has set the global goal of ending the global AIDS pandemic by 2030. In order to meet this goal, the agency has established a 90-90-90 goal to be achieved by 2020, which specifies that 90% of HIV-positive individuals worldwide must be aware of their status; 90% of those aware must be receiving sustained combination antiretroviral therapy; and 90% of those on treatment must be virologically suppressed (<REF id=\"2552675\">Badowski, M.E. et al., 2016</REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). The potential impact of a fast-track version of this strategy (95-95-95 by 2030) is even more significant. In contrast with an estimated 49 million new HIV cases that would be diagnosed globally from 2015 to 2035 under current levels of diagnosis and treatment, 25 million of these new infections could be avoided if 95-95-95 goals are met. Moreover, an additional 6.3 million new infections could hypothetically be averted if a vaccine with at least 50% efficacy were introduced by 2020 (<REF id=\"2949697\">Medlock, J. et al., 2017</REF>).\n\n</para>\n      <para>The highest concentration of HIV-infected individuals continues to be in sub-Saharan Africa, which accounts for only 13% of the world&apos;s population overall, but is home to 70% of the world&apos;s HIV-infected individuals, including 56% of the world&apos;s HIV-infected children (<a href=\"http://kff.org/global-health-policy/fact-sheet/the-global-hivaids-epidemic/\">The global HIV/AIDS epidemic: Fact sheet (Kaiser Family Foundation)</a>, consulted December 3, 2018) and 82% of HIV-infected adolescents (age 10-19 years) (<REF id=\"2218070\">Idele, P. et al., 2014</REF>). According to GBD 2015, an estimated 1.85 million (range 1.66-2.05 million) people in this region were newly infected with HIV in 2015, equivalent to 75.4% of all new infections worldwide (<REF id=\"2529079\">Wang, H. et al., 2016</REF>). In Kenya, which has a population of 40 million, 1.2 million people of all ages were living with HIV in 2012 and an estimated 106,000 of these had acquired HIV infection within the preceding year, making Kenya&apos;s HIV epidemic the fourth largest worldwide. Nonetheless, HIV prevalence in that country declined significantly from 7.2% in 2007 to 5.6% in 2012 (<REF id=\"2228297\">Kimanga, D.O. et al., 2014</REF>). Unlike most parts of the world, where the HIV epidemic is now concentrated in certain high-risk population groups (i.e., injection drug users, men who have sex with men, sex workers), the HIV epidemic in sub-Saharan Africa is generalized, or self-sustaining in the population as a whole, albeit with certain subgroups at increased risk of infection (<REF id=\"1199753\">Cohen, M.S. et al., 2008</REF>). After sub-Saharan Africa, the hardest-hit regions of the world are the Caribbean, Eastern Europe and Central Asia (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)</a>).\n\n</para>\n      <para>As of 2017, there were approximately 2.2 million people living with HIV/AIDS in the combined UNAIDS region of Western and Central Europe and North America (<a href=\"http://kff.org/global-health-policy/fact-sheet/the-global-hivaids-epidemic/\">The global HIV/AIDS epidemic: Fact sheet (Kaiser Family Foundation)</a>, consulted December 3, 2018). The incidence of new HIV infections in the combined region in 2013 was estimated to be 88,000 (range 44,000 to 160,000). France and the United Kingdom each accounted for 8% of new infections in the region, while Canada, Germany, Italy and Spain each accounted for 4% of the total (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)</a>). Injection drug use accounted for 8% of new HIV infections in the U.S. in 2010 (<REF id=\"2218071\">Broz, D. et al., 2014</REF>).\n\n</para>\n      <para>CDC analysis of data obtained from the National HIV Behavioral Surveillance System shows that there was a difference in infection rates between blacks and whites (2.1% vs. 1.1%), but low socioeconomic status, and not race, remained the best determinant for infection after adjusting for other variables. Between 2007 to 2009, overall HIV incidence remained steady at approximately 50,000 new infections per year; however a significant increase was seen among those aged 13-29 and and the largest increase occurred in black men who have sex with men (<REF id=\"1689291\">Prejean, J. et al., 2011</REF>; <REF id=\"1689294\">Anonymous, 2011</REF>). Nearly 50% of all U.S. AIDS cases are concentrated in the southern states, which account for just 37% of the country&apos;s population (<REF id=\"2327612\">Reif, S.S. et al., 2014</REF>). Transgender women also have an extraordinarily high burden of HIV disease, both at the national level in the U.S. as well as globally. The pooled prevalence of HIV among transgender women worldwide is over 19% (<REF id=\"1957367\">Baral, S.D. et al., 2013</REF>). \n\n</para>\n      <para>More than two million people were living with HIV/AIDS in the WHO European region in 2017. Nearly 160,000 new HIV infections were diagnosed in the region as a whole in 2017, of which 130,000 were in the eastern part of the region. Prevalence and incidence rates continue to increase in the WHO European region as a whole, in spite of significant decreases in the rate of new diagnoses in the EU/EEA (3,130 in 28 countries in 2017) (<a href=\"http://ecdc.europa.eu/en/publications-data/hivaids-surveillance-europe-2018-2017-data\">HIV/AIDS surveillance in Europe 2018 - 2017 data (European Centre for Disease Prevention and Control, November 2018)</a>). An estimated total of 101,600 prevalent HIV infections as well as 4,363 new HIV diagnoses were reported in the U.K. in 2017. Public Health England announced in November 2018 that the 90-90-90 targets had been met, making that country one of the first to achieve the UNAID objective. In 2017, 92% of people living with HIV in the U.K. had been diagnosed; of those, 98% were on treatment; and of those, 97% were virally suppressed (<a href=\"http://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/759408/HIV_annual_report_2018.pdf\">Progress towards ending the HIV epidemic in the United Kingdom - 2018 report (Public Health England, November 2018)</a>). \n\n</para>\n      <para>The HIV epidemic in East Asia began later than in the rest of the world, and was initially associated with injecting drug use. Government intervention quickly stopped that trend, however, and sexual transmission, especially among men who have sex with men (MSM), is now the most common route (<REF id=\"2151003\">Suguimoto, S.P. et al., 2014</REF>). According to Japan&apos;s National Institute of Infectious Diseases, there were 1,056 incident cases of HIV infection (994 men and 62 women) in 2011, the fourth highest number since HIV surveillance began in that country in 1989. During the same year there were 473 new cases of AIDS reported, which is the highest number since surveillance began (<a href=\"http://www.nih.go.jp/niid/en/iasren/865-iasr/2649-tpc391.html\">HIV/AIDS in Japan, 2011 (Infectious Agents Surveillance Report, September 2012)</a>). In China, HIV is most common in three high-risk groups: injecting drug users, female sex workers and MSM. In 2010, HIV prevalence in these groups was 9.08%, 0.36% and 5.98%, respectively. Incidence of new HIV infections in these groups was 0.57, 0.02 and 0.98 per 100 person-years, respectively (<REF id=\"2134794\">Zhang, L. et al., 2013</REF>). In 2016, HIV prevalence in MSM was reported to be 10.2%, while incidence of new cases was 6.63% (<REF id=\"2989513\">Chen, Q. et al., 2018</REF>). HIV infections predominate Han Chinese, males, young and the middle-aged (<REF id=\"2989521\">Wang, L. et al., 2019</REF>). China is far from achieving the 90-90-90 target for 2020, as identified by the Joint United Nations Program on HIV and AIDS. In 2016, only 36% of PLHIV (people living with HIV) on ART achieved viral suppression (viral load &lt; 1000 copies/mL) (<REF id=\"2989515\">Da, W. et al., 2018</REF>).\n\n</para>\n      <para>For more epidemiology information, consult the Incidence and Prevalence Database (IPD): <a href=\"http://www.tdrdata.com/ipd/IPD_SearchIPDByKeyword_Excel.aspx?keyword=hiv\">IPD: HIV</a>.</para>\n    </Body>\n    <References>\n      <Reference id=\"1199753\" medline_id=\"18382737\">\n        <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic</Title>\n        <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n        <PubMedTitle>J Clin Invest</PubMedTitle>\n        <Volume>118</Volume>\n        <Issue>4</Issue>\n        <Page>1244</Page>\n        <Year>2008</Year>\n        <Authors>\n          <Author>Cohen, M.S.</Author>\n          <Author>Hellmann, N.</Author>\n          <Author>Levy, J.A.</Author>\n          <Author>Decock, K.</Author>\n          <Author>Lange, J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1689291\" medline_id=\"21826193\">\n        <Title>Estimated HIV incidence in the United States, 2006-2009</Title>\n        <SourceTitle>PLoS ONE</SourceTitle>\n        <PubMedTitle>PLoS One</PubMedTitle>\n        <Volume>6</Volume>\n        <Issue>8</Issue>\n        <Page>e17502</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Prejean, J.</Author>\n          <Author>Song, R.</Author>\n          <Author>Hernandez, A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1689294\" medline_id=\"21832975\">\n        <Title>Characteristics Associated with HIV Infection Among Heterosexuals in Urban Areas with High AIDS Prevalence - 24 Cities, United States, 2006-2007</Title>\n        <SourceTitle>MMWR. Morbidity and Mortality Weekly Report</SourceTitle>\n        <PubMedTitle>MMWR Morb Mortal Wkly Rep</PubMedTitle>\n        <Volume>60</Volume>\n        <Page>1045</Page>\n        <Year>2011</Year>\n        <Authors/>\n      </Reference>\n      <Reference id=\"1957367\" medline_id=\"23260128\">\n        <Title>Worldwide burden of HIV in transgender women: A systematic review and meta-analysis</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>13</Volume>\n        <Issue>3</Issue>\n        <Page>214</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Baral, S.D.</Author>\n          <Author>Poteat, T.</Author>\n          <Author>Strömdahl, S.</Author>\n          <Author>Wirtz, A.L.</Author>\n          <Author>Guadamuz, T.E.</Author>\n          <Author>Beyrer, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2134794\" medline_id=\"24107261\">\n        <Title>HIV prevalence in China: Integration of surveillance data and a systematic review</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>13</Volume>\n        <Issue>11</Issue>\n        <Page>955</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Zhang, L.</Author>\n          <Author>Chow, E.P.</Author>\n          <Author>Jing, J.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2151003\" medline_id=\"24664878\">\n        <Title>Changing patterns of HIV epidemic in 30 years in East Asia</Title>\n        <SourceTitle>Current HIV/AIDS Reports</SourceTitle>\n        <PubMedTitle>Curr HIV/AIDS Rep</PubMedTitle>\n        <Volume>11</Volume>\n        <Issue>2</Issue>\n        <Page>134</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Suguimoto, S.P.</Author>\n          <Author>Techasrivichien, T.</Author>\n          <Author>Musumari, P.M.</Author>\n          <Author>El-Saaidi, C.</Author>\n          <Author>Lukhele, B.W.</Author>\n          <Author>Ono-Kihara, M.</Author>\n          <Author>Kihara, M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2209456\" medline_id=\"24907868\">\n        <Title>HIV infection: Epidemiology, pathogenesis, treatment, and prevention</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>384</Volume>\n        <Issue>9939</Issue>\n        <Page>258</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Maartens, G.</Author>\n          <Author>Celum, C.</Author>\n          <Author>Lewin, S.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2218070\" medline_id=\"24918590\">\n        <Title>Epidemiology of HIV and AIDS among adolescents: Current status, inequities, and data gaps</Title>\n        <SourceTitle>Journal of Acquired Immune Deficiency Syndromes (JAIDS)</SourceTitle>\n        <PubMedTitle>J Acquir Immune Defic Syndr</PubMedTitle>\n        <Volume>66</Volume>\n        <Issue>Suppl. 2</Issue>\n        <Page>S144</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Idele, P.</Author>\n          <Author>Gillespie, A.</Author>\n          <Author>Porth, T.</Author>\n          <Author>Suzuki, C.</Author>\n          <Author>Mahy, M.</Author>\n          <Author>Kasedde, S.</Author>\n          <Author>Luo, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2218071\" medline_id=\"24990587\">\n        <Title>HIV infection and risk, prevention, and testing behaviors among injecting drug users - National HIV Behavioral Surveillance System, 20 U.S. cities, 2009</Title>\n        <SourceTitle>MMWR. Surveillance summaries</SourceTitle>\n        <PubMedTitle>MMWR Surveill Summ</PubMedTitle>\n        <Volume>63</Volume>\n        <Issue>6</Issue>\n        <Page>1</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Broz, D.</Author>\n          <Author>Wejnert, C.</Author>\n          <Author>Pham, H.T.</Author>\n          <Author>DiNenno, E.</Author>\n          <Author>Heffelfinger, J.D.</Author>\n          <Author>Cribbin, M.</Author>\n          <Author>Krishna, N.</Author>\n          <Author>Teshale, E.H.</Author>\n          <Author>Paz-Bailey, G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2228297\" medline_id=\"24445338\">\n        <Title>Prevalence and incidence of HIV infection, trends, and risk factors among persons aged 15-64 years in Kenya: Results from a nationally representative study</Title>\n        <SourceTitle>Journal of Acquired Immune Deficiency Syndromes (JAIDS)</SourceTitle>\n        <PubMedTitle>J Acquir Immune Defic Syndr</PubMedTitle>\n        <Volume>66</Volume>\n        <Issue>Suppl. 1</Issue>\n        <Page>S13</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Kimanga, D.O.</Author>\n          <Author>Ogola, S.</Author>\n          <Author>Umuro, M.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2327612\" medline_id=\"23944833\">\n        <Title>HIV/AIDS in the Southern USA: A disproportionate epidemic</Title>\n        <SourceTitle>AIDS Care</SourceTitle>\n        <PubMedTitle>AIDS Care</PubMedTitle>\n        <Volume>26</Volume>\n        <Issue>3</Issue>\n        <Page>351</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Reif, S.S.</Author>\n          <Author>Whetten, K.</Author>\n          <Author>Wilson, E.R.</Author>\n          <Author>McAllaster, C.</Author>\n          <Author>Pence, B.W.</Author>\n          <Author>Legrand, S.</Author>\n          <Author>Gong, W.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2529079\" medline_id=\"27470028\">\n        <Title>Estimates of global, regional, and national incidence, prevalence, and mortality of HIV, 1980-2015: The Global Burden of Disease Study 2015</Title>\n        <SourceTitle>The Lancet. HIV</SourceTitle>\n        <PubMedTitle>Lancet HIV</PubMedTitle>\n        <Volume>3</Volume>\n        <Issue>8</Issue>\n        <Page>e361</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Wang, H.</Author>\n          <Author>Wolock, T.M.</Author>\n          <Author>Carter, A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2552675\" medline_id=\"27539455\">\n        <Title>New antiretroviral treatment for HIV</Title>\n        <SourceTitle>Infectious Diseases and Therapy</SourceTitle>\n        <PubMedTitle>Infect Dis Ther</PubMedTitle>\n        <Volume>5</Volume>\n        <Issue>3</Issue>\n        <Page>329</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Badowski, M.E.</Author>\n          <Author>Pérez, S.E.</Author>\n          <Author>Biagi, M.</Author>\n          <Author>Littler, J.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2931416\" medline_id=\"30392769\">\n        <Title>Long-term follow-up of HIV-2-related AIDS and mortality in Guinea-Bissau: A prospective open cohort study</Title>\n        <SourceTitle>The Lancet. HIV</SourceTitle>\n        <PubMedTitle>Lancet HIV</PubMedTitle>\n        <Volume>6</Volume>\n        <Issue>1</Issue>\n        <Page>E25</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Esbjörnsson, J.</Author>\n          <Author>Månsson, F.</Author>\n          <Author>Kvist, A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2949697\" medline_id=\"28320938\">\n        <Title>Effectiveness of UNAIDS targets and HIV vaccination across 127 countries</Title>\n        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)</SourceTitle>\n        <PubMedTitle>Proc Natl Acad Sci U S A</PubMedTitle>\n        <Volume>114</Volume>\n        <Issue>15</Issue>\n        <Page>4017</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Medlock, J.</Author>\n          <Author>Pandey, A.</Author>\n          <Author>Parpia, A.S.</Author>\n          <Author>Tang, A.</Author>\n          <Author>Skrip, L.A.</Author>\n          <Author>Galvani, A.P.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2989513\" medline_id=\"30092072\">\n        <Title>Trends of HIV incidence and prevalence among men who have sex with men in Beijing, China: Nine consecutive cross-sectional surveys, 2008-2016</Title>\n        <SourceTitle>PLoS ONE</SourceTitle>\n        <PubMedTitle>PLoS One</PubMedTitle>\n        <Volume>13</Volume>\n        <Issue>8</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Chen, Q.</Author>\n          <Author>Sun, Y.</Author>\n          <Author>Sun, W.</Author>\n          <Author>Hao, M.</Author>\n          <Author>Li, G.</Author>\n          <Author>Su, X.</Author>\n          <Author>Xin, R.</Author>\n          <Author>Lu, H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2989515\" medline_id=\"30161177\">\n        <Title>Evaluation of self-report adherence measures and their associations with detectable viral load among people living with HIV (PLHIV) in China</Title>\n        <SourceTitle>PLoS ONE</SourceTitle>\n        <PubMedTitle>PLoS One</PubMedTitle>\n        <Volume>13</Volume>\n        <Issue>8</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Da, W.</Author>\n          <Author>Li, X.</Author>\n          <Author>Qiao, S.</Author>\n          <Author>Zhou, Y.</Author>\n          <Author>Shen, Z.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2989521\" medline_id=\"30651975\">\n        <Title>HIV infection in Xi&apos;an, China: Epidemic characterization, risk factors to false positives and potential utility of the sample-to-cutoff index to identify true positives using Architect HIV Ag/Ab combo</Title>\n        <SourceTitle>Antimicrobial Resistance and Infection Control</SourceTitle>\n        <PubMedTitle>Antimicrob Resist Infect Control</PubMedTitle>\n        <Volume>8</Volume>\n        <Page>9</Page>\n        <Year>2019</Year>\n        <Authors>\n          <Author>Wang, L.</Author>\n          <Author>Xiao, Y.</Author>\n          <Author>Tian, X.D.</Author>\n          <Author>Ruan, J.X.</Author>\n          <Author>Chen, W.</Author>\n          <Author>Yu, Y.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"3214\" modifiedDate=\"20190410091630\">\n    <Title>Morbidity and Mortality</Title>\n    <Body>\n      <para>Patients with more than 500 CD4+ cells per mm3 (CDC category 1) are usually asymptomatic. At counts of between 200 and 500 CD4+ cells per mm3 (category 2) some opportunistic infections such as herpes zoster and oral thrush, an overgrowth of <I>Candida albicans</I> in the mouth or on other mucous membranes, are frequently seen. Most AIDS-related opportunistic infections start when the CD4+ count falls below 200 cells per mm3 (category 3). These may involve <I>Pneumocystis jirovecii</I> pneumonia, toxoplasmosis, candidiasis, cryptosporidiosis, <I>Mycobacterium avium</I> complex, <BACKGROUNDER id=\"20\">Cytomegalovirus</BACKGROUNDER> retinitis often leading to blindness, and malignancies such as <BACKGROUNDER id=\"168\">Non-Hodgkin&apos;s Lymphoma</BACKGROUNDER>, <BACKGROUNDER id=\"164\">Hodgkin&apos;s Lymphoma</BACKGROUNDER>, invasive <BACKGROUNDER id=\"125\">Cervical Cancer</BACKGROUNDER> and Kaposi&apos;s sarcoma (<REF id=\"1635117\">Shiels, M.S. et al., 2011</REF>), as well as anal cancer (in MSM) and lung and liver cancers (in injection drug users) (<REF id=\"2317668\">Robbins, H.A. et al., 2015</REF>). Concomitant infection with <BACKGROUNDER id=\"37\">Hepatitis B</BACKGROUNDER> (HBV), <BACKGROUNDER id=\"38\">Hepatitis C</BACKGROUNDER> (HCV), <BACKGROUNDER id=\"118\">Malaria</BACKGROUNDER> or <BACKGROUNDER id=\"116\">Tuberculosis</BACKGROUNDER> also contributes to morbidity and mortality in a significant percentage of AIDS patients. An estimated 2-4 million HIV-positive people are coinfected with HBV (<REF id=\"1446956\">Lacombe, K. et al., 2010</REF>) and another 6.8 to 10.2 million are coinfected with HCV (<REF id=\"2308297\">Webster, D.P. et al., 2015</REF>). Noninfectious complications of AIDS and HIV include dyslipidemia (<REF id=\"1497895\">Tarr, P.E. et al., 2010</REF>), neurological complications (<REF id=\"1955209\">Manji, H. et al., 2013</REF>), cardiovascular disease, nephropathy and consequent kidney failure (<REF id=\"1642730\">Papeta, N. et al., 2011</REF>), wasting (e.g., <BACKGROUNDER id=\"102\">Cachexia</BACKGROUNDER>, sarcopenia and frailty) and--conversely-- obesity (<REF id=\"2944303\">Mankal, P.K. and Kotler, D.P., 2014</REF>).\n\n</para>\n      <para>The cumulative death toll over the first 30 years of the HIV pandemic was in excess of 35 million, according to WHO (<a href=\"http://www.who.int/en/news-room/fact-sheets/detail/hiv-aids\">HIV/AIDS key facts (World Health Organization, updated July 2018)</a>). UNAIDS estimated in 2014 that 39 million (range 35-43 million) people worldwide had died of AIDS-related illness since the start of the epidemic (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)</a>). A total of 1.5 million (range 1.4 to 1.7 million) people died of HIV/AIDS-related causes in 2013, a 35% decrease with respect to the peak year of 2005. Important reductions were achieved in sub-Saharan Africa, where AIDS-related deaths decreased by 39% between 2005 and 2013; however, the region still accounts for 79% of global AIDS-related mortalities. Mortality rates decreased by 54% in the Caribbean and by 31% in Latin America during the same period (<a href=\"http://www.unaids.org/en/media/unaids/contentassets/documents/unaidspublication/2014/UNAIDS_Gap_report_en.pdf\">The gap report (UNAIDS, 2014)</a>). According to an analysis of data collected for the Global Burden of Disease (GBD) study, global HIV mortality was 1.3 million (range 1.3 to 1.5 million) in 2013 (<REF id=\"2206340\">Murray, C.J. et al., 2014</REF>) and was 1.2 million (range 1.1 to 1.3 million) in 2015 (<REF id=\"2551327\">Wang, H.D. et al., 2016</REF>). Expressed in other terms, the impact of HIV/AIDS in 2013 was equivalent to 40.6 million YLDs, according to the GBD 2013 study (<REF id=\"2351164\">Vos, T. et al., 2015</REF>). According to WHO, 940,000 people died from HIV-related causes globally in 2017 (<a href=\"http://www.who.int/en/news-room/fact-sheets/detail/hiv-aids\">HIV/AIDS key facts (World Health Organization, updated July 2018)</a>).\n\n</para>\n      <para>In the D:A:D cohort study, which followed nearly 50,000 HIV/AIDS patients at 212 clinics in the U.S., Europe and Australia, the mortality rate in this population was 12.7 per 1,000 person-years over the period 1999-2011, equivalent to 308,719 person-years of follow-up. The leading causes of death were AIDS-related (29%), non-AIDS-defining cancers (15%), liver disease (13%) and cardiovascular disease (11%). AIDS-related causes of death decreased in significance over time, however, accounting for 34% of all deaths during 1999-2000 vs. 22% in 2009-2011, confirming the efficacy of antiretroviral drug therapy (<REF id=\"2312359\">Smith, C.J. et al., 2014</REF>).\n\n</para>\n      <para>Increased survival following a diagnosis of HIV has led to new challenges for physicians, who are now increasingly treating middle-aged and older patients with age-related disorders that are unrelated to HIV but which nonetheless occur at a higher rate than in the non-HIV-positive population; these include cardiovascular disease, cognitive impairment, osteopenia and osteoporosis, frailty, and malignancy (<REF id=\"2799389\">McGettrick, P. et al., 2018</REF>). The incidence of non-AIDS-defining cancers among HIV-positive individuals has increased in recent decades. This increase, which is the direct result of improved survival to older ages, where these cancers typically begin to develop, will require the development of new prevention and treatment strategies that are appropriate for the needs of this patient group (<REF id=\"1635117\">Shiels, M.S. et al., 2011</REF>).\n\n</para>\n      <para>Opportunistic infections are a main cause of mortality in HIV infected individuals. Pneumocystis pneumonia (PCP) is the most predominant opportunistic infection in the HIV-infected population, with a prevalence of about 22.4% in China. One study reported an in-hospital mortality rate of 17.3% among HIV-infected patients with PCP (<REF id=\"2989525\">Wu, L. et al., 2019</REF>).</para>\n    </Body>\n    <References>\n      <Reference id=\"1339497\" medline_id=\"18800017\">\n        <Title>HIV, reproductive aging, and health implications in women: A literature review</Title>\n        <SourceTitle>Menopause (New York)</SourceTitle>\n        <PubMedTitle>Menopause</PubMedTitle>\n        <Volume>16</Volume>\n        <Issue>1</Issue>\n        <Page>199</Page>\n        <Year>2009</Year>\n        <Authors>\n          <Author>Conde, D.M.</Author>\n          <Author>Silva, E.T.</Author>\n          <Author>Amaral, W.N.</Author>\n          <Author>Finotti, M.F.</Author>\n          <Author>Ferreira, R.G.</Author>\n          <Author>Costa-Paiva, L.</Author>\n          <Author>Pinto-Neto, A.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1446956\" medline_id=\"19900950\">\n        <Title>HIV/hepatitis B virus co-infection: Current challenges and new strategies</Title>\n        <SourceTitle>Journal of Antimicrobial Chemotherapy</SourceTitle>\n        <PubMedTitle>J Antimicrob Chemother</PubMedTitle>\n        <Volume>65</Volume>\n        <Issue>1</Issue>\n        <Page>10</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Lacombe, K.</Author>\n          <Author>Bottero, J.</Author>\n          <Author>Lemoine, M.</Author>\n          <Author>Boyd, A.</Author>\n          <Author>Girard, P.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1497895\" medline_id=\"20350140\">\n        <Title>Dyslipidemia in HIV-infected individuals: From pharmacogenetics to pharmacogenomics</Title>\n        <SourceTitle>Pharmacogenomics (London)</SourceTitle>\n        <PubMedTitle>Pharmacogenomics</PubMedTitle>\n        <Volume>11</Volume>\n        <Issue>4</Issue>\n        <Page>587</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Tarr, P.E.</Author>\n          <Author>Rotger, M.</Author>\n          <Author>Telenti, A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1635117\" medline_id=\"21483021\">\n        <Title>Cancer Burden in the HIV-infected population in the United States</Title>\n        <SourceTitle>Journal of the National Cancer Institute</SourceTitle>\n        <PubMedTitle>J Natl Cancer Inst</PubMedTitle>\n        <Volume>103</Volume>\n        <Issue>9</Issue>\n        <Page>753</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Shiels, M.S.</Author>\n          <Author>Pfeiffer, R.M.</Author>\n          <Author>Gail, M.H.</Author>\n          <Author>Hall, H.I.</Author>\n          <Author>Li, J.</Author>\n          <Author>Chaturvedi, A.K.</Author>\n          <Author>Bhatia, K.</Author>\n          <Author>Uldrick, T.S.</Author>\n          <Author>Yarchoan, R.</Author>\n          <Author>Goedert, J.J.</Author>\n          <Author>Engels, E.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1642730\" medline_id=\"21221512\">\n        <Title>The molecular pathogenesis of HIV-1 associated nephropathy: Recent advances</Title>\n        <SourceTitle>Journal of Molecular Medicine</SourceTitle>\n        <PubMedTitle>J Mol Med</PubMedTitle>\n        <Volume>89</Volume>\n        <Issue>5</Issue>\n        <Page>429</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Papeta, N.</Author>\n          <Author>Sterken, R.</Author>\n          <Author>Kiryluk, K.</Author>\n          <Author>Kalyesubula, R.</Author>\n          <Author>Gharavi, A.G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1955209\" medline_id=\"23378642\">\n        <Title>HIV, dementia and antiretroviral drugs: 30 years of an epidemic</Title>\n        <SourceTitle>Journal of Neurology, Neurosurgery and Psychiatry</SourceTitle>\n        <PubMedTitle>J Neurol Neurosurg Psychiatry</PubMedTitle>\n        <Volume>84</Volume>\n        <Issue>10</Issue>\n        <Page>1126</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Manji, H.</Author>\n          <Author>Jäger, H.R.</Author>\n          <Author>Winston, A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2206340\" medline_id=\"25059949\">\n        <Title>Global, regional, and national incidence and mortality for HIV, tuberculosis, and malaria during 1990-2013: A systematic analysis for the Global Burden of Disease Study 2013</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>384</Volume>\n        <Issue>9947</Issue>\n        <Page>1005</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Murray, C.J.</Author>\n          <Author>Ortblad, K.F.</Author>\n          <Author>Guinovart, C.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2308297\" medline_id=\"25687730\">\n        <Title>Hepatitis C</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>385</Volume>\n        <Issue>9973</Issue>\n        <Page>1124</Page>\n        <Year>2015</Year>\n        <Authors>\n          <Author>Webster, D.P.</Author>\n          <Author>Klenerman, P.</Author>\n          <Author>Dusheiko, G.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2312359\" medline_id=\"25042234\">\n        <Title>Trends in underlying causes of death in people with HIV from 1999 to 2011 (D:A:D): a multicohort collaboration</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>384</Volume>\n        <Issue>9939</Issue>\n        <Page>241</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Smith, C.J.</Author>\n          <Author>Ryom, L.</Author>\n          <Author>Weber, R.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2317668\" medline_id=\"25663691\">\n        <Title>Excess cancers among HIV-infected people in the United States</Title>\n        <SourceTitle>Journal of the National Cancer Institute</SourceTitle>\n        <PubMedTitle>J Natl Cancer Inst</PubMedTitle>\n        <Volume>107</Volume>\n        <Issue>4</Issue>\n        <Page>dju503</Page>\n        <Year>2015</Year>\n        <Authors>\n          <Author>Robbins, H.A.</Author>\n          <Author>Pfeiffer, R.M.</Author>\n          <Author>Shiels, M.S.</Author>\n          <Author>Li, J.</Author>\n          <Author>Hall, H.I.</Author>\n          <Author>Engels, E.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2351164\" medline_id=\"26063472\">\n        <Title>Global, regional, and national incidence, prevalence, and years lived with disability for 301 acute and chronic diseases and injuries in 188 countries, 1990-2013: A systematic analysis for the Global Burden of Disease Study 2013</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>386</Volume>\n        <Issue>9995</Issue>\n        <Page>743</Page>\n        <Year>2015</Year>\n        <Authors>\n          <Author>Vos, T.</Author>\n          <Author>Barber, R.M.</Author>\n          <Author>Bell, B.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2551327\">\n        <Title>Global, regional, and national life expectancy, all-cause mortality, and cause-specific mortality for 249 causes of death, 1980-2015: A systematic analysis for the Global Burden of Disease Study 2015</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>388</Volume>\n        <Issue>10053</Issue>\n        <Page>1459</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Wang, H.D.</Author>\n          <Author>Naghavi, M.</Author>\n          <Author>Allen, C.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2799389\" medline_id=\"29443936\">\n        <Title>Ageing with HIV</Title>\n        <SourceTitle>Healthcare (Basel)</SourceTitle>\n        <PubMedTitle>Healthcare (Basel)</PubMedTitle>\n        <Volume>6</Volume>\n        <Issue>1</Issue>\n        <Page>E17</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>McGettrick, P.</Author>\n          <Author>Barco, E.A.</Author>\n          <Author>Mallon, P.W.G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944303\" medline_id=\"25169559\">\n        <Title>From wasting to obesity, changes in nutritional concerns in HIV/AIDS</Title>\n        <SourceTitle>Endocrinology and Metabolism Clinics of North America</SourceTitle>\n        <PubMedTitle>Endocrinol Metab Clin North Am</PubMedTitle>\n        <Volume>43</Volume>\n        <Issue>3</Issue>\n        <Page>647</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Mankal, P.K.</Author>\n          <Author>Kotler, D.P.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2989525\" medline_id=\"30906778\">\n        <Title>A model to predict in-hospital mortality in HIV/AIDS patients with pneumocystis pneumonia in China: The clinical practice in real world</Title>\n        <SourceTitle>BioMed Research International</SourceTitle>\n        <PubMedTitle>Biomed Res Int</PubMedTitle>\n        <Volume>2019</Volume>\n        <Year>2019</Year>\n        <Authors>\n          <Author>Wu, L.</Author>\n          <Author>Zhang, Z.</Author>\n          <Author>Wang, Y.</Author>\n          <Author>Hao, Y.</Author>\n          <Author>Wang, F.</Author>\n          <Author>Gao, G.</Author>\n          <Author>Yang, D.</Author>\n          <Author>Xiao, J.</Author>\n          <Author>Zhao, H.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"2292\" modifiedDate=\"20181212115958\">\n    <Title>Cost</Title>\n    <Body>\n      <para>According to the Centers for Disease Control and Prevention (CDC), the total lifetime direct medical cost associated with HIV infection in persons of all ages infected with the virus in 2008 in the United States was USD 12.6 billion (range USD 9.5 to 15.7 billion) (<REF id=\"1955210\">Owusu-Edusei, K. Jr. et al., 2013</REF>). According to a study by researchers at Cornell University, the lifetime cost of treating a patient with HIV, calculated in 2004 U.S. dollars and estimating a life expectancy of 24.2 years from time of beginning anti-HIV care, is USD 618,900. The calculation was based on current standards of care, and reflects the substantial improvements in survival that are derived from effective antiretroviral therapy. Furthermore, the researchers determined that the treatment expense that could be avoided by preventing  HIV infection is USD 303,100 per individual (<REF id=\"1157336\">Schackman, B.R. et al., 2006</REF>). \n\n</para>\n      <para>A cost-of-illness study conducted in Bogotá, Colombia, determined that in that country, where the GDP per capita was USD 7,904 in 2014, the mean cost per patient was USD 11,505 +/- 18,658 per year. The total cost of the disease in that country was pegged at USD 1.43 billion in 2014 (<REF id=\"2944304\">Kuhlmann, J. et al., 2017</REF>).\n</para>\n    </Body>\n    <References>\n      <Reference id=\"1157336\" medline_id=\"17063130\">\n        <Title>Lifetime cost and life expectancy for current human immunodeficiency virus care in the United States</Title>\n        <SourceTitle>Medical Care</SourceTitle>\n        <PubMedTitle>Med Care</PubMedTitle>\n        <Volume>44</Volume>\n        <Issue>11</Issue>\n        <Page>990</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Schackman, B.R.</Author>\n          <Author>Gebo, K.A.</Author>\n          <Author>Walensky, R.P.</Author>\n          <Author>Losina, E.</Author>\n          <Author>Muccio, T.</Author>\n          <Author>Sax, P.E.</Author>\n          <Author>Weinstein, M.C.</Author>\n          <Author>Seage, G.R. 3rd.</Author>\n          <Author>Moore, R.D.</Author>\n          <Author>Freedberg, K.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1955210\" medline_id=\"23403600\">\n        <Title>The estimated direct medical cost of selected sexually transmitted infections in the United States, 2008</Title>\n        <SourceTitle>Sexually Transmitted Diseases</SourceTitle>\n        <PubMedTitle>Sex Transm Dis</PubMedTitle>\n        <Volume>40</Volume>\n        <Issue>3</Issue>\n        <Page>197</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Owusu-Edusei, K. Jr.</Author>\n          <Author>Chesson, H.W.</Author>\n          <Author>Gift, T.L.</Author>\n          <Author>Tao, G.</Author>\n          <Author>Mahajan, R.</Author>\n          <Author>Ocfemia, M.C.</Author>\n          <Author>Kent, C.K.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944304\" medline_id=\"29254533\">\n        <Title>A cost-of-illness study of patients with HIV/AIDS in Bogotá, Colombia</Title>\n        <SourceTitle>Value in Health Regional Issues</SourceTitle>\n        <PubMedTitle>Value Health Reg Issues</PubMedTitle>\n        <Volume>14</Volume>\n        <Page>103</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Kuhlmann, J.</Author>\n          <Author>Keaei, M.</Author>\n          <Author>Conde, R.</Author>\n          <Author>Evers, S.M.A.A.</Author>\n          <Author>Gonzalez, J.</Author>\n          <Author>Govers, M.</Author>\n          <Author>Hiligsmann, M.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n</Section>\n<Section sectionId=\"398\" modifiedDate=\"20190502092113\">\n  <Title>Diagnosis</Title>\n  <Body>\n    <para>As described above (see Epidemiology), UNAID&apos;s program of 90-90-90 includes the goal--arguably the most critical of the three--that 90% of all HIV-positive individuals worldwide be aware of their status. This underlines the importance of robust programs for HIV screening and diagnosis (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).  \n\n</para>\n    <para>In addition to specific questioning about drug use and sexual activities and the detection of symptoms of typical opportunistic infections, specific diagnosis of an HIV infection requires the detection of HIV-specific antibodies, antigens or both. Several tests are available and can be done reliably using plasma, serum, whole blood or saliva samples. Anti-HIV antibodies and p24 antigen can be simultanously detected by fourth-generation enzyme immunoassays (EIA); rapid third-generation EIA detects antibodies only. However, EIAs are unable to detect acute HIV infection, prior to the production of a sufficient level of antibodies (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Rapid antibody tests are similarly not useful for diagnosing HIV in infants younger than 18 months, due to the possible persistence of maternal antibodies (<REF id=\"1135290\">Simon, V. et al., 2006</REF>); in these situations, using an antigen/antibody detection system (such as the Architect HIV Ag/Ab Combo) may be more appropriate (<REF id=\"2989521\">Wang, L. et al., 2019</REF>).\n\n</para>\n    <para>Alternately, nucleic acid testing can be performed. Polymerase chain reaction (PCR) is used to quantify viral load, determine prognosis and establish correct antiviral therapy. Available tests include the branched chain DNA test (Quantiplex HIV RNA assay, Chiron), the HIV RNA polymerase chain reaction (PCR) test (Amplicor HIV-1, Roche) and the nucleic acid sequence-based amplification assay (Organon Technika/Advanced Bioscience Laboratories). Flow cytometry is used to monitor the number of CD4+ cells in the blood.\n\n\n\n</para>\n    <para>The duration of HIV infection at diagnosis can be determined using models of disease progression (<REF id=\"2989512\">Li, A.H. et al., 2018</REF>).\n\n</para>\n  </Body>\n  <References>\n    <Reference id=\"1135290\" medline_id=\"16890836\">\n      <Title>HIV/AIDS epidemiology, pathogenesis, prevention, and treatment</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>368</Volume>\n      <Issue>9534</Issue>\n      <Page>489</Page>\n      <Year>2006</Year>\n      <Authors>\n        <Author>Simon, V.</Author>\n        <Author>Ho, D.D.</Author>\n        <Author>Abdool Karim, Q.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2944306\" medline_id=\"30049419\">\n      <Title>HIV</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>392</Volume>\n      <Issue>10148</Issue>\n      <Page>685</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Ghosn, J.</Author>\n        <Author>Taiwo, B.</Author>\n        <Author>Seedat, S.</Author>\n        <Author>Autran, B.</Author>\n        <Author>Katlama, C.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2989512\" medline_id=\"30082524\">\n      <Title>Duration of human immunodeficiency virus infection at diagnosis among new human immunodeficiency virus cases in Dehong, Yunnan, China, 2008-2015</Title>\n      <SourceTitle>Chinese Medical Journal</SourceTitle>\n      <PubMedTitle>Chin Med J (Engl)</PubMedTitle>\n      <Volume>131</Volume>\n      <Issue>16</Issue>\n      <Page>1936</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Li, A.H.</Author>\n        <Author>Wu, Z.Y.</Author>\n        <Author>Jiang, Z.</Author>\n        <Author>McGoogan, J.M.</Author>\n        <Author>Zhao, Y.</Author>\n        <Author>Duan, S.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2989521\" medline_id=\"30651975\">\n      <Title>HIV infection in Xi&apos;an, China: Epidemic characterization, risk factors to false positives and potential utility of the sample-to-cutoff index to identify true positives using Architect HIV Ag/Ab combo</Title>\n      <SourceTitle>Antimicrobial Resistance and Infection Control</SourceTitle>\n      <PubMedTitle>Antimicrob Resist Infect Control</PubMedTitle>\n      <Volume>8</Volume>\n      <Page>9</Page>\n      <Year>2019</Year>\n      <Authors>\n        <Author>Wang, L.</Author>\n        <Author>Xiao, Y.</Author>\n        <Author>Tian, X.D.</Author>\n        <Author>Ruan, J.X.</Author>\n        <Author>Chen, W.</Author>\n        <Author>Yu, Y.</Author>\n      </Authors>\n    </Reference>\n  </References>\n  <Section sectionId=\"4756\" modifiedDate=\"20190502093000\">\n    <Title>Screening</Title>\n    <Body>\n      <para>Routine HIV screening of all individuals in the United States aged 13-64 years has been recommended by the Centers for Disease Control and Prevention since 2006 (<a href=\"http://www.cdc.gov/mmwr/preview/mmwrhtml/rr5514a1.htm\">Revised recommendations for HIV testing of adults, adolescents, and pregnant women in health-care settings (Centers for Disease Control and Prevention, September 2006)</a>). In 2013, the U.S. Preventive Services Task Force issued a guideline containing a similar recommendation for routine screening of all individuals aged 15-65 years, as well as all pregnant women (<a href=\"http://www.uspreventiveservicestaskforce.org/uspstf13/hiv/hivdraftrec.htm\">Screening for HIV: U.S. Preventive Services Task Force recommendation statement (U.S. Preventive Services Task Force, April 2013)</a>). The recommendations are supported by evidence demonstrating the significant benefits to both patient and partner(s) of early diagnosis and treatment of HIV infection.\n\n</para>\n      <para>In European Union, the European Centre for Disease Prevention and Control has issued its own HIV screening recommendations. While acknowledging that each country must establish its own guidelines, there are certain high-risk population groups to whom screening should always be offered: men who have sex with men; immigrants (especially those from countries with high HIV endemicity); and injecting drug users. Enzyme immunoassay is the gold standard for screening and diagnosis, although rapid HIV (point-of-care) tests are an acceptable alternative and may increase the uptake among individuals who would otherwise be unwilling to be tested (<a href=\"http://ecdc.europa.eu/en/publications/publications/101129_gui_hiv_testing.pdf\">HIV testing: Increasing uptake and effectiveness in the European Union (European Centre for Disease Prevention and Control, December 2010)</a>). \n\n</para>\n    </Body>\n    <References/>\n  </Section>\n  <Section sectionId=\"404\" modifiedDate=\"20190502092931\">\n    <Title>Resistance Testing</Title>\n    <Body>\n      <para>After primary infection, as a consequence of mutations introduced by the reverse transcriptase, which is error-prone and generates a large number of mutations, viral heterogeneity increases and after a while patients are infected by different populations of HIV. Viruses evolving in patients, especially those who have received nonsuppressive therapy, may develop drug resistance due to mutations in the regions coding for the targets of therapy, such as protease, reverse transcriptase and gp41. Transmitted drug resistance may also occur.\n\n</para>\n      <para>Although resistance may be due to different factors (reduced absorption of the drug, activation, interactions with food or other drugs, poor compliance to drug schedules), the presence of HIV-resistant strains accounts for more than 70% of all HIV treatment failures. The success of highly active antiretroviral therapy (HAART) is significantly lower in patients who have previously taken anti-HIV drugs; if the previous therapy did not completely suppress viral replication, the resistant variants are likely to evolve into new variants resistant to one of more of the new combination drugs. Cross-resistance occurs when mutations conferring resistance to a particular drug also confer resistance to other drugs, usually of the same therapeutic class.\n\n</para>\n      <para>Recent trials have confirmed the benefit of resistance testing in directing drug selection for drug therapy. Resistance testing could help in determining the optimal drug cocktail to use or to substitute in case that ongoing therapy is failing (<REF id=\"1689287\">Hirsch, M.S. et al., 2008</REF>; <REF id=\"1689286\">Wainberg, M.A. et al., 2011</REF>). Testing may also improve patient outcome, reduce exposure to unnecessary side effects, and reduce costs associated with treatment. The International AIDS Society - USA has concluded that resistance testing should be used for patient management in several situations, such as newly diagnosed patients, virologic failure or pregnancy. \n\n</para>\n      <para>Different companies have developed methods for resistance testing, based on phenotyping and on genotyping. Phenotyping consists in the analysis of selected regions associated with mutations conferring drug resistance (RT and protease), which are amplified by PCR and integrated into an infectious strain of HIV-1. This assay measures the level of drug needed to block the virus. Monogram and Virco both offer phenotyping services for HIV.\n\n</para>\n      <para>Genotyping consists in the direct examination of PCR-amplified sequences or on methods based on the analysis of specific codons associated with resistance. The sequence is compared with sequences known to cause resistance. Genotyping results are generally available more quickly than phenotyping. However the results are more difficult to interpret because the physician must compare them against a growing database of characterized mutations. \n\n</para>\n      <para>Virtual phenotyping, available through Virco, involves genotyping the virus and then predicting phenotypic susceptibility based on large database of genotypic/phenotypic correlations.  \n\n</para>\n      <para>Genotyping and phenotyping are tests based on an evolving field, and interpretation requires analysis by someone with experience using these assays. The following table presents information on some commercially available drug resistance assays.<FREETABLE id=\"18\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>\n\n      <TR>\n      <TD COLSPAN=4 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Representative drug resistance assays available for analysis of HIV</B></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Company</B></TD>\n      <TD WIDTH=\"100\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Name of Test</B></TD>\n      <TD WIDTH=\"100\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Kind of Test</B></TD>\n      <TD WIDTH=\"143\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Analysis</B></TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Affymetrix</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      GeneChip HIV PRT</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ABI/Perkin Elmer</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      HIV genotyping system</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Applied Sciences</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping test</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Chiron</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping test</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Innogenetics</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      INNO-LiPA</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Specialty Labs</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      GenotypeR Plus</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Stanford</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ABL</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Virco</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      VircoGEN</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Virco</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Antivirogram</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Phenotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Monogram</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      PhenoSense</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Phenotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease; also gp41 and integrase</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Visible Genetics</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      TruGene</TD>\n      <TD WIDTH=\"100\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Genotyping</TD>\n      <TD WIDTH=\"143\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Reverse transcriptase and protease</TD>\n      </TR>\n\n</TABLE>\n]]></FREETABLE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1689286\" medline_id=\"21848464\">\n        <Title>Development of antiretroviral drug resistance</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>365</Volume>\n        <Issue>7</Issue>\n        <Page>637</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Wainberg, M.A.</Author>\n          <Author>Zaharatos, G.J.</Author>\n          <Author>Brenner, B.G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1689287\" medline_id=\"18549313\">\n        <Title>Antiretroviral drug resistance testing in adult HIV-1 infection: 2008 recommendations of an International AIDS Society-USA panel</Title>\n        <SourceTitle>Clinical Infectious Diseases</SourceTitle>\n        <PubMedTitle>Clin Infect Dis</PubMedTitle>\n        <Volume>47</Volume>\n        <Issue>2</Issue>\n        <Page>266</Page>\n        <Year>2008</Year>\n        <Authors>\n          <Author>Hirsch, M.S.</Author>\n          <Author>Günthard, H.F.</Author>\n          <Author>Schapiro, J.M.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n</Section>\n<Section sectionId=\"2936\" modifiedDate=\"20181213032631\">\n  <Title>Prevention</Title>\n  <Body>\n    <para>While an effective AIDS vaccine is clearly needed in order to end the AIDS pandemic, no such product has yet been successfully developed. This means that alternative and effective prevention strategies must be consistently applied to reduce the rate of new HIV infections until an AIDS vaccine does become available (<REF id=\"2948271\">Fauci, A.S., 2017</REF>). Prevention packages should be individualized for specific regions and countries, based on the prevalent risk behaviors and patterns of transmission (<REF id=\"1199753\">Cohen, M.S. et al., 2008</REF>). Efforts to improve availability and ensure maximum usage of said methods is equally important, and will require the commitment of governments, NGOs and international agencies. \n\n</para>\n    <para>Despite the lack of an effective vaccine, progress has been made toward the prevention of HIV, as explained further in the following sections. Barrier methods were among the earliest prevention strategies, and are still useful. Used consistently, condoms can reduce HIV transmission in HIV-serodiscordant heterosexual couples by more than 70% (<REF id=\"2947853\">Giannou, F.K. et al., 2016</REF>). Male circumcision has been shown to reduce a man&apos;s risk of HIV acquisition from an infected female partner (<REF id=\"2947862\">Schenker, I., 2018</REF>). Topical microbicides show promise for HIV prevention in women. A vaginal gel containing the antiretroviral drug, tenofovir, prevented heterosexual acquisition of HIV in women in a trial conducted in South Africa (CAPRISA 004) (<REF id=\"1530496\">Karim, Q.A. et al., 2010</REF>). Preexposure prophylaxis (PrEP) can prevent HIV infection in men who have sex with men as well as in heterosexual men and women (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Based on findings of the HPTN 052 study, which showed that treating to undetectable levels in the infected partner reduced HIV transmission in serodiscordant couples by 96% (<REF id=\"1678176\">Cohen, M.S. et al., 2011</REF>), the Prevention Access Campaign was launched in 2016 (<REF id=\"2947855\">Anonymous, 2017</REF>). Modeling studies indicate that that universal testing and aggressive treatment of HIV-infected people could eventually extinguish the HIV epidemic (<REF id=\"1689284\">Granich, R.M. et al., 2009</REF>); this strategy, known as &quot;test and treat,&quot; has been incorporated into UNAID&apos;s 90-90-90 plan (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).\n\n</para>\n    <para>Proven strategies available at this time for the prevention of HIV transmission include: \n<LI>rapid, routine HIV testing</LI>\n      <LI>education</LI>\n      <LI>sexual abstinence, monogamy, limiting the number of sexual partners</LI>\n      <LI>barrier methods (e.g., condoms)</LI>\n      <LI>provision of clean needles and syringes to drug users</LI>\n      <LI>programs to interrupt mother-to-infant transmission (e.g., caesarean delivery, antiretroviral therapy)</LI>\n      <LI>preexposure prophylaxis</LI>\n      <LI>medical male circumcision</LI>\n      <LI>treatment of the infected partner in serodiscordant couples</LI>\n    </para>\n  </Body>\n  <References>\n    <Reference id=\"1199753\" medline_id=\"18382737\">\n      <Title>The spread, treatment, and prevention of HIV-1: Evolution of a global pandemic</Title>\n      <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n      <PubMedTitle>J Clin Invest</PubMedTitle>\n      <Volume>118</Volume>\n      <Issue>4</Issue>\n      <Page>1244</Page>\n      <Year>2008</Year>\n      <Authors>\n        <Author>Cohen, M.S.</Author>\n        <Author>Hellmann, N.</Author>\n        <Author>Levy, J.A.</Author>\n        <Author>Decock, K.</Author>\n        <Author>Lange, J.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"1530496\">\n      <Title>Effectiveness and safety of tenofovir gel, an antiretroviral microbicide, for the prevention of HIV infection in women</Title>\n      <SourceTitle>Science</SourceTitle>\n      <PubMedTitle>Science</PubMedTitle>\n      <Volume>329</Volume>\n      <Issue>5996</Issue>\n      <Page>1168</Page>\n      <Year>2010</Year>\n      <Authors>\n        <Author>Karim, Q.A.</Author>\n        <Author>Karim, S.S.</Author>\n        <Author>Frohlich, J.A.</Author>\n        <Author>et al.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"1678176\" medline_id=\"21767103\">\n      <Title>Prevention of HIV-1 infection with early antiretroviral therapy</Title>\n      <SourceTitle>New England Journal of Medicine</SourceTitle>\n      <PubMedTitle>N Engl J Med</PubMedTitle>\n      <Volume>385</Volume>\n      <Issue>6</Issue>\n      <Page>493</Page>\n      <Year>2011</Year>\n      <Authors>\n        <Author>Cohen, M.S.</Author>\n        <Author>Chen, Y.Q.</Author>\n        <Author>McCauley, M.</Author>\n        <Author>Gamble, T.</Author>\n        <Author>Hosseinipour, M.C.</Author>\n        <Author>Kumarasamy, N.</Author>\n        <Author>Hakim, J.G.</Author>\n        <Author>Kumwenda, J.</Author>\n        <Author>Grinsztejn, B.</Author>\n        <Author>Pilotto, J.H.</Author>\n        <Author>Godbole, S.V.</Author>\n        <Author>Mehendale, S.</Author>\n        <Author>Chariyalertsak, S.</Author>\n        <Author>Santos, B.R.</Author>\n        <Author>Mayer, K.H.</Author>\n        <Author>Hoffman, I.F.</Author>\n        <Author>Eshleman, S.H.</Author>\n        <Author>Piwowar-Manning, E.</Author>\n        <Author>Wang, L.</Author>\n        <Author>Makhema, J.</Author>\n        <Author>Mills, L.A.</Author>\n        <Author>de Bruyn, G.</Author>\n        <Author>Sanne, I.</Author>\n        <Author>Eron, J.</Author>\n        <Author>Gallant, J.</Author>\n        <Author>Havlir, D.</Author>\n        <Author>Swindells, S.</Author>\n        <Author>Ribaudo, H.</Author>\n        <Author>Elharrar, V.</Author>\n        <Author>Burns, D.</Author>\n        <Author>Taha, T.E.</Author>\n        <Author>Nielsen-Saines, K.</Author>\n        <Author>Celentano, D.</Author>\n        <Author>Essex, M.</Author>\n        <Author>Fleming, T.R.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"1689284\" medline_id=\"19038438\">\n      <Title>Universal voluntary HIV testing with immediate antiretroviral therapy as a strategy for elimination of HIV transmission: a mathematical model</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>373</Volume>\n      <Issue>9657</Issue>\n      <Page>48</Page>\n      <Year>2009</Year>\n      <Authors>\n        <Author>Granich, R.M.</Author>\n        <Author>Gilks, C.F.</Author>\n        <Author>Dye, C.</Author>\n        <Author>De Cock, K.M.</Author>\n        <Author>Williams, B.G.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2944306\" medline_id=\"30049419\">\n      <Title>HIV</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>392</Volume>\n      <Issue>10148</Issue>\n      <Page>685</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Ghosn, J.</Author>\n        <Author>Taiwo, B.</Author>\n        <Author>Seedat, S.</Author>\n        <Author>Autran, B.</Author>\n        <Author>Katlama, C.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2947853\" medline_id=\"26488070\">\n      <Title>Condom effectiveness in reducing heterosexual HIV transmission: A systematic review and meta-analysis of studies on HIV serodiscordant couples</Title>\n      <SourceTitle>Expert Review of Pharmacoeconomics &amp; Outcomes Research</SourceTitle>\n      <PubMedTitle>Expert Rev Pharmacoecon Outcomes Res</PubMedTitle>\n      <Volume>16</Volume>\n      <Issue>4</Issue>\n      <Page>489</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Giannou, F.K.</Author>\n        <Author>Tsiara, C.G.</Author>\n        <Author>Nikolopoulos, G.K.</Author>\n        <Author>Talias, M.</Author>\n        <Author>Benetou, V.</Author>\n        <Author>Kantzanou, M.</Author>\n        <Author>Bonovas, S.</Author>\n        <Author>Hatzakis, A.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2947855\" medline_id=\"29096785\">\n      <Title>U=U taking off in 2017</Title>\n      <SourceTitle>The Lancet. HIV</SourceTitle>\n      <PubMedTitle>Lancet HIV</PubMedTitle>\n      <Volume>4</Volume>\n      <Issue>11</Issue>\n      <Page>e475</Page>\n      <Year>2017</Year>\n      <Authors/>\n    </Reference>\n    <Reference id=\"2947862\" medline_id=\"29969309\">\n      <Title>Cutting-edge success in preventing heterosexual HIV transmission in Africa: Voluntary medical male circumcision has reached 15 million men</Title>\n      <SourceTitle>AIDS Education and Prevention</SourceTitle>\n      <PubMedTitle>AIDS Educ Prev</PubMedTitle>\n      <Volume>30</Volume>\n      <Issue>3</Issue>\n      <Page>232</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Schenker, I.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2948271\" medline_id=\"29052689\">\n      <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic</Title>\n      <SourceTitle>JAMA - Journal of the American Medical Association</SourceTitle>\n      <PubMedTitle>JAMA</PubMedTitle>\n      <Volume>318</Volume>\n      <Issue>16</Issue>\n      <Page>1535</Page>\n      <Year>2017</Year>\n      <Authors>\n        <Author>Fauci, A.S.</Author>\n      </Authors>\n    </Reference>\n  </References>\n  <Section sectionId=\"399\" modifiedDate=\"20181220120037\">\n    <Title>Prophylactic HIV Vaccines</Title>\n    <Body>\n      <para>The development of a vaccine capable of protecting against HIV infection presents a series of unique difficulties, and has been challenging researchers since the virus was identified (<REF id=\"944030\">Markel, H., 2005</REF>). In contrast to other viruses for which vaccines have been successfully developed, HIV replication is controlled primarily by cellular, rather than humoral, immune responses. \n\n\n\n</para>\n      <para>The main obstacle to vaccine development is the rapid replication, compounded by the genetic diversity and high rate of mutation and recombination of this virus, which evolves rapidly in the host. Protective immunity elicited by a vaccine must exceed the efficacy of the natural immune response, which is unable to clear the virus, and should be effective against the many clades and strains existing both globally and within a single infected individual (<REF id=\"1024845\">Girard, M.P. et al., 2006</REF>; <REF id=\"1164361\">Montefiori, D. et al., 2007</REF>; <REF id=\"2947496\">Hemelaar, J. et al., 2019</REF>). In spite of the many recognized challenges, at least a moderately effective HIV vaccine is needed in order to achieve a durable end to the AIDS pandemic (<REF id=\"2948271\">Fauci, A.S., 2017</REF>).\n\n</para>\n      <para>Several potential HIV-1 vaccine strategies have been tested to date in clinical trials, including HIV-1 envelope (Env) gp120 subunit vaccines, adenovirus serotype 5 (Ad5) vectors expressing internal proteins (Gag/Pol/Nef), DNA vaccine prime plus Ad5 vector boost, canarypox ALVAC vector prime plus Env gp120 boost, and--most recently--mosaic HIV-1 vaccines. The latter are potentially the most promising, as they incorporate global mosaic antigens from various group M strains of the virus, and thus may circumvent the issue of viral diversity. The phase I/II APPROACH trial confirmed the safety and immunogenicity of a mosaic Ad26/Ad26 plus gp140 HIV-1 vaccine, consisting in priming with Ad26 vectors expressing bioinformatically optimised mosaic HIV-1 envelope (Env)/Gag/Pol immunogens and boosting with Ad26 vectors plus adjuvanted Env gp140 protein. The trial recruited 393 healthy, HIV-negative adults in Africa, Thailand and the U.S. who were randomly assigned to receive 1 of 7 vaccine combinations or placebo. All of the vaccine regimens triggered immunogenic responses in the study subjects, with good tolerability. In a parallel study in rhesus monkeys, two-thirds of animals given the candidate vaccine that was most immunogenic in humans were fully protected against repeated challenge with simian-HIV (<REF id=\"2869568\">Barouch, D.H. et al., 2018</REF>).\n\n</para>\n      <para>Information on candidate AIDS vaccines in active clinical and preclinical development appears in the following table.<COMPETITIVE id=\"78\">\n          <TABLE>\n            <TR>\n              <TD>Vaccines under investigation for the prevention or treatment of AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Description</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=197440&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-1 Immunogen</a>\n              </TD>\n              <TD>Immune Response BioPharma</TD>\n              <TD>Inactivated gp120 - depleted HIV - 1 immunogen (strain HHZ - 321 from Zaire) inactivated by beta - propiolactone and irradiation,  emulsified in mineral oil (Incomplete Freud&apos;s Adjuvant)</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795404&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ITV-1</a>\n              </TD>\n              <TD>Immunotech Laboratories</TD>\n              <TD>AIDS vaccine consisting of an inactivated purified extract of porcine pepsin recognizing HIV gp41 and gp120 proteins</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291052&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AIDSVAX gp120 B/E</a>\n              </TD>\n              <TD>Walter Reed Army Institute</TD>\n              <TD>HIV - 1 vaccine consisting of a recombinant CHO - produced fusion protein containing two different gp120 envelope antigens: MN derived from a T - cell tropic or syncytium - inducing HIV - 1 B subtype,  and A244,  derived from the macrophage - tropic CM244 HIV E subtype</TD>\n              <TD>Phase III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=877379&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC-HIV</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Canarypox - based vaccine expressing HIV - 1 envelope glycoprotein (clade C),  glycoprotein gp41 (clade B),  gag (clade B) and protease (clade B) antigens</TD>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789554&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">TV1.C gp120 Env/1086.C gp120 Env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Bivalent AIDS vaccine consisting of two recombinant HIV - 1 subtype C gp120 antigens,  TV1.C and 1086.C; expressed in CHO cells</TD>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435169&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AGS-004</a>\n              </TD>\n              <TD>Argos Therapeutics</TD>\n              <TD>AIDS vaccine consisting of dendritic cells electroporated with autologous amplified HIV - 1 gag,  nef,  rev and vpr RNA antigens and CD40 ligand RNA</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=301127&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC E120TMG</a>\n              </TD>\n              <TD>Walter Reed Army Institute/ Sanofi Pasteur</TD>\n              <TD>AIDS vaccine consisting of a recombinant canarypox vector expressing HIV - 1 subtype E envelope gp120 - TM (from a primary isolate) and gag and pol/protease genes from HIV - 1 subtype B - (LAI),  under the control of vaccine virus H6 and I3L promoters,  respectively</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915290&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos.HIV</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD>Recombinant replication - deficient Ad26 vectored vaccine consisting of 3 Ad26 vectors,  one containing a mosaic insert of envelope (Env) sequence,  and 2 vectors containing mosaic inserts of Gag and Pol sequences</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925145&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos4.HIV</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD>Tetravalent human immunodeficiency virus (HIV) vaccine comprising a mixture of four replication - deficient adenoviral serotype 26 (rAd26) vectors encoding a mosaic synthetic cytoplasmic domain fragment (7aa) of HIV envelope protein C4 (C4D7/mos2SEnv),  and non - synthetic envelope glycoproteins mos1Env,  mos1GagPol and mos2GagPol,  respectively</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925146&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Clade C gp140</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD>HIV vaccine containing clade C gp140 protein mixed with aluminum phosphate adjuvant</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392675&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-LIPO-5</a>\n              </TD>\n              <TD>ANRS</TD>\n              <TD>AIDS vaccine consisting of a mixture of 5 lipopeptides containing CTL epitopes from HIV - 1 subtype B. Two peptides from Gag (aa 17 - 35; aa 253 - 284),  two peptides from Nef (aa 66 - 97; aa 116 - 145) and one peptide from Pol (aa 325 - 355). Each peptide is modified in the C - terminal position by the addition of a palmitoyl - lysylamide group [K(Palm) - NH2] to form the lipopeptide</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315937&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LC-002</a>\n              </TD>\n              <TD>Genetic Immunity</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid (pLWXu1) encoding for 15 HIV proteins and formulated into a mannosilated particle using the Genetic Immunity&apos;s immune amplification platform technology</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=429800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-HIV62B</a>\n              </TD>\n              <TD>GeoVax Labs/ National Institute Allergy Infect Dis</TD>\n              <TD>HIV vaccine comprising a non - replicating recombinant modified vaccinia Ankara (rMVA62B) encoding HIV - 1 HXB2 gag/pol,  and a truncated HIV - 1 ADA envelope (env) protein lacking the cytoplasmic tail</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=758734&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVAmos</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD>AIDS vaccine consisting of two recombinant modified vaccinia Ankara (MVA) viruses,  one encoding for the HIV - 1 mosaic 1 (M1) env,  gag and  pol genes,  and the other one encoding for the HIV - 1 mosaic 2 (M2) env,  gag and pol genes</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=736800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VAC-3S</a>\n              </TD>\n              <TD>InnaVirVax</TD>\n              <TD>Therapeutic HIV vaccine directed to the highly conserved gp41,  3S motif of HIV - 1</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=833319&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VIH-TriMix-ARNm</a>\n              </TD>\n              <TD>IDIBAPS</TD>\n              <TD>AIDS therapeutic vaccine consisting of the combination of mRNA,  rationally designed HIV antigens and TriMix</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=375612&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV014-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine composed of 4 adenoviral vectors (in a 3:1:1:1 ratio) that encode the HIV - 1 Gag/Pol polyprotein from clade B (AdtGagPol(B).11D) and HIV - 1 Env glycoproteins from clades A (Adgp140(A).11D),  B (Adtgp140dv12(B).11D),  and C (Adgp140(C).11D),  respectively</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=400981&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVDNA016-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Multiclade,  multivalent HIV - 1 DNA vaccine composed of six plasmids respectively encoding Gag clade B (VRC - 4401),  Pol clade B (VRC - 4409),  Nef clade B (VRC - 4404),  Env clade A (VRC - 5736),  Env clade B (VRC - 5737) and Env clade C (VRC - 5738)</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=871553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp140</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD>Trimeric glycoprotein 140</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428304&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pGA2/JS7</a>\n              </TD>\n              <TD>GeoVax Labs/ National Institute Infectious Dis</TD>\n              <TD>DNA plasmid containing gag,  pro,  RT,  env,  tat,  rev,  vpu genes from HIV - 1 clade B</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=754344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad35-GRIN</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>AIDS vaccine consisting of recombinant adenoviral - 35 vector encoding GRIN fusion protein based on gag,  RT,  integrase and nef (HIV - 1 subtype A)</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709822&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CEvac</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV vaccine consisting of DNA encoding for HIV - 1 group M p24gag conserved elements (p24Core 1 and p24Core2)</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789679&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ChAdV63.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD>HIV vaccine consisting of a replication - incompetent chimpanzee adenovirus (ChAdV - 63) encoding a chimeric fusion protein (HIVCON) comprising the most highly conserved regions of HIV - 1 Gag,  Pol,  Vif,  and Env</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-C</a>\n              </TD>\n              <TD>EuroVacc Foundation</TD>\n              <TD>HIV DNA - vaccine based on a representative Chinese subtype C isolate CN54</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805333&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-PT123</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of DNA plasmids encoding for the clade C ZM96 Gag and gp140 and CN54 Pol - Nef HIV - 1 genes</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=463084&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FIT-06</a>\n              </TD>\n              <TD>FIT Biotech</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid (GTU(R)) expressing HIV - 1 B - clade nef,  rev,  tat,  gag,  pol,  env and CTL epitopes</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1012613&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">INO-6145</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals</TD>\n              <TD>Human immunodeficiency virus (HIV) vaccine comprising plasmid DNA encoding synthethic HIV - 1 - derived multiclade consensus Gag and Pol </TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=879292&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA HIV-B</a>\n              </TD>\n              <TD>ANRS</TD>\n              <TD>Recombinant modified Vaccinia virus ankara vectored vaccine,  encoding for full - length sequence of gag (aa 1 - 512),  fragments from pol (aa 172 - 219,  325 - 383,  461 - 519) and nef (66 - 147,  182 - 206) from HIV - 1 (isolate BRU/LAI)</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=439426&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD>Modified vaccinia Ankara (MVA) virus encoding a chimeric fusion protein (HIVCON) comprising the most highly conserved regions of HIV Gag,  Pol,  Vif,  and Env</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=981286&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Mosaic gp140</a>\n              </TD>\n              <TD>Janssen</TD>\n              <TD>HIV - 1 mosaic M gp140 Env trimer</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709739&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-GP</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals</TD>\n              <TD>Multi - subtype vaccine based on synthetic HIV - 1 immunogens targeting two env antigens as well as gag and pol antigens</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795545&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">THV-01</a>\n              </TD>\n              <TD>Theravectys</TD>\n              <TD>AIDS therapeutic live recombinant vaccine consisting of the combination of THV01 - 1 and THV01 - 2 lentiviral vectors encoding HIV antigens under the regulation of THV - PROM human promoter</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=471960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tat Oyi</a>\n              </TD>\n              <TD>Biosantech</TD>\n              <TD>AIDS vaccine consisting of a synthetic Tat variant of 101 residues (HIV - 1 Oyi strain)</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=882712&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">p55(gag)</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of plasmid DNA encoding the full length p55gag from HIV - 1 group M</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789680&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pSG2.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD>HIV vaccine consisting of a DNA plasmid (pSG2) encoding a chimeric fusion protein (HIVCON) comprising the most highly conserved regions of HIV - 1 Gag,  Pol,  Vif,  and Env</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923551&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AD4-EnvC150</a>\n              </TD>\n              <TD>PaxVax/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a replication - competent adenovirus type 4 vector encoding an optimized HIV clade C env protein (gp150 1086.C)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661464&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.ENVA.01 HIV-1</a>\n              </TD>\n              <TD>Crucell/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of recombinant adenovirus serotype 26 expressing HIV clade A Env antigen</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991353&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-EnvCN54</a>\n              </TD>\n              <TD>Imperial College</TD>\n              <TD>HIV vaccine consisting of live replication - competent adenovirus 4 vector encoding envelope glycoprotein derived from HIV - 1 clade C strain CN54</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923549&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-mGag</a>\n              </TD>\n              <TD>PaxVax/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a replication - competent adenovirus type 4 vector encoding an optimized HIV Gag antigen (mosaic Gag)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661445&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad5.ENVA.48HIV-1</a>\n              </TD>\n              <TD>Crucell/ National Institute Allergy Infect Dis/ Beth Israel Deaconess Medical Center</TD>\n              <TD>Chimeric adenovirus serotype 5 (Ad5) with seven hexon variable regions (HVRs) derived from Ad48 HIV - 1 expressing the VRC EnvA antigen</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=861091&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BG505 SOSIP.664 gp140 trimers</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>Multiepitope AIDS vaccine consisting of soluble cleaved gp140 trimers based on HIV - 1 BG505 subtype A T/F virus Env gene,  in which each monomer comprises an A501C mutated HIV - 1 gp120 and a T605C mutated HIV - 1 gp41 linked by a disulfide bond,  trimer - stabilizing I559P and T322N mutations in gp41 and gp120 regions,  respectively and MPER domain deletion,  expressed in HEK293 cells</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=899722&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CH505TF</a>\n              </TD>\n              <TD>Duke University</TD>\n              <TD>Human immunodeficiency virus vaccine comprising gp120 envelope glycoproteins</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=741669&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CN54gp140</a>\n              </TD>\n              <TD>Medical Research Council (MRC)/ Imperial College</TD>\n              <TD>HIV vaccine consisting of a recombinant trimeric envelope glycoprotein gp140 derived from HIV - 1 clade C strain CN54</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=687890&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DCV3</a>\n              </TD>\n              <TD>Hospital Clinic</TD>\n              <TD>AIDS vaccine consisting of autologous monocyte - derived dendritic cells pulsed ex vivo with autologous heat - inactivated HIV - 1</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923518&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA CON-S env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid encoding for a group M consensus envelope gene with shortened consensus variable loops (CON - S) env gene </TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923534&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Mosaic env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid encoding for a designed env gene (Mosaic env)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923514&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Nat-B env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid encoding for Nat - B env gene</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=821845&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA.HTI/MVA.HTI</a>\n              </TD>\n              <TD>Aelix Therapeutics</TD>\n              <TD>HIV vaccine consisting of a prime vaccine composed of 298H plasmid vector encoding T - cell immunogen comprising 16 polypeptide segments p17 (aa 17 - 94),  p24 (aa 30 - 43,  61 - 71,  91 - 150,  164 - 177,  217 - 231),  p2p7plp6 (aa 63 - 89),  protease (aa 45 - 99),  reverse transcriptase (RT,  aa 34 - 50,  210 - 264,  309 - 342),  integrase (aa 210 - 243,  266 - 282),  Vif (aa 25 - 50,  166 - 184),  Nef (aa 56 - 68) derived from HIV - 1 genome and linked via alanine linkers and a boost vaccine composed of modified vaccinia virus Ankara (MVA) vector encoding HIVCAT T - cell immunogen (HIT) comprising 16 polypeptide segments -  p17 (aa 17 - 94),  p24 (aa 30 - 43,  61 - 71,  91 - 150,  164 - 177,  217 - 231),  p2p7plp6 (aa 63 - 89),  protease (aa 45 - 99),  reverse transcriptase (RT,  aa 34 - 50,  210 - 264,  309 - 342),  integrase (aa 210 - 243,  266 - 282),  Vif (aa 25 - 50,  166 - 184),  Nef (aa 56 - 68) derived from HIV - 1 genome and linked via alanine linkers,  both under the control of cytomegalovirus (CMV) promoter</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=900317&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FLSC</a>\n              </TD>\n              <TD>National Institutes of Health (NIH)/ Profectus BioSciences</TD>\n              <TD>AIDS vaccines comprising a full - lenght single - chain (FLSC) analogue of the gp120 - CD4 receptor complex consisting of HIV - 1 Bal gp120 protein joined to the D1and D2 domains of CD4 by a 20 - amino - acid linker</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719339&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV MAG pDNA</a>\n              </TD>\n              <TD>Profectus BioSciences</TD>\n              <TD>Therapeutic HIV DNA vaccine based on two plasmid vectors: ProfectusVax HIV - 1 gag/pol and ProfectusVax HIV - 1 nef/tat/vif, env and containing bupivacaine</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=783050&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIVAX</a>\n              </TD>\n              <TD>University of Miami (UM)/ GeneCure</TD>\n              <TD>AIDS vaccine consisting of a live attenuated replication - defective HIV - 1 strain pseudotyped with vesicular somatitis virus type G (VSV - G) envelope protein</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=927219&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LFn-p24B/C</a>\n              </TD>\n              <TD>Vaccine Technologies (VTI)</TD>\n              <TD>AIDS vaccine consisting of detoxified anthrax lethal factor (LFn) fused to HIV - 1 p24 of subtype B/C</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435114&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CMDR</a>\n              </TD>\n              <TD>Walter Reed Army Institute</TD>\n              <TD>AIDS vaccine consisting of a recombinant modified vaccinia ankara  - Chiang Mai vector encoding for the HIV - 1 (subtype CRF_A/E,  Thailand) env (clade E,  CM235 isolate),  gag (clade A,  CM240 isolate) and pol (clade E,  CM240 isolate) genes</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991354&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CN54</a>\n              </TD>\n              <TD>Imperial College</TD>\n              <TD>HIV vaccine consisting of live non - replicating modified vaccinia Ankara (MVA) vector encoding envelope glycoprotein derived from HIV - 1 clade C strain CN54</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037346&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv3</a>\n              </TD>\n              <TD>University North Carolina, Chapel Hill</TD>\n              <TD>AIDS vaccine consisting of non - replicating poxvirus - modified vaccinia Ankara (MVA) virus transduced with a codon - optimized self - amplifying mRNA (saRNA) encoding second - generation M3 mosaic of conserved epitopes derived from HIV - 1 Gag/Pol</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037349&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv4</a>\n              </TD>\n              <TD>University North Carolina, Chapel Hill</TD>\n              <TD>AIDS vaccine consisting of non - replicating poxvirus - modified vaccinia Ankara (MVA) virus transduced with a codon - optimized self - amplifying mRNA (saRNA) encoding second - generation M4 mosaic of conserved epitopes derived from HIV - 1 Gag/Pol</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=308599&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MYM-V101</a>\n              </TD>\n              <TD>Mymetics</TD>\n              <TD>AIDS vaccine consisting of influenza virosomes composed of enveloped virus - like particles displaying a trimeric recombinant HIV - 1 gp41 (rGp41) and the 35aa lipopeptide P1 containing MPER and galactosyl ceramide mucosal receptor binding motif</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805334&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NYVAC-HIV-PT1</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccines based on recombinant NYVAC vaccinia viruses encoding for the clade C ZM96 Gag and gp140 and CN54 Pol - Nef HIV - 1 genes</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=469002&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-G</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals/ Walter Reed Army Institute</TD>\n              <TD>AIDS DNA vaccine consisting of SynCon immunogens targeting HIV - 1 clade A,  C and D gag,  pol and env proteins</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915203&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax DNA plasmid HIV-1 nef/tat/vif,env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid encoding for nef,  tat,  vif and env</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915206&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax VSV IN HIV envC</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a recombinant vesicular stomatitis virus (rVSV) encoding for the HIV envC gene</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=456307&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI DNA-C2</a>\n              </TD>\n              <TD>South African AIDS Vaccine Initiative/ University of Witwatersrand/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of two DNA plasmids expressing an HIV - 1 subtype C polyprotein comprising Gag - RT - Tat - Nef and an HIV - 1 subtype C truncated gp160 (gp150CT)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=409360&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI MVA-C</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of recombinant modified vaccinia Ankara vector (MVA) expressing polyprotein Gag - RT - Tat - Nef and truncated Env from HIV - 1 subtype C</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=451282&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VLP-TBI-pcDNA-TCI</a>\n              </TD>\n              <TD>State Res Cent Virology Biotech VECTOR</TD>\n              <TD>AIDS vaccine consisting of virus - like particles containing a DNA plasmid encoding about 80 CD8+ CTL and CD4+ Th epitopes from HIV - 1 Env,  Gag,  Pol and Nef (pcDNA - TCI) as a core,  encapsulated within a spermidine - polyglucin - TBI protein conjugate (TBI protein containing T -  and B - cell epitopes from Env and Gag proteins)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455063&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-027-00-VP</a>\n              </TD>\n              <TD>GenVec/ National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of adenoviral type 35 vector encoding HIV Env Clade A\n</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455064&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-038-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of adenoviral type - 5 vector encoding Env clade A\n</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923291&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-053-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of adenoviral type - 5 vector encoding env clade C</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923293&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-054-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of adenoviral type - 5 vector encoding gag and pol</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1030241&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVRGP096-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of a stabilized variant of the HIV - Env trimer</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006783&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">eOD-GT8 60mer</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>HIV vaccine consisting of self - assembling 60 - unit nanoparticles comprising an engineered outer domain (eOD) from HIV gp120 fused to a lumazine synthase protein via a G/S linker</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993174&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">env (A,B,C,A/E)/gag (C) DNA vaccine</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV - 1 DNA vaccine composed of a polyvalent DNA plasmid expressing clade C gag and clades A,  B,  C and A/E envelope constructs</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993181&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120 (A,B,C,A/E) protein vaccine</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV - 1 vaccine composed of gp 120 clade A,  B,  C and A/E recombinant proteins</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120-NefTat/AS01B</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD>HIV vaccine consisting of recombinant Nef and Tat regulatory proteins along with envelope glycoprotein gp120 derived from Clade C HIV isolate,  formulated with the AS01B adjuvant</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987944&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp145 C.6980</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV vaccine consisting of recombinant oligomeric gp145 clade C Env protein 6980</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=745516&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rAd5 EnvB</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>AIDS vaccine consisting of recombinant adenovirus serotype 5 expressing Env B</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=467570&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rVSVIN-N4CT9-Gag1</a>\n              </TD>\n              <TD>Profectus BioSciences</TD>\n              <TD>AIDS vaccine consisting of a highly attenuated (G gene truncations and N gene translocations) recombinant vesicular stomatitis virus (rVSV) Indiana serotype encoding human immunodeficiency virus type 1 gag\n</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878268&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rcAd26.MOS1.HIV-Env</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative/ Beth Israel Deaconess Medical Center</TD>\n              <TD>HIV vaccine consisting of a recombinant replication - competent E3 -  adenoviral vector serotype 26 (AD26) encoding mosaic1envelope (Mos1Env) of HIV serotype1(HIV1) antigen,  consisting of a peptide of length15 aa overlapping with11aa covering the sequence mosaic Env protein</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357275&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">recombinant o-gp140/MF59 adjuvant</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>HIV vaccine consisting of V2 - deleted oligomeric (o - gp140) envelope derived from the R5 HIV - 1 SF162 isolate,  adjuvanted in MF59</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027124&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027124</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD>AIDS vaccine consisting of autologous dendritic cells matured with an optimized cocktail (a1DC) and loaded with a conserved HIV gag and pol peptide pool (a1DC + conserved HIV peptides)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027126&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027126</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD>AIDS vaccine consisting of autologous dendritic cells matured with a standard prostaglandin E2 cocktail (pgDC) and loaded with a conserved HIV gag and pol peptide pool (pgDC + conserved HIV peptides)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027125&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027125</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD>AIDS vaccine consisting of autologous dendritic cells matured with a standard prostaglandin E2 cocktail (pgDC) and loaded with autologous  - inactivated HIV (pgDC + inactivated whole autologous HIV)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027123&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027123</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD>AIDS vaccine consisting of autologous dendritic cells matured with an optimized cocktail (a1DC) and loaded with autologous  - inactivated HIV (a1DC + inactivated whole autologous HIV)</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=417670&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SHIV vaccine</a>\n              </TD>\n              <TD>IGXBio</TD>\n              <TD>AIDS vaccine consisting of a DNA plasmid encoding the genome of the simian human immunodeficiency virus (SHIV_KU2) with deletions of the reverse transcriptase,  integrase and vif genes,  substitiution of the 3&apos; long terminal repeat with SV40 poly A sequences and substitution of SIV env and gag - nef with HIV - 1 env and gag - nef</TD>\n              <TD>IND Filed</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1035036&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ConM SOSIP</a>\n              </TD>\n              <TD>Universiteit Van Amsterdam/ Imperial College</TD>\n              <TD>AIDS vaccine consisting of a native - like Env (SOSIP) BG505 trimer - derived based on a group M consensus sequence with two disulfide bond added (A501C - T605C and A73C - A561C) and the following mutations: I559P,  H66R,  A316W,  I535M,  Q543N and the TD8 mutations: E47D,  K49E,  V65K,  E106T,  I165L,  E429R,  R432Q,  and A500R; expressed in HEK293T cells</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038073&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-11</a>\n              </TD>\n              <TD>Enochian BioSciences</TD>\n              <TD>Preventive HIV vaccine consisting of genetically engineered autologous human stem cells (HSC)</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038088&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-12</a>\n              </TD>\n              <TD>Enochian BioSciences</TD>\n              <TD>Therapeutic HIV vaccine consisting of genetically engineered autologous human stem cells (HSC)</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1003524&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-BN HIV</a>\n              </TD>\n              <TD>Janssen Pharmaceuticals/ Bavarian Nordic</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1029754&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vacc-CRX</a>\n              </TD>\n              <TD>Bionor</TD>\n              <TD>AIDS vaccine targeting neutralizing epitopes</TD>\n              <TD>Preclinical</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"944030\" medline_id=\"16120854\">\n        <Title>The search for effective HIV vaccines</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>353</Volume>\n        <Issue>8</Issue>\n        <Page>753</Page>\n        <Year>2005</Year>\n        <Authors>\n          <Author>Markel, H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1024845\" medline_id=\"16530298\">\n        <Title>A review of vaccine research and development: The human immunodeficiency virus (HIV)</Title>\n        <SourceTitle>Vaccine</SourceTitle>\n        <PubMedTitle>Vaccine</PubMedTitle>\n        <Volume>24</Volume>\n        <Issue>19</Issue>\n        <Page>4062</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Girard, M.P.</Author>\n          <Author>Osmanov, S.K.</Author>\n          <Author>Kieny, M.P.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2869568\">\n        <Title>Evaluation of a mosaic HIV-1 vaccine in a multicentre, randomised, double-blind, placebo-controlled, phase 1/2a clinical trial (APPROACH) and in rhesus monkeys (NHP 13-19)</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10143</Issue>\n        <Page>232</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Barouch, D.H.</Author>\n          <Author>Tomaka, F.L.</Author>\n          <Author>Wegmann, F.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947496\" medline_id=\"30509777\">\n        <Title>Global and regional molecular epidemiology of HIV-1, 1990-2015: A systematic review, global survey, and trend analysis</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>19</Volume>\n        <Issue>2</Issue>\n        <Page>143</Page>\n        <Year>2019</Year>\n        <Authors>\n          <Author>Hemelaar, J.</Author>\n          <Author>Elangovan, R.</Author>\n          <Author>Yun, J.</Author>\n          <Author>Dickson-Tetteh, L.</Author>\n          <Author>Fleminger, I.</Author>\n          <Author>Kirtley, S.</Author>\n          <Author>Williams, B.</Author>\n          <Author>Gouws-Williams, E.</Author>\n          <Author>Ghys, P.D.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2948271\" medline_id=\"29052689\">\n        <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic</Title>\n        <SourceTitle>JAMA - Journal of the American Medical Association</SourceTitle>\n        <PubMedTitle>JAMA</PubMedTitle>\n        <Volume>318</Volume>\n        <Issue>16</Issue>\n        <Page>1535</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Fauci, A.S.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"405\" modifiedDate=\"20181211114602\">\n    <Title>Topical Microbicides</Title>\n    <Body>\n      <para>Worldwide, nearly half of the adults living with HIV/AIDS and, in the United States, one-fourth of individuals estimated to be living with HIV/AIDS, are women. More than 90% of new infections are spread through unprotected sex, and heterosexual contact represents the primary source of risk for women (<REF id=\"1376618\">Cutler, B. and Justman, J., 2008</REF>). Topical microbicides act as chemical, biological and/or physical barriers to virus entry in the host, and may constitute an effective method for preventing HIV infection and breaking the chain of transmission that can be controlled by women, even in settings where female disempowerment is a significant driver of disease transmission (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). In the absence of an effective AIDS vaccine and in communities where use of condoms is low, effective topical microbicides (virucides) are the best alternative (<REF id=\"2798863\">Alexandre, K.B. et al., 2016</REF>; see also the <a href=\"http://www.ipmglobal.org\">International Partnership for Microbicides</a> web site). \n\n</para>\n      <para>Topical (intravaginal or intrarectal) microbicides may be formulated as gels, foams, films, tablets, suppositories or rings that can be inserted into the vagina or rectum, where the product is secreted. Microbicides can be broken down into three major groups: non-HIV-specific, moderately specific or highly specific to HIV (<REF id=\"2798863\">Alexandre, K.B. et al., 2016</REF>). \n\n</para>\n      <para>Nonspecific microbicides include buffering agents (e.g., BufferGel) and detergents or surfactants (e.g., spermicides such as nonoxynol-9, Savvy). Buffering agents alter the local pH, thereby inactivating the microorganism. Detergents act by solubilizing membrane proteins, which destroys the viral envelope. However, they may also disrupt the protective membranes of the vaginal epithelium, causing lesions that facilitate viral entry and actually increase the risk of infection. This was in fact observed in a study evaluating the HIV protective activity of nonoxynol-9 (<REF id=\"2798863\">Alexandre, K.B. et al., 2016</REF>). Another drawback of the nonspecific microbicides is their limited therapeutic window. \n\n</para>\n      <para>Products classified as moderately specific microbicides (e.g., Carraguard, PRO-2000) target the processes of viral adsorption and fusion, and have a somewhat wider therapeutic window. Due to their mechanism of action, they may prevent infection by other enveloped viruses such as <BACKGROUNDER id=\"39\">Herpes Simplex Virus</BACKGROUNDER>, in addition to HIV (<REF id=\"1078726\">Balzarini, J. and Van Damme, L., 2007</REF>). However, these products have not been successful at preventing HIV acquisition (<REF id=\"2798863\">Alexandre, K.B. et al., 2016</REF>).\n\n</para>\n      <para>Highly specific microbicides are based on compounds that target HIV replication at a step prior to virus integration into the target cell. They may act at the level of virus entry, reverse transcription of the viral RNA, or proviral DNA integration into the host cells. In vitro these compounds have been shown to block both virus-cell infection and cell-cell transmission of the virus (<REF id=\"1078726\">Balzarini, J. and Van Damme, L., 2007</REF>). In vivo in macaque monkeys, protection against SHIV challenge has been described with CCR5 inhibitors (<REF id=\"2798869\">Hartley, O. et al., 2018</REF>). \n\n</para>\n      <para>Positive results were reported in July 2010 from the CAPRISA 004 microbicide study, which evaluated a vaginal gel formulation of tenofovir disoproxil fumarate for the prevention of HIV infection in women. In the study, women using the tenofovir gel had 50% fewer HIV infections after one year of use compared to those using placebo; after 30 months of use, the incidence of HIV infection remained nearly 40% lower in the active treatment group (<REF id=\"1530496\">Karim, Q.A. et al., 2010</REF>). CAPRISA 004 was conducted by the Centre for the AIDS Programme of Research in South Africa (CAPRISA) with the support of the National Institute of Allergy and Infectious Diseases (NIAID). \n\n</para>\n      <para>The HIV reverse transcriptase inhibitor dapivirine has been formulated as a monthly vaginal ring for HIV prevention. In the ASPIRE trial, a phase III, randomized, double-blind, placebo-controlled trial enrolling 2,629 sexually active, HIV-seronegative women in four African countries, the incidence of HIV-1 infection in the dapivirine group was 27% lower than in the placebo group. In a post hoc analysis, higher rates of protection were observed among women over the age of 21 years; treatment adherence was also greater in this age group (<REF id=\"2467239\">Baeten, J.M. et al., 2016</REF>). In the DREAM study, womens&apos; risk of HIV acquisition was reduced by more than half through use of the dapivirine ring. The dapivirine ring is currently under regulatory review by the European Medicines Agency (EMA) through an Article 58 application. This procedure allows the EMA, in cooperation with WHO, to provide a scientific opinion on the safety, efficacy and quality of medicines that would be marketed exclusively outside of the European Union--specifically in low- and middle-income countries--for diseases of major public health interest.\n\n</para>\n      <para>Several pharmaceutical companies are responding to the call for microbicide development, as indicated in the table below. Approximately 50 different compounds are in various stages of development, according to one estimate (<REF id=\"1639462\">Hladik, F. and Doncel, G.F., 2010</REF>; see also <a href=\"http://www.mtnstopshiv.org\">Microbicide Trials Network</a>). \n\n<COMPETITIVE id=\"79\">\n          <TABLE>\n            <TR>\n              <TD>Microbicides in development for the prevention of HIV and other sexually transmitted infections</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Description</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=281553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>4 - [4 - (2, 4, 6 - Trimethylphenylamino)pyrimidin - 2 - ylamino]benzonitrile </TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=321981&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Amphora</a>\n              </TD>\n              <TD>Evofem</TD>\n              <TD>Acid - buffering (pH 3.55) bioadhesive vaginal gel consisting of L - lactic acid,  citric acid,  potassium bitartrate (buffer salts),  benzoic acid (preservative),  xantham gum,  alginic acid (gelling agents),  glycerol (humectant) and water</TD>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=675477&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DS-003</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>2 - [1 - [2 - [4 - Methoxy - 7 - (2 - pyrazinyl) - 1H - pyrrolo[2, 3 - c]pyridin - 3 - yl]oxalyl]piperidin - 4 - ylidene] - 2 - phenylacetonitrile</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Combination of dapivirine and maraviroc delivered through a vaginal ring</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=658522&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Griffithsin</a>\n              </TD>\n              <TD>Population Council</TD>\n              <TD>12.7 kD protein isolated from red algae Griffithsia sp.</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528</a>\n              </TD>\n              <TD>ImQuest BioSciences</TD>\n              <TD>1 - (Cyclopropylmethyl) - 6 - (3, 5 - dimethylbenzoyl) - 5 - isopropylpyrimidine - 2, 4(1H, 3H) - dione</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Combination of vicriviroc and MK - 2048</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=773475&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5P12-RANTES</a>\n              </TD>\n              <TD>Orion Biotechnology</TD>\n              <TD>Fully recombinant human chemokine protein RANTES/CCL5 analog,  expressed in Pichia pastoris strain Bg08</TD>\n              <TD>Preclinical</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1078726\" medline_id=\"17336656\">\n        <Title>Microbicide drug candidates to prevent HIV infection</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>369</Volume>\n        <Issue>9563</Issue>\n        <Page>787</Page>\n        <Year>2007</Year>\n        <Authors>\n          <Author>Balzarini, J.</Author>\n          <Author>Van Damme, L.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1376618\" medline_id=\"18992405\">\n        <Title>Vaginal microbicides and the prevention of HIV transmission</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>8</Volume>\n        <Issue>11</Issue>\n        <Page>685</Page>\n        <Year>2008</Year>\n        <Authors>\n          <Author>Cutler, B.</Author>\n          <Author>Justman, J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1530496\">\n        <Title>Effectiveness and safety of tenofovir gel, an antiretroviral microbicide, for the prevention of HIV infection in women</Title>\n        <SourceTitle>Science</SourceTitle>\n        <PubMedTitle>Science</PubMedTitle>\n        <Volume>329</Volume>\n        <Issue>5996</Issue>\n        <Page>1168</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Karim, Q.A.</Author>\n          <Author>Karim, S.S.</Author>\n          <Author>Frohlich, J.A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1639462\">\n        <Title>Preventing mucosal HIV transmission with topical microbicides: Challenges and opportunities</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>88</Volume>\n        <Page>S3</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Hladik, F.</Author>\n          <Author>Doncel, G.F.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2467239\" medline_id=\"26900902\">\n        <Title>Use of a vaginal ring containing dapivirine for HIV-1 prevention in women</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>375</Volume>\n        <Issue>22</Issue>\n        <Page>2121</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Baeten, J.M.</Author>\n          <Author>Palanee-Phillips, T.</Author>\n          <Author>Brown, E.R.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798863\" medline_id=\"27429040\">\n        <Title>Progress and Perspectives on HIV-1 microbicide development</Title>\n        <SourceTitle>Virology</SourceTitle>\n        <PubMedTitle>Virology</PubMedTitle>\n        <Volume>497</Volume>\n        <Page>69</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Alexandre, K.B.</Author>\n          <Author>Mufhandu, H.T.</Author>\n          <Author>London, G.M.</Author>\n          <Author>Chakauya, E.</Author>\n          <Author>Khati, M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798869\" medline_id=\"29376550\">\n        <Title>Preventing HIV transmission through blockade of CCR5: Rationale, progress and perspectives</Title>\n        <SourceTitle>Swiss Medical Weekly</SourceTitle>\n        <PubMedTitle>Swiss Med Wkly</PubMedTitle>\n        <Volume>148</Volume>\n        <Page>w14580</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Hartley, O.</Author>\n          <Author>Martins, E.</Author>\n          <Author>Scurci, I.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"2964\" modifiedDate=\"20181213081941\">\n    <Title>Preexposure Prophylaxis</Title>\n    <Body>\n      <para>Preexposure prophylaxis (PrEP) involves the regular administration of suppressive antiretroviral therapy during periods of risk to healthy, non-HIV-infected individuals who are considered to be at high risk of exposure. This strategy has been successfully utilized to prevent mother-to-child transmission of HIV during pregnancy, childbirth and breastfeeding, as well as to prevent viral acquisition through sexual contact in men who have sex with men, heterosexual discordant couples, and individuals with multiple partners (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Like microbicides and vaccines, PrEP is useful in high-risk HIV-negative individuals who are not able to influence the behavior of their sexual partners, including women in the developing world. Although PrEP is ever more widely used as a method of preventing HIV infection (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>), use of this strategy remains suboptimal. Only 10% of individuals in the U.S. who are candidates for PrEP are using it, and in other countries this figure is even lower (<REF id=\"2948271\">Fauci, A.S., 2017</REF>).\n\n</para>\n      <para>The Pre-Exposure Prophylaxis Initiative (iPrEX) study evaluated the efficacy of a fixed-dose, single-tablet, coformulation of tenofovir disoproxil fumarate and emtricitabine (FTC-TDF) or placebo administered once daily to 1,251 and 1,248 randomized subjects, respectively. The iPrEx study was conducted in Peru, Ecuador, Brazil, Thailand, South Africa and the United States. The participants were HIV-seronegative men or transgender women who have sex with men. All individuals received testing for HIV infection, risk reduction counseling, condoms and management of sexually transmitted infections. Emergent infection with HIV was reported in 36 and 64 individuals in the active treatment and placebo group, respectively, indicating a relative reduction in the incidence of infection of 44% in the modified intention-to-treat population. The levels of HIV RNA in the plasma and T cell surface glycoprotein CD4+ T cell counts were found to be comparable among individuals with seroconversion in the two treatment cohorts. Similar time to seroconversion after RNA detection was also observed between the two cohorts. Safety evaluation revealed elevations in the concentration of creatinine in the serum of at least 1.1 times the upper limit of the normal range or &gt;1.5 times the baseline level in 2% and 1% of participants receiving the combination regimen and placebo, respectively. Increases in the levels of creatinine in the serum were resolved following discontinuation of treatment. Moderate nausea and unintentional weight loss of &gt;= 5% were observed more frequently in subjects treated with FTC-TDF than in those receiving placebo (<REF id=\"1572338\">Grant, R.M. et al., 2010</REF>). \n\n</para>\n      <para>Initially studied in MSM, the use of PrEP has since been extended to other at-risk groups. In the landmark HPTN 052 study, treating the infected partner reduced HIV transmission in serodiscordant couples by 96% (<REF id=\"1678176\">Cohen, M.S. et al., 2011</REF>). In July 2012, the FDA approved Truvada (tenofovir disoproxil fumarate/emtricitabine) for preexposure prophylaxis, to reduce the risk of HIV-1 infection among uninfected adults at high risk. The product was immediately made available for this new indication. In 2017, the combination was approved in Scotland, the first European country to give the nod to Truvada, in combination with safer sex practices, for pre-exposure prophylaxis to reduce the risk of sexually acquired HIV-1 infection in adults at high risk (<REF id=\"2649816\">Nandwani, R., 2017</REF>). Generic FTC-TDF combination formulations are now available in some countries, which should result in making PrEP a more widely accessible option (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). \n\n</para>\n      <para>More recently, attention has turned to HIV entry inhibitors, particularly those targeting the chemokine receptor CCR5, which is required for binding and entry of the virus into the host cell. Although in earlier stages of development, CCR5 inhibitors are envisioned for both oral and topical administration in PrEP (<REF id=\"2798869\">Hartley, O. et al., 2018</REF>).</para>\n    </Body>\n    <References>\n      <Reference id=\"1572338\" medline_id=\"21091279\">\n        <Title>Preexposure chemoprophylaxis for HIV prevention in men who have sex with men</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>363</Volume>\n        <Issue>27</Issue>\n        <Page>2587</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Grant, R.M.</Author>\n          <Author>Lama, J.R.</Author>\n          <Author>Anderson, P.L.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1678176\" medline_id=\"21767103\">\n        <Title>Prevention of HIV-1 infection with early antiretroviral therapy</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>385</Volume>\n        <Issue>6</Issue>\n        <Page>493</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Cohen, M.S.</Author>\n          <Author>Chen, Y.Q.</Author>\n          <Author>McCauley, M.</Author>\n          <Author>Gamble, T.</Author>\n          <Author>Hosseinipour, M.C.</Author>\n          <Author>Kumarasamy, N.</Author>\n          <Author>Hakim, J.G.</Author>\n          <Author>Kumwenda, J.</Author>\n          <Author>Grinsztejn, B.</Author>\n          <Author>Pilotto, J.H.</Author>\n          <Author>Godbole, S.V.</Author>\n          <Author>Mehendale, S.</Author>\n          <Author>Chariyalertsak, S.</Author>\n          <Author>Santos, B.R.</Author>\n          <Author>Mayer, K.H.</Author>\n          <Author>Hoffman, I.F.</Author>\n          <Author>Eshleman, S.H.</Author>\n          <Author>Piwowar-Manning, E.</Author>\n          <Author>Wang, L.</Author>\n          <Author>Makhema, J.</Author>\n          <Author>Mills, L.A.</Author>\n          <Author>de Bruyn, G.</Author>\n          <Author>Sanne, I.</Author>\n          <Author>Eron, J.</Author>\n          <Author>Gallant, J.</Author>\n          <Author>Havlir, D.</Author>\n          <Author>Swindells, S.</Author>\n          <Author>Ribaudo, H.</Author>\n          <Author>Elharrar, V.</Author>\n          <Author>Burns, D.</Author>\n          <Author>Taha, T.E.</Author>\n          <Author>Nielsen-Saines, K.</Author>\n          <Author>Celentano, D.</Author>\n          <Author>Essex, M.</Author>\n          <Author>Fleming, T.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2649816\" medline_id=\"28416197\">\n        <Title>Pre-exposure prophylaxis is approved in Scotland</Title>\n        <SourceTitle>The Lancet. HIV</SourceTitle>\n        <PubMedTitle>Lancet HIV</PubMedTitle>\n        <Volume>4</Volume>\n        <Issue>6</Issue>\n        <Page>e238</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Nandwani, R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798869\" medline_id=\"29376550\">\n        <Title>Preventing HIV transmission through blockade of CCR5: Rationale, progress and perspectives</Title>\n        <SourceTitle>Swiss Medical Weekly</SourceTitle>\n        <PubMedTitle>Swiss Med Wkly</PubMedTitle>\n        <Volume>148</Volume>\n        <Page>w14580</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Hartley, O.</Author>\n          <Author>Martins, E.</Author>\n          <Author>Scurci, I.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2948271\" medline_id=\"29052689\">\n        <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic</Title>\n        <SourceTitle>JAMA - Journal of the American Medical Association</SourceTitle>\n        <PubMedTitle>JAMA</PubMedTitle>\n        <Volume>318</Volume>\n        <Issue>16</Issue>\n        <Page>1535</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Fauci, A.S.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"3018\" modifiedDate=\"20190409081634\">\n    <Title>Male Circumcision</Title>\n    <Body>\n      <para>On the basis of studies conducted more than a decade ago, the practice of voluntary medical male circumcision--performed by a medical doctor under proper hygienic conditions--has become established as a method of reducing a man&apos;s risk of acquiring HIV  through heterosexual intercourse with an infected female partner (<REF id=\"2947862\">Schenker, I., 2018</REF>). In late 2006, the U.S. National Institutes of Health prematurely terminated two randomized controlled trials of adult male circumcision on the basis of the significant efficacy detected in an interim analysis. The studies, which enrolled 2,784 Kenyan men and 4,996 Ugandan men, demonstrated 53% and 51% reductions, respectively, in the incidence of new HIV infections among circumcised participants (<REF id=\"1083121\">Bailey, R.C. et al., 2007</REF>; <REF id=\"1083122\">Gray, R.H. et al., 2007</REF>). A previous study conducted in South Africa had also demonstrated a greater than 50% protective benefit (<REF id=\"1083116\">Auvert, B. et al., 2005</REF>). A study reported in early 2009 demonstrated that in addition to protecting against HIV, circumcision may reduce the incidence of <BACKGROUNDER id=\"39\">Herpes Simplex Virus</BACKGROUNDER> type 2 (HSV-2) infection as well as the prevalence of <BACKGROUNDER id=\"124\">Human Papillomavirus</BACKGROUNDER> (HPV) infection. The study enrolled more than 5,500 HIV-negative, uncircumcised adolescent boys and men (<REF id=\"1345730\">Tobian, A.A. et al., 2009</REF>). Circumcision of HIV-infected men does not prevent transmission of the infection to their HIV-negative female partners, however, according to a large trial also conducted in Uganda (<REF id=\"1394499\">Wawer, M.J. et al., 2009</REF>).\n\n</para>\n      <para>In 2006, a multinational campaign was launched with the aim of circumcising 27 million men in sub-Saharan Africa by 2021. It is estimated that by 2030, the practice of voluntary medical male circumcision will avert at least 500,000 HIV infections in Africa alone (<REF id=\"2947862\">Schenker, I., 2018</REF>). Between 2007 and 2017, with support from PEPFAR (the U.S. President&apos;s Emergency Fund for AIDS Relief), more than 15 million men and boys in 14 countries in sub-Saharan Africa underwent voluntary medical male circumcision (<REF id=\"2949342\">Davis, S.M. et al., 2018</REF>).</para>\n    </Body>\n    <References>\n      <Reference id=\"1083116\" medline_id=\"16231970\">\n        <Title>Randomized, controlled intervention trial of male circumcision for reduction of HIV infection risk: The ANRS 1265 Trial</Title>\n        <SourceTitle>PLoS Medicine</SourceTitle>\n        <PubMedTitle>PLoS Med</PubMedTitle>\n        <Volume>2</Volume>\n        <Issue>11</Issue>\n        <Page>e298</Page>\n        <Year>2005</Year>\n        <Authors>\n          <Author>Auvert, B.</Author>\n          <Author>Taljaard, D.</Author>\n          <Author>Lagarde, E.</Author>\n          <Author>Sobngwi-Tambekou, J.</Author>\n          <Author>Sitta, R.</Author>\n          <Author>Puren, A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1083121\" medline_id=\"17321310\">\n        <Title>Male circumcision for HIV prevention in young men in Kisumu, Kenya: A randomised controlled trial</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>369</Volume>\n        <Issue>9562</Issue>\n        <Page>643</Page>\n        <Year>2007</Year>\n        <Authors>\n          <Author>Bailey, R.C.</Author>\n          <Author>Moses, S.</Author>\n          <Author>Parker, C.B.</Author>\n          <Author>Agot, K.</Author>\n          <Author>Maclean, I.</Author>\n          <Author>Krieger, J.N.</Author>\n          <Author>Williams, C.F.</Author>\n          <Author>Campbell, R.T.</Author>\n          <Author>Ndinya-Achola, J.O.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1083122\" medline_id=\"17321311\">\n        <Title>Male circumcision for HIV prevention in men in Rakai, Uganda: A randomised trial</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>369</Volume>\n        <Issue>9562</Issue>\n        <Page>657</Page>\n        <Year>2007</Year>\n        <Authors>\n          <Author>Gray, R.H.</Author>\n          <Author>Kigozi, G.</Author>\n          <Author>Serwadda, D.</Author>\n          <Author>Makumbi, F.</Author>\n          <Author>Watya, S.</Author>\n          <Author>Nalugoda, F.</Author>\n          <Author>Kiwanuka, N.</Author>\n          <Author>Moulton, L.H.</Author>\n          <Author>Chaudhary, M.A.</Author>\n          <Author>Chen, M.Z.</Author>\n          <Author>Sewankambo, N.K.</Author>\n          <Author>Wabwire-Mangen, F.</Author>\n          <Author>Bacon, M.C.</Author>\n          <Author>Williams, C.F.</Author>\n          <Author>Opendi, P.</Author>\n          <Author>Reynolds, S.J.</Author>\n          <Author>Laeyendecker, O.</Author>\n          <Author>Quinn, T.C.</Author>\n          <Author>Wawer, M.J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1345730\" medline_id=\"19321868\">\n        <Title>Male circumcision for the prevention of HSV-2 and HPV infections and syphilis</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>360</Volume>\n        <Issue>13</Issue>\n        <Page>1298</Page>\n        <Year>2009</Year>\n        <Authors>\n          <Author>Tobian, A.A.</Author>\n          <Author>Serwadda, D.</Author>\n          <Author>Quinn, T.C.</Author>\n          <Author>Kigozi, G.</Author>\n          <Author>Gravitt, P.E.</Author>\n          <Author>Laeyendecker, O.</Author>\n          <Author>Charvat, B.</Author>\n          <Author>Ssempijja, V.</Author>\n          <Author>Riedesel, M.</Author>\n          <Author>Oliver, A.E.</Author>\n          <Author>Nowak, R.G.</Author>\n          <Author>Moulton, L.H.</Author>\n          <Author>Chen, M.Z.</Author>\n          <Author>Reynolds, S.J.</Author>\n          <Author>Wawer, M.J.</Author>\n          <Author>Gray, R.H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1394499\" medline_id=\"19616720\">\n        <Title>Circumcision in HIV-infected men and its effect on HIV transmission to female partners in Rakai, Uganda: A randomised controlled trial</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>374</Volume>\n        <Issue>9685</Issue>\n        <Page>229</Page>\n        <Year>2009</Year>\n        <Authors>\n          <Author>Wawer, M.J.</Author>\n          <Author>Makumbi, F.</Author>\n          <Author>Kigozi, G.</Author>\n          <Author>Serwadda, D.</Author>\n          <Author>Watya, S.</Author>\n          <Author>Nalugoda, F.</Author>\n          <Author>Buwembo, D.</Author>\n          <Author>Ssempijja, V.</Author>\n          <Author>Kiwanuka, N.</Author>\n          <Author>Moulton, L.H.</Author>\n          <Author>Sewankambo, N.K.</Author>\n          <Author>Reynolds, S.J.</Author>\n          <Author>Quinn, T.C.</Author>\n          <Author>Opendi, P.</Author>\n          <Author>Iga, B.</Author>\n          <Author>Ridzon, R.</Author>\n          <Author>Laeyendecker, O.</Author>\n          <Author>Gray, R.H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947862\" medline_id=\"29969309\">\n        <Title>Cutting-edge success in preventing heterosexual HIV transmission in Africa: Voluntary medical male circumcision has reached 15 million men</Title>\n        <SourceTitle>AIDS Education and Prevention</SourceTitle>\n        <PubMedTitle>AIDS Educ Prev</PubMedTitle>\n        <Volume>30</Volume>\n        <Issue>3</Issue>\n        <Page>232</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Schenker, I.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2949342\" medline_id=\"30173159\">\n        <Title>Progress in voluntary medical male circumcision for HIV prevention supported by the US president&apos;s emergency plan for AIDS relief through 2017: Longitudinal and recent cross-sectional programme data</Title>\n        <SourceTitle>BMJ Open</SourceTitle>\n        <PubMedTitle>BMJ Open</PubMedTitle>\n        <Volume>8</Volume>\n        <Issue>8</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Davis, S.M.</Author>\n          <Author>Hines, J.Z.</Author>\n          <Author>Habel, M.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"3747\" modifiedDate=\"20181212115043\">\n    <Title>Prevention of Perinatal Transmission</Title>\n    <Body>\n      <para>Prevention of transmission of HIV from an infected pregnant woman to her unborn child has been one of the most successful methods developed to date for preventing future cases of HIV and AIDS. In the absence of appropriate prophylactic therapy, the likelihood of mother-to-infant transmission is between 15% and 40%. By 2016, however, as a result of the widespread implementation of prophylactic antiretroviral therapy in pregnant HIV-positive women, the global rate of perinatal infection was less than 5%. More than 95% of HIV-positive pregnant and breastfeeding women must be diagnosed, treated and monitored in order to reduce this number further. In high-income settings, where antiretroviral therapy is typically initiated prior to pregnancy, the rate of mother-to-infant transmission is already close to zero (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Each year, women living with HIV give birth to more than one million HIV-exposed but uninfected (HEU) infants, versus just 160,000 HIV-positive infants (<REF id=\"2947507\">Bengtson, A.M. et al., 2019</REF>).</para>\n    </Body>\n    <References>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947507\" medline_id=\"30529212\">\n        <Title>Maternal immunisation to improve the health of HIV-exposed infants</Title>\n        <SourceTitle>The Lancet. Infectious Diseases</SourceTitle>\n        <PubMedTitle>Lancet Infect Dis</PubMedTitle>\n        <Volume>19</Volume>\n        <Issue>4</Issue>\n        <Page>e120</Page>\n        <Year>2019</Year>\n        <Authors>\n          <Author>Bengtson, A.M.</Author>\n          <Author>Sanfilippo, A.M.</Author>\n          <Author>Hughes, B.L.</Author>\n          <Author>Savitz, D.A.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n</Section>\n<Section sectionId=\"400\" modifiedDate=\"20190508024306\">\n  <Title>Treatment</Title>\n  <Body>\n    <para>Earlier treatment guidelines recommended treatment for patients on the basis of CD4 count and/or viral load. Since 2015, however, WHO has recommended immediate initiation of antiretroviral therapy for all individuals confirmed to be HIV-positive, regardless of CD4 cell count or age (<a href=\"http://www.who.int/hiv/pub/guidelines/earlyrelease-arv/en/\">Guideline on when to start antiretroviral therapy and on pre-exposure prophylaxis for HIV (World Health Organization, September 2015)</a>). This strategy, known as test and treat, is now standard in all major treatment guidelines (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Experimental evidence suggests that early initiation of antiretroviral drug therapy results in restriction of viral reservoirs, decreased inflammatory response and suppression of chronic, systemic immune activation (<REF id=\"2552671\">Krebs, S.J. and Ananworanich, J., 2016</REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).\n\n</para>\n    <para>A growing number of antiretroviral agents and combinations are currently on the market. The availability of these drugs, at least in Western nations where patients are able to afford them, has changed AIDS from a death sentence to a potentially chronic disease. In resource-poor countries, however, antiretroviral drugs have been available only for a short period of time, and largely due to the intervention of the UNAIDS, World Bank and other supragovernmental organizations. Although significant inroads have been made, antiretroviral coverage remains inadequate in resource-poor countries and is hindered further by the lack of financial resources, trained healthcare workers and technology (<REF id=\"2948271\">Fauci, A.S., 2017</REF>; <REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). Of an estimated 36.9 million people worldwide living with HIV, 21.7 million were currently on antiretroviral therapy in 2017 (<a href=\"http://www.unaids.org/en/resources/fact-sheet\">Global HIV &amp; AIDS statistics - 2018 fact sheet (UNAIDS, 2018)</a>, consulted December 3, 2018). \n\n</para>\n    <para>Combination therapy using three or more anti-HIV drugs, termed HAART or cART, results in sustained reductions in viral load and increases in CD4 cell counts and is the state of the art in HIV treatment. In the decades since HAART first became available, treatment has been simplified and streamlined thanks to the development of long-acting, fixed-dose combination formulations. Many patients can now be treated with as little as one pill daily, versus up to ten pills daily in three divided doses prior to the introduction of these formulations (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>). In countries where it is standard therapy, HAART has had an enormous impact on the demographics of AIDS and HIV disease. In these countries the number of patients dying from AIDS has dropped markedly, while the population of individuals living with HIV has increased (<REF id=\"2552675\">Badowski, M.E. et al., 2016</REF>). \n\n</para>\n    <para>HAART has greatly reduced HIV-associated mortality and morbidity, but does not completely eliminate the virus from sanctuary reservoirs (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014</REF>). Viral load declines in a biphasic pattern with HAART, falling off by about 2-3 logs in the first month, and then by another 1-2 logs over the next two months, reaching stable levels of &lt;50 copies per mL of blood thereafter (<REF id=\"657419\">Kaufmann, G.R. and Cooper, D.A., 2000</REF>). HIV-1 persists indefinitely in resting memory CD4 T cells in patients on HAART (<REF id=\"2798862\">Cary, D.C. et al., 2016</REF>; <REF id=\"2849566\">Pitman, M.C. et al., 2018</REF>), and is capable of rebounding upon discontinuation of drug therapy (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).\n\n</para>\n    <para>Drugs and drug combinations marketed for the treatment of HIV and AIDS are listed in the following table.\n\n<FREETABLE id=\"19\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Marketed anti-HIV drugs</B></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Drug name</B></TD>\n      <TD WIDTH=\"160\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Organization</B></TD>\n      <TD WIDTH=\"83\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Year and country of first launch</B></TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Nucleoside analogue reverse transcriptase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=113563&p_type=L&p_origen=BGR&p_tsearch=A\">Zidovudine</a> (Retrovir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1987 (U.S., U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=143041&p_type=L&p_origen=BGR&p_tsearch=A\">Didanosine</a> (Videx)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1991 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=137195&p_type=L&p_origen=BGR&p_tsearch=A\">Stavudine</a> (Zerit)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1994 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=184356&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine</a> (Epivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Shire BioChem/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1995 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=173602&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate</a> (Ziagen)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      GlaxoSmithKline/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1999 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=201671&p_type=L&p_origen=BGR&p_tsearch=A\">Phosphazid</a> (Nikavir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AZT-Pharma</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1999 (Russian Federation)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=246665&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate</a> (Viread)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2001 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=190016&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine</a> (Emtriva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Nonnucleoside reverse transcriptase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=170581&p_type=L&p_origen=BGR&p_tsearch=A\">Nevirapine</a> (Viramune)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Hikma</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=196540&p_type=L&p_origen=BGR&p_tsearch=A\">Delavirdine mesilate</a> (Rescriptor)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207217&p_type=L&p_origen=BGR&p_tsearch=A\">Efavirenz</a> (Sustiva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1998 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=290137&p_type=L&p_origen=BGR&p_tsearch=A\">Etravirine</a> (Intelence)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen-Cilag</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2008 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=336587&p_type=L&p_origen=BGR&p_tsearch=A\">Rilpivirine hydrochloride</a> (Edurant)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2011 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=431792&p_type=L&p_origen=BGR&p_tsearch=A\">Elsulfavirine sodium</a> (Elpida)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Viriom</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (Russian Federation)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=748272&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine</a> (Pifeltro)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>HIV protease inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=168103&p_type=L&p_origen=BGR&p_tsearch=A\">Saquinavir mesilate</a> (Invirase)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Roche</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1995 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=199183&p_type=L&p_origen=BGR&p_tsearch=A\">Indinavir sulfate</a> (Crixivan)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck &#38; Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207282&p_type=L&p_origen=BGR&p_tsearch=A\">Ritonavir</a> (Norvir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AbbVie</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=211732&p_type=L&p_origen=BGR&p_tsearch=A\">Nelfinavir mesilate</a> (Viracept)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=257722&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate</a> (Reyataz)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=285394&p_type=L&p_origen=BGR&p_tsearch=A\">Fosamprenavir calcium</a> (Lexiva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Vertex/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=240094&p_type=L&p_origen=BGR&p_tsearch=A\">Tipranavir</a> (Aptivus)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Boehringer Ingelheim</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2005 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=310828&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir</a> (Prezista)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2006 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>HIV entry and fusion inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=217659&p_type=L&p_origen=BGR&p_tsearch=A\">Enfuvirtide</a> (Fuzeon)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Alexion/Roche</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=313738&p_type=L&p_origen=BGR&p_tsearch=A\">Maraviroc</a> (Selzentry)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2007 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=434971&p_type=L&p_origen=BGR&p_tsearch=A\">Albuvirtide</a> (Aikening)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Frontier Biotechnologies</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (China)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=204505&p_type=L&p_origen=BGR&p_tsearch=A\">Ibalizumab</a> (Trozargo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      TaiMed Biologics/ Theratechnologies</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Integrase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428015&p_type=L&p_origen=BGR&p_tsearch=A\">Raltegravir potassium</a> (Isentress)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2007 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=466915&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir sodium</a> (Tivicay)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2013 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=414415&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir</a> (Vitekta)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Pharmacoenhancing agents</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=644627&p_type=L&p_origen=BGR&p_tsearch=A\">Cobicistat</a> (Tybost)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Combination products</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=258524&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/Zidovudine</a> (Combivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=284325&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/zidovudine/abacavir sulfate</a> (Trizivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2000 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291602&p_type=L&p_origen=BGR&p_tsearch=A\">Lopinavir/ritonavir</a> (Kaletra)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AbbVie</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2000 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315122&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate/lamivudine</a> (Epzicom)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=344908&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine</a> (Truvada)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (U.S.) (treatment)<BR>2012 (U.S.) (prevention)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368895&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/efavirenz</a> (Atripla)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb/Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2006 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=676928&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/rilpivirine hydrochloride</a> (Complera)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2011 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=651752&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/GS-9350/Truvada</a> (Stribild)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2012 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=780137&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/Cobicistat</a> (Prezcobix)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (Canada)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=725107&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/abacavir/ lamivudine</a> (Triumeq)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=845715&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate/cobicistat</a> (Evotaz)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=760199&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/cobicistat/tenofovir alafenamide/emtricitabine</a> (Genvoya)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868925&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/tenofovir alafenamide fumarate</a> (Descovy)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2016 (U.S., U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=876185&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/rilpivirine hydrochloride/tenofovir alafenamide fumarate</a> (Odefsey)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead/Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2016 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=792693&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/cobicistat/emtricitabine/tenofovir alafenamide fumarate</a> (Symtuza)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen-Cilag</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (U.K., Germany)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=880143&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/rilpivirine</a> (Juluca)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=902852&p_type=L&p_origen=BGR&p_tsearch=A\">Bictegravir/emtricitabine/tenofovir alafenamide fumarate</a> (Biktarvy)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=889785&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine/lamivudine/tenofovir disoproxil fumarate</a> (Delstrigo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=994460&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/tenofovir disoproxil fumarate</a> (Cimduo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Mylan</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=919756&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/lamivudine</a> (Dovato)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2019 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Immunoglobulins</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=335137&p_type=L&p_origen=BGR&p_tsearch=A\">Immunoglobulin, normal (human)</a> (Gamunex)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bayer</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (Canada)</TD>\n      </TR>\n\n</TABLE>\n]]></FREETABLE>\n    </para>\n  </Body>\n  <References>\n    <Reference id=\"657419\" medline_id=\"11050451\">\n      <Title>Antiretroviral therapy of HIV-1 infection: Established treatment strategies and new therapeutic options</Title>\n      <SourceTitle>Current Opinion in Microbiology</SourceTitle>\n      <PubMedTitle>Curr Opin Microbiol</PubMedTitle>\n      <Volume>3</Volume>\n      <Issue>5</Issue>\n      <Page>508</Page>\n      <Year>2000</Year>\n      <Authors>\n        <Author>Kaufmann, G.R.</Author>\n        <Author>Cooper, D.A.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2229129\" medline_id=\"25151562\">\n      <Title>Antiretroviral therapy: Current drugs</Title>\n      <SourceTitle>Infectious Disease Clinics of North America</SourceTitle>\n      <PubMedTitle>Infect Dis Clin North Am</PubMedTitle>\n      <Volume>28</Volume>\n      <Issue>3</Issue>\n      <Page>371</Page>\n      <Year>2014</Year>\n      <Authors>\n        <Author>Pau, A.K.</Author>\n        <Author>George, J.M.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2552671\" medline_id=\"26599167\">\n      <Title>Immune activation during acute HIV infection and the impact of early antiretroviral therapy</Title>\n      <SourceTitle>Current Opinion in HIV and AIDS</SourceTitle>\n      <PubMedTitle>Curr Opin HIV AIDS</PubMedTitle>\n      <Volume>11</Volume>\n      <Issue>2</Issue>\n      <Page>163</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Krebs, S.J.</Author>\n        <Author>Ananworanich, J.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2552675\" medline_id=\"27539455\">\n      <Title>New antiretroviral treatment for HIV</Title>\n      <SourceTitle>Infectious Diseases and Therapy</SourceTitle>\n      <PubMedTitle>Infect Dis Ther</PubMedTitle>\n      <Volume>5</Volume>\n      <Issue>3</Issue>\n      <Page>329</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Badowski, M.E.</Author>\n        <Author>Pérez, S.E.</Author>\n        <Author>Biagi, M.</Author>\n        <Author>Littler, J.A.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2798862\" medline_id=\"26731470\">\n      <Title>Molecular mechanisms of HIV latency</Title>\n      <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n      <PubMedTitle>J Clin Invest</PubMedTitle>\n      <Volume>126</Volume>\n      <Issue>2</Issue>\n      <Page>448</Page>\n      <Year>2016</Year>\n      <Authors>\n        <Author>Cary, D.C.</Author>\n        <Author>Fujinaga, K.</Author>\n        <Author>Peterlin, B.M.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2849566\">\n      <Title>Barriers and strategies to achieve a cure for HIV</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>5</Volume>\n      <Issue>6</Issue>\n      <Page>e317</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Pitman, M.C.</Author>\n        <Author>Lau, J.S.Y.</Author>\n        <Author>McMahon, J.H.</Author>\n        <Author>Lewin, S.R.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2944306\" medline_id=\"30049419\">\n      <Title>HIV</Title>\n      <SourceTitle>The Lancet</SourceTitle>\n      <PubMedTitle>Lancet</PubMedTitle>\n      <Volume>392</Volume>\n      <Issue>10148</Issue>\n      <Page>685</Page>\n      <Year>2018</Year>\n      <Authors>\n        <Author>Ghosn, J.</Author>\n        <Author>Taiwo, B.</Author>\n        <Author>Seedat, S.</Author>\n        <Author>Autran, B.</Author>\n        <Author>Katlama, C.</Author>\n      </Authors>\n    </Reference>\n    <Reference id=\"2948271\" medline_id=\"29052689\">\n      <Title>An HIV vaccine is essential for ending the HIV/AIDS pandemic</Title>\n      <SourceTitle>JAMA - Journal of the American Medical Association</SourceTitle>\n      <PubMedTitle>JAMA</PubMedTitle>\n      <Volume>318</Volume>\n      <Issue>16</Issue>\n      <Page>1535</Page>\n      <Year>2017</Year>\n      <Authors>\n        <Author>Fauci, A.S.</Author>\n      </Authors>\n    </Reference>\n  </References>\n  <Section sectionId=\"412\" modifiedDate=\"20181213041351\">\n    <Title>Reverse Transcriptase Inhibitors</Title>\n    <Body>\n      <para>A unique characteristic of retroviruses is the retrotranscription of single-stranded viral RNA into double-stranded DNA, which is then integrated into the host cell&apos;s genome. The enzyme reverse transcriptase (RT), responsible for this activity, can be inhibited in two different ways. Elongation of the nascent viral DNA can be abrogated by the incorporation into the DNA of a nucleoside or nucleotide analogue that cannot be coupled to another nucleoside by the enzyme. Non-nucleoside inhibitors bind directly to an allosteric binding site on the enzyme that is exposed upon ligand binding, thereby inactivating it. Either way, HIV-1 replication is thwarted as a result of chain termination of HIV-1 proviral DNA (<REF id=\"2229129\">Pau, A.K. and George, J.M., 2014</REF>).\n\n</para>\n      <para>The discovery in 1985 of zidovudine, the first HIV reverse transcriptase inhibitor (RTI), marked a turning moment in AIDS research, as it was shown for the first time that replication the virus could be controlled with chemotherapy. In the intervening decades, RTIs have become established as a cornerstone of highly active antiretroviral therapy (<REF id=\"1505562\">Cihlar, T. and Ray, A.S., 2010</REF>; <REF id=\"1505496\">de Béthune, M.P., 2010</REF>; <REF id=\"2229129\">Pau, A.K. and George, J.M., 2014</REF>).\n\n</para>\n      <para>Information on reverse transcriptase inhibitors--including fixed-dose combination products incorporating an RTI--in development for the treatment of HIV is summarized in the next table.<COMPETITIVE id=\"81\">\n          <TABLE>\n            <TR>\n              <TD>Reverse transcriptase inhibitors in clinical and preclinical development</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1044377&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir/rilpivirine</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ HIV Integrase Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=281553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=817657&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">2838232</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Maturation Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=351007&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Censavudine</a>\n              </TD>\n              <TD>Oncolys</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395968&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Islatravir</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=419201&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rovafovir etalafenamide</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir/levonorgestrel</a>\n              </TD>\n              <TD>Eastern Virginia Medical School</TD>\n              <TD>Progesterone Receptor Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ Signal Transduction Modulators/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949733&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Abacavir/lamivudine/lopinavir/ritonavir</a>\n              </TD>\n              <TD>Drugs for Neglected Diseases Initiative</TD>\n              <TD>HIV-1 Protease Inhibitors/ Tumor Necrosis Factor Receptor Superfamily Member 6 (CD95)/PLC-gamma-1 Interaction Inhibitors/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Alcohol Dehydrogenase Inhibitors/ HIV Protease Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/levonorgestrel</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Progesterone Receptor Agonists/ Estrogen Receptor (ER) Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528</a>\n              </TD>\n              <TD>ImQuest BioSciences</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Entry Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=738992&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">KM-023</a>\n              </TD>\n              <TD>Kainos Medicine</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=965041&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8504</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006618&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8583</a>\n              </TD>\n              <TD>Merck Sharp &amp; Dohme (MSD)</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719391&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PC-1005</a>\n              </TD>\n              <TD>Population Council</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ ICAM1 Expression Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=459875&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RO-0335</a>\n              </TD>\n              <TD>Viriom</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=874960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir disoproxil orotate</a>\n              </TD>\n              <TD>Dong-A ST</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1505496\" medline_id=\"19781578\">\n        <Title>Non-nucleoside reverse transcriptase inhibitors (NNRTIs), their discovery, development, and use in the treatment of HIV-1 infection: A review of the last 20 years (1989-2009)</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>75</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>de Béthune, M.P.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1505562\" medline_id=\"19887088\">\n        <Title>Nucleoside and nucleotide HIV reverse transcriptase inhibitors: 25 years after zidovudine</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>39</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Cihlar, T.</Author>\n          <Author>Ray, A.S.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2229129\" medline_id=\"25151562\">\n        <Title>Antiretroviral therapy: Current drugs</Title>\n        <SourceTitle>Infectious Disease Clinics of North America</SourceTitle>\n        <PubMedTitle>Infect Dis Clin North Am</PubMedTitle>\n        <Volume>28</Volume>\n        <Issue>3</Issue>\n        <Page>371</Page>\n        <Year>2014</Year>\n        <Authors>\n          <Author>Pau, A.K.</Author>\n          <Author>George, J.M.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"411\" modifiedDate=\"20181213024734\">\n    <Title>Protease Inhibitors</Title>\n    <Body>\n      <para>HIV-1 protease inhibitors inhibit viral protein maturation, resulting in the production of noninfectious virus. Noncompetitive inhibitors block the virus-specific aspartyl protease (PR), which plays an important role in the maturation of the infectious virus particle. The newly formed virus particle contains uncleaved Gag and Gag-Pol polyproteins, and is not infectious. Cleavage of these polyproteins by PR results in the formation of mature (i.e., infectious) virus (<REF id=\"1505495\">Wensing, A.M. et al., 2010</REF>; <REF id=\"2947854\">Ghosh, A.K. et al., 2016</REF>). The first PR inhibitor, saquinavir, was launched in 1995; use of this drug in combination with reverse transcriptase inhibitors marked the beginning of HAART, now standard practice. PR inhibitors are initially very effective in reducing the viral load, but resistant mutants develop within weeks, and clearance of the virus cannot be attained. The second-generation protease inhibitor darunavir has a higher barrier to resistance (<REF id=\"2947854\">Ghosh, A.K. et al., 2016</REF>). Currently available protease inhibitors are effective only against HIV-1, whereas HIV-2 protease (PR2) is naturally resistant to most of these agents (<REF id=\"2947857\">Triki, D. et al., 2018</REF>).<COMPETITIVE id=\"80\">\n          <TABLE>\n            <TR>\n              <TD>HIV protease inhibitors in clinical and preclinical development</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949733&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Abacavir/lamivudine/lopinavir/ritonavir</a>\n              </TD>\n              <TD>Drugs for Neglected Diseases Initiative</TD>\n              <TD>HIV-1 Protease Inhibitors/ Tumor Necrosis Factor Receptor Superfamily Member 6 (CD95)/PLC-gamma-1 Interaction Inhibitors/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Alcohol Dehydrogenase Inhibitors/ HIV Protease Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=399012&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PPL-100</a>\n              </TD>\n              <TD>TaiMed Biologics</TD>\n              <TD>HIV Protease Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1505495\" medline_id=\"19853627\">\n        <Title>Fifteen years of HIV protease inhibitors: Raising the barrier to resistance</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>59</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Wensing, A.M.</Author>\n          <Author>van Maarseveen, N.M.</Author>\n          <Author>Nijhuis, M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947854\" medline_id=\"26799988\">\n        <Title>Recent progress in the development of HIV-1 protease inhibitors for the treatment of HIV/AIDS</Title>\n        <SourceTitle>Journal of Medicinal Chemistry</SourceTitle>\n        <PubMedTitle>J Med Chem</PubMedTitle>\n        <Volume>59</Volume>\n        <Issue>11</Issue>\n        <Page>5172</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Ghosh, A.K.</Author>\n          <Author>Osswald, H.L.</Author>\n          <Author>Prato, G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947857\" medline_id=\"29636521\">\n        <Title>Exploration of the effect of sequence variations located inside the binding pocket of HIV-1 and HIV-2 proteases</Title>\n        <SourceTitle>Scientific Reports</SourceTitle>\n        <PubMedTitle>Sci Rep</PubMedTitle>\n        <Volume>8</Volume>\n        <Issue>1</Issue>\n        <Page>5789</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Triki, D.</Author>\n          <Author>Billot, T.</Author>\n          <Author>Visseaux, B.</Author>\n          <Author>Descamps, D.</Author>\n          <Author>Flatters, D.</Author>\n          <Author>Camproux, A.C.</Author>\n          <Author>Regad, L.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"2909\" modifiedDate=\"20181211121138\">\n    <Title>Viral Maturation Inhibitors</Title>\n    <Body>\n      <para>One of the newer classes of investigational antiretroviral agents are the so-called maturation inhibitors. These drugs have a mechanism of action differing from those of approved HIV drugs and potent activity against both wild-type HIV and strains resistant to current therapies, including inhibitors of reverse transcriptase and viral protease. Maturation inhibitors block viral replication by disrupting a late stage in Gag processing, a series of events required for the process of structural rearrangement that is known as virus maturation. During maturation, the immature virus particle makes the transition to a mature, infectious virion. Maturation inhibitors prevent this event by interrupting the conversion of the capsid precursor (p25) to a mature capsid protein (p24), resulting in the formation of defective, noninfectious virus particles (<REF id=\"761076\">Li, F. et al., 2003</REF>; <REF id=\"997796\">Sakalian, M. et al., 2006</REF>; <REF id=\"1505517\">Adamson, C.S. and Freed, E.O., 2010</REF>). \n<COMPETITIVE id=\"926\">\n          <TABLE>\n            <TR>\n              <TD>HIV maturation inhibitors in active development for the treatment of AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=817657&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">2838232</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Maturation Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949705&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GSK-3640254</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Viral Maturation Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"761076\" medline_id=\"14573704\">\n        <Title>PA-457: A potent HIV inhibitor that disrupts core condensation by targeting a late step in Gag processing</Title>\n        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)</SourceTitle>\n        <PubMedTitle>Proc Natl Acad Sci U S A</PubMedTitle>\n        <Volume>100</Volume>\n        <Issue>23</Issue>\n        <Page>13555</Page>\n        <Year>2003</Year>\n        <Authors>\n          <Author>Li, F.</Author>\n          <Author>Goila-Gaur, R.</Author>\n          <Author>Salzwedel, K.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"997796\" medline_id=\"16731910\">\n        <Title>3-O-(3&apos;,3&apos;-Dimethysuccinyl) betulinic acid inhibits maturation of the human immunodeficiency virus type 1 Gag precursor assembled in vitro</Title>\n        <SourceTitle>Journal of Virology</SourceTitle>\n        <PubMedTitle>J Virol</PubMedTitle>\n        <Volume>80</Volume>\n        <Issue>12</Issue>\n        <Page>5716</Page>\n        <Year>2006</Year>\n        <Authors>\n          <Author>Sakalian, M.</Author>\n          <Author>McMurtrey, C.P.</Author>\n          <Author>Deeg, F.J.</Author>\n          <Author>Maloy, C.W.</Author>\n          <Author>Li, F.</Author>\n          <Author>Wild, C.T.</Author>\n          <Author>Salzwedel, K.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1505517\" medline_id=\"19782103\">\n        <Title>Novel approaches to inhibiting HIV-1 replication</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>119</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Adamson, C.S.</Author>\n          <Author>Freed, E.O.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"414\" modifiedDate=\"20181213021318\">\n    <Title>HIV Entry and Fusion Inhibitors</Title>\n    <Body>\n      <para>In order for HIV-1 to enter into a host cell, its envelope protein (Env) must first engage CD4, thereby anchoring the virus to the cell, and then bind to a chemokine coreceptor (CCR5 or CXCR4). This process triggers a series of conformational changes in the Env protein, eventually enabling fusion between the HIV virus and the host cell membrane (<REF id=\"1944780\">Henrich, T. and Kuritzkes, D.R., 2013</REF>; <REF id=\"2798861\">Hou, W. et al., 2015</REF>). The sequential processes of viral attachment, coreceptor binding and fusion provide multiple opportunities for therapeutic intervention (<REF id=\"1944780\">Henrich, T. and Kuritzkes, D.R., 2013</REF>; <REF id=\"2798866\">Iacob, S.A. and Iacob, D.G., 2017</REF>). \n\n\n\n</para>\n      <para>Unlike earlier AIDS drugs that work inside the cell and target viral enzymes involved in the replication of the virus, fusion inhibitors block the fusion of HIV with host cells before the virus enters the cell and begins its replication process. The viral genome gains access to the host cell&apos;s cytoplasm by fusing its membrane with the host cell&apos;s plasma membrane. Fusion is induced by a series of conformational changes in the gp120/gp41 protein. This process can be blocked by substances that bind to intermediate conformations of gp120/gp41, inhibiting transition to the full, fusion-active conformation (<REF id=\"974999\">Tamamura, H. et al., 2005</REF>; <REF id=\"1505539\">Tilton, J.C. and Doms, R.W., 2010</REF>). The first drug from this class of anti-HIV drugs, Roche&apos;s enfuvirtide, was launched in 2003. \n\n</para>\n      <para>The activity of CXCR4 antagonists is related to that of the fusion inhibitors: fusion between the viral envelope and the host cell membrane allows the virus to enter its host cell.  Fusion is induced by further gp120/gp41 conformational changes triggered by the binding of gp120/gp41 to chemokine receptors, or coreceptors. This binding can be blocked by chemokine antagonists. Note that the CXCR4 receptor is used by viruses that generally develop after years of HIV infection; &quot;primary&quot; virus strains that are transmitted from one patient to the next typically use another receptor, CCR5. \n\n\n\n</para>\n      <para>The turnover of plasma virions and of CD4+ lymphocytes is extremely rapid in asymptomatic patients, leading to the suggestion that a promising chemotherapic strategy would be to interfere with the infection by HIV of newly produced CD4+ cells. A breakthrough in the studies on the mechanism of HIV infection led to the identification of several chemokine receptors as potential HIV coreceptors. CCR5 and CXCR4 are the two major coreceptors for HIV-1: 60% of HIV strains bind exclusively to CCR5 receptors (i.e., R5-tropic strains), while 5% are purely CXCR4 receptor-binding. The remaining 35% use both CCR5 and CXCR4 (<REF id=\"1789081\">Gilliam, B.L. et al., 2011</REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018</REF>).\n\n</para>\n      <para>A 32-base pair deletion allele (CCR5-delta32) in the gene coding for CCR5 has been identified in some individuals of northern European descent. Homozygosity was associated with a significant degree of protection from HIV-1 infection, and the frequency of heterozygotes was very high in people who survived HIV infection for 10 years or more. Survival analysis showed that the progression of the disease is significantly slower in individuals carrying this deletion. This indicates that the presence of this allele confers a certain degree of resistance to HIV infection, and highlights the importance of CCR5 in viral acquisition. However, it should be noted that the CCR5 receptor is expressed on a variety of hematopoietic cells and is implicated in a plethora of biological processes. Ongoing studies are uncovering a growing number of roles for CCR5 in inflammatory, autoimmune and neoplastic diseases. As such, CCR5 receptor inhibition or gene editing, while preventing HIV entry, could have unforeseen and potentially significant off-target effects (<REF id=\"2947856\">Vangelista, L. and Vento, S., 2017</REF>; <REF id=\"2947858\">Brelot, A. and Chakrabarti, L.A., 2018</REF>).\n\n</para>\n      <para>In August 2007, the U.S. FDA approved Pfizer&apos;s maraviroc, a negative allosteric modulator of the CCR5 receptor and competitive CCR5 inhibitor, for use along with other antiretroviral agents for treatment-experienced patients infected with CCR5-tropic HIV-1. In the pivotal MOTIVATE trials, nearly twice as many treatment-experienced CCR5-tropic HIV-1 infected patients treated with maraviroc plus optimized background therapy (OBT) achieved undetectable viral loads at 24 weeks compared to those receiving placebo plus OBT. There were no significant increases in hepatotoxicity, malignancy or mortality in maraviroc&apos;s treatment arms, while there were slight increases in upper respiratory and herpes simplex virus infections as well as with ischemic events, consistent with the rate observed in treatment-experienced HIV/AIDs patients. The drug was launched in September 2007. Shortly thereafter, 48-week study results were reported, providing further evidence of the ability of maraviroc, given in addition to an optimized anti-HIV treatment regimen, to boost CD4 counts as compared to an optimized regimen alone (<REF id=\"1254596\">Gulick, R.M. et al., 2008</REF>). \n\n</para>\n      <para>Unlike protease inhibitors and reverse transcriptase inhibitors, whose activity and potency depend on viral factors, the activity of HIV entry inhibitors depends more directly on host cell factors: density of chemokine receptors, rate of virus-cell fusion, and variations in CCR5 processing. Viral factors mediating the rate and efficiency of virus-cell fusion may also come into play, but in the case of entry inhibitors, interindividual variability of response is much more closely dependent upon host factors (<REF id=\"752043\">Moore, J.P. and Doms, R.W., 2003</REF>). \n\n</para>\n      <para>More recently, the focus of investigators has turned to a new class of agents acting as HIV attachment (or post-attachment) inhibitors. These compounds bind to gp120 and prevent its attachment to CD4+ lymphocytes. There are several advantages to this approach, including the fact that because they target a viral protein rather than a host cell receptor, attachment inhibitors may have fewer unwanted effects on the host immune response (<REF id=\"1593326\">Hanna, G.J. et al., 2011</REF>; <REF id=\"1944780\">Henrich, T. and Kuritzkes, D.R., 2013</REF>). In March 2018, the FDA approved the first HIV post-attachment inhibitor, as well as the first monoclonal antibody (MAb) to be approved for HIV: the anti-CD4 MAb ibalizumab, indicated for the treatment of HIV-1 infection in heavily treatment-experienced adults with multidrug-resistant (MDR) HIV-1 infection failing their current antiretroviral regimen. Ibalizumab is a CD4-directed post-attachment HIV-1 inhibitor that binds to CD4+ receptors on host cells and blocks the HIV virus from infecting the cells (<REF id=\"2798866\">Iacob, S.A. and Iacob, D.G., 2017</REF>). The BLA was based on data from the phase III TMB-301 study, a single-arm, 24-week study of ibalizumab plus an optimized background regimen in treatment-experienced patients infected with MDR HIV-1 (NCT02475629). The primary efficacy endpoint--the proportion of patients achieving a 0.5 log10 (70%) or greater decrease in HIV-1 RNA 7 days after initiating ibalizumab therapy, day 14 of the study--was met by at least 80% of the study participants. Ibalizumab (Trogarzo) was launched in the U.S., its first market, in late April 2018.\n\n\n\n</para>\n      <para>The table below presents information on HIV entry and fusion inhibitors in active development for the treatment of HIV and AIDS.<COMPETITIVE id=\"83\">\n          <TABLE>\n            <TR>\n              <TD>HIV entry and fusion inhibitors in clinical and preclinical development</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leronlimab</a>\n              </TD>\n              <TD>CytoDyn</TD>\n              <TD>Anti-CD195 (CCR5)/ Signal Transduction Modulators/ Viral Entry Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=680262&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Fostemsavir</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>HIV Attachment Inhibitors</TD>\n              <TD>Phase III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528</a>\n              </TD>\n              <TD>ImQuest BioSciences</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Entry Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ HIV Integrase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368000&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RPI-MN</a>\n              </TD>\n              <TD>ReceptoPharm</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=773475&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5P12-RANTES</a>\n              </TD>\n              <TD>Orion Biotechnology</TD>\n              <TD>Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931208&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cholesterol-PIE12-2-trimer with PEG32 fourth-arm spacer</a>\n              </TD>\n              <TD>Navigen</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=474274&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HiviCide-1</a>\n              </TD>\n              <TD>NanoViricides</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"752043\" medline_id=\"12960367\">\n        <Title>The entry of entry inhibitors: A fusion of science and medicine</Title>\n        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)</SourceTitle>\n        <PubMedTitle>Proc Natl Acad Sci U S A</PubMedTitle>\n        <Volume>100</Volume>\n        <Issue>19</Issue>\n        <Page>10598</Page>\n        <Year>2003</Year>\n        <Authors>\n          <Author>Moore, J.P.</Author>\n          <Author>Doms, R.W.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"974999\" medline_id=\"16250877\">\n        <Title>Development of anti-HIV agents targeting dynamic supramolecular mechanism: Entry and fusion inhibitors based on CXCR4/CCR5 antagonists and gp41-C34-remodeling peptides</Title>\n        <SourceTitle>Current HIV Research</SourceTitle>\n        <PubMedTitle>Curr HIV Res</PubMedTitle>\n        <Volume>3</Volume>\n        <Issue>4</Issue>\n        <Page>289</Page>\n        <Year>2005</Year>\n        <Authors>\n          <Author>Tamamura, H.</Author>\n          <Author>Otaka, A.</Author>\n          <Author>Fujii, N.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1254596\" medline_id=\"18832244\">\n        <Title>Maraviroc for previously treated patients with R5 HIV-1 infection</Title>\n        <SourceTitle>New England Journal of Medicine</SourceTitle>\n        <PubMedTitle>N Engl J Med</PubMedTitle>\n        <Volume>359</Volume>\n        <Issue>14</Issue>\n        <Page>1429</Page>\n        <Year>2008</Year>\n        <Authors>\n          <Author>Gulick, R.M.</Author>\n          <Author>Lalezari, J.</Author>\n          <Author>Goodrich, J.</Author>\n          <Author>Clumeck, N.</Author>\n          <Author>DeJesus, E.</Author>\n          <Author>Horban, A.</Author>\n          <Author>Nadler, J.</Author>\n          <Author>Clotet, B.</Author>\n          <Author>Karlsson, A.</Author>\n          <Author>Wohlfeiler, M.</Author>\n          <Author>Montana, J.B.</Author>\n          <Author>McHale, M.</Author>\n          <Author>Sullivan, J.</Author>\n          <Author>Ridgway, C.</Author>\n          <Author>Felstead, S.</Author>\n          <Author>Dunne, M.W.</Author>\n          <Author>van der Ryst, E.</Author>\n          <Author>Mayer, H.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1505539\" medline_id=\"19683546\">\n        <Title>Entry inhibitors in the treatment of HIV-1 infection</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>91</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Tilton, J.C.</Author>\n          <Author>Doms, R.W.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1593326\" medline_id=\"21078951\">\n        <Title>Antiviral activity, pharmacokinetics, and safety of BMS-488043, a novel oral small-molecule HIV-1 attachment inhibitor, in HIV-1-infected subjects</Title>\n        <SourceTitle>Antimicrobial Agents &amp; Chemotherapy</SourceTitle>\n        <PubMedTitle>Antimicrob Agents Chemother</PubMedTitle>\n        <Volume>55</Volume>\n        <Issue>2</Issue>\n        <Page>722</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Hanna, G.J.</Author>\n          <Author>Lalezari, J.</Author>\n          <Author>Hellinger, J.A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1789081\" medline_id=\"21284908\">\n        <Title>Clinical use of CCR5 inhibitors in HIV and beyond</Title>\n        <SourceTitle>Journal of Translational Medicine (Online)</SourceTitle>\n        <PubMedTitle>J Transl Med</PubMedTitle>\n        <Volume>9</Volume>\n        <Issue>Suppl. 1</Issue>\n        <Page>S9</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Gilliam, B.L.</Author>\n          <Author>Riedel, D.J.</Author>\n          <Author>Redfield, R.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1944780\" medline_id=\"23290628\">\n        <Title>HIV-1 entry inhibitors: Recent development and clinical use</Title>\n        <SourceTitle>Current Opinion in Virology</SourceTitle>\n        <PubMedTitle>Curr Opin Virol</PubMedTitle>\n        <Volume>3</Volume>\n        <Issue>1</Issue>\n        <Page>51</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Henrich, T.</Author>\n          <Author>Kuritzkes, D.R.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798861\" medline_id=\"26259811\">\n        <Title>Molecular insights into the inhibition of HIV-1 infection using a CD4 domain-1-specific monoclonal antibody</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>122</Volume>\n        <Page>101</Page>\n        <Year>2015</Year>\n        <Authors>\n          <Author>Hou, W.</Author>\n          <Author>Fang, C.</Author>\n          <Author>Liu, J.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798866\" medline_id=\"29230203\">\n        <Title>Ibalizumab targeting CD4 receptors, an emerging molecule in HIV therapy</Title>\n        <SourceTitle>Frontiers in Microbiology</SourceTitle>\n        <PubMedTitle>Front Microbiol</PubMedTitle>\n        <Volume>8</Volume>\n        <Page>2323</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Iacob, S.A.</Author>\n          <Author>Iacob, D.G.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947856\" medline_id=\"29375583\">\n        <Title>The expanding therapeutic perspective of CCR5 blockade</Title>\n        <SourceTitle>Frontiers in Immunology</SourceTitle>\n        <PubMedTitle>Front Immunol</PubMedTitle>\n        <Volume>8</Volume>\n        <Page>1981</Page>\n        <Year>2017</Year>\n        <Authors>\n          <Author>Vangelista, L.</Author>\n          <Author>Vento, S.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947858\" medline_id=\"29932942\">\n        <Title>CCR5 revisited: How mechanisms of HIV entry govern AIDS pathogenesis</Title>\n        <SourceTitle>Journal of Molecular Biology</SourceTitle>\n        <PubMedTitle>J Mol Biol</PubMedTitle>\n        <Volume>430</Volume>\n        <Issue>17</Issue>\n        <Page>2557</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Brelot, A.</Author>\n          <Author>Chakrabarti, L.A.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"1795\" modifiedDate=\"20181213111818\">\n    <Title>HIV Integrase Inhibitors</Title>\n    <Body>\n      <para>After fusion of the HIV virus with the host cell membrane, a poorly defined step called &quot;uncoating&quot; of this core exposes the viral nucleoprotein complex, which consists of RNA and the proteins integrase (IN), reverse transcriptase (RT), matrix (MA) and Vpr. \n\n</para>\n      <para>After reverse transcription, the zinc-finger protein IN facilitates the integration of viral DNA into the host genome, culminating in the establishment of both active and latent viral reservoirs (<REF id=\"1505558\">McColl, D.J. and Chen, X., 2010</REF>). Integrase integrates a complete viral minus-strand of DNA and a plus-strand containing several gaps into a host chromosome, by first removing two 3&apos; nucleotides from each strand of the linear viral DNA, producing overhanging CA ends, joining these 3&apos; ends covalently to the 5&apos; ends of the host cell DNA, and removing unpaired nucleotides at the viral 5&apos; ends, which are joined with the host cell&apos;s 3&apos; ends. The gaps in the plus-strands are then probably repaired by host cell enzymes. IN is a unique therapeutic target, as it is the viral protein with least similarity to its human counterpart; consequently, its inhibition is less likely to cause off-target adverse effects (<REF id=\"2947863\">Choi, E. et al., 2018</REF>).\n\n</para>\n      <para>In the fall of 2007, following accelerated approval from the FDA, Merck &amp; Co. launched raltegravir potassium (Isentress), the first integrase inhibitor to reach the market worldwide. Raltegravir works by preventing the integrase enzyme from inserting HIV DNA into human DNA. It is indicated for use in combination with other antiretroviral agents against HIV-1 infection in treatment-experienced adult patients who have evidence of viral replication and HIV-1 strains resistant to multiple antiretroviral agents. The FDA&apos;s decision was based on a 24-week analysis of clinical trials in which raltegravir, in combination with optimized background therapy in treatment-experienced patients, provided significant reductions in HIV RNA viral load and increases in CD4 cell counts. The use of other active agents with raltegravir is associated with a greater likelihood of treatment response. Raltegravir has also been approved in the U.S. and E.U. for use in treatment-naive patients. In 2010, the FDA approved Merck&apos;s labeling update for raltegravir, which incorporates 96-week data obtained in three studies enrolling treatment-experienced and -naive patients. The drawbacks of raltegravir are the need for twice-daily dosing and the potential for resistance (<REF id=\"2947863\">Choi, E. et al., 2018</REF>).\n\n</para>\n      <para>In 2013, the world&apos;s second integrase inhibitor, dolutegravir, was approved and launched in the U.S. A third HIV integrase inhibitor, elvitegravir, was launched for the first time in the U.S. in early 2015. Elvitegravir is indicated for use in combination with an HIV protease inhibitor, coadministered with ritonavir and with other antiretroviral drug(s), for the treatment of HIV-1 infection in antiretroviral treatment-experienced adults. In clinical trials, elvitegravir was effective in suppressing HIV among patients with drug-resistant strains of HIV. It can be taken once daily, but is extensively cross-resistant with raltegravir (<REF id=\"2947863\">Choi, E. et al., 2018</REF>). Dolutegravir is well tolerated and can be taken once daily without a pharmacological enhancer, and has relatively low cross-resistance with raltegravir (<REF id=\"2947863\">Choi, E. et al., 2018</REF>).\n\n</para>\n      <para>At this time, U.S. treatment guidelines recommend integrase inhibitor-based combination drug therapy. Other international guidelines increasingly favor this approach as well (<REF id=\"2944306\">Ghosn, J. et al., 2018</REF>).\n\n</para>\n      <para>HIV integrase inhibitors in active development for the treatment of HIV and AIDS are presented in the following table.<COMPETITIVE id=\"587\">\n          <TABLE>\n            <TR>\n              <TD>HIV integrase inhibitors in development for the treatment of AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=437811&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1044377&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir/rilpivirine</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ HIV Integrase Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=854294&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bictegravir</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ HIV Integrase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=939977&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Sondashi Formula</a>\n              </TD>\n              <TD>Tropical Diseases Research Centre</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1505558\" medline_id=\"19925830\">\n        <Title>Strand transfer inhibitors of HIV-1 integrase: Bringing IN a new era of antiretroviral therapy</Title>\n        <SourceTitle>Antiviral Research</SourceTitle>\n        <PubMedTitle>Antiviral Res</PubMedTitle>\n        <Volume>85</Volume>\n        <Issue>1</Issue>\n        <Page>101</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>McColl, D.J.</Author>\n          <Author>Chen, X.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2944306\" medline_id=\"30049419\">\n        <Title>HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>392</Volume>\n        <Issue>10148</Issue>\n        <Page>685</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Ghosn, J.</Author>\n          <Author>Taiwo, B.</Author>\n          <Author>Seedat, S.</Author>\n          <Author>Autran, B.</Author>\n          <Author>Katlama, C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2947863\" medline_id=\"30416746\">\n        <Title>Recent advances in the discovery of small-molecule inhibitors of HIV-1 integrase</Title>\n        <SourceTitle>Future Science OA</SourceTitle>\n        <PubMedTitle>Future Sci OA</PubMedTitle>\n        <Volume>4</Volume>\n        <Issue>9</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Choi, E.</Author>\n          <Author>Mallareddy, J.R.</Author>\n          <Author>Lu, D.</Author>\n          <Author>Kolluru, S.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"4727\" modifiedDate=\"20181211121123\">\n    <Title>Pharmacoenhancing Agents</Title>\n    <Body>\n      <para>Protease inhibitors have a low systemic exposure and short half-life after oral administration due to their rapid metabolism by cytochrome P450 3A (CYP3A) enzymes in the intestine and liver. During the early days of protease inhibitor therapy, the mechanism-based inhibition of CYP3A enzymes by subtherapeutic doses of ritonavir was discovered by serendipity. In fact, the concomitant administration of ritonavir enhances plasma levels of other protease inhibitors that are metabolized by CYP3A enzymes, allowing reduced pill burden and dosing frequency. Apart from protease inhibitors, other important antiviral drugs that are CYP3A substrates can be combined with ritonavir, such as the integrase inhibitor elvitegravir and the chemokine CCR5 receptor antagonist maraviroc (<REF id=\"1572275\">Sevrioukova, I.F. and Poulos, T.L., 2010</REF>; <REF id=\"1831464\">Gras, J., 2012</REF>). As a class, these compounds are known as pharmacoenhancing or boosting agents.\n\n</para>\n      <para>Scientists at Gilead Sciences succeeded in improving ritonavir and discovered cobicistat, a pharmacoenhancer with no inherent anti-HIV activity. Cobicistat produces mechanism-based CYP3A inhibition similar to that of ritonavir, with better physicochemical properties that allow coformulation with antiretrovirals, reduced off-target drug interactions and improved tolerability (<REF id=\"1831464\">Gras, J., 2012</REF>; <REF id=\"2552672\">von Hentig, N., 2016</REF>).\n\n</para>\n      <para>In 2012, the U.S. FDA approved Stribild (elvitegravir/cobicistat/emtricitabine/tenofovir disoproxil fumarate), a once-daily combination product indicated for the treatment of HIV-1 infection in adults who are antiretroviral treatment-naive. Stribild is the first fixed-dose anti-HIV combination to incorporate the CYP3A4 inhibitor cobicistat. The incorporation of cobicistat enables the once-daily dosing of elvitegravir, an integrase inhibitor that is otherwise metabolized by the enzyme. The safety and efficacy of the combination product were demonstrated in phase III trials involving more than 1,700 HIV-positive patients (<REF id=\"1868512\">Sax, P.E. et al., 2012</REF>; <REF id=\"1868525\">DeJesus, E. et al., 2012</REF>). \n\n</para>\n      <para>Cobicistat has also been developed as a stand-alone product. In September 2013, the European Commission approved cobicistat as a boosting agent for the HIV protease inhibitors atazanavir (300 mg once daily) and darunavir (800 mg once daily) as part of antiretroviral combination therapy in adults with HIV-1 infection. It was launched in the U.K., its first market, in 2014.\n\n</para>\n      <para>The following table provides an overview of pharmacoenhancing agents under active development for the treatment of patients with HIV and AIDS. \n<COMPETITIVE id=\"1327\">\n          <TABLE>\n            <TR>\n              <TD>Pharmacoenhancing agents under active development for the treatment of patients with HIV and AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir/levonorgestrel</a>\n              </TD>\n              <TD>Eastern Virginia Medical School</TD>\n              <TD>Progesterone Receptor Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ Signal Transduction Modulators/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=230535&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vorinostat</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Histone Deacetylase 6 (HDAC6) Inhibitors/ Histone Deacetylase 1 (HDAC1) Inhibitors/ Apoptosis Inducers/ Histone Deacetylase 2 (HDAC2) Inhibitors/ Histone Deacetylase 3 (HDAC3) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Epigenetic Modifier Modulators</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=135177&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Deferiprone</a>\n              </TD>\n              <TD>Apotex</TD>\n              <TD>Cytochrome P450 CYP4F2 Inhibitors/ Chelating Agents</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=874960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir disoproxil orotate</a>\n              </TD>\n              <TD>Dong-A ST</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1572275\" medline_id=\"20937904\">\n        <Title>Structure and mechanism of the complex between cytochrome P4503A4 and ritonavir</Title>\n        <SourceTitle>Proceedings of the National Academy of Sciences of the United States of America (PNAS)</SourceTitle>\n        <PubMedTitle>Proc Natl Acad Sci U S A</PubMedTitle>\n        <Volume>107</Volume>\n        <Issue>43</Issue>\n        <Page>18422</Page>\n        <Year>2010</Year>\n        <Authors>\n          <Author>Sevrioukova, I.F.</Author>\n          <Author>Poulos, T.L.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1831464\">\n        <Title>Cobicistat</Title>\n        <SourceTitle>Drugs of the Future</SourceTitle>\n        <PubMedTitle>Drugs Fut</PubMedTitle>\n        <Volume>037</Volume>\n        <Issue>05</Issue>\n        <Page>0315</Page>\n        <Year>2012</Year>\n        <Authors>\n          <Author>Gras, J.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1868512\" medline_id=\"22748591\">\n        <Title>Co-formulated elvitegravir, cobicistat, emtricitabine, and tenofovir versus co-formulated efavirenz, emtricitabine, and tenofovir for initial treatment of HIV-1 infection: A randomised, double-blind, phase 3 trial, analysis of results after 48 weeks</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>379</Volume>\n        <Issue>9835</Issue>\n        <Page>2439</Page>\n        <Year>2012</Year>\n        <Authors>\n          <Author>Sax, P.E.</Author>\n          <Author>DeJesus, E.</Author>\n          <Author>Mills, A.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1868525\" medline_id=\"22748590\">\n        <Title>Co-formulated elvitegravir, cobicistat, emtricitabine, and tenofovir disoproxil fumarate versus ritonavir-boosted atazanavir plus co-formulated emtricitabine and tenofovir disoproxil fumarate for initial treatment of HIV-1 infection: A randomised, double-blind, phase 3, non-inferiority trial</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>379</Volume>\n        <Issue>9835</Issue>\n        <Page>2429</Page>\n        <Year>2012</Year>\n        <Authors>\n          <Author>DeJesus, E.</Author>\n          <Author>Rockstroh, J.K.</Author>\n          <Author>Henry, K.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2552672\" medline_id=\"26730211\">\n        <Title>Clinical use of cobicistat as a pharmacoenhancer of human immunodeficiency virus therapy</Title>\n        <SourceTitle>HIV/AIDS (Auckland, N.Z.)</SourceTitle>\n        <PubMedTitle>HIV AIDS (Auckl)</PubMedTitle>\n        <Volume>8</Volume>\n        <Page>1</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>von Hentig, N.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"4730\" modifiedDate=\"20181211121119\">\n    <Title>Latency-Reversing Agents</Title>\n    <Body>\n      <para>Although antiretroviral drug therapy may keep HIV infection under control, it is unable to completely eliminate the virus. A reservoir persists within latently infected memory CD4+ T cells, where the virus is inaccessible to antiretroviral agents (<REF id=\"2798862\">Cary, D.C. et al., 2016</REF>). The latent virus may become reactivated at any time, particularly if HAART is discontinued or immune status is compromised. The complete inactivation and elimination of this reservoir continues to be the ultimate objective of drug researchers, who have not succeeded in achieving this goal using traditional antiretroviral agents (<REF id=\"2849566\">Pitman, M.C. et al., 2018</REF>). \n\n</para>\n      <para>In recent years, attention has turned to the histone deacetylase (HDAC) inhibitors. The chromatin remodeling HDAC enzymes, of which 18 are known to exist, play an important role in processes of cell proliferation, migration, differentiation and apoptosis; class 1 HDACs also promote HIV latency (<REF id=\"2798868\">Zaikos, T.D. et al., 2018</REF>).  \n\n\n\n</para>\n      <para>Alterations in the balance of nucleosomal histones within chromatin has been implicated in the maintenance of viral quiescence in latently infected cells, and HDAC inhibitors have been proposed as a class of agents capable of upsetting the balance that enables HIV to remain integrated and to persist within CD4+ T cells. Administration of these agents, particularly class 1-selective HDAC inhibitors, may induce the virus to reemerge so that it can then be eliminated with antiretroviral agents (<REF id=\"1944628\">Matalon, S. et al., 2011</REF>; <REF id=\"1995769\">Ververis , K. and Karagiannis, T.C., 2013</REF>; <REF id=\"2798868\">Zaikos, T.D. et al., 2018</REF>). \n\n</para>\n      <para>In an early proof-of-concept study, the HDAC inhibitor valproic acid was evaluated in a small group of HIV-positive volunteers. Subjects received HAART intensified with the HIV fusion inhibitor enfuvirtide for 4-6 weeks, after which time the HDAC inhibitor valproic acid was added to the treatment regimen for three months. At the end of the treatment period, a decline was confirmed in the frequency of replication-competent HIV in circulating resting CD4+ T cells in this patient group (<REF id=\"1945309\">Lehrman, G. et al., 2005</REF>). However, valproic acid has only weak activity as an inducer of viral emergence from the latent reservoir. Thus subsequent studies evaluated newer, more potent and selective HDAC inhibitors such as vorinostat, belinostat and givinostat (<REF id=\"1944628\">Matalon, S. et al., 2011</REF>). \n\n</para>\n      <para>Administered to a small group of 8 HIV-positive patients, a single dose of vorinostat was shown to be effective in inducing an increase in the expression of HIV RNA in circulating resting CD4+ T cells, supporting further evaluation of this strategy (<REF id=\"1874784\">Archin, N.M. et al., 2012</REF>). However, other researchers suggest that HDAC inhibitors alone may not be sufficiently effective in reducing the pool of latent virus (<REF id=\"1944629\">Sahu, G.K. and Cloyd, M.W., 2011</REF>; <REF id=\"2798862\">Cary, D.C. et al., 2016</REF>). \n\n</para>\n      <para>Other drug classes with potential as latency-reversing agents include bromodomain and extraterminal (BET) bromodomain inhibitors (BETis), protein kinase C (PKC) activators and MAP kinase agonists, as well as drugs that affect DNA methylation (e.g., 5-azacytidine) (<REF id=\"2798862\">Cary, D.C. et al., 2016</REF>).<COMPETITIVE id=\"1331\">\n          <TABLE>\n            <TR>\n              <TD>Latency-reversing agents under active development for the treatment of HIV and AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=932649&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">APH-0812</a>\n              </TD>\n              <TD>Aphios</TD>\n              <TD>Protein Kinase C (PKC) Activators/ Histone Deacetylase (HDAC) Inhibitors/ Epigenetic Modifier Modulators/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References>\n      <Reference id=\"1874784\" medline_id=\"22837004\">\n        <Title>Administration of vorinostat disrupts HIV-1 latency in patients on antiretroviral therapy</Title>\n        <SourceTitle>Nature</SourceTitle>\n        <PubMedTitle>Nature</PubMedTitle>\n        <Volume>487</Volume>\n        <Issue>7408</Issue>\n        <Page>482</Page>\n        <Year>2012</Year>\n        <Authors>\n          <Author>Archin, N.M.</Author>\n          <Author>Liberty, A.L.</Author>\n          <Author>Kashuba, A.D.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1944628\" medline_id=\"21424110\">\n        <Title>Histone deacetylase inhibitors for purging HIV-1 from the latent reservoir</Title>\n        <SourceTitle>Molecular Medicine (Cambridge)</SourceTitle>\n        <PubMedTitle>Mol Med</PubMedTitle>\n        <Volume>17</Volume>\n        <Issue>5-6</Issue>\n        <Page>466</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Matalon, S.</Author>\n          <Author>Rasmussen, T.A.</Author>\n          <Author>Dinarello, C.A.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1944629\" medline_id=\"21838863\">\n        <Title>Latent HIV in primary T lymphocytes is unresponsive to histone deacetylase inhibitors</Title>\n        <SourceTitle>Virology Journal (Online)</SourceTitle>\n        <PubMedTitle>Virol J</PubMedTitle>\n        <Volume>8</Volume>\n        <Page>400</Page>\n        <Year>2011</Year>\n        <Authors>\n          <Author>Sahu, G.K.</Author>\n          <Author>Cloyd, M.W.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1945309\" medline_id=\"16099290\">\n        <Title>Depletion of latent HIV-1 infection in vivo: A proof-of-concept study</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>366</Volume>\n        <Issue>9485</Issue>\n        <Page>549</Page>\n        <Year>2005</Year>\n        <Authors>\n          <Author>Lehrman, G.</Author>\n          <Author>Hogue, I.B.</Author>\n          <Author>Palmer, S.</Author>\n          <Author>et al.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"1995769\">\n        <Title>The potential role of HDAC inhibitors in de-silencing latent HIV virus</Title>\n        <SourceTitle>Drugs of the Future</SourceTitle>\n        <PubMedTitle>Drugs Fut</PubMedTitle>\n        <Volume>038</Volume>\n        <Issue>08</Issue>\n        <Page>0575</Page>\n        <Year>2013</Year>\n        <Authors>\n          <Author>Ververis , K.</Author>\n          <Author>Karagiannis, T.C.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798862\" medline_id=\"26731470\">\n        <Title>Molecular mechanisms of HIV latency</Title>\n        <SourceTitle>Journal of Clinical Investigation</SourceTitle>\n        <PubMedTitle>J Clin Invest</PubMedTitle>\n        <Volume>126</Volume>\n        <Issue>2</Issue>\n        <Page>448</Page>\n        <Year>2016</Year>\n        <Authors>\n          <Author>Cary, D.C.</Author>\n          <Author>Fujinaga, K.</Author>\n          <Author>Peterlin, B.M.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2798868\" medline_id=\"29298886\">\n        <Title>Class 1-selective histone deacetylase (HDAC) inhibitors enhance HIV latency reversal while preserving the activity of HDAC isoforms necessary for maximal HIV gene expression</Title>\n        <SourceTitle>Journal of Virology</SourceTitle>\n        <PubMedTitle>J Virol</PubMedTitle>\n        <Volume>92</Volume>\n        <Issue>6</Issue>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Zaikos, T.D.</Author>\n          <Author>Painter, M.M.</Author>\n          <Author>Kettinger, N.T.S.</Author>\n          <Author>Terry, V.H.</Author>\n          <Author>Collins, K.L.</Author>\n        </Authors>\n      </Reference>\n      <Reference id=\"2849566\">\n        <Title>Barriers and strategies to achieve a cure for HIV</Title>\n        <SourceTitle>The Lancet</SourceTitle>\n        <PubMedTitle>Lancet</PubMedTitle>\n        <Volume>5</Volume>\n        <Issue>6</Issue>\n        <Page>e317</Page>\n        <Year>2018</Year>\n        <Authors>\n          <Author>Pitman, M.C.</Author>\n          <Author>Lau, J.S.Y.</Author>\n          <Author>McMahon, J.H.</Author>\n          <Author>Lewin, S.R.</Author>\n        </Authors>\n      </Reference>\n    </References>\n  </Section>\n  <Section sectionId=\"415\" modifiedDate=\"20181211121114\">\n    <Title>Immunotherapeutic Strategies</Title>\n    <Body>\n      <para>With the adoption and widespread use of HAART (highly active antiretroviral therapy), AIDS-related mortality has decreased significantly in the developed world. Nonetheless, the many limitations of HAART --which include side effects, compliance issues, cost and the failure to completely eradicate the HIV virus-- have contributed in recent years to a resurgence of interest in the development of strategies to boost the host immune response in AIDS patients. Immunotherapeutic agents may be used as adjuncts to HAART and potentially as HAART-sparing treatments. No immunotherapeutic agents have yet been licensed specifically for the treatment of HIV, but research in this area is gathering momentum.</para>\n    </Body>\n    <References/>\n    <Section sectionId=\"416\" modifiedDate=\"20190521100200\">\n      <Title>Monoclonal Antibodies</Title>\n      <Body>\n        <para>Although monoclonal antibodies (MAbs) have long been used by virologists as research tools, the development of neutralizing humanized MAb as therapeutic agents for the treatment of prevention of viral infections has been much slower. Fortunately, advances in recent years have provided clearer insight into the mechanism of action of MAbs as well as methods for improving their therapeutic efficacy, and is now driving the development of MAb therapies for infectious diseases, including HIV and AIDS. \n\n</para>\n        <para>Antibodies have a dual functionality that makes them extremely attractive as immunotherapeutic agents, with potential in both the treatment and prevention of HIV-1. MAbs consist of a variable domain that targets a specific viral epitopes, together with a constant domain that is able to harness host effector functions via engaging host Fc receptors on immune cells (<REF id=\"3011908\">Caskey, M. et al., 2019</REF>).\n\n</para>\n        <para>Monoclonal antibodies are classified by their method of production. Murine MAbs are created by challenging mice with a desired antigen and then creating a hybridoma. Chimeric MAbs consist of both human (approximately 65%) and murine sequences. They are less immunogenic than murine MAbs and thus have longer serum half-lives. Human MAbs are almost entirely (95%) of human origin, and can be produced using transgenic mice or phage display libraries. They are the least immunogenic form. Several fully human or humanized versions of murine MAbs acting on a variety of retroviral targets are in development for the treatment of AIDS. \n\n\n\n</para>\n        <para>In 2018, the first anti-HIV MAb was approved for marketing worldwide: TaiMed Biologics&apos; anti-CD4 MAb ibalizumab, indicated for the treatment of HIV-1 infection in heavily treatment-experienced adults with multidrug-resistant HIV-1 infection failing their current antiretroviral regimen (see HIV Entry and Fusion Inhibitors, above). \n\n<COMPETITIVE id=\"84\">\n            <TABLE>\n              <TR>\n                <TD>Monoclonal antibodies in development for the treatment of AIDS</TD>\n              </TR>\n              <TR>\n                <TD>Drug Name</TD>\n                <TD>Organization</TD>\n                <TD>Description</TD>\n                <TD>Status</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leronlimab</a>\n                </TD>\n                <TD>CytoDyn</TD>\n                <TD>Humanized monoclonal IgG4 kappa antibody,  derived from murine PA14 antibody,  targeting human C - C chemokine receptor type 5 (CCR5),  expressed in SP2/0 myeloma cells</TD>\n                <TD>Pre-Registered</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795510&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117</a>\n                </TD>\n                <TD>Rockefeller University</TD>\n                <TD>Broadly neutralizing human monoclonal IgG1 lambda antibody against CD4 - binding site of HIV - 1 gp120</TD>\n                <TD>Phase II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701671&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">UB-421</a>\n                </TD>\n                <TD>United BioPharma</TD>\n                <TD>Humanized IgG1 monoclonal antibody targeting domain 1 of CD4</TD>\n                <TD>Phase II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701846&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-01</a>\n                </TD>\n                <TD>National Institute Allergy Infect Dis</TD>\n                <TD>Human monoclonal IgG1 kappa 3 antibody against the CD4 binding site region of HIV - 1 gp120 envelope glycoprotein,  purifed from HIV infected individuals</TD>\n                <TD>Phase II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=280344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cytolin</a>\n                </TD>\n                <TD>CytoDyn</TD>\n                <TD>Murine anti - human LFA - 1 monoclonal antibody</TD>\n                <TD>Phase I/II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915332&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGDM1400</a>\n                </TD>\n                <TD>International AIDS Vaccine Initiative</TD>\n                <TD>Broadly neutralizing fully human IgG1 monoclonal antibody (bnAb) derived from human monoclonal antibody (PGT145),  targeting V1 and V2 epitope regions of trimeric envelop (env) protein of human immunodeficiency virus type - 1 (HIV1)</TD>\n                <TD>Phase I/II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=742023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGT-121</a>\n                </TD>\n                <TD>International AIDS Vaccine Initiative</TD>\n                <TD>Broadly neutralizing fully human IgG1 monoclonal antibody (bnAb) targeting V3 glycan - dependent epitope region of HIV - 1 envelope glycoprotein gp120</TD>\n                <TD>Phase I/II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878049&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-07-523</a>\n                </TD>\n                <TD>International AIDS Vaccine Initiative</TD>\n                <TD>Human monoclonal IgG1neutralizing antibody targeting CD4 binding site region of HIV - 1 gp120 envelope glycoprotein</TD>\n                <TD>Phase I/II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=837370&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074</a>\n                </TD>\n                <TD>National Institutes of Health (NIH)/ Rockefeller University</TD>\n                <TD>Human monoclonal IgG1 lambda antibody targeting N - glycan V3 region of HIV - 1 glycoprotein (gp120)</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=999467&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074-LS</a>\n                </TD>\n                <TD>Rockefeller University</TD>\n                <TD>Human monoclonal IgG1 lambda antibody targeting N - glycan V3 region of HIV - 1 glycoprotein (gp120) harboring a LS substitution in the heavy chain</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=974250&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117-LS</a>\n                </TD>\n                <TD>Rockefeller University</TD>\n                <TD>Human monoclonal broadly neutralizing antibody,  derived from the 3BNC117 MAb,  with LS substitution on the heavy chain</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=901797&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MB-66</a>\n                </TD>\n                <TD>LeafBio</TD>\n                <TD>Vaginal film comprising anti - HIV VRC01 - N and anti - HSV HSV8 - N monoclonal antibodies</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=785468&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB080-00-AB</a>\n                </TD>\n                <TD>National Institute Allergy Infect Dis</TD>\n                <TD>Human monoclonal IgG1 kappa 3 antibody against the CD4 binding site region of HIV - 1 gp120 envelope glycoprotein,  harboring a M428L/N434S substitution in the Fc region</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006069&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB091-00-AB</a>\n                </TD>\n                <TD>National Institute Allergy Infect Dis</TD>\n                <TD>Human monoclonal antibody targeting the human immunodeficiency virus 1 (HIV - 1) CD4 binding site</TD>\n                <TD>Phase I</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1009345&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB095-00-AB</a>\n                </TD>\n                <TD>National Institute Allergy Infect Dis</TD>\n                <TD>Human monoclonal antibody targeting the membrane proximal external region and proximal viral membrane lipid region of HIV - 1</TD>\n                <TD>Phase I</TD>\n              </TR>\n            </TABLE>\n          </COMPETITIVE>\n        </para>\n      </Body>\n      <References>\n        <Reference id=\"3011908\" medline_id=\"30936546\">\n          <Title>Broadly neutralizing anti-HIV-1 monoclonal antibodies in the clinic</Title>\n          <SourceTitle>Nature Medicine</SourceTitle>\n          <PubMedTitle>Nat Med</PubMedTitle>\n          <Volume>25</Volume>\n          <Issue>4</Issue>\n          <Page>547</Page>\n          <Year>2019</Year>\n          <Authors>\n            <Author>Caskey, M.</Author>\n            <Author>Klein, F.</Author>\n            <Author>Nussenzweig, M.C.</Author>\n          </Authors>\n        </Reference>\n      </References>\n    </Section>\n    <Section sectionId=\"417\" modifiedDate=\"20130205022126\">\n      <Title>Therapeutic AIDS Vaccines</Title>\n      <Body>\n        <para>The development of an effective prophylactic AIDS vaccine has been complicated by the many unique characteristics of the virus, as discussed in the <I>Prevention</I> section above. To date the vaccines studied in humans have shown little efficacy in protecting healthy subjects against infection. Somewhat more promising results have been obtained in the setting of therapeutic vaccination. Several approaches have been used to boost cell- and/or antibody-mediated immunity, including whole inactivated viral vaccines, protein subunits, synthetic peptides, DNA vaccines and viral vectors expressing HIV-1 (<REF id=\"975000\">Puls, R.L. and Emery, S., 2006</REF>). The most promising vaccines being studied at the moment are immunogens that produce a cytotoxic T lymphocyte (CTL) response, designed to contain the virus in infected individuals rather than to providing sterile protection for healthy subjects (<REF id=\"878006\">Letvin, N.L., 2005</REF>).\n\n</para>\n        <para>Another promising, potentially curative HIV vaccine approach is that of dendritic cell vaccines. Promising preliminary results have been obtained by Spanish investigators in a phase I/II trial using autologous, monocyte-derived dendritic cells. The vaccine has been shown in animal models and in patients with chronic HIV-1 infection to generate a host immune response leading to a decrease in plasma viral load (<REF id=\"1932194\">Garcia, F. et al., 2013</REF>).\n\n</para>\n      </Body>\n      <References>\n        <Reference id=\"878006\" medline_id=\"15660510\">\n          <Title>Progress toward an HIV vaccine</Title>\n          <SourceTitle>Annual Review of Medicine</SourceTitle>\n          <PubMedTitle>Annu Rev Med</PubMedTitle>\n          <Volume>56</Volume>\n          <Page>213</Page>\n          <Year>2005</Year>\n          <Authors>\n            <Author>Letvin, N.L.</Author>\n          </Authors>\n        </Reference>\n        <Reference id=\"975000\" medline_id=\"16336205\">\n          <Title>Therapeutic vaccination against HIV: Current progress and future possibilities</Title>\n          <SourceTitle>Clinical Science (1979)</SourceTitle>\n          <PubMedTitle>Clin Sci (Lond)</PubMedTitle>\n          <Volume>110</Volume>\n          <Issue>1</Issue>\n          <Page>59</Page>\n          <Year>2006</Year>\n          <Authors>\n            <Author>Puls, R.L.</Author>\n            <Author>Emery, S.</Author>\n          </Authors>\n        </Reference>\n        <Reference id=\"1932194\">\n          <Title>A dendritic cell-based vaccine elicits T cell responses associated with control of HIV-1 replication</Title>\n          <SourceTitle>Science Translational Medicine</SourceTitle>\n          <PubMedTitle>Sci Transl Med</PubMedTitle>\n          <Volume>5</Volume>\n          <Issue>166</Issue>\n          <Page>166ra2</Page>\n          <Year>2013</Year>\n          <Authors>\n            <Author>Garcia, F.</Author>\n            <Author>Climent, N.</Author>\n            <Author>Guardo, A.C.</Author>\n            <Author>et al.</Author>\n          </Authors>\n        </Reference>\n      </References>\n    </Section>\n    <Section sectionId=\"2286\" modifiedDate=\"20121114125710\">\n      <Title>Cytokine Therapy</Title>\n      <Body>\n        <para>The use of cytokines to treat HIV, first described nearly three decades ago, has reemerged into the spotlight in recent years as experience has begun to reveal some of the shortcomings of antiretroviral therapy. \n\n\n\n</para>\n        <para>The immune system of patients with HIV infection do not produce enough interleukin-2 (IL-2), a substance that helps activate CD4+ cells to respond to various infections, including HIV. The drug aldesleukin (recombinant interleukin-2, marketed by Chiron as Proleukin) acts the same way in the body as IL-2 and has helped to increase CD4+ T-cells in HIV-infected patients. However, aldesleukin causes some serious side effects, perhaps because of its stimulation of various immune system cells. \n\n</para>\n        <para>The SILCAAT and ESPRIT trials were conducted in order to further elucidate the role of IL-2 in HIV therapy. The 1,695 patients in the SILCAAT study and the 4,111 patients in the ESPRIT study were randomized to treatment with antiretroviral therapy plus IL-2 or antiretroviral therapy alone. Patients had baseline CD4+ cell counts of 50-299/mm3 in SILCAAT and of at least 300/mm3 in ESPRIT. In both studies, the primary endpoint was opportunistic disease or death from any cause. The results of the two studies revealed that, in spite of significantly increasing in CD4+ cell counts as compared to antiretroviral therapy alone, treatment with IL-2 did not result in any clinical benefits in either study (<REF id=\"1414470\">Abrams, D. et al., 2009</REF>). \n\n</para>\n        <para>Interleukin-2 has to date been the most widely studied cytokine in the setting of HIV and AIDS; at least 15 clinical trials have been conducted to date of IL-2, usually in combination with antiretroviral therapy. However, many other cytokines are also believed to hold potential in this indication, either as adjuncts to antiviral therapy or as adjuncts to AIDS vaccines. Preclinical and clinical studies have provided promising evidence of the favorable therapeutic effects of IL-1, IL-7, IL-12, IL-15, IFN-alpha, IFN-gamma and the colony-stimulating factors G-CSF and GM-CSF, to name a few (<REF id=\"1021499\">Pett, S.L. and Kelleher, A.D., 2003</REF>). \n\n\n\n</para>\n        <para>The following table summarizes progress in the development of cytokines for the treatment of AIDS and AIDS-related complex. <COMPETITIVE id=\"671\">\n            <TABLE>\n              <TR>\n                <TD>Cytokines in development for the treatment of AIDS and AIDS-related complex</TD>\n              </TR>\n              <TR>\n                <TD>Drug Name</TD>\n                <TD>Organization</TD>\n                <TD>Description</TD>\n                <TD>Status</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=261662&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Peginterferon alfa-2a</a>\n                </TD>\n                <TD>National Institute Allergy Infect Dis</TD>\n                <TD>Mono(N2, N6 - dicarboxy - L - lysyl)interferon alfa - 2a,  diesters with polyethylene glycol monomethyl ether</TD>\n                <TD>Phase II</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=769347&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALT-803</a>\n                </TD>\n                <TD>University of Minnesota</TD>\n                <TD>Fusion protein complex consisting of a superagonist human interleukin 15 (IL - l5) variant harboring N72D mutation,  fused to a dimeric IL - 15 receptor alpha sushi domain/IgG1 Fc complex; expressed in CHO cells</TD>\n                <TD>Phase I</TD>\n              </TR>\n            </TABLE>\n          </COMPETITIVE>\n        </para>\n      </Body>\n      <References>\n        <Reference id=\"1021499\" medline_id=\"15482104\">\n          <Title>Cytokine therapies in HIV-1 infection: Present and future</Title>\n          <SourceTitle>Expert Review of Anti-infective Therapy</SourceTitle>\n          <PubMedTitle>Expert Rev Anti Infect Ther</PubMedTitle>\n          <Volume>1</Volume>\n          <Issue>1</Issue>\n          <Page>83</Page>\n          <Year>2003</Year>\n          <Authors>\n            <Author>Pett, S.L.</Author>\n            <Author>Kelleher, A.D.</Author>\n          </Authors>\n        </Reference>\n        <Reference id=\"1414470\">\n          <Title>Interleukin-2 therapy in patients with HIV infection</Title>\n          <SourceTitle>New England Journal of Medicine</SourceTitle>\n          <PubMedTitle>N Engl J Med</PubMedTitle>\n          <Volume>361</Volume>\n          <Issue>16</Issue>\n          <Page>1548</Page>\n          <Year>2009</Year>\n          <Authors>\n            <Author>Abrams, D.</Author>\n            <Author>Losso, M.H.</Author>\n            <Author>Babilker, A.</Author>\n            <Author>Collins, G.</Author>\n            <Author>Cooper, D.A.</Author>\n            <Author>Darbyshire, J.</Author>\n            <Author>Emery, S.</Author>\n            <Author>Fox, L.</Author>\n            <Author>Gordin, F.</Author>\n            <Author>Lane, H.C.</Author>\n            <Author>Lundgren, J.D.</Author>\n            <Author>Mitsuyasu, R.</Author>\n            <Author>Neaton, J.D.</Author>\n            <Author>Phillips, A.</Author>\n            <Author>Routy, J.P.</Author>\n            <Author>Tambussi, G.</Author>\n            <Author>Wentworth, D.</Author>\n          </Authors>\n        </Reference>\n      </References>\n    </Section>\n    <Section sectionId=\"418\" modifiedDate=\"20131128025024\">\n      <Title>Immunomodulators</Title>\n      <Body>\n        <para>Immunomodulating agents are administered to HIV-infected patients in an attempt to boost native immune responses, slowing the infectious processes and reducing susceptibility to secondary infections. \n\n\n\n</para>\n        <para>Among the more promising immunomodulating agents are those acting on toll-like receptors. Toll-like receptors (TLRs) are the key recognition structures of the innate immune system that recognize molecules shared by pathogens but distinct from host molecules. When activated, they initiate the production of inflammatory cytokines, chemokines, tissue degrading enzymes and type I interferons (IFNs). TLR signaling is also involved in activation of the adaptive immune system via upregulation of costimulatory molecules of antigen presenting cells. TLRs therefore can link thus linking innate and acquired immune responses. \n\n\n\n\n\n</para>\n        <para>Due to its ability to detect double-stranded RNA, TLR3 is considered to be of interest as a target for the treatment of HIV infection. TLR3 agonists have been shown to inhibit HIV infection and replication in macrophages (<REF id=\"1944738\">Zhou, Y. et al., 2010</REF>). TLR3 agonists have also been proposed for use as adjuvants in anti-HIV vaccines (<REF id=\"1944739\">Stevceva, L., 2011</REF>).\n\n</para>\n        <para>Several immunomodulating agents are currently under clinical evaluation, as seen in the following table.<COMPETITIVE id=\"85\">\n            <TABLE>\n              <TR>\n                <TD>Immunomodulating agents in development for AIDS and HIV</TD>\n              </TR>\n              <TR>\n                <TD>Drug Name</TD>\n                <TD>Organization</TD>\n                <TD>Mechanism of Action</TD>\n                <TD>Status</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=197440&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-1 Immunogen</a>\n                </TD>\n                <TD>Immune Response BioPharma</TD>\n                <TD/>\n                <TD>Pre-Registered</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357687&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tubercin T-5</a>\n                </TD>\n                <TD>Artec</TD>\n                <TD/>\n                <TD>Phase III</TD>\n              </TR>\n              <TR>\n                <TD>\n                  <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=132660&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Poly I:CLC</a>\n                </TD>\n                <TD>Oncovir</TD>\n                <TD>Toll-Like Receptor 3 (TLR3) Agonists/ Interferon Inducers/ Signal Transduction Modulators</TD>\n                <TD>Phase I/II</TD>\n              </TR>\n            </TABLE>\n          </COMPETITIVE>\n        </para>\n      </Body>\n      <References>\n        <Reference id=\"1944738\" medline_id=\"20636339\">\n          <Title>A critical function of toll-like receptor-3 in the induction of anti-human immunodeficiency virus activities in macrophages</Title>\n          <SourceTitle>Immunology</SourceTitle>\n          <PubMedTitle>Immunology</PubMedTitle>\n          <Volume>131</Volume>\n          <Issue>1</Issue>\n          <Page>40</Page>\n          <Year>2010</Year>\n          <Authors>\n            <Author>Zhou, Y.</Author>\n            <Author>Wang, X.</Author>\n            <Author>Liu, M.</Author>\n            <Author>Hu, Q.</Author>\n            <Author>Song, L.</Author>\n            <Author>Ye, L.</Author>\n            <Author>Zhou, D.</Author>\n            <Author>Ho, W.</Author>\n          </Authors>\n        </Reference>\n        <Reference id=\"1944739\" medline_id=\"22050755\">\n          <Title>Toll-like receptor agonists as adjuvants for HIV vaccines</Title>\n          <SourceTitle>Current Medicinal Chemistry</SourceTitle>\n          <PubMedTitle>Curr Med Chem</PubMedTitle>\n          <Volume>18</Volume>\n          <Issue>33</Issue>\n          <Page>5079</Page>\n          <Year>2011</Year>\n          <Authors>\n            <Author>Stevceva, L.</Author>\n          </Authors>\n        </Reference>\n      </References>\n    </Section>\n  </Section>\n  <Section sectionId=\"419\" modifiedDate=\"20181211121105\">\n    <Title>Current HIV/AIDS Pipeline</Title>\n    <Body>\n      <para>Consult the tables below for an overview of all products mentioned in this review, including drugs, biologics and diagnostic agents that have been marketed or are under active development for this indication. Tables may also include drugs not covered in the preceding sections because their mechanism of action is unknown or not well characterized.\n\n<FREETABLE id=\"19\"><![CDATA[<TABLE WIDTH=\"443\" CELLSPACING=0 CELLPADDING=4 BORDER>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"CENTER\" BGCOLOR=\"#003399\"><FONT COLOR=\"White\" FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Marketed anti-HIV drugs</B></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Drug name</B></TD>\n      <TD WIDTH=\"160\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Organization</B></TD>\n      <TD WIDTH=\"83\" BGCOLOR=\"#DDDDDD\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B>Year and country of first launch</B></TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Nucleoside analogue reverse transcriptase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=113563&p_type=L&p_origen=BGR&p_tsearch=A\">Zidovudine</a> (Retrovir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1987 (U.S., U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=143041&p_type=L&p_origen=BGR&p_tsearch=A\">Didanosine</a> (Videx)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1991 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=137195&p_type=L&p_origen=BGR&p_tsearch=A\">Stavudine</a> (Zerit)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1994 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=184356&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine</a> (Epivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Shire BioChem/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1995 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=173602&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate</a> (Ziagen)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      GlaxoSmithKline/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1999 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=201671&p_type=L&p_origen=BGR&p_tsearch=A\">Phosphazid</a> (Nikavir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AZT-Pharma</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1999 (Russian Federation)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=246665&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate</a> (Viread)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2001 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=190016&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine</a> (Emtriva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Nonnucleoside reverse transcriptase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=170581&p_type=L&p_origen=BGR&p_tsearch=A\">Nevirapine</a> (Viramune)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Hikma</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=196540&p_type=L&p_origen=BGR&p_tsearch=A\">Delavirdine mesilate</a> (Rescriptor)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207217&p_type=L&p_origen=BGR&p_tsearch=A\">Efavirenz</a> (Sustiva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1998 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=290137&p_type=L&p_origen=BGR&p_tsearch=A\">Etravirine</a> (Intelence)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen-Cilag</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2008 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=336587&p_type=L&p_origen=BGR&p_tsearch=A\">Rilpivirine hydrochloride</a> (Edurant)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2011 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=431792&p_type=L&p_origen=BGR&p_tsearch=A\">Elsulfavirine sodium</a> (Elpida)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Viriom</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (Russian Federation)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=748272&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine</a> (Pifeltro)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>HIV protease inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=168103&p_type=L&p_origen=BGR&p_tsearch=A\">Saquinavir mesilate</a> (Invirase)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Roche</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1995 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=199183&p_type=L&p_origen=BGR&p_tsearch=A\">Indinavir sulfate</a> (Crixivan)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck &#38; Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=207282&p_type=L&p_origen=BGR&p_tsearch=A\">Ritonavir</a> (Norvir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AbbVie</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1996 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=211732&p_type=L&p_origen=BGR&p_tsearch=A\">Nelfinavir mesilate</a> (Viracept)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=257722&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate</a> (Reyataz)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=285394&p_type=L&p_origen=BGR&p_tsearch=A\">Fosamprenavir calcium</a> (Lexiva)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Vertex/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=240094&p_type=L&p_origen=BGR&p_tsearch=A\">Tipranavir</a> (Aptivus)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Boehringer Ingelheim</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2005 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=310828&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir</a> (Prezista)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2006 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>HIV entry and fusion inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=217659&p_type=L&p_origen=BGR&p_tsearch=A\">Enfuvirtide</a> (Fuzeon)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Alexion/Roche</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2003 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=313738&p_type=L&p_origen=BGR&p_tsearch=A\">Maraviroc</a> (Selzentry)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2007 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=434971&p_type=L&p_origen=BGR&p_tsearch=A\">Albuvirtide</a> (Aikening)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Frontier Biotechnologies</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (China)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=204505&p_type=L&p_origen=BGR&p_tsearch=A\">Ibalizumab</a> (Trozargo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      TaiMed Biologics/ Theratechnologies</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Integrase inhibitors</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428015&p_type=L&p_origen=BGR&p_tsearch=A\">Raltegravir potassium</a> (Isentress)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2007 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=466915&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir sodium</a> (Tivicay)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2013 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=414415&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir</a> (Vitekta)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Pharmacoenhancing agents</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=644627&p_type=L&p_origen=BGR&p_tsearch=A\">Cobicistat</a> (Tybost)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Combination products</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=258524&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/Zidovudine</a> (Combivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      1997 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=284325&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/zidovudine/abacavir sulfate</a> (Trizivir)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2000 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291602&p_type=L&p_origen=BGR&p_tsearch=A\">Lopinavir/ritonavir</a> (Kaletra)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      AbbVie</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2000 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315122&p_type=L&p_origen=BGR&p_tsearch=A\">Abacavir sulfate/lamivudine</a> (Epzicom)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=344908&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine</a> (Truvada)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (U.S.) (treatment)<BR>2012 (U.S.) (prevention)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368895&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/efavirenz</a> (Atripla)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb/Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2006 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=676928&p_type=L&p_origen=BGR&p_tsearch=A\">Tenofovir disoproxil fumarate/emtricitabine/rilpivirine hydrochloride</a> (Complera)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2011 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=651752&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/GS-9350/Truvada</a> (Stribild)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2012 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=780137&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/Cobicistat</a> (Prezcobix)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (Canada)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=725107&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/abacavir/ lamivudine</a> (Triumeq)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2014 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=845715&p_type=L&p_origen=BGR&p_tsearch=A\">Atazanavir sulfate/cobicistat</a> (Evotaz)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bristol-Myers Squibb</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=760199&p_type=L&p_origen=BGR&p_tsearch=A\">Elvitegravir/cobicistat/tenofovir alafenamide/emtricitabine</a> (Genvoya)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2015 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868925&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/tenofovir alafenamide fumarate</a> (Descovy)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2016 (U.S., U.K.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=876185&p_type=L&p_origen=BGR&p_tsearch=A\">Emtricitabine/rilpivirine hydrochloride/tenofovir alafenamide fumarate</a> (Odefsey)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead/Janssen</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2016 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=792693&p_type=L&p_origen=BGR&p_tsearch=A\">Darunavir/cobicistat/emtricitabine/tenofovir alafenamide fumarate</a> (Symtuza)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen-Cilag</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (U.K., Germany)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=880143&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/rilpivirine</a> (Juluca)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Janssen/ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2017 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=902852&p_type=L&p_origen=BGR&p_tsearch=A\">Bictegravir/emtricitabine/tenofovir alafenamide fumarate</a> (Biktarvy)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Gilead</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=889785&p_type=L&p_origen=BGR&p_tsearch=A\">Doravirine/lamivudine/tenofovir disoproxil fumarate</a> (Delstrigo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Merck & Co.</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=994460&p_type=L&p_origen=BGR&p_tsearch=A\">Lamivudine/tenofovir disoproxil fumarate</a> (Cimduo)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Mylan</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2018 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=919756&p_type=L&p_origen=BGR&p_tsearch=A\">Dolutegravir/lamivudine</a> (Dovato)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      ViiV Healthcare</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2019 (U.S.)</TD>\n      </TR>\n\n      <TR>\n      <TD COLSPAN=3 ALIGN=\"LEFT\" BGCOLOR=\"#DDDDDD\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=2>\n      <B><I>Immunoglobulins</B></I></FONT></TD>      \n      </TR>\n\n      <TR>\n      <TD WIDTH=\"200\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=335137&p_type=L&p_origen=BGR&p_tsearch=A\">Immunoglobulin, normal (human)</a> (Gamunex)</TD>\n      <TD WIDTH=\"160\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      Bayer</TD>\n      <TD WIDTH=\"83\" VALIGN=\"TOP\"><FONT FACE=\"Helvetica, Arial,sans-serif\" SIZE=1>\n      2004 (Canada)</TD>\n      </TR>\n\n</TABLE>\n]]></FREETABLE>\n        <COMPETITIVE id=\"767\">\n          <TABLE>\n            <TR>\n              <TD>Drugs and biologics in development for the treatment and prevention of HIV and AIDS</TD>\n            </TR>\n            <TR>\n              <TD>Drug Name</TD>\n              <TD>Organization</TD>\n              <TD>Mechanism of Action</TD>\n              <TD>Status</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=437811&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1044377&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cabotegravir/rilpivirine</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ HIV Integrase Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=281553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=197440&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-1 Immunogen</a>\n              </TD>\n              <TD>Immune Response BioPharma</TD>\n              <TD/>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795404&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ITV-1</a>\n              </TD>\n              <TD>Immunotech Laboratories</TD>\n              <TD/>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=271997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leronlimab</a>\n              </TD>\n              <TD>CytoDyn</TD>\n              <TD>Anti-CD195 (CCR5)/ Signal Transduction Modulators/ Viral Entry Inhibitors</TD>\n              <TD>Pre-Registered</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=291052&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AIDSVAX gp120 B/E</a>\n              </TD>\n              <TD>Walter Reed Army Institute</TD>\n              <TD/>\n              <TD>Phase III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=680262&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Fostemsavir</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>HIV Attachment Inhibitors</TD>\n              <TD>Phase III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357687&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tubercin T-5</a>\n              </TD>\n              <TD>Artec</TD>\n              <TD/>\n              <TD>Phase III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=877379&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC-HIV</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789554&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">TV1.C gp120 Env/1086.C gp120 Env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=447155&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tucidinostat</a>\n              </TD>\n              <TD>Shenzhen Chipscreen Biosciences</TD>\n              <TD>Histone Deacetylase 1 (HDAC1) Inhibitors/ Histone Deacetylase 10 (HDAC10) Inhibitors/ Histone Deacetylase 11 (HDAC11) Inhibitors/ Histone Deacetylase 2 (HDAC2) Inhibitors/ Histone Deacetylase 3 (HDAC3) Inhibitors/ Epigenetic Modifier Modulators</TD>\n              <TD>Phase II/III</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=817657&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">2838232</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Maturation Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795510&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117</a>\n              </TD>\n              <TD>Rockefeller University</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=818039&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ABX-464</a>\n              </TD>\n              <TD>Abivax</TD>\n              <TD>Rev (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435169&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AGS-004</a>\n              </TD>\n              <TD>Argos Therapeutics</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=301127&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALVAC E120TMG</a>\n              </TD>\n              <TD>Walter Reed Army Institute/ Sanofi Pasteur</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915290&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos.HIV</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925145&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.Mos4.HIV</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=420655&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BIT-225</a>\n              </TD>\n              <TD>Biotron Ltd.</TD>\n              <TD>p7 Protein Ion Channel (HCV) Inhibitors/ Drugs Targeting Hepatitis C Virus (HCV) Proteins/ Drugs Targeting Human Immunodeficiency Virus 1 (HIV-1) Proteins/ Nucleocapsid p7 Protein (NCp7) Zinc Finger Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=854294&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bictegravir</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=351007&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Censavudine</a>\n              </TD>\n              <TD>Oncolys</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=925146&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Clade C gp140</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392675&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV-LIPO-5</a>\n              </TD>\n              <TD>ANRS</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395968&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Islatravir</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=315937&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LC-002</a>\n              </TD>\n              <TD>Genetic Immunity</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=321990&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Lexgenleucel-T</a>\n              </TD>\n              <TD>VIRxSYS</TD>\n              <TD>Env (HIV-1) Expression Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=429800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-HIV62B</a>\n              </TD>\n              <TD>GeoVax Labs/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=758734&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVAmos</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=261662&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Peginterferon alfa-2a</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=419201&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Rovafovir etalafenamide</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=692914&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SB-728-T</a>\n              </TD>\n              <TD>Sangamo Therapeutics</TD>\n              <TD>CCR5 Expression Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir/levonorgestrel</a>\n              </TD>\n              <TD>Eastern Virginia Medical School</TD>\n              <TD>Progesterone Receptor Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ Signal Transduction Modulators/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=90485&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Triptorelin</a>\n              </TD>\n              <TD>ISR Immune System Regulation Holding</TD>\n              <TD>Gonadotropin-Releasing Hormone Receptor (GNRHR) Receptor Agonists/ Signal Transduction Modulators</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701671&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">UB-421</a>\n              </TD>\n              <TD>United BioPharma</TD>\n              <TD>Anti-CD4</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=736800&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VAC-3S</a>\n              </TD>\n              <TD>InnaVirVax</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=833319&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VIH-TriMix-ARNm</a>\n              </TD>\n              <TD>IDIBAPS</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=701846&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-01</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=375612&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV014-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=400981&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVDNA016-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=230535&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vorinostat</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Histone Deacetylase 6 (HDAC6) Inhibitors/ Histone Deacetylase 1 (HDAC1) Inhibitors/ Apoptosis Inducers/ Histone Deacetylase 2 (HDAC2) Inhibitors/ Histone Deacetylase 3 (HDAC3) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ Epigenetic Modifier Modulators</TD>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=871553&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp140</a>\n              </TD>\n              <TD>Crucell</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=428304&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pGA2/JS7</a>\n              </TD>\n              <TD>GeoVax Labs/ National Institute Infectious Dis</TD>\n              <TD/>\n              <TD>Phase II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=932649&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">APH-0812</a>\n              </TD>\n              <TD>Aphios</TD>\n              <TD>Protein Kinase C (PKC) Activators/ Histone Deacetylase (HDAC) Inhibitors/ Epigenetic Modifier Modulators/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949733&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Abacavir/lamivudine/lopinavir/ritonavir</a>\n              </TD>\n              <TD>Drugs for Neglected Diseases Initiative</TD>\n              <TD>HIV-1 Protease Inhibitors/ Tumor Necrosis Factor Receptor Superfamily Member 6 (CD95)/PLC-gamma-1 Interaction Inhibitors/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Alcohol Dehydrogenase Inhibitors/ HIV Protease Inhibitors/ Reverse Transcriptase/Ribonuclease H (Viral) Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=754344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad35-GRIN</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=165188&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Bryostatin 1</a>\n              </TD>\n              <TD>Aphios</TD>\n              <TD>Antimitotic Drugs/ Apoptosis Inducers/ Protein Kinase C (PKC) Modulators/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709822&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CEvac</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=814698&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cal-1</a>\n              </TD>\n              <TD>Calimmune</TD>\n              <TD>CCR5 Expression Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789679&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ChAdV63.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=280344&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cytolin</a>\n              </TD>\n              <TD>CytoDyn</TD>\n              <TD>Anti-CD11a/CD18 (LFA-1)/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=392023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-C</a>\n              </TD>\n              <TD>EuroVacc Foundation</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805333&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA-HIV-PT123</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=463084&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FIT-06</a>\n              </TD>\n              <TD>FIT Biotech</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=949705&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GSK-3640254</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Viral Maturation Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1021356&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Gammora</a>\n              </TD>\n              <TD>Zion Medical</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1012613&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">INO-6145</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=684732&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ixazomib citrate</a>\n              </TD>\n              <TD>Takeda</TD>\n              <TD>Proteasome Inhibitors</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=476530&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Lefitolimod</a>\n              </TD>\n              <TD>Mologen</TD>\n              <TD>Toll-Like Receptor 9 (TLR9) Agonists/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=879292&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA HIV-B</a>\n              </TD>\n              <TD>ANRS</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=439426&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=981286&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Mosaic gp140</a>\n              </TD>\n              <TD>Janssen</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915332&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGDM1400</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=742023&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PGT-121</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=709739&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-GP</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=132660&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Poly I:CLC</a>\n              </TD>\n              <TD>Oncovir</TD>\n              <TD>Toll-Like Receptor 3 (TLR3) Agonists/ Interferon Inducers/ Signal Transduction Modulators</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=795545&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">THV-01</a>\n              </TD>\n              <TD>Theravectys</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=471960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tat Oyi</a>\n              </TD>\n              <TD>Biosantech</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878049&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-07-523</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=882712&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">p55(gag)</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=789680&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">pSG2.HIVconsv</a>\n              </TD>\n              <TD>University of Oxford</TD>\n              <TD/>\n              <TD>Phase I/II</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=837370&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074</a>\n              </TD>\n              <TD>National Institutes of Health (NIH)/ Rockefeller University</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=999467&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">10-1074-LS</a>\n              </TD>\n              <TD>Rockefeller University</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=974250&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">3BNC117-LS</a>\n              </TD>\n              <TD>Rockefeller University</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923551&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AD4-EnvC150</a>\n              </TD>\n              <TD>PaxVax/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=769347&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ALT-803</a>\n              </TD>\n              <TD>University of Minnesota</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661464&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad26.ENVA.01 HIV-1</a>\n              </TD>\n              <TD>Crucell/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991353&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-EnvCN54</a>\n              </TD>\n              <TD>Imperial College</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923549&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad4-mGag</a>\n              </TD>\n              <TD>PaxVax/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=661445&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Ad5.ENVA.48HIV-1</a>\n              </TD>\n              <TD>Crucell/ National Institute Allergy Infect Dis/ Beth Israel Deaconess Medical Center</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=861091&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BG505 SOSIP.664 gp140 trimers</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=906491&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BMS-986197</a>\n              </TD>\n              <TD>ViiV Healthcare</TD>\n              <TD>Anti-CD4/ Anti-gp41</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=899722&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CH505TF</a>\n              </TD>\n              <TD>Duke University</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=741669&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CN54gp140</a>\n              </TD>\n              <TD>Medical Research Council (MRC)/ Imperial College</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=687890&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DCV3</a>\n              </TD>\n              <TD>Hospital Clinic</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923518&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA CON-S env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923534&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Mosaic env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923514&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA Nat-B env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=821845&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DNA.HTI/MVA.HTI</a>\n              </TD>\n              <TD>Aelix Therapeutics</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=675477&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">DS-003</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Glycoprotein 120 (gp120) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/levonorgestrel</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>Progesterone Receptor Agonists/ Estrogen Receptor (ER) Agonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=743659&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Dapivirine/maraviroc</a>\n              </TD>\n              <TD>International Partnership Microbicides</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=135177&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Deferiprone</a>\n              </TD>\n              <TD>Apotex</TD>\n              <TD>Cytochrome P450 CYP4F2 Inhibitors/ Chelating Agents</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=900317&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">FLSC</a>\n              </TD>\n              <TD>National Institutes of Health (NIH)/ Profectus BioSciences</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1001453&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GS-6207</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>Capsid Protein p24 Assembly (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=972399&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GS-9722</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1014519&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GSK-3810109</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=658522&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Griffithsin</a>\n              </TD>\n              <TD>Population Council</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719339&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIV MAG pDNA</a>\n              </TD>\n              <TD>Profectus BioSciences</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=783050&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HIVAX</a>\n              </TD>\n              <TD>University of Miami (UM)/ GeneCure</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=395569&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">IQP-0528</a>\n              </TD>\n              <TD>ImQuest BioSciences</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Viral Entry Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=738992&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">KM-023</a>\n              </TD>\n              <TD>Kainos Medicine</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=927219&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">LFn-p24B/C</a>\n              </TD>\n              <TD>Vaccine Technologies (VTI)</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=901797&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MB-66</a>\n              </TD>\n              <TD>LeafBio</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=900637&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MGD-014</a>\n              </TD>\n              <TD>MacroGenics</TD>\n              <TD>Anti-CD3/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=883672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-2048A</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>HIV Attachment Inhibitors/ Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ HIV Integrase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=985113&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-4250</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=965041&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8504</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=853669&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8507</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1015995&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8527</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037890&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8558</a>\n              </TD>\n              <TD>Merck &amp; Co.</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006618&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MK-8583</a>\n              </TD>\n              <TD>Merck Sharp &amp; Dohme (MSD)</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=435114&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CMDR</a>\n              </TD>\n              <TD>Walter Reed Army Institute</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=991354&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-CN54</a>\n              </TD>\n              <TD>Imperial College</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037346&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv3</a>\n              </TD>\n              <TD>University North Carolina, Chapel Hill</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1037349&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA.tHIVconsv4</a>\n              </TD>\n              <TD>University North Carolina, Chapel Hill</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=308599&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MYM-V101</a>\n              </TD>\n              <TD>Mymetics</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=781084&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MazF-T cells</a>\n              </TD>\n              <TD>TaKaRa Bio/ University of Pennsylvania</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=805334&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NYVAC-HIV-PT1</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=719391&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PC-1005</a>\n              </TD>\n              <TD>Population Council</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ ICAM1 Expression Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=399012&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">PPL-100</a>\n              </TD>\n              <TD>TaiMed Biologics</TD>\n              <TD>HIV Protease Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=469002&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Pennvax-G</a>\n              </TD>\n              <TD>Inovio Pharmaceuticals/ Walter Reed Army Institute</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915203&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax DNA plasmid HIV-1 nef/tat/vif,env</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915206&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ProfectusVax VSV IN HIV envC</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=459875&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RO-0335</a>\n              </TD>\n              <TD>Viriom</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=368000&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">RPI-MN</a>\n              </TD>\n              <TD>ReceptoPharm</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=456307&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI DNA-C2</a>\n              </TD>\n              <TD>South African AIDS Vaccine Initiative/ University of Witwatersrand/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=409360&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SAAVI MVA-C</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=850686&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SB-728mR-HSPC</a>\n              </TD>\n              <TD>Sangamo Therapeutics</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=939977&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Sondashi Formula</a>\n              </TD>\n              <TD>Tropical Diseases Research Centre</TD>\n              <TD>HIV Integrase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=874960&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Tenofovir disoproxil orotate</a>\n              </TD>\n              <TD>Dong-A ST</TD>\n              <TD>Reverse Transcriptase/Ribonuclease H (HIV-1) Inhibitors/ Cytochrome P450 CYP3A4 Inhibitors/ DNA Polymerase Inhibitors</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=451282&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VLP-TBI-pcDNA-TCI</a>\n              </TD>\n              <TD>State Res Cent Virology Biotech VECTOR</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=986918&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVAAV070-00-GT</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-CD4</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455063&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-027-00-VP</a>\n              </TD>\n              <TD>GenVec/ National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=455064&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-038-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923291&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-053-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=923293&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVADV-054-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=785468&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB080-00-AB</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-gp120</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006069&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB091-00-AB</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-gp41</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1009345&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVMAB095-00-AB</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-gp41</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1030241&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC-HIVRGP096-00-VP</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=975954&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VRC01/PGDM1400-10E8v4</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD>Anti-gp120/ Anti-gp41</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=720406&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vesatolimod</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>Toll-Like Receptor 7 (TLR7) Agonists/ Signal Transduction Modulators</TD>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1006783&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">eOD-GT8 60mer</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993174&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">env (A,B,C,A/E)/gag (C) DNA vaccine</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=993181&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120 (A,B,C,A/E) protein vaccine</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987672&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp120-NefTat/AS01B</a>\n              </TD>\n              <TD>GlaxoSmithKline</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=987944&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">gp145 C.6980</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=774420&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rAAV1-PG9DP</a>\n              </TD>\n              <TD>Children&apos;s Hospital of Philadelphia</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=745516&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rAd5 EnvB</a>\n              </TD>\n              <TD>National Institute Allergy Infect Dis</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=467570&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rVSVIN-N4CT9-Gag1</a>\n              </TD>\n              <TD>Profectus BioSciences</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=878268&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">rcAd26.MOS1.HIV-Env</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative/ Beth Israel Deaconess Medical Center</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=357275&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">recombinant o-gp140/MF59 adjuvant</a>\n              </TD>\n              <TD>International AIDS Vaccine Initiative</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=882449&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">882449</a>\n              </TD>\n              <TD>Fred Hutchinson Cancer Research Center</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027125&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027125</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027126&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027126</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027124&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027124</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1027123&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1027123</a>\n              </TD>\n              <TD>University of Pittsburgh</TD>\n              <TD/>\n              <TD>Phase I</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868222&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">NOV-1003</a>\n              </TD>\n              <TD>Novicol</TD>\n              <TD/>\n              <TD>Clinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=963159&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">963159</a>\n              </TD>\n              <TD>307th Hospital People&apos;s Liberation Army</TD>\n              <TD/>\n              <TD>Clinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=413821&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5(R)-Hydroxytriptolide</a>\n              </TD>\n              <TD>Shanghai Pharmaceuticals</TD>\n              <TD>NOS2 Expression Inhibitors</TD>\n              <TD>IND Filed</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=417670&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">SHIV vaccine</a>\n              </TD>\n              <TD>IGXBio</TD>\n              <TD/>\n              <TD>IND Filed</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=773475&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">5P12-RANTES</a>\n              </TD>\n              <TD>Orion Biotechnology</TD>\n              <TD>Chemokine CCR5 Receptor Antagonists/ Signal Transduction Modulators/ Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=952917&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AG-1105</a>\n              </TD>\n              <TD>American Gene Technologies International</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=990227&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">AGT103-T</a>\n              </TD>\n              <TD>American Gene Technologies International</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=906488&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BMS-986173</a>\n              </TD>\n              <TD>Bristol-Myers Squibb</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=928135&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">BiIA-SG</a>\n              </TD>\n              <TD>University of Hong Kong</TD>\n              <TD>Anti-CD4/ Anti-gp120</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=788997&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">CS-TATI-1</a>\n              </TD>\n              <TD/>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=931208&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Cholesterol-PIE12-2-trimer with PEG32 fourth-arm spacer</a>\n              </TD>\n              <TD>Navigen</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1035036&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ConM SOSIP</a>\n              </TD>\n              <TD>Universiteit Van Amsterdam/ Imperial College</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038073&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-11</a>\n              </TD>\n              <TD>Enochian BioSciences</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1038088&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">ENOB-HV-12</a>\n              </TD>\n              <TD>Enochian BioSciences</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=843471&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GI-2010</a>\n              </TD>\n              <TD>GlobeImmune</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=915342&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">GS-986</a>\n              </TD>\n              <TD>Gilead</TD>\n              <TD>Toll-Like Receptor 7 (TLR7) Agonists/ Signal Transduction Modulators</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=474274&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">HiviCide-1</a>\n              </TD>\n              <TD>NanoViricides</TD>\n              <TD>Viral Entry Inhibitors</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=736650&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Leukotoxin</a>\n              </TD>\n              <TD>Actinobac Biomed</TD>\n              <TD>Integrin alphaLbeta2 (LFA-1) Ligands/ Signal Transduction Modulators</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1003524&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">MVA-BN HIV</a>\n              </TD>\n              <TD>Janssen Pharmaceuticals/ Bavarian Nordic</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=868061&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">T-169</a>\n              </TD>\n              <TD>TGV-Laboratories</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=954592&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">VS-2-370</a>\n              </TD>\n              <TD>Virostatics</TD>\n              <TD>Cyclin-Dependent Kinase 6 (CDK6) Inhibitors/ Cyclin-Dependent Kinase 4 (CDK4) Inhibitors/ Cyclin-Dependent Kinase 9 (CDK9) Inhibitors/ Signal Transduction Modulators</TD>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1029754&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">Vacc-CRX</a>\n              </TD>\n              <TD>Bionor</TD>\n              <TD/>\n              <TD>Preclinical</TD>\n            </TR>\n            <TR>\n              <TD>\n                <a href=\"https://integrity.thomson-pharma.com/integrity/xmlxsl/pk_prod_list.xml_prod_list_card_pr?p_id=1017477&amp;p_type=L&amp;p_origen=BGR&amp;p_tsearch=A\">1017477</a>\n              </TD>\n              <TD>University of Pennsylvania</TD>\n              <TD>Drugs Targeting T-Cell Surface Glycoprotein CD4</TD>\n              <TD>Preclinical</TD>\n            </TR>\n          </TABLE>\n        </COMPETITIVE>\n      </para>\n    </Body>\n    <References/>\n  </Section>\n</Section>\n<Section sectionId=\"4636\" modifiedDate=\"20160801112125\">\n  <Title>Targets for Therapeutic Intervention</Title>\n  <Body>\n    <para>For an overview of validated therapeutic targets for this indication, consult the targetscape below. The targetscape shows an overall cellular and molecular landscape or comprehensive network of connections among the current therapeutic targets for the treatment of the condition and their biological actions. An arrow indicates a positive effect; a dash indicates a negative effect. Gray or lighter symbols are protein targets that are not validated (i.e., not under active development [UAD]). Pink text boxes with red borders indicate validated gene targets. Yellow text boxes are gene targets not UAD. Purple and pink text boxes indicate extracellular and intracellular effects, respectively. Green text boxes indicate a related disease/condition/symptom. For in-depth information on a specific target or mechanism of action, see the corresponding section in this report.\n\n</para>\n  </Body>\n  <References/>\n</Section>\n</Sections>"}]}}"}],"title":"I pass a &quot;operation = diseaseBriefing and dataset = diseasebriefings and idList = DBQueryForId_disease_Id and fieldList = diseaseTitle,datePublished,diseaseInfo&quot; as parameter to &quot;retrieve&quot; operation","status":"passed"},{"date":"2019-06-15 01:12:35","title":"response contains &quot;DiseaseBriefings.id&quot; in json fields","status":"passed"},{"date":"2019-06-15 01:12:35","title":"response contains &quot;DiseaseBriefings.DiseaseTitle&quot; in json fields","status":"passed"},{"date":"2019-06-15 01:12:35","title":"response contains &quot;DiseaseBriefings.DatePublished&quot; in json fields","status":"passed"},{"date":"2019-06-15 01:12:35","title":"response contains &quot;DiseaseBriefings.DiseaseInfo&quot; in json fields","status":"passed"}],"status":"passed"}}],"os":"Windows Server 2016 10.0 x86","ip":"10.152.83.40","name":"Feature_siDiseaseBriefings","time":"2019-06-15 01:12:35","url":"http://mwa.eu-west-1.prodeu.prod.cortellis.int.clarivate.com","targettestcycle":"Smokes-RT77-Services"}}]