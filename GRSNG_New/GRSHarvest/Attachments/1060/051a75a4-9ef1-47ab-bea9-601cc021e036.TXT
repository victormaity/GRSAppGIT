<?xml version="1.0" ?><ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.AnalysisCsvResponse xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns2="local" xsi:type="xs:base64Binary">Ancestry,ArmCount,DevStatus,DevStatusId,Drug,DrugId,Endpoint,EndpointReached,HasHealthyVolunteers,HighestDevStatusForInd,HighestDevStatusForIndId,Indication,IndicationId,ProtocolAcronym,ProtocolTitle,Sponsor,StudyType,TrialId,TrialStartDate,TrialStatus
null,1,Phase 0 Clinical,C0,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Migraine with aura,3679,null,Induction of Migraine Aura With Sildenafil,Herlev Hospital Region Hovedstaden,Interventional,262969,2015-06-30 00:00:00,Recruiting
null,1,Phase 0 Clinical,C0,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Acral erythema,6832,null,Topical Sildenafil as Pre-Treatment for Hand-Foot Skin Reaction,Northwestern University,Interventional,306445,2017-04-11 00:00:00,Recruiting
null,1,Phase 1b Clinical,C1B,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Asphyxia,2524,SANE,Sildenafil Administration to Treat Neonatal Encephalopathy,McGill University Health Center,Interventional,264172,2016-07-31 00:00:00,Recruiting
null,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Pulmonary artery hypertension,3510,SPPPH,Evaluation of Sildenafil in Treatment of Pediatrics Pulmonary Hypertension,Mazandaran University of Medical Sciences,Interventional,118705,2009-09-02 00:00:00,No longer recruiting
null,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,SToP-PH,"A phase I/IIb, randomized, investigator-blinded, double-armed, parallel-group study evaluate the placenta transfer and safety of antenatal sildenafil administration to prevent pulmonary hypertension in congenital diaphragmatic hernia",UZ Leuven-University Hospitals,Interventional,366985,null,Status not specified
null,1,Phase 2a Clinical,C2A,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,COMPARE,Combination therapy for Pulmonary hypertension using Racecadotril (COMPARE),University of London,Interventional,173579,2013-06-07 00:00:00,Completed
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Phosphodiesterase-5 (PDE5) Inhibition and Pulmonary Hypertension in Diastolic Heart Failure,Universita degli Studi di Milano,Interventional,68008,2006-01-31 00:00:00,Completed
null,2,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,CRONOS,Comparison of inhaled nebulized nitrite and oral sildenafil versus oral sildenafil alone in the treatment of beta-thalassemia patients with pulmonary hypertension,"Mahidol University, The Cooley’s Anemia Foundation",Interventional,353763,2018-08-01 00:00:00,Recruiting
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Effects of phosphodiesterase V (sildenafil) on pulmonary arterial hypertension,The University of Tokyo Hospital,Interventional,122475,2007-01-01 00:00:00,Recruiting
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Intermittent claudication,1865,null,Reduced Cardiovascular Morbi-mortality by Sildenafil in Patients With Arterial Claudication,"University Hospital, Angers",Interventional,224391,2015-09-30 00:00:00,Not yet recruiting
null,2,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,STS,Efficacy and Safety Study of Sodium Tanshinone IIA Sulfonate on Pulmonary Hypertension,The First Affiliated Hospital of Guangzhou Medical College,Interventional,197318,2013-05-31 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Hypertension,178,null,To Yield Further Information On The Efficacy And Safety Of Viagra Among Subjects With Arterial Hypertension,Pfizer Inc,Interventional,21127,2005-03-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Assessment Of Sildenafil On Erectile Function And Intercourse Satisfaction And To Validate A New Subject Questionnaire,Pfizer Inc,Interventional,43245,2005-11-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Quality of Erection Study,Pfizer Inc,Interventional,30940,2005-05-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,Effectiveness and Safety of Viagra in Men With ED and LUTS Due to Benign Prostatic Hyperplasia (BPH),Pfizer Inc,Interventional,43243,2004-03-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Randomized, Controlled Trial of Regular Sildenafil Citrate in the Prevention of Altitude Illness",Altitude Physiology Expeditions,Interventional,21817,2003-03-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Eisenmenger syndrome,2087,null,Safety and Tolerability of Sildenafil in Patients With Eisenmenger Physiology,Imperial College London,Interventional,140252,2007-05-10 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Chronic obstructive pulmonary disease,1185,null,"Acute Effect of Sildenafil on Exercise Tolerance and Functional Capacity in Chronic Obstructive Pulmonary Disease, Idiopathic Pulmonary Fibrosis and Post Pneumonectomy Patients",Rabin Medical Center,Interventional,78828,2011-09-30 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Diabetic neuropathy,101,null,"An open-label, dose-finding trial of Viagra for the treatment of neuropathic pain (in diabetes mellitus)",Cornell University,Interventional,8173,2004-08-31 00:00:00,Completed
null,3,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Duchenne dystrophy,2020,null,Comparative Study of Strategies for Management of Duchenne Myopathy (DM),Assiut University,Interventional,350407,2018-09-30 00:00:00,Not yet recruiting
null,3,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Myopathy,672,null,Comparative Study of Strategies for Management of Duchenne Myopathy (DM),Assiut University,Interventional,350407,2018-09-30 00:00:00,Not yet recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Pulmonary Arterial Hypertension Secondary to Idiopathic Pulmonary Fibrosis And Treatment With Sildenafil,University of California Los Angeles,Interventional,21142,2007-02-28 00:00:00,Terminated
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Clinical Study for Phosphodiesterase 5 Inhibitor (PDE5i) on Endothelial Function Improvement in Cardiovascular Patients: A Randomized Controlled Trial,Xiangya Hospital Of Central South University,Interventional,377649,2019-05-01 00:00:00,Not yet recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Bioavailability,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Sickle cell anemia,303,null,Endothelial Function in Patients With Sickle Cell Anemia Before and After Sildenafil,The Baruch Padeh Medical Center Poriya,Interventional,58693,2009-09-30 00:00:00,Terminated
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Effect of Sildenafil on Quality of Sexual Life in Mild to Normally Sexually Functioning Males,Rambam Health Care Campus,Interventional,30943,2005-09-30 00:00:00,Recruiting
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,BosSilSS,To Compare the Efficacy of Combination Therapy Versus Monotherapy for Pulmonary Arterial Hypertension in Systemic Sclerosis,Postgraduate Institute of Medical Education and Research,Interventional,288327,2016-12-31 00:00:00,Recruiting
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Pharmacokinetics,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,"The Possibility for Avoidance of Mutual Pharmacokinetic Interaction between Sildenafil and Bosentan, Staggering Administration Timing of the Two Drugs",Hamamatsu University School of Medicine,Interventional,119169,2009-02-01 00:00:00,Recruiting
null,3,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Comparison of Efficacy Different Treatment Regimens in Pulmonary Hypertension Secondary to Lung Disease and or Hypoxia,All India Institute of Medical Sciences,Interventional,81489,2011-08-31 00:00:00,Recruiting
null,4,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,Sildenafil Effect After Ovulation Induction,Cairo University,Interventional,270883,2016-08-31 00:00:00,Not yet recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Diabetic cardiomyopathy,2569,CECSID,Cardiovascular Effects of Chronic Sildenafil in Men With Type 2 Diabetes,Universita degli Studi di Roma La Sapienza,Interventional,16672,2008-01-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,SIOVAC,Sildenafil for Secondary Pulmonary Hypertension Due to Valvular Disease,"Fundación Para La Investigación Biomédica Del Hospital Gregorio Marañon, Hospital General Universitario Gregorio Marañon",Interventional,48975,2009-04-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Resistant hypertension,3663,null,Investigation of Combined Phosphodiesterase-5 inhibitor and Isosorbide mononitrate for the Treatment of Resistant Hypertension,University of Edinburgh,Interventional,140546,2005-07-05 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,SIDAMI,Sildenafil and Diastolic Dysfunction After Acute Myocardial Infarction (AMI),"Rigshospitalet, Denmark",Interventional,63348,2009-12-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Chronic fatigue syndrome,1058,null,"Use of Sildenafil (Viagra) to Alter Fatigue, Functional Status and Impaired Cerebral Blood Flow in Patients With CFS",Charles R. Drew University of Medicine and Science,Interventional,11863,2002-07-31 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Congenital heart defect,1541,null,Study of Effects of Sildenafil on Patients With Fontan Heart Circulation,Medical University of South Carolina,Interventional,116933,2013-02-28 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Pharmacodynamics,N,N,PHASE NOT SPECIFIED,NS,Angina,23,null,Blood Pressure Interaction Between Sildenafil and Sublingual Glyceryl Trinitrate (GTN) in Men With Angina,University of Edinburgh,Interventional,23121,2004-01-31 00:00:00,Completed
null,3,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Emphysema,111,null,Hypoxic Pulmonary Vasoconstriction Pilot Study,University of Iowa,Interventional,359411,2011-06-29 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A double-blind, randomized, placebo-controlled, cross-over study to determine the efficacy and safety of sildenafil on penile erectile activity in male patients with erectile dysfunction of no established organic cause",Pfizer Inc,Interventional,52214,1996-12-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,"A multicenter, open-label study to assess the efficacy of sildenafil in erectile dysfunction patients",Universita Vita-Salute San Raffaele,Interventional,115506,2003-03-26 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,Effect of Nightly Versus 'As Needed' (Prn) Sildenafil on Early Return of Erectile Function Following Laparoscopic Radical Prostatectomy,Johns Hopkins University,Interventional,33868,2006-03-31 00:00:00,Completed
null,3,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Idiopathic pulmonary arterial hypertension,3661,null,A retrospective study to assess the short- and long-term effects of combining bosentan and sildenafil therapy in pulmonary arterial hypertension patients in a real-world setting,Actelion Pharmaceuticals Ltd,Interventional,240473,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Male sexual dysfunction,369,null,"A prospective, parallel-group, randomized, double-blind, placebo-controlled study to evaluate the safety and efficacy of sildenafil for the treatment of antidepressant-associated sexual dysfunction",University of New Mexico,Interventional,73409,2000-11-01 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Pulmonary artery hypertension,3510,null,Drug Therapy and Surgery in Congenital Heart Disease With Pulmonary Hypertension,University of Sao Paulo,Interventional,85511,2011-09-30 00:00:00,Recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,null,null,null,Effect of sildenafil versus placebo on sexuality in women younger than 45 years,Laboratorios Liomont Sa De Cv,Interventional,164163,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,null,null,null,Does Sildenafil Increase Exercise Performance in Air Pollution?,Marywood University,Interventional,38783,2008-12-30 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,The Effect of Sildenafil on Diffusion Capacity Measurements in Patients With Pulmonary Hypertension and Parenchymal Lung Disease,Cleveland Clinic Foundation,Interventional,155478,2009-06-30 00:00:00,Completed
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,null,null,null,"Open, randomized, crossover study of comparative pharmacokinetics and bioequivalence of drugs Silden tablets, coated membrane shell, 100 mg (Sopharma AD, Bulgaria) and Viagra tablets, film-coated, 100 mg (Pfizer PGM, France)",NPC probiotek,Interventional,215279,2014-10-24 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,A prospective randomised study to compare sildenafil versus nasal continuous positive airway pressure in patients with Severe obstructive sleep apnoea syndrome and erectile dysfunction,Universita degli Studi di Roma La Sapienza,Interventional,244154,null,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Pulmonary artery hypertension,3510,null,"A randomized, open-label study to compare the efficacy of first-line treatment with bosentan or sildenafil in pulmonary arterial hypertension patients",Universita di Bologna,Interventional,105201,2012-08-27 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Age related macular degeneration,1226,null,"A comparative, cross-over, double-blind, placebo-controlled, randomized trial to  evaluate the acute effects of sildenafil citrate (Viagra) on visual function in subjects with early-stage age-related macular degeneration",Retina Foundation of the Southwest,Interventional,112566,2002-05-31 00:00:00,Status not specified
null,1+,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Iloprost for the Treatment of Pulmonary Hypertension in Adults With Congenital Heart Disease,University of California Los Angeles,Interventional,75685,2011-06-30 00:00:00,Terminated
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioavailability,Pharmacokinetics",N,Y,Launched,L,Erectile dysfunction,186,null,Pharmacokinetics Of Sildenafil Orally Disintegrating Tablet Formulation Given With Or Without Food,Pfizer Inc,Interventional,201682,2010-12-31 00:00:00,Completed
null,2+,Phase 1 Clinical,C1,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Habitual abortion,3735,null,Sildenafil Citrate in Early Unexplained Recurrent Pregnancy Loss,Ain Shams University,Interventional,362670,2018-01-01 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Cardiac failure,55,null,"Safety, Tolerability, and Pharmacokinetic Parameters of Sodium Nitrite Inhalation Solution in Healthy Subjects",Aires Pharmaceuticals Inc,Interventional,79793,2011-07-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",N,Y,Discontinued,DX,Female sexual dysfunction,1276,null,Interaction Between Fluvoxamine and Sildenafil,University of Heidelberg,Interventional,46003,2003-02-28 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Bulimia nervosa,51,null,Interaction Between Fluvoxamine and Sildenafil,University of Heidelberg,Interventional,46003,2003-02-28 00:00:00,Completed
null,7,Phase 1 Clinical,C1,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Nitric Oxide and Transfusion Therapy for Sickle Cell Patients With Pulmonary Hypertension,National Heart Lung and Blood Institute,Interventional,188839,2001-07-27 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Hepatitis C virus infection,153,BOC_PK,The Boceprevir and Sildenafil Pharmacokinetics Study,Imperial College London,Interventional,83588,2012-12-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Open, two-stage, single-center, randomized, crossover, comparative study of the pharmacokinetics and bioequivalence of drugs ""EFFEKS sildenafil"", tablets, film-coated 100 mg, manufactured by JSC ""Evalar"", Russia and ""Viagra"", tablets, film-coated 100 mg, manufactured by ""Pfizer PGM"" France, in healthy volunteers following a single dose on an empty stomach",ZAO "Evalar",Interventional,235835,2015-08-01 00:00:00,Status not specified
Asian Ancestry,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioequivalence,Pharmacokinetics",Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A single-dose, randomized, open-label bioequivalence study of sildenafil citrate tablets (specification 50 mg) in Chinese healthy male volunteers","Guangzhou Baiyunshan Pharmaceutical Holdings Co Ltd, Xiangya Hospital Of Central South University",Interventional,257238,null,Status not specified
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacodynamics",Y,N,Launched,L,Erectile dysfunction,186,RHOKET,SAR-407899 Single-Dose in Treatment of Mild to Moderate Erectile Dysfunction,Sanofi SA,Interventional,57538,2009-05-31 00:00:00,Completed
Asian Ancestry,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,SILRALP,Early Start of Oral Sildenafil 100 mg for Erectile Dysfunction After Robotic Assisted Laparoscopic Radical Prostatectomy,Seoul National University Hospital,Interventional,63577,2010-06-30 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Becker muscular dystrophy,3289,null,"Effect of Modulating the nNOS System on Cardiac, Muscular and Cognitive Function in Becker Muscular Dystrophy Patients","Rigshospitalet, Denmark",Interventional,77236,2011-11-30 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Vitamin D deficiency,3790,null,effect of vitamin D in treatment of men with sexual dysfunction,Mazandaran University of Medical Sciences,Interventional,302175,2015-06-26 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Lung malformation,797,SIL02,Safety of Sildenafil in Premature Infants,University of North Carolina,Interventional,297481,2018-04-02 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,Y,Y,PHASE NOT SPECIFIED,NS,Hypoxia,1053,null,Endurance Performance at Altitude,University of British Columbia,Interventional,357297,2015-11-01 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Heart disease,626,null,To study the positive effect of Sidenafil on quality of life and exercise capacity in heart disease patients,Postgraduate Institute of Medical Education and Research,Interventional,326644,2016-01-02 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,Discontinued,DX,Female sexual dysfunction,1276,null,Comparison of the effect of cognitive-behavioral therapy and treatment with sildenafil on sexual function and marital satisfaction in women,Kashan University of Medical Sciences and Health Services,Interventional,207454,2013-12-22 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Heart transplantation,2982,null,Phosphodiesterase-5 (PDE-5) Inhibition in Heart Transplant Recipients,University of Minnesota - Clinical and Translational Science Institute,Interventional,116489,2010-10-31 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Hypoxia,1053,RIDSTRESS,Does Sildenafil Reduce The Risk Of Fetal Distress In Labor?,"Mater Health Services' Adult Hospital, Brisbane, Qld, Mater Medical Research Institute",Interventional,226604,2015-09-29 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Rheumatoid arthritis,291,null,Does Sildenafil Improve Endothelial Dysfunction in Rheumatoid Arthritis?,University of Pittsburgh,Interventional,272232,2017-04-01 00:00:00,Recruiting
null,3,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Polycystic ovary syndrome,1699,null,The Effect of Sildenafil Citrate on the Success Rate of Ovulation Induction Using Clomiphene,Ain Shams University,Interventional,251810,2016-01-10 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Best macular dystrophy,5723,null,A two-year trial to evaluate the PDE5/6 inhibition with sildenafil to reduce choroidal ischemia and treat age-related macular degeneration,"National Cancer Institute, National Institutes of Health",Interventional,348811,null,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,DMED,DMED,Malaysian Urological Association,Interventional,365247,2018-12-17 00:00:00,Not yet recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,"Effectiveness of a Sildenafil Citrate Suspension for Pulmonary Hypertension in Children: A Randomized, Pragmatic Trial",Fundacao Oswaldo Cruz (Fiocruz),Interventional,135146,2008-05-01 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Traumatic brain injury,3733,null,Sildenafil for Cerebrovascular Dysfunction in Chronic Traumatic Brain Injury,Uniformed Services University of the Health Sciences,Interventional,103991,2013-01-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,null,Sildenafil and Uteroplacental Perfusion,Tehran University of Medical Sciences,Interventional,65800,2008-06-30 00:00:00,Recruiting
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Pharmacological Penile Rehabilitation in the Preservation of Erectile Function Following Bilateral Nerve-Sparing Radical Prostatectomy,Memorial Sloan-Kettering Cancer Center,Interventional,59478,2009-08-31 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Sildenafil to Increase Exercise Capacity in Individuals With Idiopathic Pulmonary Fibrosis and Pulmonary Hypertension,National Heart Lung and Blood Institute,Interventional,23248,2004-11-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Persistent pulmonary hypertension of the newborn,3660,null,To compare between iv and oral preparations of sildenafil in persistent pulmonary hypertension of newborn,Bharati Hospital research,Interventional,378480,2019-05-01 00:00:00,Not yet recruiting
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Study Providing Monotherapy (Sitaxsentan) And Combination Therapy (Sitaxsentan + Sildenafil) To Subjects With Pulmonary Arterial Hypertension (PAH) To Assess Long-Term Safety,Pfizer Inc,Interventional,36901,2010-07-31 00:00:00,Terminated
null,3,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,IMPRES,Imatinib (QTI-571) in Pulmonary Arterial Hypertension,Novartis AG,Interventional,55258,2009-09-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,SilHF,Sildenafil Versus Placebo in Chronic Heart Failure,Helse Stavanger HF,Interventional,88258,2013-03-31 00:00:00,No longer recruiting
null,3,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,VISION,Ventavis Inhalation With Sildenafil to Improve and Optimize Pulmonary Arterial Hypertension,Actelion Ltd,Interventional,5726,2006-02-28 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,Dutch STRIDER,Sildenafil Therapy In Dismal Prognosis Early-onset Fetal Growth Restriction,"Academic Medical Center, University of Amsterdam",Interventional,214341,2015-01-31 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,The Assessment of Right Ventricular Contractility in Response to Sildenafil,Hospital for Sick Children,Interventional,25811,2008-08-31 00:00:00,Suspended
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,SilHF-US,Sildenafil in US Heart Failure Patients,Hartford Hospital,Interventional,331975,2018-02-14 00:00:00,Recruiting
null,3,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,"Comparison the effect of ozone therapy, oral sildenafil and topical sildenafil gel in patients with erectile dysfunction",Baqiyatallah University of Medical Sciences,Interventional,299640,2016-10-22 00:00:00,No longer recruiting
null,3,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,CoDiNOS,Newborns with Congenital Diaphragmatic hernia: inhaled Nitric Oxide or intravenous Sildenafil for pulmonary hypertension,Erasmus University Medical Center Rotterdam,Interventional,327721,2018-02-01 00:00:00,Not yet recruiting
null,2,Phase Not Applicable,PNA,sildenafil citrate,8713,Bioavailability,N,N,Launched,L,Erectile dysfunction,186,null,"Comparative bioavailability clinical study to demonstrate that the soft gelatin capsule (test drug) made by Gelpharma, S. A de CV, is a pharmaceutical alternative to the Viagra tablet (reference medicine) developed by Pfizer, S. A of CV, both formulations containing sildenafil citrate equivalent to 50 mg of sildenafil",Gelpharma SA,Interventional,378536,null,Status not specified
null,2,Phase 0 Clinical,C0,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Testosterone for Penile Rehab After Radical Prostatectomy,Baylor College of Medicine,Interventional,46722,2007-11-30 00:00:00,Terminated
null,1,Phase 0 Clinical,C0,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Thrombosis,1076,SToPClot,Hemolysis With Continuous Flow Pumps,Montefiore Medical Center,Interventional,303285,2019-06-03 00:00:00,Recruiting
null,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,HIV infection,158,null,Sildenafil to Treat HIV-Associated Pulmonary Hypertension,National Heart Lung and Blood Institute,Interventional,21227,2006-05-12 00:00:00,Terminated
null,2,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,Thermosensitive Gels for the Vaginal Delivery of Sildenafil Citrate (ss),Assiut University,Interventional,260467,2015-01-31 00:00:00,Completed
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Thalassemia,322,null,Sildenafil to Improve Exercise Capacity in People With Thalassemia and Pulmonary Hypertension,New England Research Institutes,Interventional,50340,2009-03-31 00:00:00,Completed
null,1+,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Influence of Dexmedetomidine on Pulmonary Hypertensive Crisis and Arrhythmias and Extubation Time in Cardiac Surgery Patients with Left to Right Shunt and Severe PH,Shiraz University of Medical Sciences,Interventional,297992,2017-04-21 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Non-insulin dependent diabetes,837,null,"A multi-center, double-blind study to evaluate the effect of pre-treatment with a daily dose of sildenafil on the as-needed efficacy of Viagra in men with erectile dysfunction and type 2 diabetes",Pfizer Inc,Interventional,9113,2002-12-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,Study Of Men With Mild To Moderate Erectile Dysfunction To Evaluate The Efficacy Of Viagra 8 h Post-Dose,Pfizer Inc,Interventional,43244,2005-08-31 00:00:00,Completed
null,3,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,REPLACE,Riociguat Replacing PDE-5i Therapy Evaluated Against Continued PDE-5i Therapy,Bayer AG,Interventional,271077,2017-01-11 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Spinal cord injury,1258,null,A Study Evaluating the Efficacy and Safety of Sildenafil in Men With Traumatic Spinal Cord Injury and Erectile Dysfunction,Pfizer Inc,Interventional,14295,2002-09-30 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Pharmacodynamics",Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,FDA Phase IV- Commitment- Retinal Function Study,Bayer AG,Interventional,55315,2005-02-28 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,HBOT,Can Hyperbaric Oxygen Improve Erectile Function Following Surgery for Prostate Cancer,Hartford Hospital,Interventional,55976,2009-07-31 00:00:00,No longer recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Meniere disease,2799,null,Sildenafil For Meniere's Disease,Pfizer Pty Ltd (Australia),Interventional,39386,2002-06-18 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,"Satisfaction, Confidence and Naturalness in Men With Psychogenic Erectile Dysfunction (ED)",Universidade Federal de Sao Paulo - UNIFESP,Interventional,67772,2010-06-29 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary fibrosis,708,null,Pulmonary Arterial Hypertension Secondary to Idiopathic Pulmonary Fibrosis And Treatment With Sildenafil,University of California Los Angeles,Interventional,21142,2007-02-28 00:00:00,Terminated
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Heart disease,626,null,The Effects of Sildenafil on Exercise Function and Capacity in Patients With Fontan Circulation,Pennsylvania State University,Interventional,59895,2009-08-31 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,Sildenafil-HF,Sildenafil in Heart Failure With Reactive Pulmonary Hypertension,University of Kentucky,Interventional,217476,2015-01-31 00:00:00,Terminated
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,A study to evaluate the efficacy and tolerability of RWJ-387273 compared to sildenafil citrate,Johnson & Johnson,Interventional,49051,2005-10-24 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,A 6-month trial to evaluate the efficacy anf tolerability of sildenafil for the treatment of severe pulmonary hypertension in patients with chronic pulmonary schistosmiasis,Pfizer Inc,Interventional,52394,2004-11-07 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Randomized, open, balanced, two-component, two-period, crossover, with a single dose study of comparative pharmacokinetics and bioequivalence of the drug sildenafil (""Dr. Reddy's Laboratories Ltd.."" India), in the dosage form of a tablet dispersible oral 100 mg and Viagra (sildenafil), the production of ""Pfizer PGM"" (France), in the dosage form of a tablet, film-coated, 100 mg, in orally-fasting healthy adult male volunteers",Dr Reddy's Laboratories Ltd,Interventional,183942,2014-04-10 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Premature ejaculation,1274,null,An open-label study to assess the efficacy and safety of paroxetine and sildenafil in premature ejaculation patients,Universita Vita-Salute San Raffaele,Interventional,111639,2002-06-19 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,null,null,null,"An open, randomized, crossover study on the comparative pharmacokinetics and bioequivalence of drugs ""Viareks"" tablets, film-coated 100 mg (LLC ""EvoFarm"", Russia) and the drug ""Viagra"" tablets, film-coated, 100 mg (""Pfizer GMP"", France)",LLC "EvoFarm",Interventional,176029,2014-02-25 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,"A Crossover, Placebo-controlled, Randomized Study To Evaluate The Effect Of Sildenafil On Blood Pressure And Arterial Wave Reflection In Treated Hypertensive Men",St. James's Hospital,Interventional,110796,2001-10-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pre-eclampsia,1259,null,"Evaluation of Blood Pressure, Blood Flow Fetal and Neonatal Outcome With the Use of a Phosphodiesterase Type V Inhibitor in the Treatment of Women With Pre-eclampsia",Universidade Federal de Santa Catarina,Interventional,254520,2013-06-01 00:00:00,Recruiting
Asian Ancestry,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A Double-blind, Randomized, Placebo-controlled, Parallel-group, Multicenter, Flexible-dose Escalation Study To Assess The Efficacy And Safety Of Sildenafil Administered As Required To Male Outpatients With Erectile Dysfunction In Korea",Yonsei University,Interventional,114390,2003-04-30 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A comparative, crossover, multicenter, open-label study of tadalafil versus sildenafil in erectile dysfunction",University of Skövde,Interventional,114674,2003-11-30 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,Launched,L,Pulmonary artery hypertension,3510,null,"Comparative Pharmacokinetic and Bioequivalence Study of Drugs Vizarsin Ku-tab (Sildenafil, Lozenges, 100 mg, JSC Krka, dd, Novo mesto, Slovenia), and Viagra (Sildenafil Tablets, Film-coated, 100 mg, Pfizer PGM, France) in Healthy Volunteers",Krka dd Novo Mesto,Interventional,169007,2013-03-07 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Study of a Medicine Called Sildenafil to See How Good it is to Decrease Persistent Pressure in Vessels of Heart Supplying Lung After Birth in Newborns Selected Randomly,Vivekananda Institute Of Medical Science,Interventional,230568,2010-01-06 00:00:00,No longer recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,An Open-label Trial to Asses the Efficacy and Safety of Viagra (sildenafil citrate) in Men with Erectile Dysfunction during Long-term Treatment,University of Virginia,Interventional,110628,2001-10-31 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,null,null,null,"Open-label, randomized, crossover study of comparative pharmacokinetics and bioequivalence of drugs Sildenafil tablets, film-coated, 100 mg (JSC Northern Star, Russia) and Viagra tablets, film-coated, 100 mg (Pfizer PGM, France)",JSC "North Star",Interventional,167778,2012-10-29 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Sexual dysfunction,3774,null,A Trial To Evaluate The Efficacy and Safety of Fixed-Dose Oral Sildenafil in the Treatment of Sexual Dysfunction in Depressed Patients With Idiopathic Parkinsons Disease,University of Catania,Interventional,144683,null,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics",N,Y,Launched,L,Erectile dysfunction,186,null,Study to Compare the Blood Levels of Sildenafil Following Administration of an Experimental Tablet versus the Conventional Oral Tablet in Healthy Subjects,Pfizer Inc,Interventional,36697,2008-10-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics",Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,A phase I trial to determine the safety and pharmacokinetics of BMS-341400 for the treatment of male erectile dysfunction,Bristol-Myers Squibb Co,Interventional,56056,2002-06-08 00:00:00,Status not specified
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,Safety,N,Y,Launched,L,Erectile dysfunction,186,null,"A Randomized, Double-Blinded, Placebo-Controlled, Two-Way Crossover Study to Investigate the Safety and Toleration of Single Dose Sildenafil in Subjects Receiving Chronic UK-3690031",Pfizer Inc,Interventional,39686,2008-08-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,Pharmacokinetics,N,Y,Launched,L,Erectile dysfunction,186,null,A Study to Compare the Blood Levels of Sildenafil Following Administration of an Experimental Tablet versus the Conventional Oral Tablet in Healthy Subjects,Pfizer Inc,Interventional,49520,2008-10-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,null,null,INFLUX-VS,Effect of Oral Sildenafil With Digital Therapeutic Iontophoresis of Sodium Nitroprussiate in Healthy Volunteers,"University Hospital, Grenoble",Interventional,53786,2008-07-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",Y,Y,Launched,L,Erectile dysfunction,186,null,Pharmacoscintigraphic Study to Evaluate Two Sildenafil Products,N4 Pharma plc,Interventional,337675,2018-05-08 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioequivalence,Pharmacokinetics",N,Y,No Development Reported,NDR,Metabolic syndrome X,3294,null,Nurigra Chewable Tablet in Healthy Adult Male Volunteers,Daewoong Pharmaceutical Co Ltd,Interventional,90713,2012-02-29 00:00:00,Completed
Asian Ancestry,3,Phase 1 Clinical,C1,sildenafil citrate,8713,Pharmacokinetics,N,Y,PHASE NOT SPECIFIED,NS,null,null,CYP3APDE5I,The Effect of CYP3A Genetic Polymorphism on the Pharmacokinetics of Phosphodiesterase type 5 Inhibitors in Male Subjects,Inje University,Interventional,190004,2007-12-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Renal disease,286,BNP+PDEVI,Study of Low-Dose Nesiritide With or Without Sildenafil in Congestive Heart Failure Patients With Renal Dysfunction,Mayo Clinic Foundation,Interventional,40384,2009-02-28 00:00:00,Terminated
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,PHASE NOT SPECIFIED,NS,Renal injury,3108,REVAKI-001,"A Study to Determine the Pharmacokinetic Profile, Safety and Tolerability of Sildenafil (Revatio) in Cardiac Surgery",University of Leicester,Interventional,186793,2013-06-30 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Traumatic brain injury,3733,null,Growth Hormone or Sildenafil as Therapies for Fatigue in Mild-​Traumatic-brain-injury (MTBI),University of Texas Medical Branch at Galveston,Interventional,182030,2014-12-12 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,Discontinued,DX,Female sexual dysfunction,1276,null,"Open-label, randomized, crossover study on the comparative pharmacokinetics and bioequivalence of drugs Sildenafil tablets, film-coated, 20 mg (Joint-Stock Company ""Vertex"", Russia) and Revatio tablets, film-coated, 20 mg (""Pfizer PGM"", France)",JSC Vertex,Interventional,253221,2016-02-09 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,Launched,L,Pulmonary artery hypertension,3510,null,"Open-label, randomized, crossover study on the comparative pharmacokinetics and bioequivalence of drugs Sildenafil tablets, film-coated, 20 mg (Joint-Stock Company ""Vertex"", Russia) and Revatio tablets, film-coated, 20 mg (""Pfizer PGM"", France)",JSC Vertex,Interventional,253221,2016-02-09 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A Randomized, Open, Crossover Study To Compare Pharmacokinetics and Bioequivalence of Juvenal and Viagra in Healthy Volunteers",Borisov Plant of Medical Preparations,Interventional,168599,2012-04-19 00:00:00,Completed
null,1+,Phase 1 Clinical,C1,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Hypertension,178,null,Treatment of Supine Hypertension in Autonomic Failure,Vanderbilt University,Interventional,192209,2001-01-31 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A randomized, double-blinded, double-dummy, crossover, placebo-controlled, phase II study to evaluate the safety and efficacy of apomorphine compared to Viagra in patients with erectile dysfunction",Adhera Therapeutics Inc,Interventional,55723,2000-02-23 00:00:00,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Hypoactive sexual desire disorder,2039,null,Study to Investigate Effect of Sildenafil on Clitoral Engorgement as Measured by Magnetic Resonance Imaging (MRI) in Pre-Menopausal Women With Female Sexual Arousal Disorder,Pfizer Inc,Interventional,32423,2004-04-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Hypoxia,1053,null,"Study Evaluating the Pharmacokinetics, Efficacy and Safety of Sildenafil in Neonates With Persistent Pulmonary Hypertension of the Newborn (PPHN) or Hypoxic Respiratory Failure and at Risk for PPHN",Pfizer Inc,Interventional,229687,null,Status not specified
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Launched,L,Erectile dysfunction,186,null,"A Randomized, Double-Blind, Placebo-Controlled, Balanced four-Way Crossover Study To Assess The Efficacy Of Single Oral Doses Of PF-00592379","Pfizer Inc, Pfizer Ltd",Interventional,41867,2006-01-31 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A phase II, safety and efficacy study of oral Bimexes compared to Viagra in patients with erectile dysfunction",Repros Therapeutics Inc,Interventional,48851,2001-06-13 00:00:00,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Hypertension,178,null,Effect of Regular Sildenafil on Blood Pressure and Arterial Function in Hypertension,University of Edinburgh,Interventional,5727,2004-03-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Lymphatic system disease,779,null,Sildenafil for the Treatment of Lymphatic Malformations,Stanford University,Interventional,219707,2015-01-31 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Study of Sildenafil to Treat Newborns With Persistent Pulmonary Hypertension,"National Heart Lung and Blood Institute, University of Colorado System",Interventional,79785,2011-07-31 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Secondary pulmonary arterial hypertension,3662,null,"An interventional, monocentric, double- blind, placebo -controlled study to evaluate the effectiveness of the sildenafil in children with advanced secondary pulmonary hypertension",Mother and Child Institute Chisinau,Interventional,357611,null,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Secondary pulmonary arterial hypertension,3662,null,A study to assess effects of sildenafil drug in patients of raised blood pressure of lung circulation,King George Medical University,Interventional,284944,2014-12-17 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Lung malformation,797,null,A randomized controlled pilot study to assess the feasibility of oral sildenafil treatment in extremely preterm infants with bronchopulmonary dysplasia,Mercy Hospital for Women - Heidelberg,Interventional,189983,null,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Heart disease,626,null,Does Sildenafil Improve Endothelial Dysfunction in Rheumatoid Arthritis?,University of Pittsburgh,Interventional,272232,2017-04-01 00:00:00,Recruiting
null,3,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Migraine without aura,3680,null,Pharmacologically Triggered Migraine Without Aura and Neuroimaging,Danish Headache Center,Interventional,297614,2016-08-31 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Cardiac surgical procedure,3045,null,Evaluating treatment to decrease pleural effusion in patients undergoing fontan heart surgery,All India Institute of Medical Sciences,Interventional,314069,2017-10-03 00:00:00,Not yet recruiting
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Premature ejaculation,1274,null,"A prospective, randomized study to evaluate the efficacy and safety of sildenafil in combination with dapoxetine treatment in patients with premature ejaculation",Tanta University,Interventional,257348,null,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Crohns disease,84,null,Sildenafil in Crohn’s disease: An Open-Label Pilot Study of sildenafil in 15 Patients with Active Colonic Crohns disease,"The University College London Hospitals NHS Trust, University College London",Interventional,140892,2006-09-27 00:00:00,Terminated
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Hypertension,178,null,Sildenafil and Exercise Capacity in Hypertension,University of Edinburgh,Interventional,22025,2007-03-31 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Dyspnea,2400,null,Valsartan Therapy in the Treatment of Thalassemia-Induced Dyspnea,Tehran University of Medical Sciences,Interventional,130828,2012-10-22 00:00:00,No longer recruiting
null,3,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Fatigue,829,null,The Effect of Sildenafil and Tadalafil on Skeletal Muscle and Perceptual Fatigue,University of Texas Medical Branch at Galveston,Interventional,90067,2012-11-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Hypoxia,1053,null,A study on effect of sildenafil on mortality of hypoxic babies with persistent pulmonary hypertension,JSS University,Interventional,321165,2015-06-20 00:00:00,Recruiting
Japanese Ancestry,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",Y,N,Launched,L,Pulmonary artery hypertension,3510,null,Open-label Study of Sildenafil in Patients With Pulmonary Arterial Hypertension,Pfizer Inc,Interventional,5803,2007-04-30 00:00:00,Completed
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",Y,N,Phase 3 Clinical,C3,Persistent pulmonary hypertension of the newborn,3660,null,A Study to Evaluate Safety and Efficacy of iv Sildenafil in the Treatment of Neonates With Persistent Pulmonary Hypertension of the Newborn,Pfizer Inc,Interventional,96824,2013-08-05 00:00:00,No longer recruiting
null,4,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,COUPLE,Concomitant Use of Priligy in Men Treated for Erectile Dysfunction,Johnson & Johnson Pharmaceutical Research & Development LLC,Interventional,63927,2010-04-30 00:00:00,Completed
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,Clinical Study to Compare the Efficacy and Safety of Vardenafil Tablet as Compared with Sildenafil Tablet in Treatment of Erectile Dysfunction,Ajanta Pharma Ltd,Interventional,290576,2017-03-10 00:00:00,Not yet recruiting
null,3,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,ED Recovery in Men Age </= 65 Treated With Bilateral Nerve Sparing Robotic Assisted Prostatectomy for Prostate Cancer,City of Hope Medical Center,Interventional,194419,2006-01-31 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Congenital heart defect,1541,SV-INHIB,Efficacy of Phosphodiesterase-type 5 Inhibitors in Patients With Univentricular Congenital Heart Disease,"University Hospital, Montpellier",Interventional,385873,2020-03-01 00:00:00,Not yet recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,"Effectiveness of the Vasodilator Test With Revatio, Made in Patients With Acute Pulmonary Hypertension",Hospital Vall D'Hebron,Interventional,65337,2011-09-30 00:00:00,Recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Raynauds disease,478,null,Effect of Sildenafil on the Microcirculatory Blood Flow and Endothelial Progenitor Cells in Systemic Sclerosis,Federal University of Sao Paulo,Interventional,77110,2011-04-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Non-insulin dependent diabetes,837,null,Effect of Chronic PDE5-Inhibition on Endothelial Function in Diabetics,Istituto Scientifico H San Raffaele,Interventional,3561,1999-01-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary fibrosis,708,STEP-IPF,Sildenafil Trial of Exercise Performance in Idiopathic Pulmonary Fibrosis,Duke University,Interventional,21864,2007-08-31 00:00:00,Completed
null,2,Phase Not Applicable,PNA,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,The Effect of Nerve Sparing Anterior Resection on Erectile Function And The Prospect of Therapeutic Early Intervention,"Department of Health, NHS Trusts Clinical Trials Register",Interventional,128821,1999-09-01 00:00:00,Completed
null,1,Phase Not Applicable,PNA,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Chronic obstructive pulmonary disease,1185,null,Sildenafil effect on ventilator weaning,Artesh University of Medical Sciences,Interventional,315537,2010-07-01 00:00:00,No longer recruiting
null,1,Phase Not Applicable,PNA,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,Efficacy and Safety Study of Combined Oral and Injection Therapy for Erectile Dysfunction,Keogh Institute for Medical Research,Interventional,31502,2007-05-31 00:00:00,No longer recruiting
null,1,Phase 0 Clinical,C0,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Is Blood Flow Through IPAVA and PFO Related to Breath-hold and SCUBA Diving-induced Pulmonary Hypertension?,University of Oregon,Interventional,380110,2019-07-31 00:00:00,Not yet recruiting
null,1,Phase 0 Clinical,C0,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Heart disease,626,null,Is Blood Flow Through IPAVA and PFO Related to Breath-hold and SCUBA Diving-induced Pulmonary Hypertension?,University of Oregon,Interventional,380110,2019-07-31 00:00:00,Not yet recruiting
null,2,Phase 1b Clinical,C1B,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Solid tumor,725,null,"Doxorubicin With or Without Sildenafil, With Analysis of Cardiac Markers",Virginia Commonwealth University,Interventional,78292,2011-08-11 00:00:00,Completed
null,1,Phase 1b Clinical,C1B,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Brain disease,556,SANE,Sildenafil Administration to Treat Neonatal Encephalopathy,McGill University Health Center,Interventional,264172,2016-07-31 00:00:00,Recruiting
null,3,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Renal disease,286,Aim 3 BNP/PDEV,Low-Dose Intravenous (IV) Infusion of BNP in the Presence and Absence of Acute Type-V Phosphodiesterase (PDE-V) in Improving Renal Function in Hospitalized Chronic Heart Failure (CHF) Patients With Renal Dysfunction,Mayo Clinic Foundation,Interventional,198143,2009-10-31 00:00:00,Recruiting
null,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy",Y,Y,PHASE NOT SPECIFIED,NS,Dysmenorrhea,105,null,Viagra in the Treatment of Primary Dysmenorrhea,Milton S. Hershey Medical Center,Interventional,43401,2007-05-31 00:00:00,Completed
null,2,Phase 2b Clinical,C2B,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Idiopathic pulmonary fibrosis,3771,null,"Efficacy, Safety and Tolerability Study of Pirfenidone in Combination With Sildenafil in Participants With Advanced Idiopathic Pulmonary Fibrosis (IPF) and Risk of Group 3 Pulmonary Hypertension","F Hoffmann-La Roche AG, Roche Holding AG",Interventional,278144,2017-01-13 00:00:00,No longer recruiting
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Raynauds disease,478,PROFIL,'As Required' Oral Sildenafil in Raynaud's Phenomenon,"University Hospital, Grenoble",Interventional,172693,2013-11-30 00:00:00,Completed
null,3,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Idiopathic pulmonary fibrosis,3771,null,Targeting Vascular Reactivity in Idiopathic Pulmonary Fibrosis,University of Iowa,Interventional,60609,2009-09-30 00:00:00,Terminated
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,To Yield Further Information On The Efficacy And Safety Of Viagra Among Subjects With Arterial Hypertension,Pfizer Inc,Interventional,21127,2005-03-31 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,Y,Launched,L,Erectile dysfunction,186,null,Assess the Effect of Daily Treatment of Vardenafil 20 mg or Sildenafil 100 mg and Placebo on Sperm Function,Bayer AG,Interventional,31229,2005-01-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Open-label Access Study Of Sildenafil In Adult Patients With Pulmonary Arterial Hypertension (PAH) Completing A1481244 Study,Pfizer Inc,Interventional,51421,null,No longer recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Bioavailability,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,Study Of Bioavailability Of Two Sildenafil 100 mg Oral Tablet Formulations,Pfizer Inc,Interventional,55251,2009-04-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Prostate tumor,276,HBOT,Can Hyperbaric Oxygen Improve Erectile Function Following Surgery for Prostate Cancer,Hartford Hospital,Interventional,55976,2009-07-31 00:00:00,No longer recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Depression,93,null,Study of Sildenafil for Treatment of SSRI-Antidepressant Sexual Dysfunction in Women,University of New Mexico,Interventional,33122,2001-01-31 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Avanafil Versus Sildenafil in Spinal Cord Injury Erectile Dysfunction,"Hospital Nacional de Paraplejicos, Toledo, Spain",Interventional,299917,2016-04-01 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,null,Viagra for the Treatment of IUGR,Rambam Health Care Campus,Interventional,44144,2006-07-31 00:00:00,Not yet recruiting
null,3,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Obesity,238,null,Sildenafil Activates Browning of White Adipose and Improves Insulin Sensitivity,Xiang Guang International Co Ltd,Interventional,237405,2015-08-31 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Emphysema,111,null,Smoking Cessation and Functional CT Assessment,University of Iowa,Interventional,323522,2018-03-19 00:00:00,Recruiting
Asian Ancestry,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,A Study of Tadalafil and Sildenafil in Men With Erectile Dysfunction in China,Eli Lilly & Co,Interventional,77348,2011-06-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,null,Evaluation of Sildenafil for the Treatment of Moderate Congestive Heart Failure,University of New Mexico,Interventional,36389,2008-11-30 00:00:00,Not yet recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Lung injury,1489,null,Does Sildenafil Protect Against Pulmonary Related Complications Following Cardiopulmonary Bypass?,NHS Greater Glasgow,Interventional,22929,2006-06-30 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Pulmonary artery hypertension,3510,null,Comparison Of Efficacy Of Different Treatment Regimens In Pulmonary Artery Hypertension Secondary To Lung Disease And/Or Hypoxia,All India Institute of Medical Sciences,Interventional,125351,2011-09-01 00:00:00,Recruiting
null,3,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,PADN-PAH,A Study to Investigate the Efficacy of PADN to Improved Functional Capacity and Hemodynamics in Patients With PAH,"Nanjing First Hospital, Nanjing Medical University",Interventional,215545,2014-11-28 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,Launched,L,Erectile dysfunction,186,null,Effects of Sildenafil on Penile Vascular Function in Hypertensive Men With Erectile Dysfunction,Instituto Nacional de Cardiologia,Interventional,247590,2014-10-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Use of Sildenafil to Improve the Postoperative Course in Children Undergoing Surgical Ventricular Septal Defect Closure With Moderate Pulmonary Hypertension,Universiteit Maastricht,Interventional,178589,2013-11-07 00:00:00,Recruiting
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,A Study in Patients With Erectile Dysfunction,Eli Lilly & Co,Interventional,66373,2010-05-31 00:00:00,Completed
null,2,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,A placebo-controlled study to assess the efficacy of RWJ-387273 compared to sildenafil citrate in patients with male erectile dysfunction (MED),Johnson & Johnson,Interventional,49052,2005-10-24 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Atrial septal defect,1893,null,First Repair Treatment in ASD Patients with PAH,"Okayama University Graduate School of Medicine, Dentistry and Pharmaceutical Sciences",Interventional,242016,2015-09-29 00:00:00,Not yet recruiting
null,3,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Pulmonary artery hypertension,3510,null,"An Open-label Trial to Study the Efficacy of Oral Sildenafil, a Specific Pulmonary Vasodilator versus Inhaled Nitric Oxide in Patients with Pulmonary Arterial Hypertension",University of Alberta,Interventional,111534,2002-05-21 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Pulmonary artery hypertension,3510,null,An experimental study to compare the therapeutic and side effects of tadalafil and sildenafil in children and adolescents with pulmonary arterial hypertension,Imam Hossein Hospital,Interventional,189435,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,An open-label study to evaluate the efficacy of sildenafil for long-term treatment of nonoperable chronic thromboembolic pulmonary hypertension,University of Giessen,Interventional,114348,2003-04-15 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,An open-label study to determine the safety and efficacy of sildenafil (Viagra) in kidney transplant recipients with erectile dysfunction,Hospital de Especialidades,Interventional,112839,2002-02-28 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,An open-label study to evaluate efficacy and safety of sildenafil for treating erectile dysfunction in patients on dialysis,Dokuz Eylul University Hospital,Interventional,112865,2002-08-31 00:00:00,Status not specified
null,3,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Coronary artery disease,80,The SCORECARD Project,"Sensitivity of using intraoperative ultrasound using MiraQ for the assessment of graft patency following coronary artery bypass graft (CABG) surgery, and the effect of ischemic preconditioning on these measurements - a feasibility study for the SCORECARD project",University of Auckland,Interventional,268388,2016-09-14 00:00:00,Not yet recruiting
null,2,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Obstructive sleep apnea,3519,null,A prospective randomised study to compare sildenafil versus nasal continuous positive airway pressure in patients with Severe obstructive sleep apnoea syndrome and erectile dysfunction,Universita degli Studi di Roma La Sapienza,Interventional,244154,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A Double-Blind, Placebo-Controlled, Randomized Study To Evaluate Safety and Efficacy of Sildenafil Citrate in The Treatment of Parkinson-Emergent Erectile Dysfunction",AJA University of Medical Sciences,Interventional,144843,null,Completed
null,2+,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,null,null,null,Renin-Angiotensin Aldosterone System and Fibrinolysis Interaction in Humans-Specific Aim 3,Vanderbilt University,Interventional,166255,2007-12-31 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A double-blind, placebo-controlled, randomized trial to assess the efficacy and safety of oral sildenafil (Viagra) in men with erectile dysfunction caused by spinal cord injury",Stoke Mandeville Hospital,Interventional,105789,1998-12-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,A Trial To Evaluate The Treatment of Erectile Dysfunction With Sildenafil Citrate (Viagra) in Parkinsonism Due to Parkinson's Disease or Multiple System Atrophy With Observations on Orthostatic Hypotension,The National Hospital for Neurology and Neurosurgery,Interventional,148624,null,Completed
null,2,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,Y,PHASE NOT SPECIFIED,NS,Coronary artery disease,80,null,"A comparative, placebo-controlled, randomized study to assess the effect of sildenafil on human vascular function, platelet activation, and myocardial ischemia",National Heart Lung and Blood Institute,Interventional,114610,2002-10-31 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,Bioequivalence,N,N,PHASE NOT SPECIFIED,NS,null,null,null,"Assessment of pharmacokinetic parameters and relative bioavailability of a conclusion that the bioequivalence of the drug EREKSEZIL (sildenafil 100 mg tablets, film-coated, West Pharma Produshoes de Espesialidadesh Farmaseutikash SA, Portugal) and Viagra (sildenafil 100 mg coated tablets film-coated; Pfizer PGM, France)",EGIS Gyogyszergyar RT,Interventional,168925,null,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,Y,PHASE NOT SPECIFIED,NS,Pulmonary edema,3546,null,Sildenafil for the treatment of Severe Form of Edema in Swimmers,Duke University,Interventional,253516,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,"A randomized, double-blind, placebo-controlled trial to evaluate the efficacy of sildenafil citrate in male patients with erectile dysfunction",The Male Clinic,Interventional,72584,2003-03-06 00:00:00,Status not specified
null,3,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioequivalence,Pharmacokinetics",N,Y,Launched,L,Erectile dysfunction,186,null,A Study of Viagra and XCalibur in Healthy Volunteers,iX Biopharma Ltd,Interventional,340462,2016-12-19 00:00:00,Completed
null,3,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioequivalence,Bioavailability,Pharmacokinetics",Y,Y,Launched,L,Pulmonary artery hypertension,3510,null,A Pivotal Bioequivalence Study Between The Sildenafil Powder For Oral Suspension (10 mg/ml) And The Sildenafil 10 mg Immediate Release (IR) Tablet Relative To The Revatio 20 mg IR Tablet In Healthy Volunteers Under Fasting Conditions,Pfizer Inc,Interventional,72540,2011-01-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,Launched,L,Erectile dysfunction,186,null,Pharmacokinetics of Sildenafil Orally Soluble Film,CTC Bio Inc,Interventional,144142,2012-08-16 00:00:00,Completed
null,1+,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Sickle cell anemia,303,null,Evaluation of Hydroxyurea Plus L-Arginine or Sildenafil to Treat Sickle Cell Anemia,National Institutes of Health Clinical Center,Interventional,31174,2003-03-10 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Raynauds disease,478,null,Topical 10% Nifedipine Versus 5% Sildenafil in Secondary Raynaud,Pontificia Universidad Catolica De Chile,Interventional,286097,2016-08-31 00:00:00,Completed
null,3+,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics",Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A randomized, three-way crossover study to evaluate the safety and pharmacokinetics of macitentan and sildenafil in healthy males",Actelion Pharmaceuticals Ltd,Interventional,112039,2012-09-02 00:00:00,No longer recruiting
null,3,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Cardiopulmonary Function Assessment and NO-Based Therapies for Subjects With Hemolysis-Associated Pulmonary Hypertension,National Heart Lung and Blood Institute,Interventional,184901,2006-07-09 00:00:00,Completed
null,3,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Sickle cell anemia,303,null,Cardiopulmonary Function Assessment and NO-Based Therapies for Subjects With Hemolysis-Associated Pulmonary Hypertension,National Heart Lung and Blood Institute,Interventional,184901,2006-07-09 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Brain ischemia,1636,null,Sildenafil for DCI,University of Mississippi,Interventional,285864,2016-12-31 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",N,Y,Launched,L,Erectile dysfunction,186,null,Interaction Between Fluvoxamine and Sildenafil,University of Heidelberg,Interventional,46003,2003-02-28 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Vascular insufficiency,3909,SC pregnancy,Sildenafil Citrate Effect on in Vivo Human Trophoblast Research,Hospital General Universitario de Valencia,Interventional,305278,2017-09-01 00:00:00,Recruiting
null,5,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Sorafenib Study: Dosing in Patients With Pulmonary Arterial Hypertension (PAH),University of Chicago,Interventional,5124,2007-03-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics",N,Y,Launched,L,Erectile dysfunction,186,BOC_PK,The Boceprevir and Sildenafil Pharmacokinetics Study,Imperial College London,Interventional,83588,2012-12-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Cardiac surgical procedure,3045,REVAKI-001,"Pharmacokinetic profile, safety and tolerability of sildenafil (REVATIO) in cardiac surgery patients with chronic kidney disease",University of Leicester,Interventional,277281,2013-04-01 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,Launched,L,Erectile dysfunction,186,null,"Open-label, randomized, crossover study on the comparative pharmacokinetics and bioequivalence of drugs Sildenafil tablets, film-coated, 20 mg (Joint-Stock Company ""Vertex"", Russia) and Revatio tablets, film-coated, 20 mg (""Pfizer PGM"", France)",JSC Vertex,Interventional,253221,2016-02-09 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,No Development Reported,NDR,Diastolic heart failure,3296,null,"Open-label, randomized, crossover study of the comparative pharmacokinetics and bioequivalence of drugs RO-MAN tablets, film-coated 100 mg (""Sinmedik Laboratories"", India) and Viagra tablets, film-coated 100 mg (""Pfizer PGM"", France) in healthy volunteers",Farmstrateg Ltd,Interventional,257254,2016-03-29 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,Launched,L,Pulmonary artery hypertension,3510,null,"Open-label, randomized, crossover study of the comparative pharmacokinetics and bioequivalence of drugs RO-MAN tablets, film-coated 100 mg (""Sinmedik Laboratories"", India) and Viagra tablets, film-coated 100 mg (""Pfizer PGM"", France) in healthy volunteers",Farmstrateg Ltd,Interventional,257254,2016-03-29 00:00:00,Status not specified
null,3,Phase 1 Clinical,C1,sildenafil citrate,8713,Pharmacodynamics,Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Study to Evaluate Hemodynamic Response to to a Sublingual Dose of Gylceryl Trinitrate in Subjects Receiving TA-1790, Sildenafil Citrate and Placebo",VIVUS Inc,Interventional,88295,2004-03-31 00:00:00,Completed
null,3,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Hypoactive sexual desire disorder,2039,null,Lybrido for Female Sexual Dysfunction,Emotional Brain BV,Interventional,119433,2011-09-30 00:00:00,Completed
null,4,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Premature ejaculation,1274,null,"A randomized, single-blind, placebo-controlled study to compare the clinical efficacy and safety of the on-demand use of paroxetine, dapoxetine, sildenafil and combined dapoxetine with sildenafil in treatment of patients with premature ejaculation (PE)",Sohag University,Interventional,335223,null,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Movement disorder,368,null,Sildenafil (Viagra) for the Treatment of Dyskinesias in Parkinson's Disease,Loma Linda University,Interventional,196591,2002-02-28 00:00:00,Terminated
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Cystic fibrosis,88,null,The effect of sildenafil in cystic fibrosis disease,Isfahan University of medical Sciences,Interventional,292984,2016-02-21 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Muscular dystrophy,215,null,Safety and efficacy of PDE5 inhibitor to dystrophinopathy,Toneyama National hospital,Interventional,338005,2012-08-03 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,To study the positive effect of Sidenafil on quality of life and exercise capacity in heart disease patients,Postgraduate Institute of Medical Education and Research,Interventional,326644,2016-01-02 00:00:00,Completed
null,6,Phase 2 Clinical,C2,sildenafil citrate,8713,Safety,N,N,Launched,L,Pulmonary artery hypertension,3510,null,Compassionate Use of Beraprost Sodium 314d Modified Release (BPS-314d-MR) for Patients With Pulmonary Arterial Hypertension (PAH),Lundquist Institute,Interventional,158422,2013-11-30 00:00:00,No longer recruiting
null,5,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Improving Erectile Function and Quality of Life After Prostate Cancer Treatment,Case Comprehensive Cancer Center,Interventional,162201,2013-07-31 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Pulmonary artery hypertension,3510,RePo1,Revatio Portal-Pulmonary Arterial Hypertension Trial,The University Health Network,Interventional,84387,2012-10-31 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Chronic obstructive pulmonary disease,1185,null,Sildenafil for Chronic Obstructive Pulmonary Disease,Columbia University,Interventional,21841,2005-02-28 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Vitelliform macular dystrophy,3389,null,A two-year trial to evaluate the PDE5/6 inhibition with sildenafil to reduce choroidal ischemia and treat age-related macular degeneration,"National Cancer Institute, National Institutes of Health",Interventional,348811,null,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,"A Double-Blind, Randomized, Controlled Study on the Benefit-Risk Profile of in the Treatment of at Term or Late Preterm Newborn Infants With Severe Respiratory Disorders and Pulmonary Hypertension",Ospedale Pediatrico Bambino Gesù (IRCCS),Interventional,170358,2007-10-04 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Decubitus ulcer,2568,null,Efficacy of topical formulation of sildenafil 10% in bed sore healing,Tehran University of Medical Sciences,Interventional,315097,2011-07-01 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Scleroderma,1105,null,Sildenafil for Treatment of Digital Ulcers in Patients With Systemic Sclerosis,Charite Universitaetsmedizin Berlin,Interventional,57239,2004-02-29 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Tricuspid atresia,1573,SAFO,Sildenafil After the Fontan Operation,Childrens Hospital of Philadelphia,Interventional,4425,2007-12-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,Ivory Study,Sildenafil in the Post-Cardiac Surgery in Children,Fundacion para la Investigacion Biomedica del Hospital Gregorio Maranon,Interventional,172106,2014-01-09 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Pulmonary edema,3546,null,Sildenafil for Swimming-Induced Pulmonary Edema (SIPE) Prevention,Duke University,Interventional,354721,2019-05-01 00:00:00,Recruiting
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Erectile dysfunction,186,null,Evaluate the Effects of GPI-1485 on Erectile Function Following Bilateral Nerve-Sparing Prostatectomy,Eisai Medical Research Inc,Interventional,37326,2003-12-31 00:00:00,Completed
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,SR-PAAS,Study Looking at Combination Therapy (Sitaxsentan + Sildenafil) Versus Monotherapy (Sitaxsentan Alone) SR-PAAS -Sitaxentan Efficacy and Safety Trial With a Randomized Prospective Assessment of Adding Sildenafil,Pfizer Inc,Interventional,36927,2009-05-31 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,An Open-Label Access Study For Subjects Who Completed A1481156,Pfizer Inc,Interventional,86718,2012-11-30 00:00:00,No longer recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,A phase III study to evaluate the efficacy of sildenafil in the treatment of patients with ecrectile dysfunction,Pfizer Inc,Interventional,52206,1996-12-31 00:00:00,Status not specified
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Idiopathic pulmonary fibrosis,3771,INSTAGE,Efficacy and Safety of Nintedanib Co-administered With Sildenafil in Idiopathic Pulmonary Fibrosis Patients With Advanced Lung Function Impairment,"Boehringer Ingelheim Espana Sa, Boehringer Ingelheim GmbH, Boehringer Ingelheim India Pvt Ltd, Boehringer Ingelheim International GmbH, SCS Boehringer Ingelheim Comm.V",Interventional,263393,2016-06-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,null,Sildenafil Citrate for Treatment of Growth-restricted Fetuses,Ain Shams University,Interventional,300905,2017-03-30 00:00:00,Recruiting
null,9,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Intermittent claudication,1865,VIRTUOSE,Efficiency of Sildenafil on the Absolute Claudication Distance of Peripheral Arterial Disease Patients With Intermittent Claudication,Rennes University Hospital,Interventional,354728,2018-12-01 00:00:00,Not yet recruiting
null,9,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Peripheral vascular disease,260,VIRTUOSE,Efficiency of Sildenafil on the Absolute Claudication Distance of Peripheral Arterial Disease Patients With Intermittent Claudication,Rennes University Hospital,Interventional,354728,2018-12-01 00:00:00,Not yet recruiting
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,ARIES-3,Safety and Efficacy Study of Ambrisentan in Subjects With Pulmonary Hypertension,Gilead Sciences Inc,Interventional,5964,2006-08-31 00:00:00,Completed
null,4,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Premature ejaculation,1274,COUPLE,Concomitant Use of Priligy in Men Treated for Erectile Dysfunction,Johnson & Johnson Pharmaceutical Research & Development LLC,Interventional,63927,2010-04-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,STRIDER Ireland,STRIDER Ireland,University College Cork,Interventional,347583,null,Terminated
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,REVAD,Sildenafil for the Prevention of Right Heart Failure Following LVAD Implantation,University of Calgary,Interventional,320946,2018-03-12 00:00:00,Recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Lung disease,283,SPICE Trial,The Effect of Sildenafil in Preterm Infants With Evolving Chronic Lung Disease,Mercy Hospital for Women - Heidelberg,Interventional,22573,2007-01-31 00:00:00,Completed
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,N,Y,Launched,L,Erectile dysfunction,186,null,Erectile Recovery After Robotic-Assisted Laparoscopic Prostatectomy,Brooke Army Medical Center,Interventional,326953,2017-02-13 00:00:00,Recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,STRIDER,Sildenafil therapy in dismal prognosis early-onset intrauterine growth restriction,Liverpool Womens NHS Foundation Trust,Interventional,207407,2014-08-01 00:00:00,Completed
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,S024,A Study for Patients With Erectile Dysfunction to Test Whether Tadalafil Taken Oncei-Daily Can Better Improve Psychological Outcomes,Eli Lilly & Co,Interventional,31438,2008-08-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,null,A Trial Evaluating the Role of Sildenafil in the Treatment of Fetal Growth Restriction,Ain Shams University,Interventional,244370,2015-10-31 00:00:00,Completed
null,2,Phase 0 Clinical,C0,sildenafil citrate,8713,"Safety,Efficacy",Y,Y,PHASE NOT SPECIFIED,NS,Pulmonary edema,3546,null,Prevention and Treatment of Immersion Pulmonary Edema,Duke University,Interventional,39764,2008-01-31 00:00:00,Completed
African Ancestry,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Insulin resistance,2520,null,Study of Sildenafil Citrate on Insulin Resistance in African American,"Pfizer Inc, Vanderbilt University",Interventional,76387,2011-04-30 00:00:00,Completed
null,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium infection,218,null,Sildenafil for PNTM Infection,National Institute of Allergy and Infectious Diseases,Interventional,131063,2013-01-31 00:00:00,Completed
null,1+,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Myelodysplastic syndrome,1272,null,Nivolumab With Chemotherapy in Refractory MDS,St. Petersburg State Pavlov Medical University,Interventional,310100,2017-05-25 00:00:00,Terminated
null,3,Phase 2a Clinical,C2A,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Launched,L,Erectile dysfunction,186,null,Study to Investigate Effect of a New Drug (PF-00446687) in Males Suffering From Erectile Dysfunction,Pfizer Inc,Interventional,49061,2007-07-31 00:00:00,Completed
null,2,Phase 2b Clinical,C2B,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,"Efficacy, Safety and Tolerability Study of Pirfenidone in Combination With Sildenafil in Participants With Advanced Idiopathic Pulmonary Fibrosis (IPF) and Risk of Group 3 Pulmonary Hypertension","F Hoffmann-La Roche AG, Roche Holding AG",Interventional,278144,2017-01-13 00:00:00,No longer recruiting
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pre-eclampsia,1259,null,Use of Sildenafil Citrate in Management of Mild Pre-eclampsia,Assiut University,Interventional,310790,2016-09-15 00:00:00,Recruiting
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,STRIDER Canada,Sildenafil Therapy In Dismal Prognosis Early-Onset Intrauterine Growth Restriction,University of British Columbia,Interventional,229304,2017-01-31 00:00:00,Suspended
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,QEQ Treatment Responsiveness Evaluation Study,Pfizer Inc,Interventional,192919,2005-01-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,"A Multicenter, Randomized, Parallel Group, Double-Blind, Placebo Controlled, Flexible Dose Escalation Study To Evaluate Sexual And Relationship Satisfaction In The Female Partner Of Men With Erectile Dysfunction Treated With Sildenafil Citrate",Pfizer Inc,Interventional,31121,2003-06-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A multi-center, double-blind study to evaluate the effect of pre-treatment with a daily dose of sildenafil on the as-needed efficacy of Viagra in men with erectile dysfunction and type 2 diabetes",Pfizer Inc,Interventional,9113,2002-12-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,Impact Of Viagra On Sexual Satisfaction Of Men With Mild Erectile Dysfunction Who Are Sexually Dissatisfied,Pfizer Inc,Interventional,45671,2005-11-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Depression,93,null,Efficacy Study Measuring The Impact Of Treatment With Viagra On The Depressive Symptoms Of Men With Erectile Dysfunction,Pfizer Inc,Interventional,33877,2004-03-31 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Spinal cord injury,1258,null,Avanafil Versus Sildenafil in Spinal Cord Injury Erectile Dysfunction,"Hospital Nacional de Paraplejicos, Toledo, Spain",Interventional,299917,2016-04-01 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Chronic obstructive pulmonary disease,1185,SIL-COPD-02,Study of Sildenafil Effects in Combination With Rehabilitation in Patients With Chronic Obstructive Pulmonary Disease (COPD) and Associated Pulmonary Hypertension,Hospital Clinic of Barcelona,Interventional,63786,2008-08-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,Y,Launched,L,Erectile dysfunction,186,null,Use of Sildenafil (Viagra) in Diabetic Men With Erectile Dysfunction: the Impact on Blood Vessels,Lawson Health Research Institute,Interventional,43524,2004-08-31 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,Y,Launched,L,Erectile dysfunction,186,null,A Study of Visual Effects of Erectile Dysfunction Medications Dosed Daily for 6 Months,Eli Lilly & Co,Interventional,30946,2005-06-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Hypertension,178,null,A clinical trial to study the safety and efficacy of Pulmosil (sildenafil Injection) for the treatment of hypertension,Sun Pharmaceutical Industries Ltd,Interventional,277963,2016-12-15 00:00:00,Not yet recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,TED,Effect of Testosterone in Men With Erectile Dysfunction,Boston University,Interventional,31570,2006-11-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Prostatitis,473,null,Trial of Viagra‚ in Men With Chronic Pelvic Pain Syndrome Type III,University of Washington,Interventional,21613,2004-07-31 00:00:00,Terminated
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Meconium aspiration syndrome,2248,null,Oral Sildenafil in Persistent Pulmonary Hypertension Secondary to Meconium Aspiration Syndrome in Newborns,"Government Medical College, Bhavnagar, Sir Takhtsinhji General Hospital",Interventional,104018,2011-12-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,Y,PHASE NOT SPECIFIED,NS,Urge urinary incontinence,2377,null,"A Randomized, Controlled Trial Evaluating Sildenafil Citrate in Relieving Ureteral Stent Related Symptoms",Mansoura University,Interventional,220830,2014-03-31 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,A study to evaluate the safety and efficacy of sildenafil in the treatment of children with pulmonary hypertension,Pfizer Inc,Interventional,52378,2003-11-09 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Bioequivalence,Bioavailability,Pharmacokinetics",Y,Y,Launched,L,Pulmonary artery hypertension,3510,null,"A single-center, open-label, single-dose, randomized, four-period, four-treatment crossover pilot study to assess safety, pharmacokinetics, bioavailability and bioequivalence of Duromist compared to Viagra in healthy adult males under fasting conditions",NovaDel Pharma Inc,Interventional,71357,2010-07-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Pharmacokinetics,Y,N,PHASE NOT SPECIFIED,NS,HIV infection,158,null,A Study to Evaluate The Pharmacokinetic Interaction Between TMC-114 And Sildenafil,Janssen Diagnostics BVBA,Interventional,15705,2006-12-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Bioequivalence,N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"An open, randomized, crossover, bioequivalence study of single doses of sildenafil when receiving suckable tablet with or without water and Viagra pills in healthy men",Pfizer Inc,Interventional,218339,2014-12-01 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Bioequivalence,N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Clinical study to evaluate the bioequivalence of sildenafil in healthy male volunteers. Viagra, Pfizer, SA de CV versus Sildenafil Solfran Laboratories SA, 50 mg tablets",Solfran Laboratorios SA,Interventional,163524,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Pulmonary artery hypertension,3510,null,First Repair Treatment in ASD Patients with PAH,"Okayama University Graduate School of Medicine, Dentistry and Pharmaceutical Sciences",Interventional,242016,2015-09-29 00:00:00,Not yet recruiting
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A comparative, crossover, double-blind, multicenter, randomized study to investigate the safety and efficacy of tadalafil(20 mg) or sildenafil citrate(50 mg)in the treatment for erectile dysfunction",Eli Lilly & Co,Interventional,114020,2003-10-31 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,"Multicenter, open-label, randomized, comparative study of efficacy and safety of Dinamiko Forward, film dispersible oral 100 mg (Teva) in comparison with Viagra tablets, film-coated, 100 mg (Pfizer), tablets, film-coated, 100 mg (Teva) in the treatment of men with erectile dysfunction",Teva Pharmaceutical Industries Ltd,Interventional,184508,2014-04-14 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Chronic thromboembolic pulmonary hypertension,3513,null,"A randomized, open-label study to assess the efficacy and safety of sildenafil plus iloprost in pulmonary hypertension patients",University of Giessen,Interventional,111958,2002-04-02 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,"A prospective, randomized clinical trial to evaluate the effect of sildenafil and inhaled nitric oxide in infants at risk of pulmonary hypertension",Royal Childrens Hospital Research Foundation,Interventional,73702,2003-05-12 00:00:00,Terminated
null,3,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,Evaluation of effect of vaginal sildenafil on the outcome of in vitro fertilization (IVF) after multiple IVF failures attributed to poor endometrial development,Sher Institute of Reproductive Medicine,Interventional,112443,2002-11-30 00:00:00,Status not specified
null,3,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Pulmonary artery hypertension,3510,null,A retrospective study to assess the short- and long-term effects of combining bosentan and sildenafil therapy in pulmonary arterial hypertension patients in a real-world setting,Actelion Pharmaceuticals Ltd,Interventional,240473,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Pulmonary artery hypertension,3510,null,Long-term Outcome of First-line Sildenafil Monotreatment for Pulmonary Arterial Hypertension,Kyorin University,Interventional,124857,2003-01-01 00:00:00,Recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,An open-label study to assess the efficacy of sildenafil in patients with erectile dysfunction previouslty treated with auto-intracavernosal therapy,Centre ETPARP,Interventional,115845,2002-12-31 00:00:00,Status not specified
null,3,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Cardiopulmonary bypass surgery,4012,The SCORECARD Project,"Sensitivity of using intraoperative ultrasound using MiraQ for the assessment of graft patency following coronary artery bypass graft (CABG) surgery, and the effect of ischemic preconditioning on these measurements - a feasibility study for the SCORECARD project",University of Auckland,Interventional,268388,2016-09-14 00:00:00,Not yet recruiting
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,null,null,null,"A prospective, open, randomized, comparative, crossover study of drug pharmacokinetics and bioequivalence of Sealeks tablets, film-coated, 100 mg (""Oxford Laboratories Pvt. Ltd.,"" India), compared with the drug Viagra tablets, film-coated, 100 mg (""Pfizer PGM"", France)",The Filatov Institute of Eye Diseases and Tissue Therapy,Interventional,237201,2015-08-05 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,No Development Reported,NDR,Metabolic syndrome X,3294,null,"Comparative Pharmacokinetic and Bioequivalence Study of Drugs Vizarsin Ku-tab (Sildenafil, Lozenges, 100 mg, JSC Krka, dd, Novo mesto, Slovenia), and Viagra (Sildenafil Tablets, Film-coated, 100 mg, Pfizer PGM, France) in Healthy Volunteers",Krka dd Novo Mesto,Interventional,169007,2013-03-07 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A Multicenter, Open-label Trial to Evaluate Sildenafil in the Treatment of Sexual Dysfunction in Spinal Cord-Injured Male Patients",Balgrist University Hospital,Interventional,107321,2000-08-31 00:00:00,Status not specified
null,1+,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Clinical research on treatment of pulmonary arterial hypertension associated with connective tissue disease by Mycophenolate mofetil,Beijing Chao-Yang Hospital,Interventional,210537,2014-07-31 00:00:00,Recruiting
null,3,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Pulmonary artery hypertension,3510,null,"A comparative, crossover, open-label study to evaluate the effect of inhaled iloprost plus oral sildenafil in patients with primary pulmonary hypertension",Saarland University Hospital,Interventional,112506,2001-09-11 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Alopecia,13,null,"An Open-Pilot, Comparison Study to Evaluate the Effect of Sildenafil on Alopecia Areata in Childhood",Fatih University,Interventional,157258,null,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,An open-label study to assess the efficacy and tolerability of sildenafil in patients with olanzapine-induced erectile dysfunction,Firat University,Interventional,115911,2002-12-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,null,"Effect of Sildenafil Citrate on Uteri-Placental Perfusion, Doppler Indices in Growth Restricted Fetuses",Al Hayat National Hospital,Interventional,221951,2015-03-31 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,A Comparative Bioequivalence Study of a Generic and the Proprietary (Viagra from Pfizer) 100 mg Sildenafil Tablet in Healthy Human Subject,Info Kinetics Sdn Bhd,Interventional,159938,2013-10-31 00:00:00,Not yet recruiting
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Comparative Study of the Pharmacokinetics and Bioequivalence of Drugs Olmaks, Tablets, Film-coated 100 mg, the Production Company 'Actavis Ltd', Malta, and Viagra, Tablets, Film-coated 100 mg, Production Company 'Pfizer PGM', France",Allergan plc,Interventional,168708,2012-12-17 00:00:00,Completed
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Beraprost Combined Therapy with Sildenafil for Pulmonary Arterial Hypertension,Shanghai Pulmonary Hospital,Interventional,102407,2009-05-01 00:00:00,No longer recruiting
null,3,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Pulmonary artery hypertension,3510,null,A pilot study to evaluate dual phosphodiesterase type 5 inhibitor therapy for refractory pulmonary arterial hypertension,Keio University,Interventional,241783,null,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Open, randomized, crossover study of comparative pharmacokinetics, bioequivalence and safety of drugs VIVAYRA, chewable tablets, 100 mg (Belupo, medicines and cosmetics dd, Croatia), and Viagra, tablets, film-coated, 100 mg (Pfizer PGM, France) in healthy volunteers",Belupo,Interventional,170867,2014-02-03 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Bioavailability",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Single-center, open, randomized, two-period, two consecutive times, crossover study of the relative bioavailability and bioequivalence of the drug Vivayra, tablets, film-coated, 100 mg (Belupo, medications and cosmetics dd, Croatia) in comparison to Viagra, tablets, film-coated, 100 mg (Pfizer PGM, France) in  fasting healthy volunteers",Belupo,Interventional,239218,2015-09-07 00:00:00,Status not specified
null,4,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioavailability,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,Bioavailability of Three Sildenafil Oral Disintegrating Tablet Formulations Compared to the Standard Oral Tablet,Pfizer Inc,Interventional,175292,2009-08-31 00:00:00,Completed
null,3+,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Premature labor,455,null,Management of Acute Preterm Labor: Nifedipene Alone or Combined With Sildenafil Citrate,Al Hayat National Hospital,Interventional,220241,2015-01-31 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Fatigue,829,null,Study of Sildenafil as a Therapy for Fatigue in Pancreatic Cancer,University of Texas Medical Branch at Galveston,Interventional,181063,2014-04-30 00:00:00,Terminated
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Liver cirrhosis,70,null,"A Phase I, Open-label Study of Intravenous Sildenafil in Patients with Cirrhosis",University of Maryland,Interventional,156662,2014-05-31 00:00:00,Terminated
null,3,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Thalassemia,322,null,Cardiopulmonary Function Assessment and NO-Based Therapies for Subjects With Hemolysis-Associated Pulmonary Hypertension,National Heart Lung and Blood Institute,Interventional,184901,2006-07-09 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioequivalence,Pharmacokinetics",N,Y,Launched,L,Pulmonary artery hypertension,3510,null,Nurigra Chewable Tablet in Healthy Adult Male Volunteers,Daewoong Pharmaceutical Co Ltd,Interventional,90713,2012-02-29 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Obsessive compulsive disorder,468,null,Interaction Between Fluvoxamine and Sildenafil,University of Heidelberg,Interventional,46003,2003-02-28 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Lung embolism,1078,PSCAT,Sidlenafil in Combination With Oral Anticoagulants in Patients With Intermediate-high Risk of Pulmonary Embolism,Meshalkin Research Institute of Pathology of Circulation,Interventional,277764,2016-10-31 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,PHASE NOT SPECIFIED,NS,Cardiac surgical procedure,3045,REVAKI-001,"A Study to Determine the Pharmacokinetic Profile, Safety and Tolerability of Sildenafil (Revatio) in Cardiac Surgery",University of Leicester,Interventional,186793,2013-06-30 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Fatigue,829,null,Growth Hormone or Sildenafil as Therapies for Fatigue in Mild-​Traumatic-brain-injury (MTBI),University of Texas Medical Branch at Galveston,Interventional,182030,2014-12-12 00:00:00,Completed
Asian Ancestry,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,Y,PHASE NOT SPECIFIED,NS,Premature ejaculation,1274,null,Drug-Drug Interaction of Clomipramine HCl and Sildenafil Citrate in Healthy Males,CTC Bio Inc,Interventional,166665,2014-01-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Liver disease,201,SiFALD,Role of Sildenafil for Fontan Associated Liver Disease (SiFALD) Study,Mayo Clinic Foundation,Interventional,298368,2017-07-05 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Erythema,2024,JADE,Treatment of Palmar Plantar Erythrodysesthesia (PPE) With Topical Sildenafil,Duke University,Interventional,190251,2010-06-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Hypertension,178,null,Evaluation of Drug-drug Interaction Between LCZ-696 and Sildenafil in Subjects With Mild to Moderate Hypertension,Novartis AG,Interventional,87601,2012-09-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,Discontinued,DX,Female sexual dysfunction,1276,null,"An Open-Label, Extension Study Evaluating the Safety, Toleration, and Efficacy of Sildenafil in Women With Sexual Arousal Disorder",Pfizer Inc,Interventional,32421,2003-01-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Hypoactive sexual desire disorder,2039,null,"An Open-Label, Extension Study Evaluating the Safety, Toleration, and Efficacy of Sildenafil in Women With Sexual Arousal Disorder",Pfizer Inc,Interventional,32421,2003-01-31 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Cerebrovascular disease,64,OxHARP,Oxford hemodynamic adaptation to reduce pulsatility trial,University of Oxford,Interventional,371331,2019-05-31 00:00:00,Not yet recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Sickle cell anemia,303,Walk-PHASST,Sildenafil Therapy for Pulmonary Hypertension and Sickle Cell Disease,National Heart Lung and Blood Institute,Interventional,16665,2007-06-30 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Age related macular degeneration,1226,null,Effects of Sildenafil on Choroidal Thickness in AMD,Duke University,Interventional,121103,2013-03-31 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Idiopathic pulmonary fibrosis,3771,null,Sildenafil Study to Treat Idiopathic Pulmonary Fibrosis,US Department of Veterans Affairs,Interventional,57186,2006-07-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Cystic fibrosis,88,null,Effects of Sildenafil on CFTR-dependent Ion Transport Activity,National Jewish Health,Interventional,66767,2015-10-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Lung disease pulmonary hypertension,3512,null,The Safety and Efficiency of Sildenafil in the Treatment of Severe Post-capillary Pulmonary Hypertension Caused by COPD,Fu Wai Hospital Chinese Academy of Medical Sciences,Interventional,301439,2017-06-15 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Sickle cell anemia,303,null,Sildenafil for Treatment of Priapism in Men With Sickle Cell Anemia,Johns Hopkins University,Interventional,58893,2008-06-30 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,null,Sildenafil Citrate for the Management of Asymmetrical Intrauterine Growth Restriction,Assiut University,Interventional,252877,2016-02-29 00:00:00,Not yet recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Duchenne dystrophy,2020,REVERSE-DBMD,Revatio for Heart Disease in Duchenne Muscular Dystrophy and Becker Muscular Dystrophy,"Hugo W. Moser Research Institute at Kennedy Krieger, Inc, Kennedy Krieger Institute",Interventional,68513,2010-09-30 00:00:00,Terminated
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Duchenne dystrophy,2020,null,Tadalafil and Sildenafil for Duchenne Muscular Dystrophy,Cedars-Sinai Medical Center,Interventional,77606,2011-05-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Macular degeneration,3207,null,A two-year trial to evaluate the PDE5/6 inhibition with sildenafil to reduce choroidal ischemia and treat age-related macular degeneration,"National Cancer Institute, National Institutes of Health",Interventional,348811,null,Status not specified
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,Comparison of the effect of ethinyl estradiol with sildenafil citrate versus ethinyl estradiol on endometrial thickness in infertile women,Hamadan University of Medical Sciences,Interventional,296065,2016-05-21 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Aging,1042,null,Role of Skeletal Muscle Nitric Oxide Production in Age-related Fatigue and Fatigability,University of Texas Medical Branch at Galveston,Interventional,63765,2010-01-31 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,Clinical effects of oral administration of ethylphenylephrine and sildenafil for the prevention of penile erectile dysfunction in patients with sickle cell anemia,Xiangya Hospital Of Central South University,Interventional,348357,2018-07-24 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Hypertension,178,null,Effects of Sildenafil in Resistant Hypertensives and Genetic Polymorphism,Universidade Estadual de Campina,Interventional,79225,2010-07-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Chronic obstructive pulmonary disease,1185,null,Effects of Sildenafil on exercise breath in subjects with mild to moderate COPD,Federal University of Rio Grande do Sul,Interventional,362248,2019-01-15 00:00:00,Not yet recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Dyspnea,2400,null,Effects of Sildenafil on exercise breath in subjects with mild to moderate COPD,Federal University of Rio Grande do Sul,Interventional,362248,2019-01-15 00:00:00,Not yet recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Male infertility,1081,null,The Effects of Oral Sildenafil Citrate on Semen Parameters,Guilan University of Medical Sciences,Interventional,302555,2015-08-23 00:00:00,No longer recruiting
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Prostate tumor,276,null,Evaluate the Effects of GPI-1485 on Erectile Function Following Bilateral Nerve-Sparing Prostatectomy,Eisai Medical Research Inc,Interventional,37326,2003-12-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",Y,N,Launched,L,Pulmonary artery hypertension,3510,SUPER-1,"A Study to Assess the Efficacy and Safety of 20, 40 and 80 mg of Sildenafil tid in the Treatment of Pulmonary Arterial Hypertension",Pfizer Inc,Interventional,9772,2002-10-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,SR-PAAS,Sitaxentan Efficacy and Safety Trial With a Randomized Prospective Assessment of Adding Sildenafil,Pfizer Inc,Interventional,36601,2008-12-31 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,STARTS-2,"A Long-Term, Extension Study Evaluating Safety of Sildenafil Citrate When Used to Treat Pulmonary Arterial Hypertension (PAH) in Children","Pfizer Inc, Pfizer Ltd",Interventional,5683,2004-01-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,VEPCaPSED,"Randomized, Double-Blind, Controlled Trial of daily use of sildenafil (Viagra) in Men with Early Prostate Cancer Treated With Radiation, for the Prevention of Subsequent Erectile Dysfunction","Alfred Hospital, William Buckland Radiotherapy Centre",Interventional,119180,2003-03-12 00:00:00,No longer recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,Study of Sildenafil Citrate During and After Radiotherapy/Hormone Therapy for Erectile Function Versus Radiotherapy/Hormone Therapy for Prostate Cancer,Memorial Sloan-Kettering Cancer Center,Interventional,18455,2005-02-28 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Pulmonary artery hypertension,3510,null,Sildenafil in HFpEF (Heart Failure With Preserved Ejection Fraction) and PH,University Medical Center Groningen,Interventional,97981,2011-10-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Ulcer,372,SEDUCE,Sildenafil Effect on Digital Ulcer Healing in Scleroderma Seduce Study,Centre Hospitalier Regional Universitaire de Lille,Interventional,74726,2010-11-30 00:00:00,Completed
null,3,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Prostate tumor,276,null,ED Recovery in Men Age </= 65 Treated With Bilateral Nerve Sparing Robotic Assisted Prostatectomy for Prostate Cancer,City of Hope Medical Center,Interventional,194419,2006-01-31 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,A Clinical Study to check the effect and Safety of Sildenafil Citrate plus Dapoxetine Tablets for the treatment of co-existing Erectile Dysfunction and Premature Ejaculation,Ajanta Pharma Ltd,Interventional,324427,2018-01-30 00:00:00,Not yet recruiting
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,A Study to Evaluate a Possible Superiority Expressed by the Faster Onset of Action and the Efficacy and Safety of Sildenafil Citrate 20 mg Sublingual Tablet in the Treatment of Erectile Dysfunction of Different Etiologies,Laboratorio Teuto Brasileiro SA,Interventional,201677,2011-09-30 00:00:00,Not yet recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Persistent pulmonary hypertension of the newborn,3660,Sildeno,Sildenofil in Persistent Pulmonary Hypertension in Newborns,Hamad Medical Corp,Interventional,85840,2011-11-30 00:00:00,Recruiting
null,2,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Secondary pulmonary arterial hypertension,3662,null,The Hemodynamic Effect of Sildenafil in Mechanically Ventilated Patients with Secondary Pulmonary Hypertension and Ensuing Right Ventricular Failure necessitating the Administration of Dobutamine N/A,General State Hospital of Athens,Interventional,119168,2007-01-01 00:00:00,Completed
null,2,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Oral Sildenafil and Intravenous Milrinone on Postoperative Pulmonary Hypertension,Assiut University,Interventional,244864,2015-06-30 00:00:00,Completed
null,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Sildenafil to Treat HIV-Associated Pulmonary Hypertension,National Heart Lung and Blood Institute,Interventional,21227,2006-05-12 00:00:00,Terminated
null,1+,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Metastatic non small cell lung cancer,3665,null,Combination Chemotherapy With Sildenafil Plus Carboplatin and Paclitaxel in Patients With Advanced Non-Small Cell Lung Cancer,Hamamatsu University School of Medicine,Interventional,51519,2007-02-28 00:00:00,Completed
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pre-eclampsia,1259,SIL,Efficacy of Sildenafil in Preterm Preeclampsia,University of Texas Health Science Center Houston,Interventional,261826,2016-07-31 00:00:00,Terminated
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Local Open-Label Access Study For Patients Who Completed A1481244 Study In Brazil,Pfizer Inc,Interventional,49690,2009-10-31 00:00:00,No longer recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,Titration Study to Evaluate Efficacy and Satisfaction of Viagra in Men With Erectile Function,Pfizer Inc,Interventional,43248,2005-10-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,AFFILIATE,Effects of Oral Sildenafil on Mortality in Adults With PAH,Pfizer Inc,Interventional,172867,2014-09-22 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,"A Multicenter, Open-Label, To Evaluate The Efficacy And Satisfaction Of Patrex In Men With Erectile Dysfunction",Pfizer Inc,Interventional,31306,2007-06-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,A Study Evaluating the Efficacy and Safety of Sildenafil in Men With Traumatic Spinal Cord Injury and Erectile Dysfunction,Pfizer Inc,Interventional,14295,2002-09-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Evaluation of the Index of Sexual Life Questionnaire,Pfizer Inc,Interventional,43247,2005-10-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,A Study to Evaluate Self-Esteem and Relationships in Males With Erectile Dysfuntion,Pfizer Inc,Interventional,31158,2003-05-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Efficacy,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,null,Effect of Sildenafil on Pulmonary Artery Pressure During Hypoxia and Exercise in Chronic Heart Failure,Hull and East Yorkshire Hospitals NHS Trust,Interventional,140522,2009-04-16 00:00:00,Terminated
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,TEDAP,"Multicentric, prospective study for Therapy of Erectile Dysfunction After nerve sparing radical Prostatectomy",Johannes Gutenberg Universitat Mainz,Interventional,127464,2006-11-01 00:00:00,Terminated
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,SIL-COPD-01,Sildenafil Effects on Pulmonary Haemodynamics and Gas Exchange in COPD,Hospital Clinic of Barcelona,Interventional,21852,2007-06-30 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,A study to compare the effects and safety of two drugs in a disease of heart with increased pressures in lung,Postgraduate Institute of Medical Education and Research,Interventional,321783,2017-08-14 00:00:00,Recruiting
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Eisenmenger syndrome,2087,null,A study to compare the effects and safety of two drugs in a disease of heart with increased pressures in lung,Postgraduate Institute of Medical Education and Research,Interventional,321783,2017-08-14 00:00:00,Recruiting
Asian Ancestry,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy,Bioequivalence",Y,N,Launched,L,Erectile dysfunction,186,null,Study to Determine a Preference Between Sildenafil or Tadalafil Treatment for Problems Getting an Erection,Eli Lilly & Co,Interventional,43819,2004-06-30 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,SIL-REACT,Vasoreactivity Testing With Intravenous Sildenafil in Patients With Precapillary Pulmonary Hypertension,Kerckhoff-Klinik GmbH,Interventional,143689,2013-04-30 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Emphysema,111,null,Functional CT Assessment of Pulmonary Arterial Dysfunction in Smoking Associated Emphysema,University of Iowa,Interventional,253538,2017-07-10 00:00:00,Recruiting
null,2+,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Pulmonary artery hypertension,3510,GOSPEL,Goal Oriented Strategy to Preserve Ejection Fraction Trial,VU University Medical Center,Interventional,307413,2013-05-31 00:00:00,No longer recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,Y,PHASE NOT SPECIFIED,NS,Pain,20,null,"A Randomized, Controlled Trial Evaluating Sildenafil Citrate in Relieving Ureteral Stent Related Symptoms",Mansoura University,Interventional,220830,2014-03-31 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,COMPASS 3,Combination Therapy in Pulmonary Arterial Hypertension,Actelion Ltd,Interventional,9615,2007-03-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,Sildenafil-HF,Sildenafil in Heart Failure With Reactive Pulmonary Hypertension,University of Kentucky,Interventional,217476,2015-01-31 00:00:00,Terminated
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,CONFIRMED,"A randomized, double-blind, cross-over design study to compare the efficacy and safety of vardenafil to that of sildenafil when used on demand in a population of men with erectile dysfunction","Bayer AG, GlaxoSmithKline plc",Interventional,54419,2007-03-22 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,A study to evaluate the efficacy of sildenafil in the treatment of patients with portopulmonary hypertension and awaiting hepatic transplant,Pfizer Inc,Interventional,52384,2004-09-30 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Thromboembolism,325,null,A study to evaluate the safety and efficacy of sildenafil in the treatment of patients with severe non-operable chronic thromboembolic disease,Pfizer Inc,Interventional,52382,2004-12-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Parkinsons disease,255,SCOPE,A Randomized Double Blind Placebo Controlled Study to Evaluate The Modulation of Cognitive Functions in Parkinson’s Subjects By Sildenafil,Pfizer Inc,Interventional,172716,2004-12-14 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,Y,Launched,L,Erectile dysfunction,186,null,"An open-label, pilot study to evaluate the effect of sildenafil in erectile dysfunction",Universitatsklinikum Essen,Interventional,115225,2003-03-31 00:00:00,Status not specified
null,1+,Phase not specified,NS,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Drug Interactions and Effects of Combination Therapy for Pulmonary Arterial Hypertension,Hamamatsu University School of Medicine,Interventional,124607,2011-04-01 00:00:00,Recruiting
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioavailability,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,Bioavailability of Sildenafil 100 mg; gel versus tablets,"Ultra Laboratories, SA de CV",Interventional,164231,2013-07-01 00:00:00,Recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A crossover, double-blind, placebo-controlled, randomized study on the efficacy of sildenafil in healthy volunteers",University of Vienna,Interventional,115340,2003-11-30 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A Crossover, Double-blind, Multicenter, Placebo-controlled, Randomized Trial to Evaluate Efficacy and Safety of Sildenafil Citrate for the Treatment of Erectile Dysfunction in Men with Cardiovascular Disease",Skåne University Hospital,Interventional,110606,2001-04-30 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Bioavailability,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Study to assess the bioequivalence of a formulation of sildenafil chewable tablets developed by Serral, SA DE CV versus Pfizer Viagra Jet, SA de CV, after administration of a single dose of 50 mg to healthy male volunteers, fasting state",Laboratorios Serral,Interventional,164792,null,Suspended
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Interstitial lung disease,2466,null,The Effect of Sildenafil on Diffusion Capacity Measurements in Patients With Pulmonary Hypertension and Parenchymal Lung Disease,Cleveland Clinic Foundation,Interventional,155478,2009-06-30 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Heart transplantation,2982,null,A study to assess the effect of sildenafil in successful heart transplantation in patients with advanced heart failure and severe pulmonary hypertension,Universitaire de Cardiologie et de Pneumologie de Quebec,Interventional,106087,2012-08-26 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,"An interventional, randomized study to evaluate the safety and efficacy of long term and low-dose tadalafil administered in combination with as needed sildenafil at an early stage of treatment in patients with erectile dysfunction",National Natural Science Foundation of China,Interventional,224541,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,Sildenafil in Treating Erectile Dysfunction in Patients With Prostate Cancer,Radiation Therapy Oncology Group,Interventional,29180,2003-01-31 00:00:00,Completed
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,Launched,L,Erectile dysfunction,186,null,"Comparative Pharmacokinetic and Bioequivalence Study of Drugs Vizarsin Ku-tab (Sildenafil, Lozenges, 100 mg, JSC Krka, dd, Novo mesto, Slovenia), and Viagra (Sildenafil Tablets, Film-coated, 100 mg, Pfizer PGM, France) in Healthy Volunteers",Krka dd Novo Mesto,Interventional,169007,2013-03-07 00:00:00,Completed
null,2,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Penis disease,1787,null,"A randomized, double-blind, placebo-controlled study to comparing the effects of Hyperbaric Oxygen Therapy to room air in post-prostatectomy men undergoing penile rehabilitation",Hartford Hospital,Interventional,139252,2013-05-07 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Verification of the combined effect of PDE5 inhibitors and bosentan in pulmonary arterial hypertension patients,Kobe University,Interventional,137308,2012-06-15 00:00:00,Recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A double-blind, placebo-controlled, randomized to determine the effect of sildenafil in men without erectile dysfunction",Universita degli Studi di Firenze,Interventional,115398,2003-06-30 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,A study to evaluate the effect of sildenafil therapy on right ventricular function in heart transplant recipients with pulmonary hypertension,University Medical Centre Ljubljana,Interventional,196027,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Pulmonary artery hypertension,3510,null,A study to evaluate the short term effect of sildenafil on pulmonary arterial pressure and platelet activity in thalassemia patients with pulmonary arterial hypertension,"Mahidol University, Ramathibodi Hospital",Interventional,189373,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Coronary artery disease,80,null,"Clinical trials of sildenafil citrate (Viagra(R)) demonstrate no increase in risk of myocardial infarction and cardiovascular death compared with placebo: A pooled/meta-analysis, randomized study",Harvard University,Interventional,114025,2003-09-30 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A placebo-controlled, cross-over, randomized trial to evaluate the safety, efficacy and tolerability of sildenafil in the treatment of erectile dysfunction developing after external beam radiation treatment of localized prostate cancer",Christchurch Hospital,Interventional,67844,2009-09-27 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Pulmonary artery hypertension,3510,null,An open study to assess the efficacy of iloprost plus sildenafil in pulmonary hypertension,University of Giessen,Interventional,115924,2003-07-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,"Randomized, Placebo-controlled Study of the Effect of Sildenafil on Hypoxia-Induced Pulmonary Hypertension",British Heart Foundation,Interventional,118217,2001-01-01 00:00:00,Completed
null,2,Phase not specified,NS,sildenafil citrate,8713,Bioequivalence,N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Open clinical study, two periods, two treatments, two sequences, crossover, randomized, single dose to assess the bioequivalence of sildenafil tablets 100 mg: Sildenafil versus Viagra under fasting conditions",Actavis LLC,Interventional,164724,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A 12-week, prospective, double-blind, placebo-controlled, randomized, crossover clinical trial to evaluate the safety and efficacy of sildenafil treatment for erectile dysfunction (ED) in patients with New York Heart Association classes II and III congestive heart failure (CHF)",University of Alberta,Interventional,72052,2003-03-28 00:00:00,Status not specified
Japanese Ancestry,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,Bioequivalence Study For Orally-Disintegrating Tablet of Sildenafil,Pfizer Inc,Interventional,100046,2012-08-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,Safety,N,Y,PHASE NOT SPECIFIED,NS,Prostate hyperplasia,1241,null,"A Randomized, Double-Blinded, Placebo-Controlled, Two-Way Crossover Study to Investigate the Safety and Toleration of Single Dose Sildenafil in Subjects Receiving Chronic UK-3690031",Pfizer Inc,Interventional,39686,2008-08-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Bioavailability,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Open, randomized, crossover study of comparative pharmacokinetics and bioequivalence of drugs Invidia EIR film dispersible oral 50 mg (GILESANTO Holdings Ltd.) and Viagra tablets, film-coated, 50 mg (Pfizer PGM) in fasting healthy male volunteers after a single dose",Gilesanto Holdings Ltd,Interventional,236183,2015-07-23 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Single-Dose Relative Bioavailability Study of SST-6006, a Topical Sildenafil Cream Versus Oral Sildenafil in Healthy Male Adults",Strategic Science & Technologies LLC,Interventional,161809,2013-10-31 00:00:00,Completed
null,4+,Phase 1 Clinical,C1,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,"Clomiphene Citrate, Estradiol and Sildenafil for Induction of Ovulation in Unexplained Infertility",Beni-Suef University,Interventional,361606,2017-01-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Open-label, randomized, crossover, two-stage study of the comparative pharmacokinetics and bioequivalence of drugs Sildenafil tablets, film-coated, 20 mg (JSC ""North Star"", Russia) and Revatio tablets, film-coated, 20 mg (Pfizer Inc., USA) healthy volunteers on an empty stomach",JSC "North Star",Interventional,269741,2016-08-03 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Comparative study of the pharmacokinetics and bioequivalence of drugs Kaverta (tablets containing 100 mg of sildenafil citrate), the production company ""Ranbaxy Laboratories Limited"" in India, and Viagra (tablets containing 100 mg of sildenafil citrate), the production company ""Pfizer PGM"", France, from healthy adult male volunteers in the fasting state",Ranbaxy Laboratories Ltd,Interventional,163800,2013-06-17 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioequivalence,Pharmacokinetics",N,Y,No Development Reported,NDR,Diastolic heart failure,3296,null,Nurigra Chewable Tablet in Healthy Adult Male Volunteers,Daewoong Pharmaceutical Co Ltd,Interventional,90713,2012-02-29 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,Bioequivalence,Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A single-dose, randomized, open-label, three-period, six-sequence, three-treatment, single-center and crossover study to evaluate bioequivalence of two formulations of sildenafil oral soluble film 100 mg and sildenafil citrate (Viagra) 100 mg oral tablets in healthy male subjects",Aquestive Therapeutics Inc,Interventional,328100,null,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Anxiety disorder,25,null,Interaction Between Fluvoxamine and Sildenafil,University of Heidelberg,Interventional,46003,2003-02-28 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Ischemic stroke,3676,null,Sildenafil and Stroke Recovery,University of Utah,Interventional,248336,2012-03-31 00:00:00,Terminated
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Placenta disease,3401,SC pregnancy,Sildenafil Citrate Effect on in Vivo Human Trophoblast Research,Hospital General Universitario de Valencia,Interventional,305278,2017-09-01 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,Launched,L,Erectile dysfunction,186,null,"Open-label, randomized, crossover study of the comparative pharmacokinetics and bioequivalence of drugs RO-MAN tablets, film-coated 100 mg (""Sinmedik Laboratories"", India) and Viagra tablets, film-coated 100 mg (""Pfizer PGM"", France) in healthy volunteers",Farmstrateg Ltd,Interventional,257254,2016-03-29 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,No Development Reported,NDR,Metabolic syndrome X,3294,null,"Open-label, randomized, crossover study of the comparative pharmacokinetics and bioequivalence of drugs RO-MAN tablets, film-coated 100 mg (""Sinmedik Laboratories"", India) and Viagra tablets, film-coated 100 mg (""Pfizer PGM"", France) in healthy volunteers",Farmstrateg Ltd,Interventional,257254,2016-03-29 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioequivalence,Bioavailability,Pharmacokinetics",N,Y,Launched,L,Erectile dysfunction,186,null,A Study Comparing the Level of Absorption of Sildenafil From Sildenafil 100 mg Oral Films Versus Viagra 100 mg Tablets and the Effect of Food on Absorption of Sildenafil From Sildenafil 100 mg Oral Films in Healthy Men,Institut Biochimique SA,Interventional,352258,2017-02-24 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Sildenafil Therapy For Subjects Who Derive Clinical Benefit From Continued Treatment With Sildenafil,Pfizer Inc,Interventional,145760,null,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Congenital heart defect,1541,null,Impact of sildenafil on the ventriculo-arterial performance in fontan palliated patients,Tehran University of Medical Sciences,Interventional,306249,2011-03-20 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Intracranial vasospasm,1639,null,Safety Study of Sildenafil in Treatment of Cerebral Aneurysm Vasospasm,University of Nebraska,Interventional,50222,2009-07-31 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,PK Study of Sildenafil in Neonate,Seoul National University Hospital,Interventional,211169,2014-10-31 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,Sildenafil Citrate in Frozen Embryo Transfer,Ain Shams Maternity Hospital,Interventional,266745,2015-09-30 00:00:00,Completed
null,4,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Efficacy of Type-5 Phosphodiesterase Inhibitors in Primary and Secondary Pulmonary Hypertension,National Taiwan University Hospital,Interventional,95804,2002-11-30 00:00:00,Terminated
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,To compare the effect of two different drugs on endometrial thickness and pregnancy rate in infertile women: A crossover study,All India Institute of Medical Sciences Patna,Interventional,347376,2018-08-16 00:00:00,Not yet recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Sildenafil and Pulmonary Artery Pressure,University of Chicago,Interventional,5557,2003-09-30 00:00:00,Terminated
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A phase II, double-blind, randomized, crossover, safety and efficacy study of avanafil for the potential treatment of erectile dysfunction",VIVUS Inc,Interventional,39648,2003-07-10 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Spontaneous abortion,1525,null,Sildenafil Citrate and Recurrent Abortion,Benha University,Interventional,333572,2015-12-01 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Congenital heart defect,1541,null,Fontan Patients: Comprehensive Evaluation of Pulmonary Circulation and Ventricular Function,Universitaire Ziekenhuizen Leuven,Interventional,86366,2012-04-30 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Nephrogenic diabetes insipidus,1674,null,Pharmacological Treatment of Congenital Nephrogenic Diabetes Insipidus,University of Colorado at Denver and Health Sciences Center,Interventional,97497,2007-05-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacodynamics",N,N,Launched,L,Pulmonary artery hypertension,3510,COMPASS-1,"COMPASS-1: Hemodynamic Effects of a Single-Dose of Sildenafil in Symptomatic Patients on Bosentan Treatment for Pulmonary Arterial Hypertension- A Multicenter, Open-Label, Non-Comparative, Prospective, Phase II Study",Actelion Ltd,Interventional,142835,2006-03-15 00:00:00,Recruiting
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,The efficacy and safety of sildenafil citrate used in combination with intravenous epoprostenol in pulmonary arterial hypertension (PAH),Pfizer Inc,Interventional,6180,2003-07-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Peripheral vascular disease,260,ARTERIOFIL,Sildenafil Efficacy Study on Time Walk From Peripheral Arterial Disease Patients (Stage II) With Arterial Claudication,"University Hospital, Angers",Interventional,265849,2016-11-07 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Congestive heart failure,1559,null,Study of Sildenafil in Patient With Heart Failure,Massachusetts General Hospital,Interventional,4597,2001-12-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Non-insulin dependent diabetes,837,null,Acute Effects of Sildenafil on Endothelial Function in People With Diabetes,Ruhr Universitat Bochum,Interventional,4384,2001-08-31 00:00:00,Completed
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,"A multicenter, double-blind, double-dummy, randomized, comparative study of the efficacy and safety of sildenafil, effervescent tablets, 100 mg (Teva) in comparison with the drug Viagra, tablets, coated foil liner 100 mg (Pfizer) in the treatment of male erectile dysfunction",Teva Pharmaceutical Industries Ltd,Interventional,275780,2016-11-01 00:00:00,Status not specified
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,Studying the Preference of Tadalafil to Sildenafil in Men With Problems Getting an Erection Across Nations,Eli Lilly & Co,Interventional,43820,2002-11-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Chronic obstructive pulmonary disease,1185,SPHERIC-1 OPEN EXTENSION,"SPHERIC-1OE (Sildenafil and Pulmonary Hypertension in COPD – Open Extension) - A Multicenter, Longitudinal, 12 Months Open-Label Study, for the Observation of the Use of Sildenafil in the Treatment of Patients With Pulmonary Hypertension Associated to Chronic Obstructive Lung Disease Enrolled in SPHERIC-1 Study",Italian Association of Hospital Pneumologists,Interventional,171685,2013-03-08 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Hypertension,178,STEP-IPF,Sildenafil Trial of Exercise Performance in Idiopathic Pulmonary Fibrosis,Duke University,Interventional,21864,2007-08-31 00:00:00,Completed
European Ancestry,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,RELAX,Evaluating the Effectiveness of Sildenafil at Improving Health Outcomes and Exercise Ability in People With Diastolic Heart Failure,Duke University,Interventional,54739,2008-09-30 00:00:00,Completed
null,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Cystic fibrosis,88,null,Evaluation and Treatment of Pulmonary Vascular Disease in Moderate to Severe CF,National Jewish Health,Interventional,248223,2015-12-31 00:00:00,Completed
null,2,Phase 2a Clinical,C2A,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,A Research Study To Assess The Effectiveness And Safety Of Different Doses Of Oral PF-00489791 In The Treatment Of Adult Patients With Pulmonary Arterial Hypertension,"Pfizer Inc, Pfizer Ltd, Pfizer SA (Spain)",Interventional,47644,2009-04-30 00:00:00,Terminated
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Prognostic Effect Of Sildenafil In Patients With Severe Mitral Stenosis And Reactive Pulmonary Hypertension Candidate For Mitral Valve Replacement At Tehran Heart Center,Tehran Heart Center,Interventional,210232,2014-09-06 00:00:00,No longer recruiting
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Secondary pulmonary arterial hypertension,3662,null,Role of Sildenafil in Secondary Pulmonary Hypertension Due to Chronic Obstructive Pulmonary Disease,Cipla Ltd,Interventional,143343,2007-08-27 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Prostate hyperplasia,1241,null,Tamsulosin and Sildenafil Heart and Circulatory Effects on Patients With BPH,"Pfizer Inc, Yamanouchi Pharmaceutical Co Ltd",Interventional,130348,2005-03-02 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Assess the Efficacy and Safety of Sildenafil When Added to Bosentan in the Treatment of Pulmonary Arterial Hypertension,Pfizer Inc,Interventional,10418,2006-09-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,A Study Evaluating the Efficacy and Safety of Sildenafil in Patients With Erectile Dysfunction Receiving Hemodialysis,Pfizer Inc,Interventional,30981,2002-10-31 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Efficacy,Pharmacodynamics",Y,N,PHASE NOT SPECIFIED,NS,Glucose intolerance,3498,null,Renin-Angiotensin and Fibrinolysis in Humans: Effect of Long-Term PDE5 Inhibition on Glucose Homeostasis,Vanderbilt University,Interventional,79806,2011-08-31 00:00:00,Terminated
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Efficacy of Beraprost in Lowering Pulmonary Arterial Pressure in Children,Dr Soetomo General Hospital,Interventional,329268,2017-04-01 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Interstitial lung disease,2466,null,Pulmonary Arterial Hypertension Secondary to Idiopathic Pulmonary Fibrosis And Treatment With Sildenafil,University of California Los Angeles,Interventional,21142,2007-02-28 00:00:00,Terminated
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Chronic obstructive pulmonary disease,1185,null,Sildenafil for Chronic Obstructive Pulmonary Disease (COPD) Associated Pulmonary Hypertension,Aarhus University,Interventional,22931,2012-06-30 00:00:00,Terminated
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,null,null,sildenafil,Effect of Adding Sildenafil to Protocol of Endometrial Preparation in Outcome of Frozen-thawed Embryo Transfer Cycles,Shahid Sadoughi University of Medical Sciences and Health Services,Interventional,90409,2009-09-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Ureteral disease,2949,null,Phosphodiesterase 5 Inhibitors (PDE5i) (Sildenafil) as Medical Expulsive Therapy in Distal Ureteral Stones,Mansoura University,Interventional,237009,2014-07-31 00:00:00,No longer recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Aortic stenosis,2383,null,Acute Hemodynamic Effects of Sildenafil in Patients With Severe Aortic Stenosis,Washington University in St Louis,Interventional,63797,2010-01-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,Y,PHASE NOT SPECIFIED,NS,Dysuria,433,null,"A Randomized, Controlled Trial Evaluating Sildenafil Citrate in Relieving Ureteral Stent Related Symptoms",Mansoura University,Interventional,220830,2014-03-31 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"Study For Which Treatment, Tadalafil or Sildenafil, is Preferred For Problems Getting or Maintaining an Erection",Eli Lilly & Co,Interventional,43845,2003-10-31 00:00:00,Completed
null,3,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,Evaluation of Safety and Effectiveness of 2 Lower Dose Combined PDE5i's Versus Single Maximal Dose PDE5i Treatment,Rambam Health Care Campus,Interventional,77872,2011-06-30 00:00:00,Not yet recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Blindness,2442,null,Healthy Volunteer Study of Sildenafil Effects Upon Vision,University of Cambridge,Interventional,13945,2002-02-28 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Schizophrenia,299,null,A Placebo-Controlled Single-Dose Trial of Sildenafil in Schizophrenia,Massachusetts General Hospital,Interventional,36017,2006-02-28 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,sildenafil citrate,8713,Pharmacokinetics,N,Y,PHASE NOT SPECIFIED,NS,null,null,null,Evaluation of Metabolic Markers for the Prediction of DDI of Various CYP3A Substrates and Inhibitors,Seoul National University Hospital,Interventional,281166,2016-12-31 00:00:00,Not yet recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,null,null,null,"An open-label, single-center to evaluate the efficacy of sildenafil in patients who completed the study A1481156 for PAH therapy in the Russian Federation",Pfizer Inc,Interventional,169074,2012-05-18 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A randomized, double-blind, placebo-controlled study to evaluate the safety and efficacy of sildenafil for erectile dysfunction in men receiving multiple antihypertensive agents",Pfizer Inc,Interventional,72131,2004-12-31 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Bioequivalence,Bioavailability,Pharmacokinetics",Y,Y,Launched,L,Erectile dysfunction,186,null,"A single-center, open-label, single-dose, randomized, four-period, four-treatment crossover pilot study to assess safety, pharmacokinetics, bioavailability and bioequivalence of Duromist compared to Viagra in healthy adult males under fasting conditions",NovaDel Pharma Inc,Interventional,71357,2010-07-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,"A dose-finding, double-blind, placebo-controlled, randomized study to assess the efficacy of sildenafil in erectile dysfunction",Pfizer Inc,Interventional,109469,1996-12-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,null,null,null,"An open-label, randomized study to evaluates the effect of sildenafil on choroidal vascular congestion and its correlation with visual effects in healthy volunteers",University of California Irvine,Interventional,115430,2001-12-31 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,"A prospective, randomized, controlled study to compare the efficacy of magnesium sulphate and sildenafil in treatment of newborns with persistent pulmonary hypertension",Sisli Etfal Hospital,Interventional,80323,2010-10-04 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Sexual dysfunction,3774,null,"An open-label, pilot trial to evaluate the effect of sildenafil citrate for the sexual dysfunction in antidepressant-treated male patients with posttraumatic stress disorder",Ness-Ziona Mental Health Center,Interventional,112440,2002-06-30 00:00:00,Status not specified
Japanese Ancestry,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Sildenafil for pulmonary arterial hypertension after pediatric cardiac surgery,Osaka Medical College,Interventional,242100,2010-10-01 00:00:00,Recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,"A randomized, open-label study to assess the efficacy and safety of sildenafil plus iloprost in pulmonary hypertension patients",University of Giessen,Interventional,111958,2002-04-02 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A Double-blind, Multicenter, Placebo-controlled, Randomized Trial to Evaluate Sildenafil Citrate for the Treatment of Erectile Dysfunction in Men with Type II Diabetes Mellitus",University of Manchester,Interventional,110663,2001-10-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A Dose-finding, Multicenter, Placebo-controlled, Randomized Trial To Evaluate Long-term Efficacy And Safety Of Oral Viagra (Sildenafil Citrate) In Men With Erectile Dysfunction And The Effect Of Treatment Withdrawal",University of Oslo,Interventional,106550,2000-06-30 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,"Three-way crossover, randomized, open, placebo-controlled clinical study on the efficacy and safety of ""Vildegra"" prolonged action tablets, film-coated 50 mg, produced by ""Ozone"" (Russia) compared with the drug ""Viagra"" tablets, film-coated, 50 mg production Pfizer PGM (France) in parallel groups of patients with erectile dysfunction",Atoll LLC,Interventional,163803,2013-06-24 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,null,null,null,"A prospective, open, randomized, crossover study of comparative pharmacokinetics and bioequivalence of the drug sildenafil, tablets, film-coated 100 mg (OOO ""Ozone"", Russia), in comparison with the drug Viagra, tablets, film-coated, 100 mg (""Pfizer GMP"", France)",Atoll LLC,Interventional,178328,2014-03-13 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,End stage renal disease,3251,null,Phosphodiesterase Type 5 Inhibition to Improve Endothelial Function and Vascular Remodeling in Chronic Kidney Disease and End Stage Renal Disease Patients Requiring New Arteriovenous Fistula,University of Alabama at Birmingham,Interventional,227506,2015-04-30 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Bioavailability",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,Bioequivalence Study Between Two Medications For Oral Administration Of Sildenafil 100 Mg Tablets In Healthy Male Volunteers,"Accord Farma, SA de CV",Interventional,164564,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,A Randomized Double-Blind Placebo-Controlled Study to Evaluate the Efficacy of Daily Pentoxifylline in the management of Erectile Dysfunction patients with suboptimal treatment response to Sildenafil,National University Hospital (Singapore) Pte Ltd,Interventional,160581,null,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Heart disease,626,null,Drug Therapy and Surgery in Congenital Heart Disease With Pulmonary Hypertension,University of Sao Paulo,Interventional,85511,2011-09-30 00:00:00,Recruiting
Asian Ancestry,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Pulmonary artery hypertension,3510,null,"A prospective, open-label, uncontrolled and multicenter study of oral sildenafil for the treatment of Chinese patients with pulmonary arterial hypertension","Capital Development Scientific Fund, People's Republic of China, Ministry of Science and Technology of the People´s Republic of China",Interventional,85887,2010-12-07 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Secondary pulmonary arterial hypertension,3662,null,Percutaneous pulmonary arterial denervation for treament of chronic heart failure with secondary pulmonary hypertension,Jiangsu Provincial People’s Hospital,Interventional,102581,2012-10-31 00:00:00,Not yet recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A multicenter, 6-week, randomized, double-blind, parallel-group, placebo-controlled study to evaluate safety and efficacy of sildenafil in men with serotonergic anti-depressant-associated erectile dysfunction",Massachusetts General Hospital,Interventional,68651,2005-05-20 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A Randomized, Crossover, Placebo-controlled Study of Sildenafil in Nocturnal Penile Tumescence in Normal Men",University of Modena and Reggio Emilia,Interventional,113477,2002-08-31 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A prospective, randomized, double-blind pilot study to assess the safety and efficacy of  metformin added to sildenafil treatment for erectile dysfunction in eugonadal nondiabetic men with insulin resistance",Latin American Society of Sexual Medicine,Interventional,93662,2011-10-20 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,Discontinued,DX,Female sexual dysfunction,1276,null,"Comparative Pharmacokinetic and Bioequivalence Study of Drugs Vizarsin Ku-tab (Sildenafil, Lozenges, 100 mg, JSC Krka, dd, Novo mesto, Slovenia), and Viagra (Sildenafil Tablets, Film-coated, 100 mg, Pfizer PGM, France) in Healthy Volunteers",Krka dd Novo Mesto,Interventional,169007,2013-03-07 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A crossover, double-blind, placebo-controlled, randomized study to evaluate sildenafil effects on exercise, neurohormonal activation, and erectile dysfunction in congestive heart failure followed by a prospective treatment for erectile dysfunction",University of Sao Paulo,Interventional,112823,2002-08-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,"A Placebo-Controlled, Flexible Dose, Randomized, Controlled Trial to Assess the Efficacy of Sildenafil Citrate in Men With Erectile Dysfunction After Anterior Resection for Rectal Carcinoma",University Hospital Birmingham NHS Foundation Trust,Interventional,135011,2005-09-30 00:00:00,Completed
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Open angle glaucoma,3147,null,"A Crossover, Double-blind, Placebo-controlled, Randomized Trial to Evaluate Acute Effects of Sildenafil Citrate (Viagra) on Intraocular Pressure in Open-Angle Glaucoma",University of Pennsylvania,Interventional,110616,2001-12-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Clinical efficacy of sildenafil on pulmonary hypertension in patients with chronic respiratory disorders,National Hospital Organization,Interventional,118735,2010-01-01 00:00:00,Recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A randomized, double-blind, placebo-controlled, flexible-dose, two-way crossover trial to evaluate the safety, efficacy and tolerability of sildenafil in the treatment of antipsychotic-induced erectile dysfunction","Christian Medical College, Vellore, India",Interventional,68750,2004-10-20 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,"A Randomized, Double-Blind, Crossover Trial to Investigate the Acute Effect of Sildenafil on Circulating Pro-Inflammatory Markers/Mediators in Patients with Vasculogenic Erectile Dysfunction",Athens University Medical School,Interventional,226901,null,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Eisenmenger syndrome,2087,null,"A 12-month, prospective, open-label, multicenter, long-term study to evaluate the safety and efficacy of sildenafil in the treatment of patients with Eisenmenger syndrome",Tongji University,Interventional,82873,2011-08-19 00:00:00,Status not specified
null,3,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,"A comparative study to assess satisfaction rates and erectile function in patients treated with sildenafil, intracavernous prostaglandin E1 and penile implant surgery for erectile dysfunction in urology practice",Wayne State University,Interventional,115123,2003-07-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A Cross-over, Double-blind, Placebo-controlled, Randomized Study To Evaluate Efficacy Of Sildenafil In Healthy Volunteers",University of Iowa,Interventional,107461,2000-12-19 00:00:00,Status not specified
null,3,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Coronary artery disease,80,null,Pharmacodynamic Study to Assess the Effects of Repeated Dosing of SAR-247799 on Endothelial Function in Patients With Type 2 Diabetes Mellitus,Sanofi SA,Interventional,332237,2018-03-07 00:00:00,Completed
null,3,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Non-insulin dependent diabetes,837,null,Pharmacodynamic Study to Assess the Effects of Repeated Dosing of SAR-247799 on Endothelial Function in Patients With Type 2 Diabetes Mellitus,Sanofi SA,Interventional,332237,2018-03-07 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioavailability,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A Relative Bioavailability Study of Revatio for the Crushed Tablets, Extemporaneously Prepared Formulation, and the Intact Tablets at 20 mg Dose in Healthy Volunteers",Pfizer Inc,Interventional,62567,2009-09-30 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,Safety,N,N,PHASE NOT SPECIFIED,NS,Stroke,65,null,Sildenafil (Viagra) Treatment of Subacute Ischemic Stroke,Henry Ford Health System,Interventional,6073,2005-04-30 00:00:00,Terminated
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Open-label, randomized, crossover, two-stage study of the comparative pharmacokinetics and bioequivalence of drugs Sildenafil powder for oral, 100 mg (JSC ""North Star"", Russia) and Viagra tablets, film-coated, 100 mg (manufactured by ""Fareva Amboise"", France, the owner of the registration certificate ""Pfizer Inc."", USA) in healthy male volunteers on an empty stomach",JSC "North Star",Interventional,277864,2016-10-26 00:00:00,Status not specified
null,1+,Phase 1 Clinical,C1,sildenafil citrate,8713,Efficacy,Y,Y,Launched,L,Erectile dysfunction,186,null,"A phase I, double-blind, randomized, placebo-controlled, crossover study to compare the efficacy of avanafil and sildenafil when coadministered with glyceryl trinitrate in healthy males",VIVUS Inc,Interventional,39633,2005-04-25 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Renal disease,286,null,Sildenafil Citrate Before Surgery in Improving Kidney Function in Patients With Kidney Cancer,Wake Forest University,Interventional,156376,2013-09-30 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,null,null,null,"An open, randomized, crossover study of the comparative pharmacokinetics and bioequivalence of Silaceo preparations of film-coated tablets, 20 mg, (ChemFarmTech LLC, Russia) and Revatio tablets, film-coated, 20 mg, (Fareva Amboise, France)",Chemical-Pharmaceutical Technologies LLC,Interventional,375237,2019-03-29 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Congestive heart failure,1559,BNP+PDEVI,Study of Low-Dose Nesiritide With or Without Sildenafil in Congestive Heart Failure Patients With Renal Dysfunction,Mayo Clinic Foundation,Interventional,40384,2009-02-28 00:00:00,Terminated
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,Bioequivalence,N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Clinical study to evaluate bioequivalence between tablets (test medicine) elaborated by Vitae Laboratorios, SA de CV, and Viagratablets (reference medicine) elaborated by Pfizer, SA de CV, both formulations contain sildenafil citrate equivalent to 100 mg",Vitae Laboratorios S.A. de C.V.,Interventional,378674,null,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Bioavailability",N,N,PHASE NOT SPECIFIED,NS,Heart disease,626,null,"Pilot clinical study of comparative bioavailability to demonstrate that the soft gelatin capsule (test drug) elaborated by Gelpharma, SA de CV, is a pharmaceutical alternative to the tablet Viagra (reference medicine) elaborated by Pfizer, SA de CV, both formulations containing Sildenafil citrate equivalent to 50 mg of sildenafil",Gelpharma SA,Interventional,381865,null,Recruiting
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,No Development Reported,NDR,Diastolic heart failure,3296,null,"Open-label, randomized, crossover study on the comparative pharmacokinetics and bioequivalence of drugs Sildenafil tablets, film-coated, 20 mg (Joint-Stock Company ""Vertex"", Russia) and Revatio tablets, film-coated, 20 mg (""Pfizer PGM"", France)",JSC Vertex,Interventional,253221,2016-02-09 00:00:00,Status not specified
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Prostate hyperplasia,1241,null,A Study to Investigate the Effects on Blood Pressure and Pulse Rate of a Single 100 mg Dose of Sildenafil in Patients With Benign Prostatic Hyperplasia Who Are Being Treated With Doxazosin,Pfizer Inc,Interventional,33859,2002-11-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Alzheimers disease,14,null,An interventional study to determine the acute effects of sildenafil on cerebrovascular function and brain metabolism in patients with Alzheimer's disease,National Institutes of Health,Interventional,383835,null,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,Walk-PHASST,Sildenafil Therapy for Pulmonary Hypertension and Sickle Cell Disease,National Heart Lung and Blood Institute,Interventional,16665,2007-06-30 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Intracranial vasospasm,1639,SIPCEVA,Sildenafil for Prevention of Cerebral Vasospasm,Hospital de Clinicas de Porto Alegre,Interventional,65106,2010-03-31 00:00:00,Terminated
null,33+,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Scleroderma,1105,PCTS,Pragmatic Clinical Trials in Scleroderma,University of West London,Interventional,349233,2018-10-31 00:00:00,Not yet recruiting
null,4,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Secondary pulmonary arterial hypertension,3662,null,Efficacy of Type-5 Phosphodiesterase Inhibitors in Primary and Secondary Pulmonary Hypertension,National Taiwan University Hospital,Interventional,95804,2002-11-30 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Becker muscular dystrophy,3289,REVERSE-DBMD,Revatio for Heart Disease in Duchenne Muscular Dystrophy and Becker Muscular Dystrophy,"Hugo W. Moser Research Institute at Kennedy Krieger, Inc, Kennedy Krieger Institute",Interventional,68513,2010-09-30 00:00:00,Terminated
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Retinopathy of prematurity,2478,null,Effect of Sildenafil on the Development of Retinopathy of Prematurity in Preterm Infants,Ahvaz Jundishapur University of Medical Sciences,Interventional,303305,2015-03-01 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Diabetic foot ulcer,790,null,Evaluation of Efficacy of Topical Formulation of Sildenafil 10% in Diabetic Foot Ulcer Healing,Tehran University of Medical Sciences,Interventional,125042,2013-01-18 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Emphysema,111,null,Sildenafil for Chronic Obstructive Pulmonary Disease,Columbia University,Interventional,21841,2005-02-28 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Fatigue,829,null,Role of Skeletal Muscle Nitric Oxide Production in Age-related Fatigue and Fatigability,University of Texas Medical Branch at Galveston,Interventional,63765,2010-01-31 00:00:00,Completed
Asian Ancestry,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Prostate hyperplasia,1241,PALACE,The OPtimal Dosage of Sildenafil in Ameliorating Urinary Symptoms in Patients with Lower Urinary Tract Symptoms Associated with Benign ProstatiC Hyperplasia,Hanmi Pharmaceutical Co Ltd,Interventional,248039,2013-07-01 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Traumatic brain injury,3733,null,Sildenafil Treatment for Mild TBI,University of Texas Southwestern Medical Center,Interventional,347630,2018-07-25 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Glioma,1108,null,"Sorafenib Tosylate, Valproic Acid, and Sildenafil Citrate in Treating Patients With Recurrent High-Grade Glioma",Virginia Commonwealth University,Interventional,117443,2013-04-11 00:00:00,Recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Launched,L,Pulmonary artery hypertension,3510,null,"A Randomized, Double-Blind, Placebo-Controlled Study of Sildenafil in Children With Pulmonary Arterial Hypertension","Pfizer Inc, Pfizer Ltd",Interventional,5690,2003-08-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,On-Demand Versus Daily Sildenafil for Patients Undergoing Radical Prostatectomy,Universita Vita-Salute San Raffaele,Interventional,75551,2011-01-31 00:00:00,Recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,The Dutch STRIDER,Does sildenafil improve the neonatal prognosis in severe early onset growth restriction,"Academic Medical Center, University of Amsterdam",Interventional,211344,2014-09-01 00:00:00,Recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Eisenmenger syndrome,2087,null,Combination Treatment With Bosentan and Sildenafil to Patients With Eisenmengers Syndrome,"Rigshospitalet, Denmark",Interventional,37027,2006-03-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Therapy of Pulmonary Arterial Hypertension (PAH) - Treatment With Sildenafil in Eisenmenger Patients,Competence Network for Congenital Heart Defects,Interventional,21051,2007-12-31 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Scleroderma,1105,null,Effect of Sildenafil on the Microcirculatory Blood Flow and Endothelial Progenitor Cells in Systemic Sclerosis,Federal University of Sao Paulo,Interventional,77110,2011-04-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Hypertension,178,null,The Assessment of Right Ventricular Contractility in Response to Sildenafil,Hospital for Sick Children,Interventional,25811,2008-08-31 00:00:00,Suspended
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Intermittent claudication,1865,VALSTAR,Efficacy of Sildenafil on the Morbi-mortality of Peripheral Arterial Diseased Patients With Intermittent Claudication,"University Hospital, Angers",Interventional,275104,2017-06-30 00:00:00,Not yet recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,null,Chronic Sildenafil Treatment in Heart Failure,Universita degli Studi di Milano,Interventional,60283,2005-04-30 00:00:00,Completed
null,2,Phase 0 Clinical,C0,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Testosterone deficiency,2639,null,Testosterone for Penile Rehab After Radical Prostatectomy,Baylor College of Medicine,Interventional,46722,2007-11-30 00:00:00,Terminated
null,4,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,Sildenafil and Outcome of IVF/ICSI Cycles,Royan Institute,Interventional,302077,2015-02-28 00:00:00,Recruiting
null,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Cystic fibrosis,88,null,Sildenafil Trial in Children and Young Adults with CF,Cincinnati Children's Hospital Medical Center,Interventional,69791,2012-08-31 00:00:00,Terminated
null,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Lymphatic system disease,779,null,A Study to Evaluate Sildenafil for the Treatment of Lymphatic Malformations,Stanford University,Interventional,74494,2010-12-31 00:00:00,Completed
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Sildenafil in Hemodialysis Patients With Pulmonary Hypertension,Ain Shams University,Interventional,362438,2018-12-02 00:00:00,No longer recruiting
null,2,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,Safety and Efficacy of TD-0025 (Rocket1h) for Treatment of Erectile Dysfunction,Vietstar Biomedical Research,Interventional,263212,2016-05-31 00:00:00,Completed
null,1+,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Heart arrhythmia,27,null,Influence of Dexmedetomidine on Pulmonary Hypertensive Crisis and Arrhythmias and Extubation Time in Cardiac Surgery Patients with Left to Right Shunt and Severe PH,Shiraz University of Medical Sciences,Interventional,297992,2017-04-21 00:00:00,Recruiting
null,3,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Effect of bupropion tablets compared to sildenafil tablets and Ginseng on sexual function (erectile dysfunction) in men with type 2 diabetes who were referred to endocrinology clinic of Vali Asr Hospital of Zanjan,Zanjan University of Medical Sciences,Interventional,293662,2016-04-20 00:00:00,No longer recruiting
null,1,Phase 3b Clinical,C3B,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Coronary vasospasm,1588,null,Therapeutic effect of sildenafil in patients with coronary vasospasm,Fischer-Bosch Institute of Clinical Pharmacology,Interventional,5777,2007-03-01 00:00:00,Terminated
Japanese Ancestry,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Safety And Efficacy Of Sildenafil In Children With Pulmonary Arterial Hypertension,Pfizer Inc,Interventional,89212,2012-08-24 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Study to Evaluate Viagra's Ability to Provide a Better Sexual Experience Through Quality Erections and Satisfaction,Pfizer Inc,Interventional,43246,2005-11-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,To Assess The Efficacy And Safety Of Oral Sildenafil In The Treatment Of Pulmonary Arterial Hypertension,Pfizer Inc,Interventional,9671,2008-04-30 00:00:00,Terminated
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,"A Randomized, Open-Label, Crossover, Multicenter, Single Dose Comparator Study Evaluating Onset Of Penile Rigidity In Men With Erectile Dysfunction Who Are Treated With Sildenafil And Tadalafil",Pfizer Inc,Interventional,31122,2003-06-30 00:00:00,Completed
null,3,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,PDE5 Inhibitor Use and Non-Arteritic Anterior Ischemic Optic Neuropathy,Bayer AG,Interventional,198958,2009-07-13 00:00:00,Terminated
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,Efficacy Study Measuring The Impact Of Treatment With Viagra On The Depressive Symptoms Of Men With Erectile Dysfunction,Pfizer Inc,Interventional,33877,2004-03-31 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Pulmonary artery hypertension,3510,COMPASS-2,Effects of the Combination of Bosentan and Sildenafil Versus Sildenafil Monotherapy on Pulmonary Arterial Hypertension (PAH),Actelion Ltd,Interventional,163874,2006-05-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary fibrosis,708,null,"Acute Effect of Sildenafil on Exercise Tolerance and Functional Capacity in Chronic Obstructive Pulmonary Disease, Idiopathic Pulmonary Fibrosis and Post Pneumonectomy Patients",Rabin Medical Center,Interventional,78828,2011-09-30 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Rectal tumor,1055,null,"A Placebo-Controlled, Flexible Dose, Randomized Controlled Trial to Assess The Efficacy of Sildenafil Citrate in Men With Erectile Dysfunction After Pelvic Surgery for Rectal Carcinoma",University Hospital Birmingham NHS Foundation Trust,Interventional,125937,2007-03-01 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Beta thalassemia,2369,null,L-arginine Versus Sildenafil in Children With Beta Thalassemia Associated With Pulmonary Hypertension,Tanta University,Interventional,326111,2016-07-31 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Sildenafil for Chronic Obstructive Pulmonary Disease (COPD) Associated Pulmonary Hypertension,Aarhus University,Interventional,22931,2012-06-30 00:00:00,Terminated
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Coronary artery disease,80,null,Clinical Study for Phosphodiesterase 5 Inhibitor (PDE5i) on Endothelial Function Improvement in Cardiovascular Patients: A Randomized Controlled Trial,Xiangya Hospital Of Central South University,Interventional,377649,2019-05-01 00:00:00,Not yet recruiting
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,Safety and Clinical Effectiveness of Two Lower Dose Combined PDE5i’s versu Single Maximal Dose PDE5i,Rambam Health Care Campus,Interventional,56035,2007-03-31 00:00:00,Recruiting
null,2+,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,Endotrial,Granulocyte Colony Stimulating Factor Versus Platelet Rich Plasma and Outcomes of Frozen Embryo Transfer,ClinAmygate,Interventional,380196,2019-06-15 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Urolithiasis,1046,null,Phosphodiesterase 5 Inhibitors (PDE5i) (Sildenafil) as Medical Expulsive Therapy in Distal Ureteral Stones,Mansoura University,Interventional,237009,2014-07-31 00:00:00,No longer recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Arterial hypertension,3659,null,Effects of Sildenafil on Penile Vascular Function in Hypertensive Men With Erectile Dysfunction,Instituto Nacional de Cardiologia,Interventional,247590,2014-10-31 00:00:00,Completed
null,3,Phase 4 Clinical,C4,sildenafil citrate,8713,"Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Phosphodiesterase Inhibitors Acute Hemodynamic Effects in Pulmonary Hypertension And Evaluation of Nitrogen Oxide Measurements of Non-Invasive Diagnostic Method,Uppsala University,Interventional,132930,2006-11-28 00:00:00,Recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,"A 4-week, dose-controlled study to evaluate the ability of sildenafil to produce an erection in men with erectile dysfunction",Pfizer Inc,Interventional,52209,1996-12-31 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,A placebo-controlled study to evaluate the efficacy and safety of RWJ-387273 compared to sildenafil citrate,Johnson & Johnson,Interventional,49050,2005-10-24 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Effect of Sildenafil on Endothelial Function,Rambam Health Care Campus,Interventional,43742,2005-10-31 00:00:00,Recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,null,null,null,"A Double-blind, Crossover, Placebo-controlled, Randomized Study To Evaluate The Effect Of Sildenafil On Cerebral Blood Flow Velocity",Hannover Medical School,Interventional,114329,2003-04-01 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"An Open-Label, Randomized, Cross-Over Study Of Comparative, Pharmacokinetics And Bio-equivalence Of Drugs Bayau, Film-Coated Tablets 100 mg (OOO Pharma International Company Russia-CIS, Russia (Produced: Asia Pharmaceutical Industries, Syria) And Viagra, Film-Coated Tablets 100 mg (Pfizer PGM, France)",Takeda Pharmaceutical Co Ltd,Interventional,169440,2012-08-20 00:00:00,Status not specified
null,3,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Urinary incontinence,187,null,A study to investigate the effect of phosphodiesterase type 5 inhibitors on urinary continence recovery after bilateral nerve-sparing radical prostatectomy,Istituto Scientifico H San Raffaele,Interventional,121037,2012-06-06 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Pulmonary artery hypertension,3510,KEEP-ACTIVE,Keio University Clinical Trial for Early Pulmonary Arterial Hypertension With Connective Tissue Diseases (KEEP-ACTIVE Study),Keio University,Interventional,139689,2008-09-01 00:00:00,Recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,An open-label trial to evaluate clinical efficacy of sildenafil citrate and predictors of long-term response,Johns Hopkins University,Interventional,113481,2003-08-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Reversibility by Sildenafil of Exercise-Induced Abnormal Right Ventricular Pressure Response in ASD and VSD-Operated Patients,Oslo University Hospital,Interventional,165830,2008-09-30 00:00:00,Recruiting
null,2,Phase not specified,NS,sildenafil citrate,8713,Pharmacodynamics,N,Y,PHASE NOT SPECIFIED,NS,null,null,null,The Pharmacological Basis for the Increase in Visual Time Constants Induced by Single Oral Doses of Sildenafil,University of Cambridge,Interventional,31518,2006-08-31 00:00:00,No longer recruiting
null,1+,Phase not specified,NS,sildenafil citrate,8713,"Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Confirmation of therapeutic drug monitoring for pulmonary hypertension,Hamamatsu University School of Medicine,Interventional,276649,2016-06-06 00:00:00,Recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Hypertension,178,null,"A Crossover, Placebo-controlled, Randomized Study To Evaluate The Effect Of Sildenafil On Blood Pressure And Arterial Wave Reflection In Treated Hypertensive Men",St. James's Hospital,Interventional,110796,2001-10-31 00:00:00,Status not specified
Asian Ancestry,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,ASSESS-1,"A Double-blind, Multicenter, Placebo-controlled, Randomized Study To Evaluate The Efficacy And Safetyt Of Sildenafil Citrate In  Asian Male With Erectile Dysfunction: The Assess-1 Study Group",Subang Jaya Medical Centre,Interventional,108101,2000-10-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A Randomized, Placebo-controlled, Double-blind, Crossover Trial of Sildenafil after Rectal Excision for Cancer and Inflammatory Bowel Disease",John Radcliffe Hospital,Interventional,112618,2002-06-30 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"An open-label, dose-finding study to assess the efficacy and safety of sildenafil in erectile dysfunction patients",St Luke's Hospital,Interventional,111490,2002-02-13 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,NO,Nitro Oxide Inhalation Continued With Sildenafil on Neonatal Persistent Pulmonary Hypertension,Third Military Medical University of the Chinese PLA,Interventional,78417,2011-03-31 00:00:00,Recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Thalassemia,322,null,A study to evaluate the short term effect of sildenafil on pulmonary arterial pressure and platelet activity in thalassemia patients with pulmonary arterial hypertension,"Mahidol University, Ramathibodi Hospital",Interventional,189373,null,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,null,null,null,"Open, randomized, crossover study of comparative pharmacokinetics and bioequivalence of drugs Sildenafil tablets, film-coated, 100 mg (JSC ""Vertex"", Russia) and Viagra tablets, film-coated, 100 mg (Pfizer PGM, France)",JSC Vertex,Interventional,163805,2013-06-19 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,"An international, multicenter, double-blind, placebo-controlled, efficacy study of sildenafil citrate in men with erectile dysfunction",Case Western Reserve University,Interventional,68722,2006-02-27 00:00:00,Status not specified
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioequivalence,Pharmacokinetics",N,Y,Launched,L,Erectile dysfunction,186,null,Pharmacokinetics Of Sildenafil Orally Disintegrating Tablet Formulation Versus To Viagra Oral Tablet,Pfizer Inc,Interventional,199495,2010-12-31 00:00:00,Completed
null,3+,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics",N,Y,Launched,L,Pulmonary artery hypertension,3510,null,"A Pharmacokinetic Drug-Drug Interaction (DDI) Study Between Sitaxsentan And Sildenafil, And Between Sitaxsentan And Tadalafil After Multiple Doses",Pfizer Inc,Interventional,72409,2010-11-30 00:00:00,Terminated
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics",N,Y,Launched,L,Pulmonary artery hypertension,3510,null,"Safety, Tolerability, and Pharmacokinetic Parameters of Sodium Nitrite Inhalation Solution in Healthy Subjects",Aires Pharmaceuticals Inc,Interventional,79793,2011-07-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,Efficacy and safety of postoperative early oral sildenafil for the prevention of erectile dysfunction after laparoscopic total mesorectal excision of rectal cancer: study protocol for a randomized controlled trial,Second Hospital Affiliated to Nanchang University,Interventional,332123,2018-07-01 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Heart disease,626,null,Sildenafil in Single Ventricle Patients,Duke University,Interventional,68563,2011-04-30 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics,Pharmacodynamics",N,N,Phase 3 Clinical,C3,Persistent pulmonary hypertension of the newborn,3660,null,Pharmacokinetics of Sildenafil in Premature Infants,University of North Carolina,Interventional,90817,2013-02-28 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioequivalence,Pharmacokinetics",N,Y,Launched,L,Erectile dysfunction,186,null,Nurigra Chewable Tablet in Healthy Adult Male Volunteers,Daewoong Pharmaceutical Co Ltd,Interventional,90713,2012-02-29 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,Study of bioequivalence between two formulations of sildenafil (50 mg) tablet in healthy male volunteers,Laboratorios La Sante S.A,Interventional,206498,null,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Open, randomized, balanced, crossover study of bioequivalence in two periods, two sequences with a single ingestion of 50 mg of the drug Gent, an oral spray dosage, 12.5 mg/dose, OOO NP Farmvilar, Russia, and 50 mg of the drug Viagra, film-coated tablets, 50 mg, Fareva Amboise, France (holder of RU - Pfizer Inc, USA) in adult healthy volunteers on an empty stomach",NPO PharmVILAR,Interventional,307857,2017-08-01 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,No Development Reported,NDR,Metabolic syndrome X,3294,null,"Open-label, randomized, crossover study on the comparative pharmacokinetics and bioequivalence of drugs Sildenafil tablets, film-coated, 20 mg (Joint-Stock Company ""Vertex"", Russia) and Revatio tablets, film-coated, 20 mg (""Pfizer PGM"", France)",JSC Vertex,Interventional,253221,2016-02-09 00:00:00,Status not specified
Asian Ancestry,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A randomized, open-label trial for bioequivalence of sildenafil citrate tablets (specification 100 mg) in Chinese healthy male volunteers","Guangzhou Baiyunshan Pharmaceutical Holdings Co Ltd, Xiangya Hospital Of Central South University",Interventional,351725,2018-09-01 00:00:00,Not yet recruiting
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,Discontinued,DX,Female sexual dysfunction,1276,null,"Open-label, randomized, crossover study of the comparative pharmacokinetics and bioequivalence of drugs RO-MAN tablets, film-coated 100 mg (""Sinmedik Laboratories"", India) and Viagra tablets, film-coated 100 mg (""Pfizer PGM"", France) in healthy volunteers",Farmstrateg Ltd,Interventional,257254,2016-03-29 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,null,null,null,Study of the comparative pharmacokinetics and bioequivalence of sildenafil and Viagra comparator,Obolensky,Interventional,316761,2017-10-18 00:00:00,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pre-eclampsia,1259,null,Sildenafil Citrate for the Treatment of Established Pre-Eclampsia,Pfizer Inc,Interventional,31371,2004-09-30 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,Discontinued,DX,Female sexual dysfunction,1276,null,Study to Investigate Effect of Sildenafil on Clitoral Engorgement as Measured by Magnetic Resonance Imaging (MRI) in Pre-Menopausal Women With Female Sexual Arousal Disorder,Pfizer Inc,Interventional,32423,2004-04-30 00:00:00,Completed
null,3,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,Y,Discontinued,DX,Female sexual dysfunction,1276,null,Lybrido for Female Sexual Dysfunction,Emotional Brain BV,Interventional,119433,2011-09-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Study To Investigate Safety And Efficacy Of Sildenafil In The Newborns With Persistent Pulmonary Hypertension (PPHN),Pfizer Inc,Interventional,64267,2010-12-31 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,RESPONS,Responsiveness of Exercise Tests in Pulmonary Arterial Hypertension,Universite Laval,Interventional,79273,2009-04-30 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Sexual dysfunction,3774,null,effect of vitamin D in treatment of men with sexual dysfunction,Mazandaran University of Medical Sciences,Interventional,302175,2015-06-26 00:00:00,No longer recruiting
null,3,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Autonomic nervous system disease,38,null,Nebivolol in the Supine Hypertension of Autonomic Failure,Vanderbilt University,Interventional,63288,2010-01-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Priapism,1794,null,Sildenafil for Treatment of Priapism in Men With Sickle Cell Anemia,Johns Hopkins University,Interventional,58893,2008-06-30 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pre-eclampsia,1259,null,Esomeprazole With Sildenafil Citrate in Women With Early-onset Preeclampsia,Aswan University Hospital,Interventional,358362,2018-12-01 00:00:00,Recruiting
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,Evaluation of the role of Atorvastatin to improve the response to Sildenafil in men with erectile dysfunction without response to Sildenafil alone,Shahid Beheshti University,Interventional,272136,2009-06-22 00:00:00,No longer recruiting
null,2+,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,Effect of Vaginal Sildenafil Citrate on Endometrial Preparation and Outcome in Frozen Thawed Embryo Transfer Cycles,Cairo University,Interventional,371411,2019-02-28 00:00:00,Not yet recruiting
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Valsartan Therapy in the Treatment of Thalassemia-Induced Dyspnea,Tehran University of Medical Sciences,Interventional,130828,2012-10-22 00:00:00,No longer recruiting
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Thalassemia intermedia,2370,null,Valsartan Therapy in the Treatment of Thalassemia-Induced Dyspnea,Tehran University of Medical Sciences,Interventional,130828,2012-10-22 00:00:00,No longer recruiting
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Thalassemia major,2371,null,Valsartan Therapy in the Treatment of Thalassemia-Induced Dyspnea,Tehran University of Medical Sciences,Interventional,130828,2012-10-22 00:00:00,No longer recruiting
null,4+,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Prostate tumor,276,null,Nerve-Sparing Radical Prostatectomy With or Without Nerve Grafting Followed by Standard Therapy for Erectile Dysfunction in Treating Patients With Localized Prostate Cancer,MD Anderson Cancer Center,Interventional,182318,2001-08-31 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Schizophrenia,299,null,Sildenafil the treatment of the negative symptoms of schizophrenia,Tehran University of Medical Sciences,Interventional,142311,2010-03-01 00:00:00,No longer recruiting
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,Sildenafil Vaginal Gel Co-treatment With Clomiphene Citrate in Infertile Women With Thin Endometrium,Assiut University,Interventional,256251,2015-06-30 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Pharmacokinetic Effects of QTI-571 on Sildenafil and Bosentan in Pulmonary Arterial Hypertension Patients,Novartis AG,Interventional,79175,2011-04-20 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Study evaluating the addition of sildenafil to bosentan therapy in pulmonary arterial hypertension,The University Health Network,Interventional,32119,2008-10-27 00:00:00,Terminated
null,1+,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A phase III, placebo-controlled, open-label, crossover trial to evaluate the efficacy with the maximum doses of silodosin in combination with sildenafil or tadalafil in healthy men",Actavis Inc,Interventional,51188,2008-09-29 00:00:00,Status not specified
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,SV-INHIB,Efficacy of Phosphodiesterase-type 5 Inhibitors in Patients With Univentricular Congenital Heart Disease,"University Hospital, Montpellier",Interventional,385873,2020-03-01 00:00:00,Not yet recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Intermittent claudication,1865,ARTERIOFIL,Sildenafil Efficacy Study on Time Walk From Peripheral Arterial Disease Patients (Stage II) With Arterial Claudication,"University Hospital, Angers",Interventional,265849,2016-11-07 00:00:00,Completed
null,2,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,"Open, randomized, multicenter, comparative, safety and efficacy study of sildenafil, effervescent tablets, 100 mg (Teva) in comparison with the drug Viagra, film-coated tablets, 100 mg (Pfizer) in the treatment of male erectile dysfunction",Teva Pharmaceutical Industries Ltd,Interventional,270951,2016-08-08 00:00:00,Status not specified
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Premature ejaculation,1274,null,A Clinical Study to check the effect and Safety of Sildenafil Citrate plus Dapoxetine Tablets for the treatment of co-existing Erectile Dysfunction and Premature Ejaculation,Ajanta Pharma Ltd,Interventional,324427,2018-01-30 00:00:00,Not yet recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,SPHERIC-1,Sildenafil and Pulmonary Hypertension In COPD,Italian Association of Hospital Pneumologists,Interventional,81183,2010-10-31 00:00:00,Recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,SPHERIC-1 OPEN EXTENSION,"SPHERIC-1OE (Sildenafil and Pulmonary Hypertension in COPD – Open Extension) - A Multicenter, Longitudinal, 12 Months Open-Label Study, for the Observation of the Use of Sildenafil in the Treatment of Patients With Pulmonary Hypertension Associated to Chronic Obstructive Lung Disease Enrolled in SPHERIC-1 Study",Italian Association of Hospital Pneumologists,Interventional,171685,2013-03-08 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Peripheral vascular disease,260,VALSTAR,Efficacy of Sildenafil on the Morbi-mortality of Peripheral Arterial Diseased Patients With Intermittent Claudication,"University Hospital, Angers",Interventional,275104,2017-06-30 00:00:00,Not yet recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Evaluation of Tolerability and Efficacy of the Combination Sildenafil/Bosentan in Patients With Severe Pulmonary Hypertension,IRCCS San Raffaele,Interventional,141121,2006-11-07 00:00:00,Completed
null,1,Phase 0 Clinical,C0,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Hypoxia,1053,null,Is Blood Flow Through IPAVA and PFO Related to Breath-hold and SCUBA Diving-induced Pulmonary Hypertension?,University of Oregon,Interventional,380110,2019-07-31 00:00:00,Not yet recruiting
African Ancestry,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Efficacy,Pharmacodynamics",N,Y,PHASE NOT SPECIFIED,NS,Vascular disease,742,null,CD36 in Nutrient Delivery and Its Dysfunction,Vanderbilt University,Interventional,284473,2017-01-31 00:00:00,Recruiting
null,1,Phase 1/Phase 2 Clinical,C12,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Cystic fibrosis,88,null,Safety and Efficacy of Sildenafil in Cystic Fibrosis (CF) Lung Disease,National Jewish Health,Interventional,18874,2008-09-02 00:00:00,Completed
null,2,Phase 2a Clinical,C2A,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A phase II, multicenter, double-blind, placebo-controlled, safety and efficacy study of avanafil for the oral treatment of erectile dysfunction",VIVUS Inc,Interventional,39643,2002-04-04 00:00:00,Status not specified
null,1,Phase 2b Clinical,C2B,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Renal injury,3108,REVAKI 2,The effect of sildenafil (Revatio) on post cardiac surgery acute kidney injury,University of Leicester,Interventional,242006,2015-06-26 00:00:00,Completed
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,Efficacy,N,N,Discontinued,DX,Female sexual dysfunction,1276,null,Effect of Vaginal Sildenafil on Female Sexual Function Index and Sexual Satisfaction,Tarbiat Modares University,Interventional,318380,2015-06-22 00:00:00,No longer recruiting
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Pulmonary artery hypertension,3510,SUPERIOR,Effect of Sildenafil for Sustained PAH After MV Surgery,Asan Medical Center,Interventional,228576,2016-05-31 00:00:00,No longer recruiting
null,1,Phase 2/Phase 3 Clinical,C23,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Sildenafil to Improve Exercise Capacity in People With Thalassemia and Pulmonary Hypertension,New England Research Institutes,Interventional,50340,2009-03-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,A Study Of The Safety and Efficacy Of Viagra In Men With Erectile Dysfunction Who Do Not Self Identify,Pfizer Inc,Interventional,43632,2006-07-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,Mild To Moderate Erectile Dysfunction Study,Pfizer Inc,Interventional,43242,2005-04-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Discontinued,DX,Female sexual dysfunction,1276,null,Study of Sildenafil for Treatment of SSRI-Antidepressant Sexual Dysfunction in Women,University of New Mexico,Interventional,33122,2001-01-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Hemodynamic Response After 6 Months of Sildenafil,University of Chile,Interventional,20987,2003-08-31 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,SIL-COPD-02,Study of Sildenafil Effects in Combination With Rehabilitation in Patients With Chronic Obstructive Pulmonary Disease (COPD) and Associated Pulmonary Hypertension,Hospital Clinic of Barcelona,Interventional,63786,2008-08-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,null,Effects of Viagra on Heart Function in Patients With Heart Failure,MetroHealth Medical Center,Interventional,32499,2006-12-31 00:00:00,Completed
null,2,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,L-arginine Versus Sildenafil in Children With Beta Thalassemia Associated With Pulmonary Hypertension,Tanta University,Interventional,326111,2016-07-31 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Lung injury,1489,null,Smoking Cessation and Functional CT Assessment,University of Iowa,Interventional,323522,2018-03-19 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Pulmonary artery hypertension,3510,LV strain,Characterization of Left Ventricular (LV) Strain Patterns in Mildly Elevated Pulmonary Capillary Wedge Pressure (PCWP) and Pulmonary Artery Hypertension (PAH),University of Arizona,Interventional,112640,2013-02-28 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Parkinsons disease,255,null,Motor Response to Sildenafil in Parkinson's Disease (PD),Bispebjerg Hospital,Interventional,154543,2003-11-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Non-insulin dependent diabetes,837,CECSID,Cardiovascular Effects of Chronic Sildenafil in Men With Type 2 Diabetes,Universita degli Studi di Roma La Sapienza,Interventional,16672,2008-01-31 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,ATHENA-1,Study of Add-on Ambrisentan Therapy to Background Phosphodiesterase Type-5 Inhibitor (PDE-5i) Therapy in Pulmonary Arterial Hypertension,Gilead Sciences Inc,Interventional,15448,2008-04-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Persistent pulmonary hypertension of the newborn,3660,null,Oral Sildenafil in Persistent Pulmonary Hypertension Secondary to Meconium Aspiration Syndrome in Newborns,"Government Medical College, Bhavnagar, Sir Takhtsinhji General Hospital",Interventional,104018,2011-12-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Chronic Sildenafil for Severe Diaphragmatic Hernia,University of California San Francisco,Interventional,21030,2006-02-28 00:00:00,Terminated
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Hernia,2754,null,Chronic Sildenafil for Severe Diaphragmatic Hernia,University of California San Francisco,Interventional,21030,2006-02-28 00:00:00,Terminated
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,Sildenafil Citrate of In Vitro Fertilization After Multiple IVF Failures Attributed to Poor Endometrial Development,Ain Shams University,Interventional,287576,2017-01-31 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,PDEI Following Mitral Valve Surgery in Patients With Pulmonary Hypertension,Sheba Medical Center,Interventional,223420,2015-03-31 00:00:00,Completed
null,2,Phase not specified,NS,sildenafil citrate,8713,Pharmacokinetics,Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A randomized, placebo-controlled study to evalute the pharmacokinetics of sitaxentan in healthy subjects",Encysive Pharmaceuticals Inc,Interventional,29805,2004-08-26 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A Randomized, Crossover, Double-Blind, Placebo-Controlled Study To Assess Safety And Efficacy Of Sildenafil In Erectile Dysfunction In Diabetic Men",Pfizer Inc,Interventional,106251,1998-10-31 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Erectile dysfunction,186,null,"A randomized, double-blind, placebo-controlled, crossover, four-arm study to evaluate the efficacy and tolerability of tadalafil or sildenafil in erectile dysfunction",Lilly ICOS LLC,Interventional,52875,2004-03-23 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Hypertension,178,null,An open-label trial to study the safety and efficacy of sildenafil in hypertensive cardiac transplant recipients,University of Florida,Interventional,112941,2003-10-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,"A crossover, dose-finding, double-blind, placebo-controlled, randomized study to assess the effect of sildenafil in erectile dysfunction",University of Leeds,Interventional,109447,1996-12-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Irritable bowel syndrome,192,null,The Effects of Sildenafil on Rectal Sensitivity and Tone in Patients With the Irritable Bowel Syndrome,Federal University of Ceara,Interventional,153271,null,Completed
null,2,Phase not specified,NS,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,null,Percutaneous pulmonary arterial denervation for treament of chronic heart failure with secondary pulmonary hypertension,Jiangsu Provincial People’s Hospital,Interventional,102581,2012-10-31 00:00:00,Not yet recruiting
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,An open-label trial to evaluate the efficacy of sildenafil in erectile dysfunction after radical prostatectomy,University of Pennsylvania,Interventional,107229,2000-06-30 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics",Y,N,Launched,L,Erectile dysfunction,186,null,A Trial to Evaluate Sildenafil Citrate (Viagra) for the Treatment of Erectile Dysfunction in Men With Parkinson's Disease,University of South Florida,Interventional,145488,null,Completed
null,3,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,"A randomized, controlled, open-label trial to compare acute effects of sildenafil, nitric oxide, and epoprostenol in patients with pulmonary hypertension secondary to lung fibrosis",University of Giessen,Interventional,74204,2002-09-21 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Coronary artery disease,80,null,"A randomized, double-blind, placebo-controlled, crossover study to evaluate the cardiovascular effects of sildenafil during exercise in men with known or probable coronary artery disease",Mayo Clinic Foundation,Interventional,73911,1999-03-04 00:00:00,Status not specified
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,No Development Reported,NDR,Diastolic heart failure,3296,null,"Comparative Pharmacokinetic and Bioequivalence Study of Drugs Vizarsin Ku-tab (Sildenafil, Lozenges, 100 mg, JSC Krka, dd, Novo mesto, Slovenia), and Viagra (Sildenafil Tablets, Film-coated, 100 mg, Pfizer PGM, France) in Healthy Volunteers",Krka dd Novo Mesto,Interventional,169007,2013-03-07 00:00:00,Completed
null,2,Phase not specified,NS,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"An open, randomized, crossover, two-stage study of comparative pharmacokinetics and bioequivalence of drugs Dinamiko Forward, film dispersible oral, 50 mg (Teva) and Viagra, film-coated tablets 50 mg (Pfizer) in healthy male volunteers in single dose on an empty stomach",Teva Pharmaceutical Industries Ltd,Interventional,193828,2014-05-19 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,Efficacy,Y,N,Launched,L,Erectile dysfunction,186,null,An open-label study to evaluate the efficacy of sildenafil in the treatment of erectile dysfunction,University of California Los Angeles,Interventional,108264,1999-01-31 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,Launched,L,Pulmonary artery hypertension,3510,null,An open-label study to evaluate the efficacy and safety of long-term treatment with oral sildenafil in patients with pulmonary arterial hypertension,University of Alberta,Interventional,115855,2003-10-28 00:00:00,Status not specified
null,1,Phase not specified,NS,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Congestive heart failure,1559,null,"A 12-week, prospective, double-blind, placebo-controlled, randomized, crossover clinical trial to evaluate the safety and efficacy of sildenafil treatment for erectile dysfunction (ED) in patients with New York Heart Association classes II and III congestive heart failure (CHF)",University of Alberta,Interventional,72052,2003-03-28 00:00:00,Status not specified
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,Food Effect Study For New Formulation,Pfizer Inc,Interventional,90683,2012-08-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioavailability,Pharmacokinetics",Y,Y,Launched,L,Erectile dysfunction,186,null,A pilot bioavailability study of PheoniX for the treatment of male erectile dysfunction,iX Biopharma Ltd,Interventional,247308,null,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics",N,N,Launched,L,Pulmonary artery hypertension,3510,null,Sildenafil IV Bolus Study,Pfizer Inc,Interventional,37593,2008-10-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioavailability,Pharmacokinetics",Y,Y,Launched,L,Erectile dysfunction,186,null,A Relative Bioavailability Study Between Two Formulations Of Sildenafil Citrate,Pfizer Inc,Interventional,55687,2010-01-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A Single-Dose, Randomized, Open-label, Two-way Crossover, Bioequivalence Study of Generic Sildenafil 100 mg Film-coated Tablets (Xegra 100) and Reference Product (Viagra) in Healthy Thai Male Volunteers under Fasting Conditions",Mahidol University,Interventional,345839,2018-08-29 00:00:00,Not yet recruiting
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Advanced solid tumor,3713,null,Study of Regorafenib and Sildenafil for Advanced Solid Tumors,Virginia Commonwealth University,Interventional,231570,2015-07-01 00:00:00,No longer recruiting
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"To find the availability and compare sildenafil citrate solution with sildenafil citrate tablets in normal, healthy, adult, human male subjects under fasting conditions",Vigorous Solutions Ltd,Interventional,317655,2017-10-21 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Urinary incontinence,187,null,Use of Sildenafil for Treatment of Urinary Incontinence,University of Texas Medical Branch at Galveston,Interventional,281296,2017-03-10 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Fetal growth restriction,3103,null,Sildenafil in Severe Intrauterine Growth Retardation (IUGR),Beni-Suef University,Interventional,299692,2017-05-06 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Duchenne dystrophy,2020,Acute Dosing Study,PDE Inhibitors in DMD Study,Cedars-Sinai Medical Center,Interventional,86662,2012-03-31 00:00:00,Completed
null,3,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Traumatic brain injury,3733,null,Cerebrovascular Reactivity in American Football Players,University of Pennsylvania,Interventional,327725,2018-03-01 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Bioequivalence,Pharmacokinetics",N,Y,Discontinued,DX,Female sexual dysfunction,1276,null,Nurigra Chewable Tablet in Healthy Adult Male Volunteers,Daewoong Pharmaceutical Co Ltd,Interventional,90713,2012-02-29 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,Interaction Between Fluvoxamine and Sildenafil,University of Heidelberg,Interventional,46003,2003-02-28 00:00:00,Completed
null,2,Phase 1 Clinical,C1,sildenafil citrate,8713,"Efficacy,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Depression,93,null,Interaction Between Fluvoxamine and Sildenafil,University of Heidelberg,Interventional,46003,2003-02-28 00:00:00,Completed
null,4+,Phase 1 Clinical,C1,sildenafil citrate,8713,"Safety,Pharmacokinetics,Pharmacodynamics",Y,Y,PHASE NOT SPECIFIED,NS,null,null,null,"A phase I, randomized, double-blind, six-way, crossover study to evaluate the impact of dosing of 10 mg vardenafil and 50 mg sildenafil concomitantly with 400 mg gatifloxacin on cardiac conduction for 16 h post-dose in healthy male subjects",GlaxoSmithKline plc,Interventional,90024,2004-07-13 00:00:00,No longer recruiting
null,2+,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Launched,L,Pulmonary artery hypertension,3510,PATENT PLUS,Evaluation of the Pharmacodynamic Effect of the Combination of Sildenafil and Riociguat on Blood Pressure and other Safety Parameters,Bayer AG,Interventional,69059,2010-08-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Phase 3 Clinical,C3,Persistent pulmonary hypertension of the newborn,3660,null,"Study Evaluating the Pharmacokinetics, Efficacy and Safety of Sildenafil in Neonates With Persistent Pulmonary Hypertension of the Newborn (PPHN) or Hypoxic Respiratory Failure and at Risk for PPHN",Pfizer Inc,Interventional,229687,null,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Respiratory failure,3914,null,"Study Evaluating the Pharmacokinetics, Efficacy and Safety of Sildenafil in Neonates With Persistent Pulmonary Hypertension of the Newborn (PPHN) or Hypoxic Respiratory Failure and at Risk for PPHN",Pfizer Inc,Interventional,229687,null,Status not specified
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,null,IV Sildenafil Persistent Pulmonary Hypertension Of The Newborn,Pfizer Inc,Interventional,77636,2012-03-31 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Brain hemorrhage,315,null,Safety Study of Sildenafil in Treatment of Cerebral Aneurysm Vasospasm,University of Nebraska,Interventional,50222,2009-07-31 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,null,Exercise Oscillatory Breathing and Sildenafil in Heart Failure,Universita degli Studi di Milano,Interventional,69355,2008-04-30 00:00:00,Completed
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Bioequivalence,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,null,null,null,"Open label, two-period, two-treatments, two-sequences, crossover, randomized, single dose study to assess the bioequivalence of two oral preparations containing 100 mg of chewable sildenafil (product of Protein Ltd) versus Viagra Jet (Pfizer SA de CV) in healthy fasted volunteers",Protein SA de CV,Interventional,213251,2014-10-29 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Female infertility,1080,null,Effect of Sildenafil Citrate on Endometrial Preparation and on the Outcome of the Frozen-thawed Embryo Transfer Cycles,Shahid Sadoughi University of Medical Sciences and Health Services,Interventional,130945,2009-03-20 00:00:00,No longer recruiting
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",Y,Y,PHASE NOT SPECIFIED,NS,Pregnancy disorder,411,null,Sildenafil Citrate Therapy for Oligohydramnios,Al Hayat National Hospital,Interventional,223021,2015-03-31 00:00:00,Recruiting
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,Launched,L,Erectile dysfunction,186,null,effect of vitamin D in treatment of men with sexual dysfunction,Mazandaran University of Medical Sciences,Interventional,302175,2015-06-26 00:00:00,No longer recruiting
null,3,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Hypertension,178,null,Nebivolol in the Supine Hypertension of Autonomic Failure,Vanderbilt University,Interventional,63288,2010-01-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Heart disease,626,REVERSE-DBMD,Revatio for Heart Disease in Duchenne Muscular Dystrophy and Becker Muscular Dystrophy,"Hugo W. Moser Research Institute at Kennedy Krieger, Inc, Kennedy Krieger Institute",Interventional,68513,2010-09-30 00:00:00,Terminated
null,2,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,Launched,L,Erectile dysfunction,186,null,"Efficacy of Oral Disintegrating Strip Sildenafil for the Treatment of Erectile Dysfunction: A Prospective, Randomized Trial",The Government Pharmaceutical Organization,Interventional,330049,2018-05-01 00:00:00,Not yet recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Pregnancy disorder,411,RIDSTRESS,Does Sildenafil Reduce The Risk Of Fetal Distress In Labor?,"Mater Health Services' Adult Hospital, Brisbane, Qld, Mater Medical Research Institute",Interventional,226604,2015-09-29 00:00:00,Recruiting
null,4,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Premature labor,455,null,Improving Right Ventricular Function in Young Adults Born Preterm,University of Wisconsin-Madison,Interventional,355703,2018-10-30 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Respiratory disorder,415,null,"A Double-Blind, Randomized, Controlled Study on the Benefit-Risk Profile of in the Treatment of at Term or Late Preterm Newborn Infants With Severe Respiratory Disorders and Pulmonary Hypertension",Ospedale Pediatrico Bambino Gesù (IRCCS),Interventional,170358,2007-10-04 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,SILICCON,"Evaluation of the Efficacy of Sildenafil on the Functional Capacity of Patients With Heart Failure With Preserved Ejection Fraction. A Randomized, Double-blind, Parallel-Group and Placebo-controlled Clinical Trial","Ministerio De Sanidad, Politica Social e Igualdad",Interventional,140560,2012-05-25 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Lymphoplasmacytic lymphoma,1743,null,Sildenafil Citrate in Waldenstrom's Macroglobulinemia,Dana-Farber Cancer Institute Inc,Interventional,31940,2005-09-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Cystic fibrosis,88,CF-FLOW,Blood Flow and Vascular Function in Cystic Fibrosis,"National Institute of Diabetes, Digestive and Kidney Diseases",Interventional,172016,2014-04-30 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,Pharmacokinetics,N,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,SiPaHCS,Sildenafil for Post-Capillary Pulmonary Hypertension in Patients Undergoing Cardiac Surgery,University of Turin,Interventional,82809,2012-02-29 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Pulmonary fibrosis,708,null,Sildenafil to Increase Exercise Capacity in Individuals With Idiopathic Pulmonary Fibrosis and Pulmonary Hypertension,National Heart Lung and Blood Institute,Interventional,23248,2004-11-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,sildenafil citrate,8713,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Persistent pulmonary hypertension of the newborn,3660,null,A study on effect of sildenafil on mortality of hypoxic babies with persistent pulmonary hypertension,JSS University,Interventional,321165,2015-06-20 00:00:00,Recruiting
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,SUPER-2,Study to Assess the Long-term Safety of Sildenafil Citrate in Patients With Pulmonary Arterial Hypertension,Pfizer Inc,Interventional,5688,2002-12-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,null,PDE5-Inhibition With Sildenafil in Chronic Heart Failure,Universita degli Studi di Milano,Interventional,4471,2004-01-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Cardiac failure,55,null,Sildenafil in HFpEF (Heart Failure With Preserved Ejection Fraction) and PH,University Medical Center Groningen,Interventional,97981,2011-10-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,sildenafil citrate,8713,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Congestive heart failure,1559,null,Study of Sildenafil in Advanced Heart Failure,Massachusetts General Hospital,Interventional,4598,2003-05-31 00:00:00,Completed
null,2,Phase Not Applicable,PNA,sildenafil citrate,8713,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Pulmonary hypertension,1867,SERAPH,"A randomized, double-blind trial to compare sildenafil with bosentan for the treatment of pulmonary hypertension",Pfizer Inc,Interventional,52396,2004-11-07 00:00:00,Status not specified</ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.AnalysisCsvResponse>