<?xml version="1.0" ?><ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.QueryCsvResponse xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns2="local" xsi:type="xs:base64Binary">Ancestry,ArmCount,DevStatus,DevStatusId,Drug,DrugId,Endpoint,EndpointReached,HasHealthyVolunteers,HighestDevStatusForInd,HighestDevStatusForIndId,Indication,IndicationId,ProtocolAcronym,ProtocolTitle,Sponsor,StudyType,TrialId,TrialStartDate,TrialStatus
null,1+,Phase 2 Clinical,C2,levofloxacin,3492,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Efficacy and Safety of Modified Anti-tubercular Regimens in Treatment of Tuberculosis in Patients With Underlying Compensated and Decompensated Chronic Liver Disease,"Institute of Liver and Biliary Sciences, India",Interventional,90788,2012-09-30 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,TB-TRUST,Refining MDR-TB Treatment Regimens for Ultra Short Therapy,Huashan Hospital,Interventional,372676,2019-05-01 00:00:00,Not yet recruiting
null,2+,Phase 4 Clinical,C4,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,2+,Phase 2/Phase 3 Clinical,C23,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,NEXT,An Open-label RCT to Evaluate a New Treatment Regimen for Patients With Multidrug-resistant Tuberculosis,University of Cape Town,Interventional,230529,2015-10-31 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,levofloxacin,3492,"Bioequivalence,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,"Study to assess the bioequivalence of two oral formulations of levofloxacin tablets: FLEVOX (SERRAL, SA de CV), versus TAVANIC (Sanofi-Aventis of Mexico, SA de CV), after administration of a single dose- 500 mg to healthy adult subjects of both genders, in the fasting state",Laboratorios Serral,Interventional,227604,null,No longer recruiting
null,2+,Phase 1 Clinical,C1,rifabutin,4229,"Safety,Efficacy,Pharmacokinetics",Y,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,TMC-207 +/- Rifabutin/Rifampin,National Institute of Allergy and Infectious Diseases,Interventional,76765,2011-10-21 00:00:00,Completed
null,1+,Phase 2b Clinical,C2B,rifabutin,4229,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,APT,Assessing PA-824 for Tuberculosis,Johns Hopkins Hospital,Interventional,213394,2015-04-29 00:00:00,Recruiting
null,5,Phase not specified,NS,rifabutin,4229,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,BBA,Brief Bactericidal Activity of Anti-Tuberculosis Drugs,Centers for Disease Control and Prevention,Interventional,210083,2015-11-30 00:00:00,Recruiting
null,2+,Phase not specified,NS,rifabutin,4229,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,USPHS-23,Intensive Pharmacokinetics of the Nelfinavir-Rifabutin Interaction in Patients With HIV-Related Tuberculosis Treated With a Rifabutin-Based Regimen,National Institutes of Health,Interventional,10648,2001-07-02 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity of a Candidate Tuberculosis Vaccine in Healthy HIV Negative Adolescents,GlaxoSmithKline plc,Interventional,59304,2009-12-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity of a Candidate Tuberculosis (TB) Vaccine Given to PPD-Negative Adults,GlaxoSmithKline plc,Interventional,23067,2004-01-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity Study of GSK Biologicals Tuberculosis Vaccines (692342) in Healthy Adults,GlaxoSmithKline plc,Interventional,11263,2008-04-30 00:00:00,Completed
null,2,Phase not specified,NS,sutezolid,11088,Pharmacokinetics,Y,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"PK and Bactericidal Activity in Sputum and Blood of PNU-100480 (Sutezolid, U-480) and its Major Metabolite (PNU-101603, U-603) in Patients with Pulmonary TB",Pfizer Inc,Interventional,128346,null,Completed
null,1,Phase 3 Clinical,C3,moxifloxacin,12978,Efficacy,N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Rifapentine-containing tuberculosis treatment shortening regimens (S31/A5349),Centers for Disease Control and Prevention,Interventional,347338,2018-07-20 00:00:00,Not yet recruiting
null,1+,Phase 4 Clinical,C4,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Multicenter, controlled clinical study of the safety, tolerability and efficacy of clofazimine in the treatment of drug-resistant tuberculosis",Beijing Chest Hospital,Interventional,328802,2009-12-01 00:00:00,No longer recruiting
null,2,Phase 4 Clinical,C4,moxifloxacin,12978,"Bioequivalence,Pharmacokinetics",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Open-label, randomized, crossover study of the comparative pharmacokinetics and bioequivalence of drugs moxifloxacin film-coated tablets 400 mg (JSC ""Synthesis"", Russia) and Avelox tablets, film-coated 400 mg (Bayer Pharma AG, Germany) in healthy volunteers on an empty stomach",Joint Stock Company Kurganskoye medicines and medical products" Synthesis,Interventional,255583,2016-03-04 00:00:00,Status not specified
null,1+,Phase 3 Clinical,C3,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Rifapentine-containing Tuberculosis Treatment Shortening Regimens,Centers for Disease Control and Prevention,Interventional,226815,2016-01-25 00:00:00,No longer recruiting
null,5,Phase 1/Phase 2 Clinical,C12,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,TBRU 10,"Early Bactericidal Activity of Linezolid, Gatifloxacin, Levofloxacin, Isoniazid (INH) and Moxifloxacin in HIV Negative Adults With Initial Episodes of Sputum Smear-Positive Pulmonary Tuberculosis",National Institute of Allergy and Infectious Diseases,Interventional,10869,2004-02-29 00:00:00,Completed
null,1+,Phase 1 Clinical,C1,pretomanid,13323,"Safety,Pharmacokinetics",Y,Y,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,"Evaluating the Safety and Drug Interaction of PA-824, an Investigational Tuberculosis Medication, Together With Efavirenz, Ritonavir-Boosted Lopinavir or Rifampin",National Institute of Allergy and Infectious Diseases,Interventional,86312,2012-05-31 00:00:00,Completed
null,2+,Phase 2 Clinical,C2,pretomanid,13323,"Safety,Efficacy",Y,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,"Evaluation of 8 Weeks of Treatment With the Combination of Moxifloxacin, PA-824 and Pyrazinamide in Patients With Drug Sensitive and Multi Drug-Resistant Pulmonary Tuberculosis (TB)",TB Alliance,Interventional,83489,2012-03-31 00:00:00,Completed
null,3+,Phase 2 Clinical,C2,pretomanid,13323,"Safety,Efficacy,Pharmacokinetics",Y,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis,TB Alliance,Interventional,59043,2009-08-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,pretomanid,13323,"Safety,Pharmacokinetics",N,Y,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,"Pharmacokinetics and Safety of PA-824 in Subjects With Mild, Moderate, and Severe Hepatic Impairment to Matched, Non-Hepatically Impaired Subjects",National Institute of Allergy and Infectious Diseases,Interventional,227410,2017-12-11 00:00:00,Recruiting
null,2+,Phase 3 Clinical,C3,pretomanid,13323,"Safety,Efficacy,Pharmacokinetics",Y,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,A Phase III Study Assessing the Safety and Efficacy of Bedaquiline Plus PA-824 Plus Linezolid in Subjects With Drug-Resistant Pulmonary Tuberculosis,TB Alliance,Interventional,219499,2015-03-31 00:00:00,No longer recruiting
null,1,Phase 3 Clinical,C3,rifapentine,15102,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Efficacy of Weekly Rifapentine and Isoniazid for Tuberculosis Prevention,Huashan Hospital,Interventional,228560,2015-03-31 00:00:00,Recruiting
null,1,Phase not specified,NS,rifapentine,15102,Safety,Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A Non-randomized, Uncontrolled, Single-group Study of Short-course Isoniazid plus Rifapentine Directly Observed Therapy for Latent Tuberculosis in Solid-organ Transplant Candidates",University of Washington,Interventional,159244,null,Completed
null,5+,Phase 3 Clinical,C3,delamanid,16545,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,endTB-Q,Evaluating Newly Approved Drugs in Combination Regimens for Multidrug-Resistant TB With Fluoroquinolone Resistance,Médecins Sans Frontières France,Interventional,375499,2019-06-30 00:00:00,Not yet recruiting
null,2,Phase 3 Clinical,C3,delamanid,16545,"Safety,Efficacy",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,PHOENIx MDR-TB,Protecting Households On Exposure to Newly Diagnosed Index Multidrug-Resistant Tuberculosis Patients,National Institute of Allergy and Infectious Diseases,Interventional,344335,2019-06-03 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,pascolizumab,17132,"Safety,Efficacy",N,N,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,Safety and Efficacy of Blocking IL-4 With Pascolizumab in Patients Receiving Standard Therapy for Pulmonary Tuberculosis,"National University Hospital (Singapore) Pte Ltd, Syneos Health Inc",Interventional,89066,2012-06-30 00:00:00,No longer recruiting
null,1,Phase 1a Clinical,C1A,SQ-109,31010,"Safety,Pharmacokinetics",Y,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"A phase Ia, Placebo-controlled, Dose-Escalating study to test the Safety, Tolerability and Pharmacokinetics of Single dose of SQ-109 in 62 Healthy Subjects",Sequella Inc,Interventional,8945,2006-09-30 04:46:54,Completed
null,1+,Phase 2 Clinical,C2,SQ-109,31010,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Evaluation of SQ-109, High-dose Rifampicin, and Moxifloxacin in Adults With Smear-positive Pulmonary TB in a MAMS Design",Ludwig-Maximilians University of Munich,Interventional,109063,2013-04-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,bedaquiline,51310,"Efficacy,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,PANDEMIC,"A study on the uptake, distribution and excretion of bedaquiline, a medicine against tuberculosis, in people with type 2 diabetes",University Medical Center Groningen,Interventional,331962,2018-06-01 00:00:00,Not yet recruiting
null,1+,Phase 2/Phase 3 Clinical,C23,bedaquiline,51310,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,TB-PRACTECAL,Pragmatic Clinical Trial for a More Effective Concise and Less Toxic MDR-TB Treatment Regimen(s),Medecins Sans Frontieres,Interventional,244304,2017-01-31 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy,Pharmacokinetics",Y,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,Safety Study of Tuberculosis Vaccines AERAS-402 and MVA-85A,University of Oxford,Interventional,91280,2012-09-30 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",Y,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"Safety of Tuberculosis Vaccine, MVA-85A, Administered by the Intramuscular Route and the Intradermal Route",University of Oxford,Interventional,69212,2010-01-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",Y,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"A Study of MVA-85A, in Asymptomatic Volunteers Infected With TB, HIV or Both",University of Oxford,Interventional,14589,2007-07-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"A Study of two Doses of a New TB Vaccine, MVA85A, in Healthy Volunteers Previously Vaccinated With BCG",University of Oxford,Interventional,10944,2005-10-31 00:00:00,Completed
null,1,Phase 1b Clinical,C1B,VPM-1002,55569,"Safety,Efficacy,Pharmacokinetics",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Dose-Escalation Study on Safety and Immunogenicity of VPM-1-002 in Comparison to BCG in Healthy Volunteers in South Africa,Vakzine Projekt Management GmbH,Interventional,65984,2010-04-30 00:00:00,Completed
European Ancestry,1,Phase 1 Clinical,C1,VPM-1002,55569,"Safety,Efficacy",Y,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Dose-Escalation Study on Safety and Immunogenicity of VPM-1-002 in Comparison With BCG in Healthy Male Volunteers,Vakzine Projekt Management GmbH,Interventional,48943,2008-09-30 00:00:00,Completed
null,1,Phase 2a Clinical,C2A,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Phase IIa Clinical Trial of ID93 + GLA-SE Vaccine in BCG-vaccinated Healthy Healthcare Workers,Quratis Co Ltd,Interventional,366580,2018-05-31 00:00:00,No longer recruiting
null,1,Phase 1 Clinical,C1,GSK-3036656,70581,"Safety,Efficacy,Pharmacokinetics",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,First Time in Human (FTIH) Safety and Pharmacokinetics (PK) Study of GSK-3036656 in Healthy Subjects,GlaxoSmithKline plc,Interventional,290705,2017-04-02 00:00:00,Completed
null,1,Phase 1 Clinical,C1,BTZ-043,70901,"Safety,Pharmacokinetics",N,Y,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,A Single Ascending Dose Study Of BTZ-043,Ludwig-Maximilians University of Munich,Interventional,346718,2018-06-07 00:00:00,Completed
null,1,Phase 2 Clinical,C2,SSI H56-IC31,74849,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,A Phase II Study of H56:IC31 in Healthy Adolescents,"Aeras, Aeras Global TB Vaccine Foundation",Interventional,310653,2018-06-30 00:00:00,Terminated
null,1,Phase 1 Clinical,C1,SSI H56-IC31,74849,"Safety,Efficacy",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,A Phase I Study of Safety and Immunogenicity of AERAS-456 in HIV-Negative Adults Treated for Drug-susceptible Pulmonary TB,Aeras,Interventional,223291,2014-11-21 00:00:00,Completed
Asian Ancestry,1,Phase 1 Clinical,C1,delpazolid,76307,"Safety,Pharmacokinetics",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"Phase I study Evaluating the Safety, Tolerability and Pharmacokinetic Characteristics of RMX-2001","Nome West (Shanghai) Pharmaceutical Technology Co., Ltd",Interventional,381962,null,Not yet recruiting
null,1,Phase not specified,NS,Perchlozone,87251,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"An Open, Prospective, Comparative, Randomized, Controlled Clinical Trial Of Efficacy And Safety Perhlozone Capsules (JSC 'Pharmasyntez', Russia), Used In Doses Of 9.5 And 12.5 mg/kg Night In The Complex Treatment Of Pulmonary Tuberculosis",Pharmasyntez,Interventional,169098,2013-01-28 00:00:00,Status not specified
null,1,Phase 1b Clinical,C1B,macozinone,90085,"Safety,Bioavailability,Pharmacokinetics",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"Study to Evaluate the Safety, Tolerability and Pharmacokinetics of PBTZ-169 in Multiple Dosing",Innovative Medicines for Tuberculosis,Interventional,363587,2019-02-21 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,macozinone,90085,"Safety,Pharmacokinetics",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Phase I Study of PBTZ-169,Nearmedic Plus,Interventional,286724,2016-01-31 00:00:00,Completed
null,1+,Phase 2/Phase 3 Clinical,C23,"clofazimine (oral, tuberculosis), Novartis",91861,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,TB-PRACTECAL,Pragmatic Clinical Trial for a More Effective Concise and Less Toxic MDR-TB Treatment Regimen(s),Medecins Sans Frontieres,Interventional,244304,2017-01-31 00:00:00,Recruiting
null,2,Phase 2b Clinical,C2B,ESAT-6CFP10,95442,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Phase IIb Clinical Study of Recombinant Mycobacterium Tuberculosis Allergen ESAT-6-CFP-10,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,Interventional,219931,2014-11-30 00:00:00,Completed
null,4+,Phase 1/Phase 2 Clinical,C12,OPC-167832,104447,"Safety,Efficacy,Pharmacokinetics",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,A Phase I/II Trial of Multiple Oral Doses of OPC-167832 for Uncomplicated Pulmonary Tuberculosis,Otsuka Pharmaceutical Development and Commercialization Inc,Interventional,353987,2018-10-25 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,tenofovir disoproxil fumarate,14493,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,REFLATE TB,Efficacy and Safety of Two Raltegravir Doses in Naive HIV-1-Infected Patients Receiving Rifampin for Active Tuberculosis,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,40948,2009-07-31 00:00:00,Completed
null,1+,Phase 1/Phase 2 Clinical,C12,tenofovir disoproxil fumarate,14493,"Safety,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,IMPAACT4TB,"Safety, Tolerability DDI Short Course Treatment of LTBI Infection With High-dose Rifapentine Isoniazid in HIV+ Patients",Aurum Institute,Interventional,329251,2018-01-18 00:00:00,Recruiting
null,2+,Phase 3 Clinical,C3,lopinavir + ritonavir,14681,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TEMPRANO,Early Antiretroviral Treatment and/or Early Isoniazid Prophylaxis Against Tuberculosis in HIV-Infected Adults,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,195741,2008-03-31 00:00:00,Completed
null,2,Phase not specified,NS,lopinavir + ritonavir,14681,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"An Open-Label, Sequential Non-Randomized Pharmacokinetics Study Comparing Lopinavir Plasma Exposure When Given as Lopinavir Superboosted With Ritonavir (1 : 1 Ratio) in the Presence of Rifampicin or Lopinavir Boosted With Ritonavir (4 : 1 Ratio) in the Absence of Rifampicin in HIV and TB Co-Infected Children in South Africa",Drugs for Neglected Diseases Initiative,Interventional,142540,2012-12-01 00:00:00,Recruiting
null,2+,Phase 4 Clinical,C4,nelfinavir,8255,Pharmacokinetics,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TBTC-23B,Intensive PK of the Nelfinavir Rifabutin Interaction in Patients With HIV-TB,Centers for Disease Control and Prevention,Interventional,10656,2000-02-29 00:00:00,Completed
Asian Ancestry,1+,Phase 2 Clinical,C2,stavudine,4481,"Safety,Efficacy,Bioavailability,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,11187,2009-02-28 00:00:00,Completed
null,2+,Phase not specified,NS,stavudine,4481,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A prospective, open-label, pilot study to evaluate the pharmacokinetics (PK)/safety/efficacy of an adjusted dose of indinavir/ritonavir (IDV/r) 600/100 mg plus two nucleoside reverse transcriptase inhibitors (NRTIs) in HIV/TB-coinfected Thais receiving rifampicin-based anti-TB treatment",Thai Red Cross AIDS Research Centre,Interventional,100728,2012-01-17 00:00:00,Status not specified
null,1,Phase 4 Clinical,C4,"lamivudine + abacavir + zidovudine, GSK",26574,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,THIRST,Tuberculosis and HIV Immune Reconstitution Syndrome Trial (THIRST),Duke University,Interventional,47398,2004-06-30 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,metformin hydrochloride,6050,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Effect of metformin in treatment of non-diabetic pulmonary tuberculosis patients,Veer Surendra Sai Institute of Medical Sciences and Research,Interventional,372893,2019-03-07 00:00:00,Not yet recruiting
null,6,Phase 2 Clinical,C2,everolimus,13340,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TBHDT,TB Host Directed Therapy,Aurum Institute,Interventional,279898,2016-11-30 00:00:00,No longer recruiting
null,2+,Phase 3 Clinical,C3,lamivudine,3474,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Efficacy of Thrice Weekly Directly Observed Treatment, Short-course (DOTS) in HIV-associated Tuberculosis",All India Institute of Medical Sciences,Interventional,161275,2006-04-30 00:00:00,Completed
null,4,Phase 3 Clinical,C3,lamivudine,3474,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,N2R,Efavirenz-Based Versus Nevirapine-Based Antiretroviral Therapy Among HIV-Infected Patients Receiving Rifampin,Bamrasnaradura Infectious Diseases Institute,Interventional,10947,2007-01-31 00:00:00,Completed
null,2+,Phase not specified,NS,lamivudine,3474,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A prospective, open-label, pilot study to evaluate the pharmacokinetics (PK)/safety/efficacy of an adjusted dose of indinavir/ritonavir (IDV/r) 600/100 mg plus two nucleoside reverse transcriptase inhibitors (NRTIs) in HIV/TB-coinfected Thais receiving rifampicin-based anti-TB treatment",Thai Red Cross AIDS Research Centre,Interventional,100728,2012-01-17 00:00:00,Status not specified
null,3,Phase 1 Clinical,C1,simeprevir,39069,"Safety,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"TMC-435350-TiDP16-C105:  Phase I, Three-Way Crossover, Drug-Drug Interaction Between TMC-435350 and Rifampin After Multiple Dosing",Janssen R&D (Ireland),Interventional,25800,2008-06-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,simvastatin,44313,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Simvastatin and sputum conversion in pulmonary tuberculosis: a double-blinded, randomized, controlled trial",Khonkaen Hospital,Interventional,330023,2018-04-01 00:00:00,Not yet recruiting
null,1+,Phase 2 Clinical,C2,verapamil,44437,"Safety,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Verapamil Dose-finding Study in Adult Patients with Tuberculosis,Indian Government Department of Biotechnology,Interventional,261260,2016-06-15 00:00:00,Not yet recruiting
null,4,Phase 4 Clinical,C4,emtricitabine,4728,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,STRIDE,Immediate Versus Deferred Start of Anti-HIV Therapy in HIV Infected Adults Being Treated for Tuberculosis,AIDS Clinical Trials Group,Interventional,10681,2006-08-31 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,NeisVac-C,10774,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,BAM,A Study of the Interaction Between BCG And MenC Immunization,University of Oxford,Interventional,162886,2014-06-20 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,efavirenz,10172,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Efficacy of Thrice Weekly Directly Observed Treatment, Short-course (DOTS) in HIV-associated Tuberculosis",All India Institute of Medical Sciences,Interventional,161275,2006-04-30 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,efavirenz,10172,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,"NVP",Efficacy and Safety of Concomitant Use of Nevirapine and Rifampicin With HIV-TB,All India Institute of Medical Sciences,Interventional,114300,2007-06-30 00:00:00,Completed
null,2+,Phase not specified,NS,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,USPHS-23,Intensive Pharmacokinetics of the Nelfinavir-Rifabutin Interaction in Patients With HIV-Related Tuberculosis Treated With a Rifabutin-Based Regimen,National Institutes of Health,Interventional,10648,2001-07-02 00:00:00,Recruiting
null,4+,Phase 1 Clinical,C1,celecoxib,12135,"Efficacy,Pharmacokinetics,Pharmacodynamics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Evaluating Celecoxib Activity in Mycobacterium Tuberculosis: A Whole Blood Bactericidal Activity Study in Healthy Volunteers,National University Hospital (Singapore) Pte Ltd,Interventional,245694,2015-11-30 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,nevirapine,3700,"Safety,Bioavailability,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV Co-Infection in Vietnam,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,11188,2010-06-30 00:00:00,Completed
null,1+,Phase 2/Phase 3 Clinical,C23,nevirapine,3700,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,CARINEMO,Comparison of Nevirapine and Efavirenz for the Treatment of HIV-TB Co-infected Patients,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,10948,2007-12-31 00:00:00,Completed
null,3+,Phase 2 Clinical,C2,Prevnar,4144,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity Study of a Candidate Tuberculosis Vaccine in Healthy Infants,GlaxoSmithKline plc,Interventional,65639,2010-07-31 00:00:00,Completed
null,3+,Phase 2/Phase 3 Clinical,C23,atorvastatin,2807,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Paradoxical Tuberculosis Immune Reconstitution Inflammatory Syndrome (TB-IRIS) Treatment Trial,University of Minnesota - Clinical and Translational Science Institute,Interventional,199754,2014-01-31 00:00:00,Terminated
null,1+,Phase not specified,NS,losartan,3517,Pharmacokinetics,Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,The Influence of Rifampicin Discontinuation on Rifampicin-Induced Cytochrome P450 Enzyme Activity,Hamamatsu University School of Medicine,Interventional,122291,2010-07-01 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,ZeNiX,"Safety and Efficacy of Various Doses and Treatment Durations of Linezolid Plus Bedaquiline and Pretomanid in Participants With Pulmonary TB, XDR-TB, Pre-XDR-TB or Non-responsive/Intolerant MDR-TB",TB Alliance,Interventional,293734,2017-10-31 00:00:00,Recruiting
null,2+,Phase 3 Clinical,C3,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,Médecins Sans Frontières France,Interventional,259506,2016-12-31 00:00:00,Recruiting
null,3+,Phase 2 Clinical,C2,dolutegravir,59062,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Evaluating the Safety, Tolerability and Pharmacokinetics of Bedaquiline and Delamanid, Alone and in Combination, For Drug-Resistant Pulmonary Tuberculosis",National Institute of Allergy and Infectious Diseases,Interventional,243619,2016-08-31 00:00:00,No longer recruiting
null,1+,Phase 3b Clinical,C3B,dolutegravir,59062,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,INSPIRING,Open-Label Study of Dolutegravir (DTG) or Efavirenz (EFV) for Human Immunodeficiency Virus (HIV)-Tuberculosis (TB) Co-infection,ViiV Healthcare Ltd,Interventional,201302,2015-01-23 00:00:00,No longer recruiting
null,1+,Phase not specified,NS,aldesleukin,6306,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A randomized, placebo-controlled clinical trial to evaluate the safety and efficacy of IL-2 for the treatment of patients with pulmonary tuberculosis",Case Western Reserve University,Interventional,73321,2002-11-21 00:00:00,Status not specified
null,1+,Phase 4 Clinical,C4,Infanrix,6229,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,BAM,A Study of the Interaction Between BCG And MenC Immunization,University of Oxford,Interventional,162886,2014-06-20 00:00:00,Completed
Asian Ancestry,1+,Phase not specified,NS,zidovudine,44316,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Acquired Immunodeficiency Syndrome (AIDS) and Tuberculosis (TB) Co-Infection Treatment Strategies Study of China,Shanghai Public Health Clinical Center,Interventional,76946,2009-02-28 00:00:00,Recruiting
null,2+,Phase 3 Clinical,C3,zidovudine,44316,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Efficacy of Thrice Weekly Directly Observed Treatment, Short-course (DOTS) in HIV-associated Tuberculosis",All India Institute of Medical Sciences,Interventional,161275,2006-04-30 00:00:00,Completed
null,1,Phase 1/Phase 2 Clinical,C12,indinavir,5321,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,The Pharmacokinetics and Safety of indinavir/ritonavir With NRTIs in HIV/TB co-Infected Patients Receiving Rifampicin,The HIV Netherlands Australia Thailand Research Collaboration,Interventional,10871,2006-12-31 00:00:00,Completed
null,2+,Phase 2 Clinical,C2,faropenem,4492,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Phase II Trial to Evaluate the Early Bactericidal Activity, Safety and Tolerability of Meropenem Plus Amoxycillin/CA and Faropenem Plus Amoxycillin/CA in Adult Patients With Newly Diagnosed Pulmonary Tuberculosis",Task Foundation NPC,Interventional,220739,2014-09-30 00:00:00,Completed
null,3+,Phase 2 Clinical,C2,"meningococcal C/CRM-197 conjugate vaccine, Chiron",3612,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity Study of a Candidate Tuberculosis Vaccine in Healthy Infants,GlaxoSmithKline plc,Interventional,65639,2010-07-31 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,Priorix,11457,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,BAM,A Study of the Interaction Between BCG And MenC Immunization,University of Oxford,Interventional,162886,2014-06-20 00:00:00,Completed
null,1,Phase 1/Phase 2 Clinical,C12,ritonavir,7310,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,The Pharmacokinetics and Safety of indinavir/ritonavir With NRTIs in HIV/TB co-Infected Patients Receiving Rifampicin,The HIV Netherlands Australia Thailand Research Collaboration,Interventional,10871,2006-12-31 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,DAZZLE,"Efficacy and Tolerability of Delamanid, Linezolid, Pyrazinamide and Levofloxacin",Boston University,Interventional,280651,2017-08-31 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,TB-CHAMP trial,Tuberculosis child multidrug-resistant preventive therapy,University of Stellenbosch,Interventional,259562,2016-01-01 00:00:00,No longer recruiting
null,2+,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,Médecins Sans Frontières France,Interventional,259506,2016-12-31 00:00:00,Recruiting
null,1+,Phase 2b Clinical,C2B,rifabutin,4229,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Rifampin-Based Tuberculosis Treatment Versus Rifabutin-Based Tuberculosis Treatment in Persons With HIV,AIDS Clinical Trials Group,Interventional,87585,2013-07-13 00:00:00,Terminated
null,2+,Phase 4 Clinical,C4,rifabutin,4229,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
Asian Ancestry,1+,Phase 2 Clinical,C2,rifabutin,4229,"Safety,Efficacy,Bioavailability,Pharmacokinetics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,11187,2009-02-28 00:00:00,Completed
null,1,Phase 2/Phase 3 Clinical,C23,rifabutin,4229,"Safety,Efficacy,Pharmacokinetics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,TBTC-23A,Pharmacokinetics of Intermittent Isoniazid and Rifabutin in HIV-TB,Centers for Disease Control and Prevention,Interventional,10652,1999-07-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity of a Candidate Tuberculosis (TB) Vaccine in Adults With Tuberculosis (TB) Disease,GlaxoSmithKline plc,Interventional,80383,2011-11-14 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,IMM-201,11115,"Safety,Efficacy",Y,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,A phase III study to evaluate the safety and efficacy of SRL-172 for the prevention of tuberculosis,Silence Therapeutics plc,Interventional,20002,1997-11-30 00:00:00,Completed
null,1,Phase not specified,NS,IMM-201,11115,Efficacy,Y,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"A dose-finding, multicenter, open-label study to investigate the efficacy of SRL-172 vaccine in the treatment of multidrug-resistant pulmonary tuberculosis",Royal Free and University College Medical School,Interventional,110339,2001-01-09 00:00:00,Status not specified
null,2+,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis With,TB Alliance,Interventional,71107,2010-10-31 00:00:00,Completed
null,2+,Phase 2a Clinical,C2A,moxifloxacin,12978,"Safety,Pharmacokinetics,Pharmacodynamics",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Intensified Treatment Regimens for TB Meningitis: PK, PD and Tolerability Study",Universitas Padjadjaran,Interventional,67996,2010-10-31 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,The Effect of 18-month Regimen Containing Six Anti-tuberculosis Drugs for Patients With MDR-TB,Beijing Chest Hospital,Interventional,369109,2019-03-08 00:00:00,Recruiting
null,2+,Phase 3 Clinical,C3,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,Médecins Sans Frontières France,Interventional,259506,2016-12-31 00:00:00,Recruiting
null,2,Phase not specified,NS,moxifloxacin,12978,"Bioequivalence,Pharmacokinetics",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Open, randomized, crossover study of comparative pharmacokinetics and bioequivalence of drugs Moxifloxacin tablets, film-coated, 400 mg (JSC ""Pharmasyntez"", Russia) and Avelox tablets, film-coated, 400 mg (""Bayer Pharma AG"", Germany)",Pharmasyntez,Interventional,247038,2015-11-23 00:00:00,Status not specified
null,1+,Phase 3 Clinical,C3,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,STAND,Shortening Treatment by Advancing Novel Drugs,TB Alliance,Interventional,221844,2015-02-28 00:00:00,Completed
null,5,Phase not specified,NS,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,BBA,Brief Bactericidal Activity of Anti-Tuberculosis Drugs,Centers for Disease Control and Prevention,Interventional,210083,2015-11-30 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Pharmacokinetic Issues of Moxifloxacin Plus Rifapentine,National Institute of Allergy and Infectious Diseases,Interventional,10943,2007-06-30 00:00:00,Terminated
null,1+,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Evaluation of SQ-109, High-dose Rifampicin, and Moxifloxacin in Adults With Smear-positive Pulmonary TB in a MAMS Design",Ludwig-Maximilians University of Munich,Interventional,109063,2013-04-30 00:00:00,Completed
null,5,Phase 2 Clinical,C2,moxifloxacin,12978,Pharmacokinetics,Y,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,TBTC-27/28 PK,TBTC Study 27/28 PK: Moxifloxacin Pharmacokinetics During TB Treatment,Centers for Disease Control and Prevention,Interventional,10847,2004-07-31 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,TBTC-27,TBTC Study 27: Moxifloxacin versus Ethambutol for TB Treatment,Centers for Disease Control and Prevention,Interventional,10684,2003-07-31 00:00:00,Completed
null,2+,Phase 4 Clinical,C4,pretomanid,13323,"Safety,Efficacy",N,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,1+,Phase 2/Phase 3 Clinical,C23,pretomanid,13323,"Safety,Efficacy",N,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,TB-PRACTECAL,Pragmatic Clinical Trial for a More Effective Concise and Less Toxic MDR-TB Treatment Regimen(s),Medecins Sans Frontieres,Interventional,244304,2017-01-31 00:00:00,Recruiting
null,1+,Phase 1 Clinical,C1,rifapentine,15102,"Safety,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,DORIIS,"Doravirine, Rifapentine and Isoniazid Interaction",Thomas Jefferson University,Interventional,374387,2019-04-30 00:00:00,Recruiting
null,1,Phase 1/Phase 2 Clinical,C12,rifapentine,15102,"Safety,Efficacy,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,Tuberculosis Clinical Trials Consortium Study 35,Centers for Disease Control and Prevention,Interventional,359122,2019-09-30 00:00:00,Not yet recruiting
null,2,Phase 2 Clinical,C2,rifapentine,15102,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A 9-Month Isoniazid versus 3-Month Isoniazid plus Rifapentine for Treatment of Tuberculosis Infection in Rheumatic Patients: a Randomized, Controlled Trial",Peking Union Medical College Hospital,Interventional,352748,2017-09-01 00:00:00,Not yet recruiting
null,2,Phase 4 Clinical,C4,rifapentine,15102,"Safety,Efficacy",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,DOT-LTBI,Treatment of Latent Tuberculosis in Socially Marginalised Citizens,Aarhus University Hospital,Interventional,310930,2017-10-27 00:00:00,Recruiting
null,2,Phase 3 Clinical,C3,rifapentine,15102,"Safety,Efficacy",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,WHIP3TB,Evaluation of the Effect of 3HP versus Periodic 3HP versus 6H in HIV-Positive Individuals,Aurum Institute,Interventional,281055,2016-11-30 00:00:00,No longer recruiting
null,2,Phase 2 Clinical,C2,rifapentine,15102,Bioavailability,Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,A phase II trial of rifapentine in comparision with rifampicin to evaluate bioavailability in treatment of patients with pulmonary tuberculosis,Aventis Pharma AG,Interventional,15342,1987-12-31 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,rifapentine,15102,"Safety,Efficacy,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,Pharmacokinetic Issues of Moxifloxacin Plus Rifapentine,National Institute of Allergy and Infectious Diseases,Interventional,10943,2007-06-30 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,rifapentine,15102,Pharmacokinetics,Y,N,Launched,L,Mycobacterium tuberculosis infection,221,TBTC-25,Intensive Pharmacokinetic Study of Three Doses of Rifapentine and 25-Desacetyl Rifapentine,Centers for Disease Control and Prevention,Interventional,10655,2000-03-31 00:00:00,Completed
null,5,Phase 3 Clinical,C3,delamanid,16545,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Safety and Efficacy Trial of Delamanid for 6 Months in Participants With Multidrug Resistant Tuberculosis,Otsuka Pharmaceutical Development and Commercialization Inc,Interventional,80386,2011-09-02 00:00:00,Completed
null,1,Phase 2 Clinical,C2,delamanid,16545,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,A phase II trial to evaluate delamanid in pediatric patients with multi-drug resistance tuberculosis,Otsuka Holdings Co Ltd,Interventional,341287,null,Status not specified
null,2+,Phase 3 Clinical,C3,delamanid,16545,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,DAZZLE,"Efficacy and Tolerability of Delamanid, Linezolid, Pyrazinamide and Levofloxacin",Boston University,Interventional,280651,2017-08-31 00:00:00,Terminated
null,2,Phase 2b Clinical,C2B,delamanid,16545,"Safety,Efficacy,Pharmacokinetics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A Placebo-Controlled, Phase II Trial to Evaluate OPC-67683 in Patients With Pulmonary Sputum Culture-Positive, Multidrug-Resistant Tuberculosis (TB)",Otsuka Pharmaceutical Development and Commercialization Inc,Interventional,15754,2008-04-30 00:00:00,Completed
African Ancestry,1,Phase 1 Clinical,C1,pafuramidine,16755,Safety,Y,Y,Outlicensed,OL,Mycobacterium tuberculosis infection,221,null,"Randomized, double-blind, phase I safety and tolerability study of pafuramidine maleate (DB-289) in healthy subjects",Immtech Pharmaceuticals Inc,Interventional,17432,2007-11-30 00:00:00,Terminated
null,1,Phase 1 Clinical,C1,SQ-109,31010,"Safety,Pharmacokinetics",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Phase Ic Study of Safety and PK of SQ-109 300 mg Daily,National Institute of Allergy and Infectious Diseases,Interventional,77682,2010-11-30 00:00:00,Completed
null,2,Phase 1 Clinical,C1,H4:IC31,48499,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"A Study for Safety and Immunogenicity of BCG and AERAS-404 in HIV-negative, TB-negative, BCG-naive Adults",Aeras Global TB Vaccine Foundation,Interventional,227111,2011-01-31 00:00:00,Completed
null,3,Phase 1b Clinical,C1B,H4:IC31,48499,"Safety,Efficacy,Pharmacodynamics",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,A-042,"Phase Ib, Safety and Immunogenicity Trial of BCG Revaccination, H4:IC31 and H56:IC31 in Healthy, HIV-1-Uninfected Adolescents",Aeras,Interventional,223463,2015-05-31 00:00:00,Completed
null,3,Phase 2a Clinical,C2A,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,TMC207-C202: Study to Evaluate Bactericidal Activity of Multiple Oral Doses of TMC207 in Subjects With Sputum-Smear Positive Tuberculosis,Janssen R&D (Ireland),Interventional,9315,2005-05-31 00:00:00,Completed
null,2+,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis With,TB Alliance,Interventional,71107,2010-10-31 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,bedaquiline,51310,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,DRAMATIC,"Efficacy and Tolerability of Bedaquiline, Delamanid, Levofloxacin, Linezolid, and Clofazimine for Treatment of Patients With MDR-TB",Boston University,Interventional,368916,2020-01-31 00:00:00,Terminated
null,1+,Phase 3 Clinical,C3,bedaquiline,51310,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,ZeNiX,"Safety and Efficacy of Various Doses and Treatment Durations of Linezolid Plus Bedaquiline and Pretomanid in Participants With Pulmonary TB, XDR-TB, Pre-XDR-TB or Non-responsive/Intolerant MDR-TB",TB Alliance,Interventional,293734,2017-10-31 00:00:00,Recruiting
null,1+,Phase 2a Clinical,C2A,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"An Open-Label Study to Evaluate the Extended Early Bactericidal Activity, Safety, Tolerability and Pharmacokinetics of Multiple Doses (md) of TMC-207 Oral Solution (Os) and Isoniazid (JH), TMC-207 Os and Pyrazinamide (JZ), TMC-207 Os and Rifampin (JR) or TMC-207 Os and Isoniazid and Pyrazinamide (JHZ), Compared to the three Principle Drugs of Standard Anti-Tuberculosis Treatment (HRZ) in Treatment-Naive Subjects With Sputum-Smear Positive Pulmonary Tuberculosis",Janssen R&D (Ireland),Interventional,131253,2005-06-25 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"An Open-Label Study to Evaluate the Effects on Mycobacterium Tuberculosis, Safety, Tolerability and Pharmacokinetics of Single Doses of R-207910, in Treatment Naive Patients With Mycobacterium Tuberculosis Infection","Janssen Diagnostics BVBA, Johnson & Johnson",Interventional,129536,2004-10-18 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,N,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,A Phase I Study of the Safety and Immunogenicity of a Recombinant MVA-85A Vaccine in Healthy Volunteers,University of Oxford,Interventional,9320,2002-09-30 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",Y,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"The Safety and Immunogenicity of a TB Vaccine; MVA85A, in Healthy Volunteers Who Are Infected With HIV",University of Oxford,Interventional,10868,2006-11-30 00:00:00,Completed
null,2,Phase 3 Clinical,C3,VPM-1002,55569,"Safety,Efficacy",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,To Study Effect of Two Vaccines in Preventing Spread of Tuberculosis in Persons Living With New Tuberculosis Patients,Indian Council of Medical Research,Interventional,366261,2019-01-25 00:00:00,Not yet recruiting
null,1,Phase 2 Clinical,C2,RUTI,57308,"Safety,Efficacy",Y,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,RUTISAPH2,"Clinical Trial to Investigate the Safety, Tolerability, and Immunogenicity of the Novel Antituberculous Vaccine RUTI Following 1 Month of Isoniazid Treatment in Subjects With Latent Tuberculosis Infection",Archivel Farma SL,Interventional,67014,2010-06-30 00:00:00,Completed
null,2+,Phase 4 Clinical,C4,"rifampicin + isoniazid + piperine (fixed dose combination, tuberculosis), Cadila Pharmaceuticals",69440,Efficacy,N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Combination of Two Drugs in Tuberculosis Treatment,SRM University,Interventional,224091,null,Recruiting
null,1,Phase 1 Clinical,C1,TBA-354,71742,"Safety,Efficacy",N,Y,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,"A Multiple Ascending Dose Study With a Dose Formulation Comparison Cohort to Evaluate the Safety, Tolerability, and Pharmacokinetics of TBA-354 in Healthy Adult Subjects",TB Alliance,Interventional,246089,2015-11-30 00:00:00,Terminated
null,1,Phase 1 Clinical,C1,TBA-354,71742,"Safety,Pharmacokinetics",N,Y,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,"A Phase I Study to Evaluate the Safety, Tolerability and Pharmacokinetics of TBA-354 in Healthy Adult Subjects",TB Alliance,Interventional,215600,2015-01-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,SSI H56-IC31,74849,"Safety,Efficacy",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Study to Evaluate H56:IC31 in Preventing Rate of TB Recurrence,Aeras,Interventional,337957,2019-01-31 00:00:00,Recruiting
null,1,Phase Not Applicable,PNA,delpazolid,76307,Efficacy,N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,A clinical trial of RMX-2001 in multidrug-resistant tuberculosis (MDR-TB) in China,"HaiHe Pharmaceuticals Co Ltd, LegoChem Bioscience Inc",Interventional,370697,null,Not yet recruiting
Asian Ancestry,3+,Phase 2 Clinical,C2,delpazolid,76307,"Safety,Efficacy,Pharmacokinetics",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"A Phase II Clinical Study of LCB01-0371 to Evaluate the EBA, Safety and PK",LegoChem Bioscience Inc,Interventional,265899,2016-12-10 00:00:00,Recruiting
null,1,Phase not specified,NS,"interferon gamma follow-on biologic, PHARMACLON LLC",81264,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Randomized, comparative, controlled, open-label clinical study of efficacy and safety of Ingaron (recombinant human interferon gamma) production of ""NPP"" FARMAKLON, Russia in the treatment of patients with pulmonary tuberculosis",PHARMACLON LLC,Interventional,194177,2014-05-26 00:00:00,Status not specified
null,3,Phase 1/Phase 2 Clinical,C12,ChAdOx1-85A,84564,"Safety,Efficacy",N,Y,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,EMaBS TB Vaccine Study,University of Oxford,Interventional,354327,2018-12-01 00:00:00,Not yet recruiting
null,1,Phase 1 Clinical,C1,telacebec,85970,"Safety,Pharmacokinetics",Y,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"A phase I, singlecenter, open-label, prospective clinical study to assess safety, tolerability and pharmacokinetics of ascending doses of Q-203 in single use in healthy subjects",Infectex,Interventional,371518,null,Completed
null,2,Phase 1 Clinical,C1,"rifampicin + isoniazid (fixed dose combination, tuberculosis), Pfizer",89460,"Safety,Bioequivalence,Pharmacokinetics",Y,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,"A Bioequivalence Study Comparing A Fixed Dose Combination Formulation, RIN-150 And Individual Reference Drugs In Healthy Volunteers",Pfizer Inc,Interventional,164292,2012-09-30 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,"clofazimine (oral, tuberculosis), Novartis",91861,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,DRAMATIC,"Efficacy and Tolerability of Bedaquiline, Delamanid, Levofloxacin, Linezolid, and Clofazimine for Treatment of Patients With MDR-TB",Boston University,Interventional,368916,2020-01-31 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,"clofazimine (oral, tuberculosis), Novartis",91861,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Clofazimine in the Treatment of Pulmonary Mycobacterium Avium Complex (MAC),Oregon Health Sciences University,Interventional,279727,2017-04-11 00:00:00,Recruiting
null,1,Phase 3 Clinical,C3,ESAT-6CFP10,95442,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Clinical Study of Recombinant Mycobacterium Tuberculosis ESAT-6CFP10 Allergen for Children,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,Interventional,285889,2016-10-31 00:00:00,Completed
null,2,Phase 2b Clinical,C2B,ESAT-6CFP10,95442,"Safety,Efficacy",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Phase IIb Clinical Study of Recombinant Mycobacterium Tuberculosis Allergen ESAT6-CFP10 on Healthy People Aged 18 to 65,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,Interventional,224675,2015-03-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,OPC-167832,104447,Safety,N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"A phase I, single-ascending-dose study of OPC-167832 for the treatment of Mycobacterium tuberculosis infection",Otsuka Pharmaceutical Co Ltd,Interventional,327014,null,Completed
null,2,Phase 3 Clinical,C3,GC-3107,108779,"Safety,Efficacy",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,A Study of GC-3107(BCG Vaccine) in Healthy Infants,GC Pharma,Interventional,380364,2019-06-01 00:00:00,Not yet recruiting
null,1+,Phase 3 Clinical,C3,tenofovir disoproxil fumarate,14493,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,REFLATE TB2,Raltegravir Versus Efavirenz in Naive HIV-1-infected Patients Receiving Rifampin for Active Tuberculosis,INSERM,Interventional,214156,2015-09-30 00:00:00,Recruiting
null,1+,Phase 2b Clinical,C2B,lopinavir + ritonavir,14681,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Rifampin-Based Tuberculosis Treatment Versus Rifabutin-Based Tuberculosis Treatment in Persons With HIV,AIDS Clinical Trials Group,Interventional,87585,2013-07-13 00:00:00,Terminated
null,1,Phase not specified,NS,Glutoxim,28379,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Glutoxim in the Complex Treatment of Tuberculosis,IM Sechenov Moscow Medical Academy,Interventional,149460,null,Completed
Asian Ancestry,1+,Phase 3 Clinical,C3,ranitidine,44309,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,SURE,Short Intensive Treatment For Children With Tuberculous Meningitis,University College London,Interventional,360104,2018-01-02 00:00:00,Not yet recruiting
null,1+,Phase 3 Clinical,C3,clarithromycin,2829,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,The Effect of 18-month Regimen Containing Six Anti-tuberculosis Drugs for Patients With MDR-TB,Beijing Chest Hospital,Interventional,369109,2019-03-08 00:00:00,Recruiting
null,3+,Phase not specified,NS,clarithromycin,2829,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,The research of new regimen for multidrug-resistant tuberculosis treatment,"Beijing Chest Hospital, Beijing Tuberculosis & Thoracic Tumor Research Institute, Capital Medical University",Interventional,244777,2008-10-01 00:00:00,No longer recruiting
Asian Ancestry,1+,Phase not specified,NS,lamivudine,3474,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Acquired Immunodeficiency Syndrome (AIDS) and Tuberculosis (TB) Co-Infection Treatment Strategies Study of China,Shanghai Public Health Clinical Center,Interventional,76946,2009-02-28 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,lamivudine,3474,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RRHT,Rifampicin versus Rifabutin in HIV/AIDS Patients Combined With Tuberculosis,Shanghai Public Health Clinical Center,Interventional,334027,2018-04-15 00:00:00,Recruiting
null,1+,Phase 2b Clinical,C2B,pravastatin,4155,"Safety,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,Stat-TB,Statin Adjunctive Therapy for TB: A Phase IIb Dose-finding Study of Pravastatin in Adults With Tuberculosis,National Institute of Allergy and Infectious Diseases,Interventional,374083,2019-06-15 00:00:00,Not yet recruiting
null,3+,Phase 4 Clinical,C4,emtricitabine,4728,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RIFART,RIFART,Azienda Ospedaliera Spedali Civili di Brescia,Interventional,131240,2005-03-15 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,picroliv,9354,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Evaluation of Hepatoprotective Effect of Picroliv in Patients Receiving Multi Drug Therapy of Tuberculosis,Central Drug Research Institute,Interventional,127798,2005-03-01 00:00:00,Completed
null,3+,Phase 3 Clinical,C3,gatifloxacin,7017,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,OFLOTUB,A Controlled Trial of a 4-Month Quinolone-Containing Regimen for the Treatment of Pulmonary Tuberculosis,Institut de Recherche pour le Developpement (IRD),Interventional,10855,2005-01-31 00:00:00,Recruiting
null,4,Phase not specified,NS,efavirenz,10172,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Effectiveness of Directly Observed Therapy in Combined HIV and Tuberculosis Treatment in Resource-Limited Settings,National Institute of Allergy and Infectious Diseases,Interventional,8820,2009-08-31 00:00:00,Completed
Asian Ancestry,1+,Phase not specified,NS,efavirenz,10172,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Acquired Immunodeficiency Syndrome (AIDS) and Tuberculosis (TB) Co-Infection Treatment Strategies Study of China,Shanghai Public Health Clinical Center,Interventional,76946,2009-02-28 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,REFLATE TB,Efficacy and Safety of Two Raltegravir Doses in Naive HIV-1-Infected Patients Receiving Rifampin for Active Tuberculosis,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,40948,2009-07-31 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,efavirenz,10172,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,REFLATE TB2,Raltegravir Versus Efavirenz in Naive HIV-1-infected Patients Receiving Rifampin for Active Tuberculosis,INSERM,Interventional,214156,2015-09-30 00:00:00,Recruiting
null,1+,Phase 3 Clinical,C3,efavirenz,10172,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,SAPIT,A Study to Compare Three Existing Starting Points of Antiretroviral Therapy (ART) Initiation in HIV/Tuberculosis (TB) Co-infected Patients,Centre for the AIDS Program of Research in South Africa,Interventional,201474,2005-06-30 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,efavirenz,10172,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,Pred-ART,"Preventing TB-IRIS in High-risk Patients: a Randomized, Placebo-controlled Trial of Prednisone",University of Cape Town,Interventional,150793,2013-08-30 00:00:00,Completed
null,4,Phase 3 Clinical,C3,efavirenz,10172,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,N2R,Efavirenz-Based Versus Nevirapine-Based Antiretroviral Therapy Among HIV-Infected Patients Receiving Rifampin,Bamrasnaradura Infectious Diseases Institute,Interventional,10947,2007-01-31 00:00:00,Completed
null,3+,Phase 2 Clinical,C2,Tritanrix HB,12862,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity Study of a Candidate Tuberculosis Vaccine in Healthy Infants,GlaxoSmithKline plc,Interventional,65639,2010-07-31 00:00:00,Completed
Asian Ancestry,1+,Phase 2 Clinical,C2,nevirapine,3700,"Safety,Efficacy,Bioavailability,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,11187,2009-02-28 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,nevirapine,3700,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Safety and Efficacy of Two Once Daily Anti Retroviral Treatment Regimens Along With Anti-Tuberculosis Treatment,Tuberculosis Research Centre,Interventional,10863,2006-06-30 00:00:00,Suspended
null,4+,Phase 2/Phase 3 Clinical,C23,valganciclovir,25182,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,EMPIRICAL,Empirical Treatment Against Cytomegalovirus and Tuberculosis in HIV-infected Infants With Severe Pneumonia,Hospital Universitario 12 de Octubre,Interventional,377163,2020-01-01 00:00:00,Not yet recruiting
null,1,Phase 2 Clinical,C2,"thalidomide, Celgene",8050,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Phase II, Placebo-Controlled Study of Thalidomide in Patients With Mycobacterial and HIV Infections",National Center for Research Resources,Interventional,92426,1990-09-30 00:00:00,Completed
null,1,Phase not specified,NS,"thalidomide, Celgene",8050,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Adjunctive Thalidomide Therapy of Childhood Tuberculous Meningitis: Possible Anti-Inflammatory Role,University of Stellenbosch,Interventional,150307,null,Completed
null,1,Phase Not Applicable,PNA,tedizolid phosphate,30819,"Efficacy,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Evaluating Pharmacokinetics and Whole Blood Bactericidal Activity Against Mycobacterium Tuberculosis of Single-Doses of Tedizolid Plus Rifampicin in Healthy Volunteers,National University Hospital (Singapore) Pte Ltd,Interventional,331225,null,Status not specified
null,2+,Phase 4 Clinical,C4,meropenem,3616,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,3,Phase 3 Clinical,C3,azithromycin,2587,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,ACT-TB,Accuracy and Consequences of Using Trial-of-antibiotics for TB Diagnosis,London School of Hygiene and Tropical Medicine,Interventional,341686,2019-02-25 00:00:00,Recruiting
null,2+,Phase 4 Clinical,C4,azithromycin,2587,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,ESCALATE,To observe if administration of drug namely linezolid along with standard four drug regimen in intensive(initial) phase of Tubercular meningitis will help reduce death and disability among patients when compared to standard four drug antitubercular drug therapy alone,All India Institute of Medical Sciences,Interventional,383209,2019-06-07 00:00:00,Not yet recruiting
null,2+,Phase 2/Phase 3 Clinical,C23,linezolid,11036,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,PRACTECAL-PRO,Patient-reported Experiences and Quality of Life Outcomes in the TB-PRACTECAL Clinical Trial,"Medecins Sans Frontieres, Netherlands",Interventional,379769,2019-07-01 00:00:00,Not yet recruiting
null,1+,Phase 3 Clinical,C3,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,The Effect of 18-month Regimen Containing Six Anti-tuberculosis Drugs for Patients With MDR-TB,Beijing Chest Hospital,Interventional,369109,2019-03-08 00:00:00,Recruiting
null,2+,Phase 2/Phase 3 Clinical,C23,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,MDR-END,Treatment Shortening of MDR-TB Using Existing and New Drugs,Seoul National University Hospital,Interventional,247456,2016-01-31 00:00:00,Recruiting
null,1,Phase not specified,NS,linezolid,11036,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A multicenter, randomized controlled study to evaluate the clinical efficacy and safety of linezolid in patients with extensively drug resistant tuberculosis",Tongji University,Interventional,173992,null,Status not specified
null,2,Phase 2 Clinical,C2,dolutegravir,59062,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RADIANT-TB,Standard Versus Double Dose Dolutegravir in Patients With HIV-associated Tuberculosis,University of Cape Town,Interventional,371202,2019-05-01 00:00:00,Not yet recruiting
null,1+,Phase 2 Clinical,C2,raltegravir,54488,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,EARNEST Rifabutin Pharmacokinetics (PK) Substudy,"Joint Clinical Research Centre, Medical Research Council",Interventional,90175,2012-05-03 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,zidovudine,44316,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RRHT,Rifampicin versus Rifabutin in HIV/AIDS Patients Combined With Tuberculosis,Shanghai Public Health Clinical Center,Interventional,334027,2018-04-15 00:00:00,Recruiting
null,3+,Phase 2 Clinical,C2,faropenem,4492,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Synergistically acting Rifampicin and Faropenem in Tuberculosis,Indian Council of Medical Research,Interventional,377088,2019-05-31 00:00:00,Not yet recruiting
null,1+,Phase 4 Clinical,C4,ritonavir,7310,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetic Study of Super-boosted Lopinavir/Ritonavir Given With Rifampin,University of Miami,Interventional,93494,2016-02-29 00:00:00,Terminated
null,1+,Phase 4 Clinical,C4,levofloxacin,3492,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Multicenter, controlled clinical study of the safety, tolerability and efficacy of clofazimine in the treatment of drug-resistant tuberculosis",Beijing Chest Hospital,Interventional,328802,2009-12-01 00:00:00,No longer recruiting
null,2+,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,STREAM,The Evaluation of a Standard Treatment Regimen of Anti-Tuberculosis Drugs for Patients With MDR-TB,International Union Against Tuberculosis and Lung Diseases,Interventional,228190,2016-04-30 00:00:00,Recruiting
null,1,Phase not specified,NS,levofloxacin,3492,Efficacy,Y,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,A open-labeled study to assess the efficacy of levofloxacin in healthy volunteers,Ophthalmic Consultants of Boston,Interventional,113606,2012-09-30 00:00:00,Status not specified
null,5,Phase 1/Phase 2 Clinical,C12,levofloxacin,3492,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,TBRU 10,"Early Bactericidal Activity of Linezolid, Gatifloxacin, Levofloxacin, Isoniazid (INH) and Moxifloxacin in HIV Negative Adults With Initial Episodes of Sputum Smear-Positive Pulmonary Tuberculosis",National Institute of Allergy and Infectious Diseases,Interventional,10869,2004-02-29 00:00:00,Completed
null,3,Phase 2 Clinical,C2,rifabutin,4229,"Safety,Pharmacokinetics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,TBTC-23C,Pharmacokinetics of Intermittent Rifabutin and Isoniazid With Daily Efavirenz,Centers for Disease Control and Prevention,Interventional,10657,1999-11-30 00:00:00,Completed
null,1,Phase not specified,NS,rifabutin,4229,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,TBTC-23,Treatment of HIV-Related Tuberculosis Using a Rifabutin-Based Regimen,Centers for Disease Control and Prevention,Interventional,10653,1999-02-28 00:00:00,Completed
null,1,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity Study of a Candidate Tuberculosis Vaccine in HIV-positive Adults,GlaxoSmithKline plc,Interventional,73200,2011-01-17 00:00:00,Completed
null,1,Phase 2/Phase 3 Clinical,C23,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Study to Evaluate the Efficacy of GlaxoSmithKline (GSK) Biologicals' Candidate Tuberculosis (TB) Vaccine in Healthy Adults,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",Interventional,102580,2014-08-19 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sutezolid,11088,"Safety,Efficacy,Pharmacokinetics",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"Safety, Tolerability And Pharmacokinetics Study Of Single-Doses Of PNU-100480 In Healthy Adults",Sequella Inc,Interventional,50188,2009-04-30 00:00:00,Completed
null,1+,Phase 2b Clinical,C2B,sutezolid,11088,"Safety,Efficacy,Pharmacokinetics",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,SUDOCU,PanACEA Sutezolid Dose-finding and Combination Evaluation,Ludwig-Maximilians University of Munich,Interventional,381674,2019-08-31 00:00:00,Not yet recruiting
null,1,Phase not specified,NS,IMM-201,11115,"Safety,Efficacy",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,A five year study to evaluate the safety and efficacy of SRL-172 in the prevention of tuberculosis in HIV-positive subjects,"National Institutes of Health, Silence Therapeutics plc",Interventional,19967,2001-09-30 00:00:00,Status not specified
null,1+,Phase not specified,NS,IMM-201,11115,Efficacy,Y,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"A Randomized, Double-blind, Multicenter, Placebo-controlled Trial to Study the Efficacy of Mycobacterium vaccae Immunotherapy for Tuberculosis in KwaZulu, South Africa, 1991-97",Blandford Medical Centre,Interventional,109626,2000-10-31 00:00:00,Status not specified
Asian Ancestry,1,Phase not specified,NS,moxifloxacin,12978,"Safety,Efficacy",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Moxifloxacin_QT Study in Chinese Healthy Volunteer,Peking University Third Hospital,Interventional,89715,2012-07-31 00:00:00,Recruiting
null,1+,Phase 1 Clinical,C1,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,A Comparative study of different treatment regimes for brain tuberculosis,Department of Science & Technology,Interventional,382387,2019-05-27 00:00:00,Not yet recruiting
null,2+,Phase 4 Clinical,C4,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,1+,Phase 2/Phase 3 Clinical,C23,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,TB-PRACTECAL,Pragmatic Clinical Trial for a More Effective Concise and Less Toxic MDR-TB Treatment Regimen(s),Medecins Sans Frontieres,Interventional,244304,2017-01-31 00:00:00,Recruiting
null,1+,Phase 2b Clinical,C2B,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"A Phase II to Evaluate the Efficacy, Safety and Tolerability of Combinations of Bedaquiline, Moxifloxacin, PA-824 and Pyrazinamide in Adult Subjects With Drug-Sensitive or Multi Drug-Resistant Pulmonary Tuberculosis",TB Alliance,Interventional,210646,2014-10-23 00:00:00,Completed
null,1,Phase 1 Clinical,C1,moxifloxacin,12978,"Safety,Bioavailability,Pharmacokinetics",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Bioavailability, Food Effect and Safety, Tolerability of a New Oral Suspension in Comparison to the Marketed Moxifloxacin Tablet in Healthy Adults",Bayer AG,Interventional,198748,2010-05-31 00:00:00,Completed
null,2,Phase not specified,NS,moxifloxacin,12978,"Bioequivalence,Pharmacokinetics",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"A randomized, open, balanced, two-component, two-period, crossover, with a single-dose study of comparative pharmacokinetics and bioequivalence of Primflo (moxifloxacin) 400 mg (Dr Reddy's Laboratories Ltd, India) and Avilox  (moxifloxacin) 400 mg (Bayer Healthcare AG, Germany), when taken orally on an empty stomach in healthy adult volunteers",Dr Reddy's Laboratories Ltd,Interventional,167750,2012-10-10 00:00:00,Status not specified
null,1+,Phase 3 Clinical,C3,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Thrice-Weekly, 4- Months Moxifloxacin or Gatifloxacin Regimens for Pulmonary TB",Indian Council of Medical Research,Interventional,150332,2004-05-14 00:00:00,Terminated
null,2,Phase 2a Clinical,C2A,pretomanid,13323,"Safety,Efficacy,Pharmacokinetics",Y,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,Phase IIa Evaluation of Early Bactericidal Activity of PA-824 in Pulmonary Tuberculosis,TB Alliance,Interventional,9381,2007-08-31 00:00:00,Completed
null,2+,Phase 2 Clinical,C2,pretomanid,13323,"Safety,Efficacy",Y,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis With,TB Alliance,Interventional,71107,2010-10-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,pretomanid,13323,"Safety,Pharmacokinetics",N,Y,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,Single-Dose Study to Evaluate the PKs of Pretomanid in Subjects With Renal Impairment Compared to Subjects With Normal Renal Function,National Institute of Allergy and Infectious Diseases,Interventional,375406,2019-05-09 00:00:00,Not yet recruiting
null,1,Phase 1 Clinical,C1,pretomanid,13323,"Safety,Efficacy,Pharmacokinetics",N,Y,Pre-registration,PR,Mycobacterium tuberculosis infection,221,CL-004,"A Study of the Safety, Tolerability, and Absorption, Metabolism, and Excretion of PA-824 in Healthy Adult Male Subjects",TB Alliance,Interventional,303299,2006-03-31 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,pretomanid,13323,"Safety,Efficacy",N,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,STAND,Shortening Treatment by Advancing Novel Drugs,TB Alliance,Interventional,221844,2015-02-28 00:00:00,Completed
null,1+,Phase 2b Clinical,C2B,pretomanid,13323,"Safety,Efficacy,Pharmacokinetics",Y,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,"A Phase II to Evaluate the Efficacy, Safety and Tolerability of Combinations of Bedaquiline, Moxifloxacin, PA-824 and Pyrazinamide in Adult Subjects With Drug-Sensitive or Multi Drug-Resistant Pulmonary Tuberculosis",TB Alliance,Interventional,210646,2014-10-23 00:00:00,Completed
null,1,Phase 4 Clinical,C4,rifapentine,15102,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,The safety and efficacy of high dose rifapentine in treatment of tuberculosis,Shanghai Public Health Clinical Center,Interventional,359664,2019-01-01 00:00:00,Not yet recruiting
null,2,Phase 3 Clinical,C3,rifapentine,15102,"Safety,Efficacy",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,"Toward a Safe and Reachable Preventive Therapy for LTBI: a Multicenter, Randomized, Controlled Study in Taiwan",National Taiwan University Hospital,Interventional,207608,2014-08-31 00:00:00,No longer recruiting
null,2,Phase 2 Clinical,C2,delamanid,16545,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Safety, Efficacy and Pharmacokinetics of OPC-67683 in Patients With Pulmonary Tuberculosis",Otsuka Pharmaceutical Co Ltd,Interventional,8842,2006-11-30 00:00:00,Completed
null,2,Phase 1/Phase 2 Clinical,C12,delamanid,16545,"Safety,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Evaluating the Pharmacokinetics, Safety and Tolerability of Delamanid in Combination With Optimized Multidrug Background Regimen (OBR) for Multidrug-Resistant Tuberculosis (MDR-TB) in HIV-Infected and HIV-Uninfected Children With MDR-TB","National Institute of Allergy and Infectious Diseases, National Institutes of Health",Interventional,297373,2018-01-30 00:00:00,Recruiting
null,3+,Phase 2 Clinical,C2,delamanid,16545,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Evaluating the Safety, Tolerability and Pharmacokinetics of Bedaquiline and Delamanid, Alone and in Combination, For Drug-Resistant Pulmonary Tuberculosis",National Institute of Allergy and Infectious Diseases,Interventional,243619,2016-08-31 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,golotimod,25023,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,A Phase II Trial To Study SCV-07 in Tuberculosis (TB) Patients Receiving Standard Anti-TB Chemotherapy,SciClone Pharmaceuticals Inc,Interventional,9345,2002-09-28 00:00:00,Status not specified
null,2,Phase 2a Clinical,C2A,posizolid,26493,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,Phase IIa EBA Trial of AZD-5847,National Institute of Allergy and Infectious Diseases,Interventional,84246,2012-12-05 00:00:00,Completed
null,1,Phase 1 Clinical,C1,posizolid,26493,"Safety,Bioavailability,Pharmacokinetics,Pharmacodynamics",Y,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"A phase I, double-blind, placebo-controlled, flexible single day ascending dose (SDAD) study to evaluate safety, tolerability and pharmacokinetics (PK) of iv AZD-5847 in healthy subjects",AstraZeneca plc,Interventional,82840,2011-09-20 00:00:00,Status not specified
null,2,Phase 2a Clinical,C2A,SQ-109,31010,"Safety,Efficacy,Pharmacokinetics",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,SQ109EBA,EBA of SQ-109 in Adult Subjects with Pulmonary TB,Ludwig-Maximilians University of Munich,Interventional,71188,2010-11-30 00:00:00,Completed
null,2,Phase 2/Phase 3 Clinical,C23,SQ-109,31010,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"A phase IIb/III, international, multicenter, prospective, randomized, double-blind, placebo-controlled study to evaluate the efficacy and tolerability of chemotherapy regimens, including drug SQ-109 in patients with pulmonary multidrug-resistant mycobacterium tuberculosis",Infectex,Interventional,168785,2012-06-27 00:00:00,Completed
null,1,Phase 1 Clinical,C1,bedaquiline,51310,"Safety,Bioavailability,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,"A Study to Determine the Relative Oral Bioavailability of Single Dose Administration of TMC207, Under Fed and Fasted Conditions in Healthy Participants",Janssen Diagnostics BVBA,Interventional,59134,2009-08-31 00:00:00,Completed
null,2,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"To Evaluate the Safety, Tolerability, and Efficacy of TMC-207 as Part of an Individualized Multi-Drug Resistant Tuberculosis (MDR-TB) Treatment Regimen in Participants With Sputum Smear-Positive Pulmonary MDR-TB",Johnson & Johnson,Interventional,56974,2009-09-30 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,bedaquiline,51310,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,Médecins Sans Frontières France,Interventional,259506,2016-12-31 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,bedaquiline,51310,"Safety,Bioavailability,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,A Study to Assess the Relative Bioavailability of TMC-207 Following Single-dose Administrations of Two Pediatric Formulations in Healthy Adult Participants,Janssen Research & Development LLC,Interventional,114087,2013-04-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,MVA-85A,55317,"Safety,Efficacy",Y,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,A Study of MVA-85A in Healthy Infants,Aeras Global TB Vaccine Foundation,Interventional,59405,2009-07-31 00:00:00,Completed
null,3,Phase 1/Phase 2 Clinical,C12,MVA-85A,55317,"Safety,Efficacy",N,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,EMaBS TB Vaccine Study,University of Oxford,Interventional,354327,2018-12-01 00:00:00,Not yet recruiting
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,N,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"A Phase I Study of the Safety and Immunogenicity of a Recombinant MVA Vaccine Encoding a Secreted Antigen From M Tuberculosis, Antigen 85A, Delivered Intradermally by a Needle Injection in Healthy Volunteers Who Have Previously Received BCG",University of Oxford,Interventional,10874,2003-05-31 00:00:00,Completed
null,2,Phase 2 Clinical,C2,VPM-1002,55569,"Safety,Efficacy",Y,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Study to Evaluate Safety and Immunogenicity of VPM-1-002 in Comparison With BCG in Newborn Infants in South Africa,Vakzine Projekt Management GmbH,Interventional,82764,2011-11-30 00:00:00,Completed
null,1,Phase 2/Phase 3 Clinical,C23,VPM-1002,55569,"Safety,Efficacy",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Study to Check the Efficacy and Safety of Recombinant BCG Vaccine in Prevention of TB Recurrence in India,Serum Institute of India Ltd,Interventional,298671,2017-12-15 00:00:00,Recruiting
null,2,Phase 2 Clinical,C2,VPM-1002,55569,"Safety,Efficacy",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Study to Evaluate the Safety and Immunogenicity of VPM-1002 in Comparison With BCG in HIV-exposed/-Unexposed Newborn Infants in South Africa,Serum Institute of India Ltd,Interventional,224781,2015-06-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,AEC/BC02,81363,"Safety,Efficacy",N,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,A Phase III trial of recombinant tuberculosis vaccine AEC/BC02 in patients with tuberculosis,Chongqing Zhifei Biological Products Co Ltd,Interventional,352354,null,Completed
null,1,Phase 1 Clinical,C1,AEC/BC02,81363,"Safety,Efficacy",N,Y,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,A Phase I Study of the Recombinant Mycobacterium Tuberculosis Vaccine Freeze-dried,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,Interventional,285854,2018-04-16 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,DAR-901,90231,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,DAR-PIA,DAR-901 TB Booster Vaccine to Prevent TB in Adolescents,Dartmouth-Hitchcock Medical Center,Interventional,256110,2016-03-31 00:00:00,No longer recruiting
null,2+,Phase 3 Clinical,C3,"clofazimine (oral, tuberculosis), Novartis",91861,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,Médecins Sans Frontières France,Interventional,259506,2016-12-31 00:00:00,Recruiting
null,3+,Phase 4 Clinical,C4,tenofovir disoproxil fumarate,14493,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RIFART,RIFART,Azienda Ospedaliera Spedali Civili di Brescia,Interventional,131240,2005-03-15 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,lopinavir + ritonavir,14681,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics and Safety of Rifabutin 150 mg qd Versus Rifabutin 300 mg tiw,The HIV Netherlands Australia Thailand Research Collaboration,Interventional,226826,2015-06-30 00:00:00,Recruiting
null,3+,Phase 4 Clinical,C4,lopinavir + ritonavir,14681,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RIFART,RIFART,Azienda Ospedaliera Spedali Civili di Brescia,Interventional,131240,2005-03-15 00:00:00,Terminated
null,1+,Phase 2 Clinical,C2,lopinavir + ritonavir,14681,"Safety,Bioavailability,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV Co-Infection in Vietnam,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,11188,2010-06-30 00:00:00,Completed
Asian Ancestry,1+,Phase 2 Clinical,C2,lopinavir + ritonavir,14681,"Safety,Efficacy,Bioavailability,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,11187,2009-02-28 00:00:00,Completed
Asian Ancestry,1+,Phase not specified,NS,stavudine,4481,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Acquired Immunodeficiency Syndrome (AIDS) and Tuberculosis (TB) Co-Infection Treatment Strategies Study of China,Shanghai Public Health Clinical Center,Interventional,76946,2009-02-28 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,cabotegravir,69974,"Safety,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Effect of Rifabutin on the Pharmacokinetics of Oral Cabotegravir in Healthy Subjects,ViiV Healthcare Ltd,Interventional,298711,2017-06-06 00:00:00,Completed
null,8,Phase 2 Clinical,C2,ivermectin,3412,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TB-LION,Tuberculosis - Learning the Impact of Nutrition,Boston Medical Center Corp,Interventional,347635,2019-06-30 00:00:00,Not yet recruiting
null,1+,Phase 3 Clinical,C3,clarithromycin,2829,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Optimization of MDR-TB Treatment Regimen Based on the Molecular Drug Susceptibility Results of Pyrazinamide,Huashan Hospital,Interventional,183613,2014-04-30 00:00:00,Recruiting
null,1+,Phase 4 Clinical,C4,clarithromycin,2829,"Safety,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Drug Interaction Study Between Linezolid and Clarithromycin in Tuberculosis Patients,University Medical Center Groningen,Interventional,182646,2011-12-31 00:00:00,Completed
null,4,Phase not specified,NS,lamivudine,3474,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Effectiveness of Directly Observed Therapy in Combined HIV and Tuberculosis Treatment in Resource-Limited Settings,National Institute of Allergy and Infectious Diseases,Interventional,8820,2009-08-31 00:00:00,Completed
null,1+,Phase 0 Clinical,C0,lamivudine,3474,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,TasP in Correctional Facilities,University of North Carolina,Interventional,280225,2016-02-01 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,lamivudine,3474,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,ANRS 1295 CAMELIA,Early versus Late Introduction of Antiretroviral Therapy in HIV-infected Patients With Tuberculosis,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,145651,2006-01-31 00:00:00,Completed
null,1+,Phase 2/Phase 3 Clinical,C23,lamivudine,3474,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,CARINEMO,Comparison of Nevirapine and Efavirenz for the Treatment of HIV-TB Co-infected Patients,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,10948,2007-12-31 00:00:00,Completed
null,1+,Phase 1 Clinical,C1,lamivudine,3474,"Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Effectiveness of Anti-HIV Therapy (HAART) in HIV-Infected Patients With Tuberculosis,National Institute of Allergy and Infectious Diseases,Interventional,10646,2000-02-25 00:00:00,Completed
null,1+,Phase 1 Clinical,C1,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Efavirenz in the Presence of Rifampicin and Isoniazid,St Stephens Aids Trust,Interventional,265766,2016-10-21 00:00:00,Recruiting
null,1+,Phase not specified,NS,efavirenz,10172,"Safety,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,ANRS 12154 PECAN,Pharmacokinetics of efavirenz in combination of rimfampin in HIV-infected adults,"INSERM, Institut Pasteur Du Cambodge",Interventional,145595,null,Completed
null,1+,Phase 2 Clinical,C2,efavirenz,10172,"Safety,Bioavailability,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV Co-Infection in Vietnam,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,11188,2010-06-30 00:00:00,Completed
Asian Ancestry,1+,Phase 2 Clinical,C2,efavirenz,10172,"Safety,Efficacy,Bioavailability,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,11187,2009-02-28 00:00:00,Completed
null,2,Phase 4 Clinical,C4,efavirenz,10172,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,OPTI-NNRTI,A Study to Determine the Best Dose of Antivirals in Patients With Both TB and HIV,Stanford University,Interventional,11177,2007-07-31 00:00:00,Terminated
null,1,Phase 1 Clinical,C1,nevirapine,3700,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,TMC207-TiDP13-C117: Interaction Study in Human Immunodeficiency Virus-type 1 (HIV-1) Infected Patients With Nevirapine (NVP),"Janssen Diagnostics BVBA, Johnson & Johnson",Interventional,56959,2009-06-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,nevirapine,3700,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Efficacy Safety Study Comparing two Doses of NVP After Initiating Rifampin-Containing TB Therapy,The HIV Netherlands Australia Thailand Research Collaboration,Interventional,10946,2005-10-31 00:00:00,Completed
null,1+,Phase 2a Clinical,C2A,"amoxicillin + clavulanate potassium, GSK",44284,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Early Bactericidal Activity of Rifampin + Meropenem + Amoxicillin/Clavulanate in Adults With Pulmonary TB,Johns Hopkins University,Interventional,300655,2017-08-23 00:00:00,Recruiting
null,2,Phase 2a Clinical,C2A,doxycycline hyclate,46927,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,Map2Co,Concomitant Infections of Mansonella Perstans in Tuberculosis and Buruli Ulcer Disease Patients From Ghana,kwame Nkrumah University of Science and Technology,Interventional,214864,2014-10-31 00:00:00,Completed
null,3,Phase 3 Clinical,C3,amoxicillin,44279,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,ACT-TB,Accuracy and Consequences of Using Trial-of-antibiotics for TB Diagnosis,London School of Hygiene and Tropical Medicine,Interventional,341686,2019-02-25 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,linezolid,11036,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,SIMPLE,Pharmacokinetic Study of Linezolid for TB Meningitis,Universitas Padjadjaran,Interventional,340851,2019-06-30 00:00:00,Not yet recruiting
Asian Ancestry,3+,Phase 2 Clinical,C2,linezolid,11036,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A Phase II Clinical Study of LCB01-0371 to Evaluate the EBA, Safety and PK",LegoChem Bioscience Inc,Interventional,265899,2016-12-10 00:00:00,Recruiting
null,1,Phase 2a Clinical,C2A,linezolid,11036,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Linezolid to Treat Extensively-Drug Resistant Tuberculosis,National Institute of Allergy and Infectious Diseases,Interventional,23143,2008-07-31 00:00:00,Completed
null,1+,Phase 2b Clinical,C2B,dolutegravir,59062,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,SAEFRIF,Safety and Efficacy of High Dose Rifampicin in Tuberculosis (TB)-HIV Co-infected Patients on Efavirenz- or Dolutegravir-based Antiretroviral Therapy,Makerere University,Interventional,384080,2019-04-30 00:00:00,Recruiting
Asian Ancestry,3,Phase 2 Clinical,C2,dolutegravir,59062,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Efficacy, Safety and Pharmacokinetics of DTG With RIF",The HIV Netherlands Australia Thailand Research Collaboration,Interventional,359086,2019-03-01 00:00:00,Not yet recruiting
null,2+,Phase 4 Clinical,C4,raltegravir,54488,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Raltegravir + ABC/3TC in HIV/TB Co-Infected Patients,Central Research Institute of Epidemiology,Interventional,63729,2010-10-31 00:00:00,Recruiting
null,1,Phase 1/Phase 2 Clinical,C12,raltegravir,54488,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Evaluating the Safety, Tolerance, and Pharmacokinetics of a Raltegravir-containing Antiretroviral Therapy (ART) Regimen in Infants and Children Infected With HIV and TB",National Institute of Allergy and Infectious Diseases,Interventional,102102,2014-05-31 00:00:00,Recruiting
null,1+,Phase 1 Clinical,C1,doravirine,74480,"Safety,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,DORIIS,"Doravirine, Rifapentine and Isoniazid Interaction",Thomas Jefferson University,Interventional,374387,2019-04-30 00:00:00,Recruiting
null,1+,Phase 1 Clinical,C1,zidovudine,44316,"Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Effectiveness of Anti-HIV Therapy (HAART) in HIV-Infected Patients With Tuberculosis,National Institute of Allergy and Infectious Diseases,Interventional,10646,2000-02-25 00:00:00,Completed
null,2+,Phase not specified,NS,indinavir,5321,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A prospective, open-label, pilot study to evaluate the pharmacokinetics (PK)/safety/efficacy of an adjusted dose of indinavir/ritonavir (IDV/r) 600/100 mg plus two nucleoside reverse transcriptase inhibitors (NRTIs) in HIV/TB-coinfected Thais receiving rifampicin-based anti-TB treatment",Thai Red Cross AIDS Research Centre,Interventional,100728,2012-01-17 00:00:00,Status not specified
null,1+,Phase 2 Clinical,C2,faropenem,4492,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Trial of faropenem and cefadroxil (in combination with amoxicillin/clavulanic acid and standard TB drugs) in patients with pulmonary tuberculosis: measurement of early bactericidal activity and effects on novel biomarkers,National University Hospital (Singapore) Pte Ltd,Interventional,360329,2018-11-30 00:00:00,Not yet recruiting
null,1,Phase 4 Clinical,C4,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,LEVOF,"MDR TB, Levofloxacin, Multi-Drug-Resistant Pulmonary Tuberculosis",Sanofi SA,Interventional,8644,2007-06-30 00:00:00,Completed
Asian Ancestry,1+,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,SURE,Short Intensive Treatment For Children With Tuberculous Meningitis,University College London,Interventional,360104,2018-01-02 00:00:00,Not yet recruiting
null,2+,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,LAST ACT,Leukotriene A4 Hydrolase Stratified Trial of Adjunctive Corticosteroids for HIV-uninfected Adults With Tuberculous Meningitis,"Oxford University Clinical Research Unit, Vietnam",Interventional,293087,2018-02-08 00:00:00,Recruiting
null,2+,Phase 1/Phase 2 Clinical,C12,levofloxacin,3492,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,TBM-KIDS,Optimizing Treatment to Improve TBM Outcomes in Children,Johns Hopkins University,Interventional,278847,2017-02-22 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,rifabutin,4229,"Safety,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,Effect of Rifabutin on the Pharmacokinetics of Oral Cabotegravir in Healthy Subjects,ViiV Healthcare Ltd,Interventional,298711,2017-06-06 00:00:00,Completed
null,2,Phase 1 Clinical,C1,rifabutin,4229,"Safety,Bioavailability,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,A Bioavailability Study of Rifabutin and Lopinavir/Ritonavir in Healthy Adult Subjects,Abbott Laboratories,Interventional,25327,2008-08-31 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,rifabutin,4229,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics and Safety of Rifabutin 150 mg qd Versus Rifabutin 300 mg tiw,The HIV Netherlands Australia Thailand Research Collaboration,Interventional,226826,2015-06-30 00:00:00,Recruiting
null,1+,Phase not specified,NS,rifabutin,4229,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"An open-label, comparative, multicenter trial to evaluate long-term tolerance and effectiveness of moxifloxacin therapy for tuberculosis",Ospedale Ninetto Melli,Interventional,113726,2003-02-28 00:00:00,Status not specified
null,1+,Phase 1 Clinical,C1,rifabutin,4229,"Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Effectiveness of Anti-HIV Therapy (HAART) in HIV-Infected Patients With Tuberculosis,National Institute of Allergy and Infectious Diseases,Interventional,10646,2000-02-25 00:00:00,Completed
null,1,Phase 1 Clinical,C1,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,Safety,N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"A phase I study to evaluate the safety and immunogenicity of a novel, proprietary prophylactic vaccine MTB72F to induce protection against tuberculosis (TB)",GlaxoSmithKline plc,Interventional,9554,2004-03-08 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity of GSK Biological's Candidate Tuberculosis Vaccine Mtb72F/AS02 in Healthy PPD-Negative Adults,GlaxoSmithKline plc,Interventional,9540,2004-07-31 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,moxifloxacin,12978,Efficacy,N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Essentiality of INH in TB Therapy,AIDS Clinical Trials Group,Interventional,87091,2015-06-30 00:00:00,Completed
null,2+,Phase 2/Phase 3 Clinical,C23,moxifloxacin,12978,Efficacy,N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,PRACTECAL-PRO,Patient-reported Experiences and Quality of Life Outcomes in the TB-PRACTECAL Clinical Trial,"Medecins Sans Frontieres, Netherlands",Interventional,379769,2019-07-01 00:00:00,Not yet recruiting
null,1+,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Rifapentine Plus Moxifloxacin for Treatment of Pulmonary Tuberculosis,Johns Hopkins University,Interventional,23035,2009-11-30 00:00:00,Terminated
null,2,Phase 1 Clinical,C1,moxifloxacin,12978,Bioequivalence,N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Bioequivalency Study of Moxifloxacin Tablets, 400 mg Under Fasting Conditions",Dr Reddy's Laboratories Ltd,Interventional,218651,2012-11-30 00:00:00,Completed
null,1+,Phase 1/Phase 2 Clinical,C12,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,IMPRESS,Improving Retreatment Success,Centre for the AIDS Program of Research in South Africa,Interventional,182040,2013-11-30 00:00:00,Completed
null,2,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy,Bioequivalence,Pharmacokinetics,Pharmacodynamics",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,TBTC/UITB Study 28,"Evaluation of a Moxifloxacin-Based, Isoniazid-Sparing Regimen for Tuberculosis Treatment TBTC/UITB Study 28",Tuberculosis Investigation Unit of Barcelona,Interventional,155451,2006-05-01 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,pretomanid,13323,"Efficacy,Pharmacokinetics",Y,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,"A phase I, controlled study to evaluate the pharmacokinetics and efficacy of PA-824 in patients with tuberculosis",Chiron PathoGenesis,Interventional,70963,2010-09-13 00:00:00,Status not specified
null,2+,Phase 2/Phase 3 Clinical,C23,pretomanid,13323,Efficacy,N,Y,Pre-registration,PR,Mycobacterium tuberculosis infection,221,PRACTECAL-PRO,Patient-reported Experiences and Quality of Life Outcomes in the TB-PRACTECAL Clinical Trial,"Medecins Sans Frontieres, Netherlands",Interventional,379769,2019-07-01 00:00:00,Not yet recruiting
null,1,Phase 1 Clinical,C1,pretomanid,13323,"Safety,Bioavailability,Pharmacokinetics",N,Y,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,Food Effect Study on the Bioavailability and PK of PA-824 Tablets in Healthy Adult Subjects,TB Alliance,Interventional,120522,2007-03-31 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,rifapentine,15102,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Tuberculosis Prevention for HIV Infected Adults,National Institute of Allergy and Infectious Diseases,Interventional,8790,2002-09-30 00:00:00,Completed
null,2+,Phase 2/Phase 3 Clinical,C23,rifapentine,15102,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,ASTEROID,"Assessment of the Safety, Tolerability, and Effectiveness of Rifapentine Given Daily for LTBI",Centers for Disease Control and Prevention,Interventional,333384,2019-07-31 00:00:00,Not yet recruiting
null,1+,Phase 1 Clinical,C1,rifapentine,15102,"Safety,Pharmacokinetics",Y,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,Impact of Once-Weekly Rifapentine and Isoniazid on the Steady State Pharmacokinetics of Dolutegravir and Darunavir Boosted With Cobicistat in Healthy Volunteers,National Institutes of Health Clinical Center,Interventional,260814,2016-06-03 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,rifapentine,15102,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,iAdhere,Adherence to Latent Tuberculosis Infection Treatment 3HP SAT Versus 3HP DOT,"Centers for Disease Control and Prevention, Tuberculosis Investigation Unit of Barcelona",Interventional,177457,2012-09-30 00:00:00,Completed
null,2,Phase 2 Clinical,C2,rifapentine,15102,"Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,TBTC-26 PK,Rifapentine Pharmacokinetics in Children During Treatment of Latent TB Infection,Centers for Disease Control and Prevention,Interventional,10687,2005-09-30 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,rifapentine,15102,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,PREVENT TB,A 3 Months of Weekly Rifapentine and Isoniazid for M Tuberculosis Infection,Centers for Disease Control and Prevention,Interventional,10659,2001-06-30 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,delamanid,16545,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,DRAMATIC,"Efficacy and Tolerability of Bedaquiline, Delamanid, Levofloxacin, Linezolid, and Clofazimine for Treatment of Patients With MDR-TB",Boston University,Interventional,368916,2020-01-31 00:00:00,Terminated
null,2,Phase 2 Clinical,C2,H4:IC31,48499,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"A Randomized, Placebo-Controlled, Partially-Blinded, Phase II Study to Evaluate Safety, Immunogenicity, and Prevention of Infection With Mycobacterium Tuberculosis of AERAS-404 and BCG Revaccination in Healthy Adolescents",Aeras Global TB Vaccine Foundation,Interventional,176219,2014-02-28 00:00:00,Completed
null,1,Phase 2a Clinical,C2A,LL-3858,49162,"Safety,Efficacy,Pharmacokinetics",N,N,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,A phase IIa clinical trial for a novel molecule (LL-3858) developed by Lupin Limited which has the potential of treating the Pulmonary tuberculosis patients effectively,Lupin Ltd,Interventional,103573,2009-12-02 00:00:00,No longer recruiting
null,1,Phase 2b Clinical,C2B,bedaquiline,51310,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Anti-bacterial Activity, Safety, and Tolerability of TMC-207 in Participants With Multi-drug Resistant Mycobacterium Tuberculosis (MDR-TB)",Janssen R&D (Ireland),Interventional,9302,2007-06-30 00:00:00,Completed
null,2+,Phase 1 Clinical,C1,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",Y,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,TMC-207 +/- Rifabutin/Rifampin,National Institute of Allergy and Infectious Diseases,Interventional,76765,2011-10-21 00:00:00,Completed
null,1+,Phase 2b Clinical,C2B,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,SUDOCU,PanACEA Sutezolid Dose-finding and Combination Evaluation,Ludwig-Maximilians University of Munich,Interventional,381674,2019-08-31 00:00:00,Not yet recruiting
null,1,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A prospective, unblinded, non-randomized, single-center study to evaluate outcomes of bedaquiline-included regimens in multidrug-resistance/extensively drug-resistant (MDR/XDR) tuberculosis patients after 24 months and to identify factors predisposing the long-term treatment success",Moscow City Research Center For Tuberculosis Department Of Healthcare,Interventional,361163,null,Status not specified
null,3+,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Evaluating the Safety, Tolerability and Pharmacokinetics of Bedaquiline and Delamanid, Alone and in Combination, For Drug-Resistant Pulmonary Tuberculosis",National Institute of Allergy and Infectious Diseases,Interventional,243619,2016-08-31 00:00:00,No longer recruiting
null,2+,Phase 3 Clinical,C3,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,STREAM,The Evaluation of a Standard Treatment Regimen of Anti-Tuberculosis Drugs for Patients With MDR-TB,International Union Against Tuberculosis and Lung Diseases,Interventional,228190,2016-04-30 00:00:00,Recruiting
null,1+,Phase 2b Clinical,C2B,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A Phase II to Evaluate the Efficacy, Safety and Tolerability of Combinations of Bedaquiline, Moxifloxacin, PA-824 and Pyrazinamide in Adult Subjects With Drug-Sensitive or Multi Drug-Resistant Pulmonary Tuberculosis",TB Alliance,Interventional,210646,2014-10-23 00:00:00,Completed
null,1,Phase 1 Clinical,C1,AERAS-402,53975,"Safety,Efficacy",Y,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,"A phase I, double-blind, randomized, placebo-controlled, safety and immunogenicity study of AERAS-402, a potential vaccine for Mycobacterium tuberculosis infection",Crucell NV,Interventional,8499,2007-12-21 00:00:00,Completed
null,1,Phase 1 Clinical,C1,AERAS-402,53975,Safety,Y,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,A phase I study to test the safety of AERAS-402 in healthy infants previously vaccinated with the Bacille Calmette-Guerin (BCG) vaccine,"Aeras Global TB Vaccine Foundation, Crucell NV",Interventional,53622,2009-04-28 00:00:00,Status not specified
null,1,Phase 1 Clinical,C1,AERAS-402,53975,"Safety,Efficacy",Y,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,"A Study to Evaluate Safety and Immunogenicity of AERAS-402 Administered in HIV-negative, BCG-vaccinated, QFT (+) and (-) Adults Without Evidence of TB",Aeras Global TB Vaccine Foundation,Interventional,228651,2008-09-30 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",Y,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"Safety of Tuberculosis Vaccine, MVA-85A, Administered by the Aerosol Route and the Intradermal Route",University of Oxford,Interventional,83464,2011-09-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,MVA-85A,55317,"Safety,Efficacy",N,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,TB036,Trial to Investigate the Effect of Schistosoma Mansoni Infection on the Response to Vaccination With MVA-85A in BCG-vaccinated African Adolescents,University of Oxford,Interventional,201409,2014-06-30 00:00:00,Completed
null,2,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",Y,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,Phase I Trial Evaluating Safety and Immunogenicity of MVA-85A-IMX3-13 Compared to MVA-85A in BCG Vaccinated Adults,University of Oxford,Interventional,142322,2013-07-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,A Phase I Study of the Safety and Immunogenicity of MVA85A in Healthy Gambian Volunteers,University of Oxford,Interventional,10872,2003-03-31 00:00:00,Completed
null,6,Phase 2 Clinical,C2,CC-11050,59386,"Safety,Efficacy",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,TBHDT,TB Host Directed Therapy,Aurum Institute,Interventional,279898,2016-11-30 00:00:00,No longer recruiting
null,1,Phase 1b Clinical,C1B,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"Phase I, ID93 + GLA-SE Vaccine Trial in BCG-vaccinated Healthy Adult Volunteers",Infectious Disease Research Institute,Interventional,151743,2013-09-30 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,"rifampicin + isoniazid + piperine (fixed dose combination, tuberculosis), Cadila Pharmaceuticals",69440,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Clinical Trial for Comparing Safety and Efficacy of Bio-enhanced Rifampicin (Risorine) Capsule in newly diagnosed Pulmonary Tuberculosis in Adult Patients,All India Institute of Medical Sciences,Interventional,295037,2017-04-17 00:00:00,Not yet recruiting
null,1,Phase 4 Clinical,C4,"rifampicin + isoniazid + piperine (fixed dose combination, tuberculosis), Cadila Pharmaceuticals",69440,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,A Risorine Study in Sputum Positive Patients After 8 Weeks of Conventional Treatment,Cadila Pharmaceuticals Ltd,Interventional,138715,2012-06-10 00:00:00,Recruiting
null,2+,Phase 4 Clinical,C4,"rifampicin + isoniazid + piperine (fixed dose combination, tuberculosis), Cadila Pharmaceuticals",69440,Efficacy,N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Comparative Evaluation of the Effect of Risorine in Patients With Newly Diagnosed Sputum Smear Positive Pulmonary Tuberculosis,Cadila Pharmaceuticals Ltd,Interventional,118547,2011-02-10 00:00:00,Completed
null,1,Phase 1 Clinical,C1,SSI H56-IC31,74849,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity Study of AERAS-456 Vaccine for Tuberculosis,Aeras Global TB Vaccine Foundation,Interventional,158535,2011-11-30 00:00:00,Completed
null,1,Phase 1/Phase 2 Clinical,C12,SSI H56-IC31,74849,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,A Phase I/IIa Safety And Immunogenicity of AERAS-456 in HIV-Negative Adults With And Without Latent Tuberculosis Infection,Aeras Global TB Vaccine Foundation,Interventional,136263,2013-08-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,Perchlozone,87251,"Safety,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,"An open, phase I study to study the pharmacokinetics, safety and tolerability of Perhlozone (400 mg capsules) in healthy volunteers after a single dose",Pharmasyntez,Interventional,167779,2012-03-20 00:00:00,Status not specified
null,2,Phase 1/Phase 2 Clinical,C12,MTBVAC,89744,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,MTBVAC-Ph1b,"Dose-escalation, Safety and Immunogenicity Study to Compare MTBVAC to BCG in Newborns With a Safety Arm in Adults",Biofabri SL,Interventional,257534,2015-09-30 00:00:00,Completed
null,2,Phase 2a Clinical,C2A,macozinone,90085,"Safety,Efficacy,Pharmacokinetics",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Phase IIa Study of PBTZ-169,Nearmedic Plus,Interventional,318771,2016-12-16 00:00:00,Terminated
null,1,Phase 2b Clinical,C2B,macozinone,90085,"Safety,Efficacy,Pharmacokinetics",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"International, multicenter, double-blind, placebo-controlled, randomized trial to evaluate the efficacy, safety and pharmacokinetics of PBTZ-169 when used in combination therapy in patients with tuberculosis of respiratory organs with bacterial excretion and drug resistance",Nearmedic Plus,Interventional,316145,2017-08-17 00:00:00,Status not specified
null,1+,Phase 2 Clinical,C2,"clofazimine (oral, tuberculosis), Novartis",91861,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,CORTAIL,Evaluation of clofazimine as a part of TB treatment in order to shorten the duration of treatment,Indian Council of Medical Research,Interventional,373668,2019-04-01 00:00:00,Not yet recruiting
null,1,Phase 4 Clinical,C4,"clofazimine (oral, tuberculosis), Novartis",91861,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"A randomized, multicenter, controlled trial for clofazimine-containing protocol in the treatment of newly diagnosed multidrug-resistant tuberculosis","Beijing Chest Hospital, Capital Medical University",Interventional,365020,2012-12-01 00:00:00,No longer recruiting
null,1+,Phase 4 Clinical,C4,"clofazimine (oral, tuberculosis), Novartis",91861,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Multicenter, controlled clinical study of the safety, tolerability and efficacy of clofazimine in the treatment of drug-resistant tuberculosis",Beijing Chest Hospital,Interventional,328802,2009-12-01 00:00:00,No longer recruiting
null,1,Phase 3 Clinical,C3,ESAT-6CFP10,95442,Efficacy,N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Recombinant Mycobacterium tuberculosis allergen ESAT6-CFP10 for 18 to 65 years old healthy people: randomized, blinded, parallel-group phase III clinical trial",Jiangsu Provincial Academy Of Environmental Science,Interventional,252783,2016-02-17 00:00:00,Not yet recruiting
null,1,Phase 1 Clinical,C1,TB/FLU-04L,98373,"Safety,Efficacy",N,Y,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,"Reactogenicity, Safety and Immunogenicity of a TB/FLU-04L Tuberculosis Vaccine",National Center for Biotechnology of the Republic of Kazakhstan,Interventional,235054,2013-10-31 00:00:00,Completed
null,3,Phase 1 Clinical,C1,etoricoxib,22216,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TBCOX2,Therapeutic Vaccination and Immune Modulation - New Treatment Strategies for the MDR Tuberculosis Pandemic,Oslo University Hospital,Interventional,235355,2015-11-30 00:00:00,No longer recruiting
null,1+,Phase 1 Clinical,C1,lopinavir + ritonavir,14681,"Safety,Pharmacokinetics",Y,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Evaluating the Safety and Drug Interaction of PA-824, an Investigational Tuberculosis Medication, Together With Efavirenz, Ritonavir-Boosted Lopinavir or Rifampin",National Institute of Allergy and Infectious Diseases,Interventional,86312,2012-05-31 00:00:00,Completed
null,3,Phase 2 Clinical,C2,Recombivax HB,6748,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,ELVIS,A Trial Investigating the Influence of BCG and Hepatitis B Immunization at Birth on Neonatal Immune Responses: The Early Life Vaccines and Immunity Study,Murdoch Childrens Research Institute,Interventional,229498,2015-03-31 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,didanosine,2935,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Safety and Efficacy of Two Once Daily Anti Retroviral Treatment Regimens Along With Anti-Tuberculosis Treatment,Tuberculosis Research Centre,Interventional,10863,2006-06-30 00:00:00,Suspended
null,1,Phase 2/Phase 3 Clinical,C23,trimethoprim + sulphamethoxazole,44363,"Safety,Efficacy",Y,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Daily Isoniazid to Prevent Tuberculosis in Infants Born to Mothers With HIV,International Maternal Pediatric Adolescent AIDS Clinical Trials Group,Interventional,187839,2004-02-29 00:00:00,Terminated
null,2+,Phase 4 Clinical,C4,lamivudine,3474,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Raltegravir + ABC/3TC in HIV/TB Co-Infected Patients,Central Research Institute of Epidemiology,Interventional,63729,2010-10-31 00:00:00,Recruiting
null,1+,Phase 4 Clinical,C4,lamivudine,3474,Safety,Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TIME,Appropriate Timing of HAART in Co-infected HIV/TB Patients,Bamrasnaradura Infectious Diseases Institute,Interventional,61991,2009-10-31 00:00:00,Terminated
null,2+,Phase 3 Clinical,C3,lamivudine,3474,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,Pred-ART,"Preventing TB-IRIS in High-risk Patients: a Randomized, Placebo-controlled Trial of Prednisone",University of Cape Town,Interventional,150793,2013-08-30 00:00:00,Completed
null,4+,Phase not specified,NS,lamivudine,3474,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Once-Daily Dose of Nevirapine (400 mg) Versus Twice Daily Dose (200 mg) of Nevirapine in HIV and Tuberculosis Infection,National AIDS Control Organization,Interventional,126486,2012-09-01 00:00:00,Not yet recruiting
Asian Ancestry,1+,Phase 2 Clinical,C2,lamivudine,3474,"Safety,Efficacy,Bioavailability,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,11187,2009-02-28 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,lamivudine,3474,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Safety and Efficacy of Two Once Daily Anti Retroviral Treatment Regimens Along With Anti-Tuberculosis Treatment,Tuberculosis Research Centre,Interventional,10863,2006-06-30 00:00:00,Suspended
null,1+,Phase 2 Clinical,C2,pravastatin,4155,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,StAT-TB,Statin Adjunctive Therapy for TB,Johns Hopkins University,Interventional,331728,2019-08-15 00:00:00,Not yet recruiting
null,2+,Phase 2 Clinical,C2,nitazoxanide,11089,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,A 14-Day Early Bactericidal Activity Study of Nitazoxanide for the Treatment of Tuberculosis,Weill Medical College of Cornell University,Interventional,253491,2016-02-29 00:00:00,Completed
null,1+,Phase 1 Clinical,C1,"tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",49219,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Efavirenz in the Presence of Rifampicin and Isoniazid,St Stephens Aids Trust,Interventional,265766,2016-10-21 00:00:00,Recruiting
null,1+,Phase not specified,NS,"tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",49219,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Simultaneous Versus Sequential Antiretroviral Therapy (ARV) Therapy and Mycobacterium Tuberculosis (MTB) Treatment,Instituto Nacional de Enfermedades Respiratorias,Interventional,169697,2008-03-31 00:00:00,Terminated
null,5,Phase 1/Phase 2 Clinical,C12,gatifloxacin,7017,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TBRU 10,"Early Bactericidal Activity of Linezolid, Gatifloxacin, Levofloxacin, Isoniazid (INH) and Moxifloxacin in HIV Negative Adults With Initial Episodes of Sputum Smear-Positive Pulmonary Tuberculosis",National Institute of Allergy and Infectious Diseases,Interventional,10869,2004-02-29 00:00:00,Completed
null,1,Phase 0 Clinical,C0,"BCG vaccine, Organon",13624,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Leukapheresis Sampling for Immune Responses After BCG Vaccination in BCG-naive Healthy Adults in the US,Aeras Global TB Vaccine Foundation,Interventional,227341,2015-05-31 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,efavirenz,10172,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TEMPRANO,Early Antiretroviral Treatment and/or Early Isoniazid Prophylaxis Against Tuberculosis in HIV-Infected Adults,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,195741,2008-03-31 00:00:00,Completed
null,2+,Phase not specified,NS,efavirenz,10172,"Safety,Efficacy,Bioavailability",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,PK-TB-HAART,"Bioavailability of the Fixed Dose Formulation Rifafour Containing Isoniazid, Rifampicin, Pyrazinamide, Ethambutol and the World Health Organization (WHO) Recommended First Line Antiretroviral Drugs Zidovudine, Lamivudine, Efavirenz Administered to New Tuberculosis (TB) Patients at Different Levels of Immunosuppression",World Health Organization,Interventional,136052,2006-05-29 00:00:00,Completed
null,1,Phase 4 Clinical,C4,zileuton,4718,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Optimization of Clinical Treatment Schemes for Multidrug - Resistant Pulmonary Tuberculosis Based on Host - Mediate,Shanghai Public Health Clinical Center,Interventional,276708,2016-10-20 00:00:00,Recruiting
null,1+,Phase 3 Clinical,C3,nevirapine,3700,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,"NVP",Efficacy and Safety of Concomitant Use of Nevirapine and Rifampicin With HIV-TB,All India Institute of Medical Sciences,Interventional,114300,2007-06-30 00:00:00,Completed
null,2,Phase 4 Clinical,C4,nevirapine,3700,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,OPTI-NNRTI,A Study to Determine the Best Dose of Antivirals in Patients With Both TB and HIV,Stanford University,Interventional,11177,2007-07-31 00:00:00,Terminated
null,4,Phase 3 Clinical,C3,nevirapine,3700,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,N2R,Efavirenz-Based Versus Nevirapine-Based Antiretroviral Therapy Among HIV-Infected Patients Receiving Rifampin,Bamrasnaradura Infectious Diseases Institute,Interventional,10947,2007-01-31 00:00:00,Completed
null,2+,Phase 2 Clinical,C2,"amoxicillin + clavulanate potassium, GSK",44284,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Phase II Trial to Evaluate the Early Bactericidal Activity, Safety and Tolerability of Meropenem Plus Amoxycillin/CA and Faropenem Plus Amoxycillin/CA in Adult Patients With Newly Diagnosed Pulmonary Tuberculosis",Task Foundation NPC,Interventional,220739,2014-09-30 00:00:00,Completed
null,2+,Phase 4 Clinical,C4,abacavir,6242,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Raltegravir + ABC/3TC in HIV/TB Co-Infected Patients,Central Research Institute of Epidemiology,Interventional,63729,2010-10-31 00:00:00,Recruiting
null,2+,Phase 1 Clinical,C1,midazolam hydrochloride,44303,"Safety,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A Phase I Study to Evaluate Safety, Tolerability, PK, and PK Interactions of TBA-7371",TB Alliance,Interventional,303756,2017-08-29 00:00:00,Completed
null,1+,Phase not specified,NS,ofloxacin,52139,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A Comparative Study of the Bactericidal and Sterilising Activity of Three Fluoroquinolones: Gatifloxacin, Moxifloxacin and Ofloxacin Substituted for Ethambutol in the Two Month Initial Phase of the Standard Anti-Tuberculosis Treatment Regimen Also Containing Rifampicin, Isoniazid and Pyrazinamide (South Africa)",United Nations International Children's Fund,Interventional,152200,2004-11-25 00:00:00,Completed
null,1+,Phase not specified,NS,omeprazole,44305,Pharmacokinetics,Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,The Influence of Rifampicin Discontinuation on Rifampicin-Induced Cytochrome P450 Enzyme Activity,Hamamatsu University School of Medicine,Interventional,122291,2010-07-01 00:00:00,Completed
null,1,Phase 1/Phase 2 Clinical,C12,linezolid,11036,"Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,S30PK,Linezolid Pharmacokinetics (PK) in Multi-Drug Resistant (MDR)/Extensively-Drug Resistant (XDR) Tuberculosis (TB),Centers for Disease Control and Prevention,Interventional,48035,2009-04-30 00:00:00,Completed
null,4+,Phase 2a Clinical,C2A,linezolid,11036,"Safety,Efficacy,Bioequivalence,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,LASER-TBM,"Linezolid, Aspirin and Enhanced Dose Rifampicin in HIV-TBM",University of Cape Town,Interventional,378146,2019-06-01 00:00:00,Not yet recruiting
null,1+,Phase 2 Clinical,C2,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TB-TRUST,Refining MDR-TB Treatment Regimens for Ultra Short Therapy,Huashan Hospital,Interventional,372676,2019-05-01 00:00:00,Not yet recruiting
null,1+,Phase 2 Clinical,C2,linezolid,11036,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Study on Tuberculosis Resistant to Treatment,"Indian Council of Medical Research, Tuberculosis Research Centre",Interventional,369747,2019-02-01 00:00:00,Not yet recruiting
null,1+,Phase 2 Clinical,C2,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,GRACE-TB,NGS-Guided(G) Regimens(R) of Anti-tuberculosis(A) Drugs for the Control(C) and Eradication(E) of MDR-TB,Huashan Hospital,Interventional,348056,2018-08-05 00:00:00,Not yet recruiting
null,2+,Phase 4 Clinical,C4,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,2,Phase 2 Clinical,C2,linezolid,11036,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,A study to investigate the safety and efficacy of bedaquiline and linezolid chemotherapy for extensively drug-resistant pulmonary tuberculosis within 6 months period,Russian Academy of Sciences,Interventional,280303,null,Status not specified
null,1+,Phase 2/Phase 3 Clinical,C23,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TB-PRACTECAL,Pragmatic Clinical Trial for a More Effective Concise and Less Toxic MDR-TB Treatment Regimen(s),Medecins Sans Frontieres,Interventional,244304,2017-01-31 00:00:00,Recruiting
Asian Ancestry,2,Phase not specified,NS,linezolid,11036,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A hospital-based retrospective study to assess the clinical outcomes of linezolid treatment for extensively drug-resistant tuberculosis in Beijing, China",309th Hospital of Chinese People's Liberation Army,Interventional,234062,null,Status not specified
null,2+,Phase 2/Phase 3 Clinical,C23,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,NEXT,An Open-label RCT to Evaluate a New Treatment Regimen for Patients With Multidrug-resistant Tuberculosis,University of Cape Town,Interventional,230529,2015-10-31 00:00:00,Recruiting
Japanese Ancestry,2+,Phase 2 Clinical,C2,linezolid,11036,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,An Exploratory Study of TMC-207 in Japanese Participants with Pulmonary Multi-Drug Resistant Tuberculosis (MDR-TB),Janssen Pharmaceutical KK,Interventional,222400,2015-02-18 00:00:00,Completed
null,1,Phase 4 Clinical,C4,Fluzone,44409,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TIV_HIV_TB,Effect of HIV and/or Active Tuberculosis on the Immune Responses to Trivalent Influenza Vaccine (TIV) in Adults,University of Witwatersrand,Interventional,116439,2014-03-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,dolutegravir,59062,Pharmacokinetics,N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RADIO,A Clinical Study Investigating Rifampicin and Dolutegravir in Combination in Healthy Volunteers,ST STEPHEN'S CLINICAL RESEARCH LIMITED,Interventional,303292,2017-10-31 00:00:00,Not yet recruiting
null,1+,Phase 1 Clinical,C1,dolutegravir,59062,"Safety,Pharmacokinetics",Y,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Impact of Once-Weekly Rifapentine and Isoniazid on the Steady State Pharmacokinetics of Dolutegravir and Darunavir Boosted With Cobicistat in Healthy Volunteers,National Institutes of Health Clinical Center,Interventional,260814,2016-06-03 00:00:00,Recruiting
null,1+,Phase 4 Clinical,C4,Pentacel,15298,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,BAM,A Study of the Interaction Between BCG And MenC Immunization,University of Oxford,Interventional,162886,2014-06-20 00:00:00,Completed
African Ancestry,1+,Phase not specified,NS,"artesunate + amodiaquine combination tablet (malaria), DNDi/sanofi-aventis",53041,"Safety,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,ARTEM-TB STUDY,Evaluating Pharmacokinetic Interactions Between Artemisinin-Based Therapies and Rifampacin-Based Tuberculosis Treatment in African Patients,Infectious Diseases Institute of Makerer University,Interventional,142485,2013-01-31 00:00:00,Not yet recruiting
null,2+,Phase 1 Clinical,C1,faropenem,4492,"Efficacy,Pharmacokinetics,Pharmacodynamics",Y,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Whole Blood Bactericidal Activity (WBA) Against Mycobacterium Tuberculosis of Faropenem Plus Amoxicillin/Clavulanic Acid in Healthy Volunteers,National University Hospital (Singapore) Pte Ltd,Interventional,224811,2015-02-28 00:00:00,Completed
null,2,Phase 2 Clinical,C2,levofloxacin,3492,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,Opti-Q,Efficacy and Safety of Levofloxacin for the Treatment of MDR-TB,Boston University,Interventional,149562,2015-01-31 00:00:00,No longer recruiting
null,1+,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,The Treatment of Tuberculosis in HIV-Infected Patients,National Institute of Allergy and Infectious Diseases,Interventional,10643,null,Completed
Asian Ancestry,1+,Phase not specified,NS,rifabutin,4229,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Acquired Immunodeficiency Syndrome (AIDS) and Tuberculosis (TB) Co-Infection Treatment Strategies Study of China,Shanghai Public Health Clinical Center,Interventional,76946,2009-02-28 00:00:00,Recruiting
null,1+,Phase 4 Clinical,C4,rifabutin,4229,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Research on New Regimens for Retreatment Pulmonary Tuberculosis,Shanghai Pulmonary Hospital,Interventional,220243,2013-06-30 00:00:00,Recruiting
African Ancestry,2,Phase 3 Clinical,C3,rifabutin,4229,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A single-blind, randomized, safety study comparing rifabutin with rifampicin in the treatment of HIV-1-associated tuberculosis",Pharmacia & Upjohn AB,Interventional,15878,1995-12-31 00:00:00,Status not specified
null,5,Phase not specified,NS,rifabutin,4229,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A multicenter, randomized, 6-month study to compare the efficacy, tolerability and toxicity of two different regimens of rifabutin with that of rifampicin",Pharmacia & Upjohn AB,Interventional,15869,1994-12-31 00:00:00,Status not specified
null,1+,Phase 2 Clinical,C2,rifabutin,4229,"Safety,Bioavailability,Pharmacokinetics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV Co-Infection in Vietnam,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,11188,2010-06-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"Safety and Immunogenicity of Two Formulations of Tuberculosis Vaccines GSK-692342 Given at 0, 1 Months to Healthy Adults",GlaxoSmithKline plc,Interventional,9520,2006-11-30 00:00:00,Completed
null,1,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Study in Healthy Adults to Evaluate Gene Activation After Vaccination With GlaxoSmithKline (GSK) Biologicals Candidate Tuberculosis (TB) Vaccine GSK-692342,GlaxoSmithKline plc,Interventional,90314,2012-08-21 00:00:00,Completed
null,2+,Phase 4 Clinical,C4,sutezolid,11088,"Safety,Efficacy",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,IMM-201,11115,Efficacy,Y,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"A phase I, randomized, study to evaluate the efficacy of SRL-172 on cell-mediated immunity of patients with pulmonary tuberculosis",Silence Therapeutics plc,Interventional,17288,1999-12-31 00:00:00,Status not specified
null,2,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Moxifloxacin As Part of a Multi-Drug Regimen For Tuberculosis,"Food and Drug Administration, Johns Hopkins University",Interventional,8791,2004-10-31 00:00:00,Completed
null,2,Phase 3 Clinical,C3,moxifloxacin,12978,Efficacy,Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Comparison of the Effect Between Levofloxacin and Moxifloxacin Among MDR-TB Patients,Seoul National University Hospital,Interventional,63801,2010-03-31 00:00:00,Terminated
null,1+,Phase 2/Phase 3 Clinical,C23,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,SIMPLICITB,"Trial to Evaluate the Efficacy, Safety and Tolerability of BPaMZ in Drug-Sensitive (DS-TB) Adult Patients and Drug-Resistant (DR-TB) Adult Patients","PPD Pharmaceutical Development Philippines Corporation, TB Alliance",Interventional,319125,2018-07-30 00:00:00,Recruiting
null,1+,Phase 3 Clinical,C3,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,S31PK/PD,Pharmacokinetic and Pharmacodynamic Study of High-Dose Rifapentine and Moxifloxacin for Treatment of Tuberculosis,Centers for Disease Control and Prevention,Interventional,242269,2016-05-30 00:00:00,Recruiting
null,6+,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,NexGen EBA Radiological and Immunological Biomarkers of Sterilizing Drug Activity in Tuberculosis,National Institute of Allergy and Infectious Diseases,Interventional,222933,2015-02-25 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Research on New Regimens for Retreatment Pulmonary Tuberculosis,Shanghai Pulmonary Hospital,Interventional,220243,2013-06-30 00:00:00,Recruiting
null,1+,Phase 1 Clinical,C1,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Measurement of Anti-TB Drugs in Lung Tissue From Patients Having Surgery to Treat Tuberculosis,National Institute of Allergy and Infectious Diseases,Interventional,192117,2008-12-29 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,TBTC Study 28: Moxifloxacin Versus Isoniazid for TB Treatment,Centers for Disease Control and Prevention,Interventional,10685,2006-02-28 00:00:00,Completed
null,1,Phase 1 Clinical,C1,pretomanid,13323,"Safety,Pharmacokinetics",N,Y,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,"A phase I trial to evaluate the safety, tolerability, pharmacokinetics of a single dose of PA-824",TB Alliance,Interventional,9416,2005-06-14 00:00:00,Status not specified
null,1+,Phase 2/Phase 3 Clinical,C23,pretomanid,13323,"Safety,Efficacy",N,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,SIMPLICITB,"Trial to Evaluate the Efficacy, Safety and Tolerability of BPaMZ in Drug-Sensitive (DS-TB) Adult Patients and Drug-Resistant (DR-TB) Adult Patients","PPD Pharmaceutical Development Philippines Corporation, TB Alliance",Interventional,319125,2018-07-30 00:00:00,Recruiting
null,2,Phase 2 Clinical,C2,rifapentine,15102,Safety,Y,N,Launched,L,Mycobacterium tuberculosis infection,221,TBTC Study 25,TBTC Study 25: Study of the Tolerability of Higher Doses of Rifapentine in the Treatment of Tuberculosis,Centers for Disease Control and Prevention,Interventional,8751,1999-07-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,rifapentine,15102,"Safety,Pharmacokinetics",Y,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,Evaluating the Pharmacokinetics of High-Dose Rifapentine When Given as a Single-Dose or in Divided Doses to Healthy Adults,National Institute of Allergy and Infectious Diseases,Interventional,86389,2012-06-30 00:00:00,Terminated
null,2,Phase 2 Clinical,C2,rifapentine,15102,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,TBTC-29PK,"High-Dose Rifapentine Pharmacokinetics, Tolerability and Safety Dosage Rifapentine for Treatment of Tuberculosis",Centers for Disease Control and Prevention,Interventional,63261,2009-04-30 00:00:00,Completed
null,2,Phase 3 Clinical,C3,rifapentine,15102,Efficacy,N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Study for latent tuberculosis infection intervention among close contacts of pulmonary tuberculosis patients,The Chinese Centre for Disease Control and Prevention,Interventional,361821,2018-06-10 00:00:00,Recruiting
null,1+,Phase 1/Phase 2 Clinical,C12,rifapentine,15102,"Safety,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,"Evaluating the Pharmacokinetics, Tolerability, and Safety of Once-Weekly Rifapentine and Isoniazid in HIV-1-Infected and HIV-1-Uninfected Pregnant and Postpartum Women With Latent Tuberculosis Infection",National Institute of Allergy and Infectious Diseases,Interventional,250483,2017-02-15 00:00:00,Completed
null,4+,Phase 1 Clinical,C1,rifapentine,15102,"Safety,Pharmacokinetics",Y,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,Pharmacokinetic Interaction Between Rifapentine or Rifampicin and a Single-dose of TMC-207 in Healthy Subjects,TB Alliance,Interventional,208141,2010-03-31 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,delamanid,16545,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Study on Tuberculosis Resistant to Treatment,"Indian Council of Medical Research, Tuberculosis Research Centre",Interventional,369747,2019-02-01 00:00:00,Not yet recruiting
null,1,Phase 3 Clinical,C3,delamanid,16545,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,A phase III study of delamanid in multidrug-resistant tuberculosis patients,Otsuka Holdings Co Ltd,Interventional,323086,null,Status not specified
null,1,Phase 2 Clinical,C2,HE-2000,19980,Efficacy,Y,N,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,"A phase II pilot, placebo-controlled study to evaluate the efficacy of HE-2000 on opportunistic infections such as tuberculosis (TB) in late-stage AIDS patients",Harbor Therapeutics Inc,Interventional,9820,2002-02-04 00:00:00,Status not specified
null,1,Phase 1/Phase 2 Clinical,C12,H4:IC31,48499,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"Phase I/II, Safety and Immunogenicity Study of AERAS-404 in BCG-Primed Infants",Aeras Global TB Vaccine Foundation,Interventional,134374,2013-07-01 00:00:00,Completed
null,2+,Phase 2/Phase 3 Clinical,C23,bedaquiline,51310,Efficacy,N,Y,Launched,L,Mycobacterium tuberculosis infection,221,PRACTECAL-PRO,Patient-reported Experiences and Quality of Life Outcomes in the TB-PRACTECAL Clinical Trial,"Medecins Sans Frontieres, Netherlands",Interventional,379769,2019-07-01 00:00:00,Not yet recruiting
null,1,Phase 1/Phase 2 Clinical,C12,bedaquiline,51310,"Safety,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Evaluating the Pharmacokinetics, Safety, and Tolerability of Bedaquiline in HIV-Infected and HIV-Uninfected Infants, Children, and Adolescents With Multidrug-Resistant Tuberculosis","B. J. Medical College, Pune, National Institute of Allergy and Infectious Diseases",Interventional,272021,2017-08-18 00:00:00,Recruiting
null,2+,Phase 3 Clinical,C3,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,A Phase III Study Assessing the Safety and Efficacy of Bedaquiline Plus PA-824 Plus Linezolid in Subjects With Drug-Resistant Pulmonary Tuberculosis,TB Alliance,Interventional,219499,2015-03-31 00:00:00,No longer recruiting
null,1,Phase not specified,NS,bedaquiline,51310,Efficacy,Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A randomized, double-blinded, dose-ranging study to assess the 14-day early bactericidal activity of bedaquiline (TMC-207) in patients with sputum microscopy smear-positive pulmonary tuberculosis",University of Stellenbosch,Interventional,139369,2013-03-04 00:00:00,Status not specified
null,1,Phase 1 Clinical,C1,"Ag85B-ESAT-6 vaccine (IC31 adjuvant, tuberculosis), SSI/ Valneva",53784,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,THYB-02,A Safety and Immunogenicity Trial With an Adjuvanted Tuberculosis (TB) Subunit Vaccine in Purified Protein Derivative (PPD) Positive Volunteers,Statens Serum Institut,Interventional,58503,2007-09-30 00:00:00,Completed
null,1,Phase 1 Clinical,C1,AERAS-402,53975,"Safety,Efficacy",N,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,A Study to Evaluate Safety and Immunogenicity of AERAS-402,Aeras Global TB Vaccine Foundation,Interventional,78482,2011-02-28 00:00:00,Completed
null,1,Phase 2 Clinical,C2,AERAS-402,53975,"Safety,Efficacy",N,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,A Study to Evaluate the Safety of AERAS-402 in Adults Recently Treated for Pulmonary TB,Aeras Global TB Vaccine Foundation,Interventional,226801,2008-10-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,cadi-05,55173,"Safety,Efficacy",N,N,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,Efficacy and Safety Study of Immunomodulator as an Adjunct Therapy in Pulmonary Tuberculosis (TB) Retreatment Patients,Indian Government Department of Biotechnology,Interventional,10057,2005-03-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,T−Cell Turnover Following Vaccination With MVA-85A,University of Oxford,Interventional,11182,2007-10-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity of MVA85A in Volunteers Latently Infected With TB,University of Oxford,Interventional,10941,2005-08-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"A Phase I Study of the Safety and Immunogenicity of a Recombinant MVA Vaccine Encoding a Secreted Antigen From M Tuberculosis, Antigen 85A, Delivered Intradermally by a Needle Injection in Healthy Volunteers Who Have Received BCG Immunisation 1 Month Previously",University of Oxford,Interventional,10873,2003-06-30 00:00:00,Completed
null,3,Phase 1 Clinical,C1,"golotimod (oral), SciClone/Verta",55521,"Safety,Bioavailability,Pharmacokinetics",Y,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,Phase I Trial to Compare Oral Formulation of Golotimod Versus that of Subcutaneous and Sublingual Formulations of Golotimod in Healthy Volunteers for the treatment of Tuberculosis (TB),SciClone Pharmaceuticals Inc,Interventional,8932,2006-05-25 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,IMX-461,66409,"Safety,Efficacy",Y,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,Phase I Trial Evaluating Safety and Immunogenicity of MVA-85A-IMX3-13 Compared to MVA-85A in BCG Vaccinated Adults,University of Oxford,Interventional,142322,2013-07-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,Wei Ka,81037,"Safety,Efficacy",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,Phase III Clinical Study of Efficacy and Safety of Vaccae to Prevent Tuberculosis,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,Interventional,160177,2013-10-31 00:00:00,Completed
null,2,Phase not specified,NS,"ethambutol hydrochloride (250 mg) + pyrazinamide (400 mg) + rifampicin (120 mg) + isoniazid (120 mg) (fixed dose combination, tuberculosis), Shenyang Hongqi Pharmaceutical",82062,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,The Efficacy and Safety of Early Double J Stent Placement in Treatment of Renal Tuberculosis: A Novel Renal Function Protective Strategy,Shanghai Changzheng Hospital,Interventional,132105,2012-06-06 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,ChAdOx1-85A,84564,"Safety,Efficacy",N,Y,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,Safety Study of ChAdOx1-85A Vaccination With and Without MVA-85A Boost in Healthy Adults,University of Oxford,Interventional,120744,2013-07-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,Perchlozone,87251,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"An international, multicenter, randomized, double-blind, placebo-controlled, parallel-group study of the efficacy and safety of Perchlozone in the treatment of patients with pulmonary tuberculosis with MDR-TB, including HIV",Pharmasyntez,Interventional,291547,2017-03-10 00:00:00,Status not specified
null,2,Phase 2a Clinical,C2A,MTBVAC,89744,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Dose-Defining Safety and Immunogenicity Study of MTBVAC in South African Neonates,Biofabri SL,Interventional,340636,2019-02-11 00:00:00,Recruiting
null,2,Phase 1/Phase 2 Clinical,C12,MTBVAC,89744,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,MTBVAC Study in Adults With and Without Latent Tuberculosis Infection in South Africa,International AIDS Vaccine Initiative,Interventional,275657,2019-01-24 00:00:00,Recruiting
null,1,Phase 2a Clinical,C2A,TB/FLU-04L,98373,"Safety,Efficacy",N,N,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,"A randomized, double-blind, placebo-controlled, phase II clinical trial of TB/FLU-04L TB vaccine in adult volunteers with signs of latent tuberculosis infection",National Center for Biotechnology of the Republic of Kazakhstan,Interventional,301908,2017-06-05 00:00:00,Status not specified
null,1,Phase 1 Clinical,C1,GC-3107,108779,"Safety,Efficacy",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Study to Investigate the Safety and Efficacy of GC-3107 (BCG Vaccine) in Healthy Adults,GC Pharma,Interventional,321760,2017-12-14 00:00:00,Recruiting
null,1+,Phase 4 Clinical,C4,tenofovir disoproxil fumarate,14493,Safety,Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TIME,Appropriate Timing of HAART in Co-infected HIV/TB Patients,Bamrasnaradura Infectious Diseases Institute,Interventional,61991,2009-10-31 00:00:00,Terminated
null,1+,Phase 0 Clinical,C0,tenofovir disoproxil fumarate,14493,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,TasP in Correctional Facilities,University of North Carolina,Interventional,280225,2016-02-01 00:00:00,Completed
null,1,Phase 2 Clinical,C2,lopinavir + ritonavir,14681,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics (PK) and Safety of Two Different Doses of Lopinavir/Ritonavir in HIV/Tuberculosis (TB) Co-Infected Patients Receiving Rifampicin Containing Anti-Tuberculosis Therapy,The HIV Netherlands Australia Thailand Research Collaboration,Interventional,67098,2010-11-30 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,lopinavir + ritonavir,14681,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,An Evaluation of the Pharmacological Interaction of Lopinavir/ritonavir and Rifampin,Fundacao Oswaldo Cruz (Fiocruz),Interventional,171009,2008-11-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,lopinavir + ritonavir,14681,"Safety,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RIFLOPI,Rifabutin With Lopinavir/ritonavir in Patients Coinfected With Tuberculosis and HIV in Burkina Faso,"Institut de Recherche en Sciences de la Sante (IRSS), Burkina Faso",Interventional,161441,2013-11-28 00:00:00,Not yet recruiting
null,2,Phase 3 Clinical,C3,"lamivudine + abacavir + zidovudine, GSK",26574,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Anti-HIV Drugs for Ugandan Patients With HIV and Tuberculosis,National Institute of Allergy and Infectious Diseases,Interventional,8801,2004-10-31 00:00:00,Completed
null,1,Phase 3 Clinical,C3,metformin hydrochloride,6050,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Effect of metformin on sputum smear conversion in pulmonary tuberculosis with type 2 diabetes mellitus,Khonkaen Hospital,Interventional,370128,2019-03-01 00:00:00,Not yet recruiting
null,1+,Phase 3 Clinical,C3,lamivudine,3474,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,SAPIT,A Study to Compare Three Existing Starting Points of Antiretroviral Therapy (ART) Initiation in HIV/Tuberculosis (TB) Co-infected Patients,Centre for the AIDS Program of Research in South Africa,Interventional,201474,2005-06-30 00:00:00,Completed
null,4,Phase 4 Clinical,C4,"tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",49219,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,STRIDE,Immediate Versus Deferred Start of Anti-HIV Therapy in HIV Infected Adults Being Treated for Tuberculosis,AIDS Clinical Trials Group,Interventional,10681,2006-08-31 00:00:00,Completed
null,2,Phase 2 Clinical,C2,"tenofovir disoproxil fumarate + emtricitabine + efavirenz, Gilead/BMS/Merck & Co",50038,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,PETE,Pharmacokinetics of Emtricitabine/Tenofovir + Efavirenz in HIV-Infected Patients With Tuberculosis,Poverty Related Infection Oriented Research,Interventional,10945,2008-11-30 00:00:00,Recruiting
null,1+,Phase not specified,NS,gatifloxacin,7017,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A Comparative Study of the Bactericidal and Sterilising Activity of Three Fluoroquinolones: Gatifloxacin, Moxifloxacin and Ofloxacin Substituted for Ethambutol in the Two Month Initial Phase of the Standard Anti-Tuberculosis Treatment Regimen Also Containing Rifampicin, Isoniazid and Pyrazinamide (South Africa)",United Nations International Children's Fund,Interventional,152200,2004-11-25 00:00:00,Completed
null,2,Phase 1 Clinical,C1,"BCG vaccine, Organon",13624,Safety,N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,AERAS 422,Study of AERAS-422 in Healthy Adults,Aeras Global TB Vaccine Foundation,Interventional,76756,2010-12-31 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,PRIDE-HT,PK Study of Rifampicin Interactions With DMPA and Efaviranz in TB,AIDS Clinical Trials Group,Interventional,227340,2015-11-03 00:00:00,Completed
null,1+,Phase 2/Phase 3 Clinical,C23,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,CARINEMO,Comparison of Nevirapine and Efavirenz for the Treatment of HIV-TB Co-infected Patients,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,10948,2007-12-31 00:00:00,Completed
null,6,Phase 4 Clinical,C4,nevirapine,3700,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,DATiC,Optimal Dosing of First-Line Antituberculosis and Antiretroviral Drugs in Children (a Pharmacokinetic Study),University of Cape Town,Interventional,89135,2012-11-30 00:00:00,Completed
null,4+,Phase not specified,NS,nevirapine,3700,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Once-Daily Dose of Nevirapine (400 mg) Versus Twice Daily Dose (200 mg) of Nevirapine in HIV and Tuberculosis Infection,National AIDS Control Organization,Interventional,126486,2012-09-01 00:00:00,Not yet recruiting
null,1,Phase 3 Clinical,C3,meloxicam,3610,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,TB-IRIS NSAID Cox-2 Inhibitor Prevention Trial,University of Stellenbosch,Interventional,172626,2014-04-30 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,doxycycline hyclate,46927,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,Doxy-TB,Doxycycline in Human Pulmonary Tuberculosis,National University Hospital (Singapore) Pte Ltd,Interventional,261320,2015-09-30 00:00:00,Completed
null,1,Phase 1 Clinical,C1,midazolam hydrochloride,44303,"Safety,Efficacy,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TBTC S29B,"Pharmacokinetics, Safety and Tolerability of Escalating Rifapentine Doses in Healthy Volunteers",Johns Hopkins University,Interventional,68204,2010-04-30 00:00:00,Completed
null,1+,Phase 2b Clinical,C2B,midazolam hydrochloride,44303,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,SUDOCU,PanACEA Sutezolid Dose-finding and Combination Evaluation,Ludwig-Maximilians University of Munich,Interventional,381674,2019-08-31 00:00:00,Not yet recruiting
null,1+,Phase 2 Clinical,C2,amoxicillin,44279,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Trial of faropenem and cefadroxil (in combination with amoxicillin/clavulanic acid and standard TB drugs) in patients with pulmonary tuberculosis: measurement of early bactericidal activity and effects on novel biomarkers,National University Hospital (Singapore) Pte Ltd,Interventional,360329,2018-11-30 00:00:00,Not yet recruiting
null,1,Phase 1 Clinical,C1,bortezomib,15954,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Evaluating Whole Blood Bactericidal Activity of Bortezomib Against Mycobacterium Tuberculosis in Healthy Volunteers,National University Hospital (Singapore) Pte Ltd,Interventional,263359,null,Status not specified
null,1+,Phase 2 Clinical,C2,cefadroxil,46931,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Trial of faropenem and cefadroxil (in combination with amoxicillin/clavulanic acid and standard TB drugs) in patients with pulmonary tuberculosis: measurement of early bactericidal activity and effects on novel biomarkers,National University Hospital (Singapore) Pte Ltd,Interventional,360329,2018-11-30 00:00:00,Not yet recruiting
null,1,Phase not specified,NS,azithromycin,2587,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,A Study to Evaluate the Safety and Efficacy of Azithromycin in Individual Patients With Serious Nontuberculous Mycobacterial Disease Who Are Failing or Intolerant of Other Available Therapy,Pfizer Inc,Interventional,8647,1999-11-02 00:00:00,Completed
null,2+,Phase 2 Clinical,C2,linezolid,11036,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,A Phase II Trial to Evaluate the Efficacy and Safety of Linezolid in Tuberculosis Patients,TB Alliance,Interventional,215072,2014-11-30 00:00:00,Completed
null,1,Phase not specified,NS,linezolid,11036,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A Multicenter, Prospective, Randomized, Controlled Trial to Assess  the Efficacy and Safety of Linezolid for the Treatment of Extensively Drug Resistant Tuberculosis in China","Liu, Shanghai Pulmonary Hospital",Interventional,183541,null,Completed
null,1+,Phase 2b Clinical,C2B,raltegravir,54488,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Rifampin-Based Tuberculosis Treatment Versus Rifabutin-Based Tuberculosis Treatment in Persons With HIV,AIDS Clinical Trials Group,Interventional,87585,2013-07-13 00:00:00,Terminated
null,1+,Phase 2 Clinical,C2,raltegravir,54488,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,REFLATE TB,Efficacy and Safety of Two Raltegravir Doses in Naive HIV-1-Infected Patients Receiving Rifampin for Active Tuberculosis,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,40948,2009-07-31 00:00:00,Completed
null,2+,Phase not specified,NS,zidovudine,44316,"Safety,Efficacy,Bioavailability",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,PK-TB-HAART,"Bioavailability of the Fixed Dose Formulation Rifafour Containing Isoniazid, Rifampicin, Pyrazinamide, Ethambutol and the World Health Organization (WHO) Recommended First Line Antiretroviral Drugs Zidovudine, Lamivudine, Efavirenz Administered to New Tuberculosis (TB) Patients at Different Levels of Immunosuppression",World Health Organization,Interventional,136052,2006-05-29 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,zidovudine,44316,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,IPEC-EFV,Randomized Clinical Trial to Assess the Efficacy and Safety of Concomitant Use of Rifampicin and Efavirenz 600 X  800 mg,Fundacao Oswaldo Cruz (Fiocruz),Interventional,11181,2007-01-31 00:00:00,Terminated
null,2,Phase 3 Clinical,C3,levofloxacin,3492,Efficacy,Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Comparison of the Effect Between Levofloxacin and Moxifloxacin Among MDR-TB Patients,Seoul National University Hospital,Interventional,63801,2010-03-31 00:00:00,Terminated
null,3,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,TriDoRe,Novel Triple-Dose Tuberculosis Retreatment Regimens: How to Overcome Resistance Without Creating More,"Institute of Tropical Medicine, Belgium",Interventional,372353,2019-09-30 00:00:00,Not yet recruiting
null,2+,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,DRAMATIC,"Efficacy and Tolerability of Bedaquiline, Delamanid, Levofloxacin, Linezolid, and Clofazimine for Treatment of Patients With MDR-TB",Boston University,Interventional,368916,2020-01-31 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,The V-QUIN MDR Trial,"A randomized, controlled trial of 6 months of daily levofloxacin for the prevention of tuberculosis among household contacts of patients with multi-drug resistant tuberculosis",University of Sydney,Interventional,269403,2016-03-14 00:00:00,Recruiting
null,2+,Phase 2/Phase 3 Clinical,C23,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,MDR-END,Treatment Shortening of MDR-TB Using Existing and New Drugs,Seoul National University Hospital,Interventional,247456,2016-01-31 00:00:00,Recruiting
null,3+,Phase not specified,NS,levofloxacin,3492,Efficacy,N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,The research of new regimen for multidrug-resistant tuberculosis treatment,"Beijing Chest Hospital, Beijing Tuberculosis & Thoracic Tumor Research Institute, Capital Medical University",Interventional,244777,2008-10-01 00:00:00,No longer recruiting
Japanese Ancestry,2+,Phase 2 Clinical,C2,levofloxacin,3492,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,An Exploratory Study of TMC-207 in Japanese Participants with Pulmonary Multi-Drug Resistant Tuberculosis (MDR-TB),Janssen Pharmaceutical KK,Interventional,222400,2015-02-18 00:00:00,Completed
null,1,Phase 3 Clinical,C3,rifabutin,4229,"Safety,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,RIFLOPI,Rifabutin With Lopinavir/ritonavir in Patients Coinfected With Tuberculosis and HIV in Burkina Faso,"Institut de Recherche en Sciences de la Sante (IRSS), Burkina Faso",Interventional,161441,2013-11-28 00:00:00,Not yet recruiting
null,3+,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity Study of a Candidate Tuberculosis Vaccine in Healthy Infants,GlaxoSmithKline plc,Interventional,65639,2010-07-31 00:00:00,Completed
null,1,Phase 2b Clinical,C2B,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Phase IIb Clinical Study of new GSK Vaccine Candidate,GlaxoSmithKline plc,Interventional,137219,2013-01-01 00:00:00,Not yet recruiting
null,2,Phase 1 Clinical,C1,sutezolid,11088,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"Safety, Tolerability, Pharmacokinetics And Measurement Of Whole Blood Activity (WBA) Of PNU-100480 After Multiple Oral Doses In Healthy Adult Volunteers",Sequella Inc,Interventional,60906,2009-10-31 00:00:00,Completed
null,1,Phase 2/Phase 3 Clinical,C23,IMM-201,11115,"Safety,Efficacy",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,A phase II/III study to evaluate the safety and efficacy of SRL-172 for the treatment of tuberculosis,Silence Therapeutics plc,Interventional,19996,1997-12-31 00:00:00,Suspended
null,1+,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,GRACE-TB,NGS-Guided(G) Regimens(R) of Anti-tuberculosis(A) Drugs for the Control(C) and Eradication(E) of MDR-TB,Huashan Hospital,Interventional,348056,2018-08-05 00:00:00,Not yet recruiting
null,3,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,A clinical trial to study the effects of moxifloxacin with regular anti-tuberculosis drugs in Tuberculosis patients,Vels University,Interventional,255644,2015-09-09 00:00:00,Recruiting
null,3+,Phase not specified,NS,moxifloxacin,12978,Efficacy,N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,The research of new regimen for multidrug-resistant tuberculosis treatment,"Beijing Chest Hospital, Beijing Tuberculosis & Thoracic Tumor Research Institute, Capital Medical University",Interventional,244777,2008-10-01 00:00:00,No longer recruiting
null,2,Phase not specified,NS,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,A study to evaluate the safety and efficacy of moxifloxacin in comparision with cephalexin in patients being treated for uncomplicated skin and soft tissue infections,Bayer AG,Interventional,16244,1999-12-31 00:00:00,Status not specified
null,1+,Phase 4 Clinical,C4,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,RIFAQUIN,"An International, Multicenter, Controlled Clinical Trial to Evaluate High-Dose Rifapentine and a Quinolone in the Treatment of Pulmonary Tuberculosis",St Georges University of London,Interventional,153990,2008-08-15 00:00:00,Completed
Asian Ancestry,1,Phase Not Applicable,PNA,moxifloxacin,12978,"Pharmacokinetics,Pharmacodynamics",Y,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,The Effect of Ethnic on Moxifloxacin Induced QT Interval Prolongation in Korean and Japanese Healthy Subjects,Inje University,Interventional,139433,2011-11-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,rifapentine,15102,"Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of rifapentine and isoniazid and NAT2 and SLCO1B1 polymorphisms in pediatric Thai patients with latent tuberculosis infection,Chulalongkorn University,Interventional,379095,2019-06-01 00:00:00,Not yet recruiting
null,1+,Phase 3 Clinical,C3,rifapentine,15102,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Tuberculosis Preventive Therapy Among Latent Tuberculosis Infection in HIV-infected Individuals,The HIV Netherlands Australia Thailand Research Collaboration,Interventional,364544,2019-03-31 00:00:00,Not yet recruiting
null,1,Phase 4 Clinical,C4,rifapentine,15102,Efficacy,N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Latent Mycobacterium tuberculosis infection treatment among individuals with a history of prior tuberculosis: a randomized, controlled trial",Chinese Academy of Medical Sciences & Peking Union Medical College,Interventional,352729,2018-09-01 00:00:00,Recruiting
null,1+,Phase 2/Phase 3 Clinical,C23,rifapentine,15102,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,TRUNCATE-TB,A 2 Month Regimens Using Novel Combinations to Augment Treatment Effectiveness for Drug-Sensitive Tuberculosis,"Syneos Health Inc, University College London",Interventional,333435,2018-03-21 00:00:00,Recruiting
null,4,Phase 4 Clinical,C4,rifapentine,15102,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,HARAPAN II,"Addiction, HIV and Tuberculosis in Malaysian Criminal Justice Settings","National Institutes of Health, Yale University",Interventional,294801,2017-08-21 00:00:00,Recruiting
null,1+,Phase 2/Phase 3 Clinical,C23,rifapentine,15102,"Safety,Efficacy",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,CORTIS,The Correlate of Risk Targeted Intervention Study,University of Cape Town,Interventional,258043,2016-09-20 00:00:00,No longer recruiting
null,1+,Phase 3 Clinical,C3,rifapentine,15102,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,S31PK/PD,Pharmacokinetic and Pharmacodynamic Study of High-Dose Rifapentine and Moxifloxacin for Treatment of Tuberculosis,Centers for Disease Control and Prevention,Interventional,242269,2016-05-30 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,rifapentine,15102,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Rifapentine Plus Moxifloxacin for Treatment of Pulmonary Tuberculosis,Johns Hopkins University,Interventional,23035,2009-11-30 00:00:00,Terminated
null,1+,Phase 2 Clinical,C2,rifapentine,15102,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,TBTC Study 29,Rifapentine During Intensive Phase Tuberculosis (TB) Treatment,"Centers for Disease Control and Prevention, Tuberculosis Investigation Unit of Barcelona",Interventional,17237,2008-12-31 00:00:00,Completed
null,1,Phase not specified,NS,rifapentine,15102,Efficacy,N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Randomized, Open-label, Comparative Study to Evaluate the Rifapentine in the Treatment of Patients Newly Diagnosed with Pulmonary Tuberculosis Negative and Smear-with Preserved Sensitivity of Mycobacteria",S.P.Inkomed Pvt. Ltd,Interventional,168261,2011-09-27 00:00:00,Status not specified
null,1+,Phase 4 Clinical,C4,rifapentine,15102,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,RIFAQUIN,"An International, Multicenter, Controlled Clinical Trial to Evaluate High-Dose Rifapentine and a Quinolone in the Treatment of Pulmonary Tuberculosis",St Georges University of London,Interventional,153990,2008-08-15 00:00:00,Completed
null,4+,Phase 1/Phase 2 Clinical,C12,delamanid,16545,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,A Phase I/II Trial of Multiple Oral Doses of OPC-167832 for Uncomplicated Pulmonary Tuberculosis,Otsuka Pharmaceutical Development and Commercialization Inc,Interventional,353987,2018-10-25 00:00:00,Recruiting
null,2+,Phase 3 Clinical,C3,delamanid,16545,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,Médecins Sans Frontières France,Interventional,259506,2016-12-31 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,delamanid,16545,"Safety,Efficacy,Pharmacokinetics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A Phase II, Multicenter, Uncontrolled, Open-label Trial to Evaluate Safety, Tolerability, and Efficacy of Orally Administered OPC-67683",Otsuka Pharmaceutical Development and Commercialization Inc,Interventional,242789,2009-03-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,golotimod,25023,Efficacy,Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Phase II Trial of SCV-07 in TB,SciClone Pharmaceuticals Inc,Interventional,144312,null,Completed
null,1+,Phase 3 Clinical,C3,bedaquiline,51310,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,The Effect of 18-month Regimen Containing Six Anti-tuberculosis Drugs for Patients With MDR-TB,Beijing Chest Hospital,Interventional,369109,2019-03-08 00:00:00,Recruiting
null,1+,Phase 2/Phase 3 Clinical,C23,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,TRUNCATE-TB,A 2 Month Regimens Using Novel Combinations to Augment Treatment Effectiveness for Drug-Sensitive Tuberculosis,"Syneos Health Inc, University College London",Interventional,333435,2018-03-21 00:00:00,Recruiting
null,1+,Phase 2/Phase 3 Clinical,C23,bedaquiline,51310,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,SIMPLICITB,"Trial to Evaluate the Efficacy, Safety and Tolerability of BPaMZ in Drug-Sensitive (DS-TB) Adult Patients and Drug-Resistant (DR-TB) Adult Patients","PPD Pharmaceutical Development Philippines Corporation, TB Alliance",Interventional,319125,2018-07-30 00:00:00,Recruiting
null,2,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Pharmacokinetic Study to Evaluate Anti-Mycobacterial Activity of TMC-207 in Combination With Background Regimen (BR) of Multidrug Resistant Tuberculosis (MDR-TB) Medications for Treatment of Children/Adolescents Pulmonary MDR-TB,"Janssen Research & Development LLC, Janssen-Cilag International NV (BE), Quintiles Philippines, Inc",Interventional,221523,2016-05-03 00:00:00,Recruiting
null,1,Phase not specified,NS,bedaquiline,51310,"Bioavailability,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,A Bioavailability Study of Two New Formulations of Bedaquiline on Pediatric Populaion,Janssen Pharmaceutical KK,Interventional,163991,2013-12-14 00:00:00,Not yet recruiting
null,1,Phase 1 Clinical,C1,AERAS-402,53975,"Safety,Efficacy",N,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,"A double-blind, randomized, placebo-controlled, phase I study of AERAS-402, a potential vaccine for Mycobacterium tuberculosis infection",Crucell NV,Interventional,8498,2007-05-11 10:47:27,Status not specified
null,1,Phase 1 Clinical,C1,AERAS-402,53975,"Safety,Efficacy",Y,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,"An open-label, phase I trial to evaluate the safety, tolerability and immunogenicity of AERAS-402, a potential vaccine for Mycobacterium tuberculosis infection","Aeras Global TB Vaccine Foundation, Crucell NV",Interventional,8497,2006-10-25 00:00:00,Completed
null,1,Phase 2 Clinical,C2,AERAS-402,53975,"Safety,Efficacy",Y,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,Study of AERAS-402 in Healthy Infants,Aeras Global TB Vaccine Foundation,Interventional,70158,2010-09-30 00:00:00,Completed
null,3,Phase 2 Clinical,C2,MVA-85A,55317,"Safety,Efficacy",Y,N,Discontinued,DX,Mycobacterium tuberculosis infection,221,MVA(TB)029,Safety and Immunogenicity of MVA-85A Prime and Bacille Calmette-Guerin Boost Vaccination,University of Cape Town,Interventional,89833,2012-10-31 00:00:00,Completed
null,1,Phase 2a Clinical,C2A,MVA-85A,55317,"Safety,Efficacy",Y,N,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"A phase IIa, open-label, safety and immunogenicity study of MVA-85A in HIV- and/or Mycobacterium tuberculosis-infected adults","European Commission, National Institutes of Health, TB-VAC, University of Cape Town, Wellcome Trust",Interventional,86807,2011-08-26 00:00:00,Status not specified
African Ancestry,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,N,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"A phase I study of a new tuberculosis (TB) vaccine, MVA-85A, in healthy volunteers with HIV",University of Oxford,Interventional,23059,2008-08-31 00:00:00,Completed
European Ancestry,1,Phase 1 Clinical,C1,RUTI,57308,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Clinical Trial to Study Four Different Doses of the Vaccine RUTI in Healthy Volunteers,Germans Trias i Pujol Hospital,Interventional,8888,2007-04-30 00:00:00,Completed
null,1,Phase 1 Clinical,C1,S-004992,61340,Safety,N,N,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,A phase I trial of S-004992 for the potential treatment of drug-resistant tuberculosis,Shionogi & Co Ltd,Interventional,334482,null,Planned
null,2,Phase 1 Clinical,C1,AERAS-407 rBCG,62397,Safety,N,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,AERAS 422,Study of AERAS-422 in Healthy Adults,Aeras Global TB Vaccine Foundation,Interventional,76756,2010-12-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Phase I ID-93 + GLA-SE Vaccine Trial in Healthy Adult Volunteers,Infectious Disease Research Institute,Interventional,87507,2012-08-31 00:00:00,Completed
null,2+,Phase 1 Clinical,C1,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"Safety, Tolerability and Immunogenicity of the Vaccine Candidates ID-93 + AP10-602 and ID-93 + GLA-SE Administered Intramuscularly in Healthy Adult Subjects",National Institute of Allergy and Infectious Diseases,Interventional,235751,2015-10-22 00:00:00,Completed
null,2+,Phase 4 Clinical,C4,"rifampicin + isoniazid + piperine (fixed dose combination, tuberculosis), Cadila Pharmaceuticals",69440,"Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Comparison of Sputum Conversion Rates, Plasma Rifampicin Levels and Cyp 450 Activity Pulmonary Tuberculosis Patients Have Received 8 Weeks of Intensive Phase Therapy With Standard Dose Regimen Versus Risorine Kit",Cadila Pharmaceuticals Ltd,Interventional,142231,2012-06-10 00:00:00,Recruiting
null,3,Phase 1 Clinical,C1,SSI H56-IC31,74849,"Safety,Efficacy",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,TBCOX2,Therapeutic Vaccination and Immune Modulation - New Treatment Strategies for the MDR Tuberculosis Pandemic,Oslo University Hospital,Interventional,235355,2015-11-30 00:00:00,No longer recruiting
null,3,Phase 1b Clinical,C1B,SSI H56-IC31,74849,"Safety,Efficacy,Pharmacodynamics",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,A-042,"Phase Ib, Safety and Immunogenicity Trial of BCG Revaccination, H4:IC31 and H56:IC31 in Healthy, HIV-1-Uninfected Adolescents",Aeras,Interventional,223463,2015-05-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,AEC/BC02,81363,"Safety,Efficacy",N,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,Clinical study of freeze - dried recombinant tuberculosis vaccine (AEC/BC02),Chongqing Zhifei Biological Products Co Ltd,Interventional,291253,null,Not yet recruiting
null,2,Phase 2a Clinical,C2A,telacebec,85970,"Safety,Efficacy,Pharmacokinetics",Y,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"A Phase II Study to Evaluate Early Bactericidal Activity, Safety, Tolerability, and Pharmacokinetics of Multiple Oral Doses of Telacebec (Q-203)",Qurient Therapeutics,Interventional,343604,2018-07-23 00:00:00,No longer recruiting
Asian Ancestry,2,Phase 1 Clinical,C1,"rifampicin + isoniazid (fixed dose combination, tuberculosis), Pfizer",89460,"Safety,Bioequivalence,Pharmacokinetics",N,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,"Bioequivalence Study Comparing Rifampicin In A Fixed-dose Combination (Rifampicin + Isoniazid, Myrin 2) And The Reference Drug (Rifampicin, Rimactane)",Pfizer Inc,Interventional,164313,2011-04-30 00:00:00,Completed
null,2,Phase 1 Clinical,C1,MTBVAC,89744,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,MTBVAC,Dose-Escalation Study to Evaluate the Safety and Immunogenicity of MTBVAC Vaccine in Comparison With BCG Vaccine,Biofabri SL,Interventional,164024,2013-01-31 00:00:00,Completed
null,1,Phase 1a Clinical,C1A,macozinone,90085,"Safety,Efficacy,Bioavailability,Pharmacokinetics,Pharmacodynamics",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"Study to Evaluate the Safety, Tolerability, Pharmacokinetics and Ex-vivo Antitubercular Activity of PBTZ-169 Formulation",Innovative Medicines for Tuberculosis,Interventional,328144,2017-12-05 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,"clofazimine (oral, tuberculosis), Novartis",91861,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,STREAM,The Evaluation of a Standard Treatment Regimen of Anti-Tuberculosis Drugs for Patients With MDR-TB,International Union Against Tuberculosis and Lung Diseases,Interventional,228190,2016-04-30 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,ESAT-6CFP10,95442,"Safety,Efficacy",Y,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Phase I Clinical Human Tolerability Study of Recombinant Mycobacterium Tuberculosis Allergen ESAT6-CFP10,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,Interventional,163196,2013-09-30 00:00:00,Completed
null,1,Phase 1a Clinical,C1A,"small molecule therapeutic, Beijing Union Pharmaceutical Factory/Institute of Materia Medica",101474,"Safety,Pharmacokinetics,Pharmacodynamics",N,Y,Clinical,CU,Mycobacterium tuberculosis infection,221,null,The phase Ia clinical trial of pyrifazimine,"Beijing Union Pharmaceutical Factory, Xiyuan Hospital China Academy Of Chinese Medical Sciences",Interventional,356451,2018-10-01 00:00:00,Not yet recruiting
null,2,Phase 3 Clinical,C3,FS-1,104087,"Safety,Efficacy",Y,N,Registered,R,Mycobacterium tuberculosis infection,221,FS-1,FS-1 Drug for Treatment of Multiple Drug-resistant Tuberculosis,"Scientific Center for Anti-infectious Drugs, Kazakhstan",Interventional,246553,2013-12-31 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,TBI-223,107010,"Safety,Pharmacokinetics",N,Y,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,"A Phase 1 Study to Evaluate Safety, Tolerability, and PK of TBI-223 in Healthy Adults",TB Alliance,Interventional,362067,2019-01-16 00:00:00,Recruiting
null,2+,Phase 1 Clinical,C1,TBA-7371,107523,"Safety,Pharmacokinetics",N,Y,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,"A Phase I Study to Evaluate Safety, Tolerability, PK, and PK Interactions of TBA-7371",TB Alliance,Interventional,303756,2017-08-29 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,tenofovir disoproxil fumarate,14493,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,Pred-ART,"Preventing TB-IRIS in High-risk Patients: a Randomized, Placebo-controlled Trial of Prednisone",University of Cape Town,Interventional,150793,2013-08-30 00:00:00,Completed
null,4,Phase 4 Clinical,C4,tenofovir disoproxil fumarate,14493,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,STRIDE,Immediate Versus Deferred Start of Anti-HIV Therapy in HIV Infected Adults Being Treated for Tuberculosis,AIDS Clinical Trials Group,Interventional,10681,2006-08-31 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,lopinavir + ritonavir,14681,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetic Study of Super-boosted Lopinavir/Ritonavir Given With Rifampin,University of Miami,Interventional,93494,2016-02-29 00:00:00,Terminated
null,2,Phase 1 Clinical,C1,lopinavir + ritonavir,14681,"Safety,Efficacy,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,TMC207-TiDP13-C110: Interaction Study With Lopinavir/Ritonavir in Healthy Volunteer,Janssen Diagnostics BVBA,Interventional,42128,2009-02-28 00:00:00,Completed
null,1,Phase 4 Clinical,C4,"superboosted lopinavir + ritonavir (pediatric oral formulation, HIV infection), DNDi",105321,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics of Lopinavir/Ritonavir Superboosting in Infants and Young Children Co-infected With HIV and TB,Drugs for Neglected Diseases Initiative,Interventional,220686,2013-01-31 00:00:00,Completed
null,1+,Phase 1 Clinical,C1,nelfinavir,8255,"Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Effectiveness of Anti-HIV Therapy (HAART) in HIV-Infected Patients With Tuberculosis,National Institute of Allergy and Infectious Diseases,Interventional,10646,2000-02-25 00:00:00,Completed
null,1+,Phase 2/Phase 3 Clinical,C23,stavudine,4481,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,CARINEMO,Comparison of Nevirapine and Efavirenz for the Treatment of HIV-TB Co-infected Patients,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,10948,2007-12-31 00:00:00,Completed
null,3+,Phase 2/Phase 3 Clinical,C23,"once-daily naproxen (oral controlled release, pain), Alvogen",12013,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Paradoxical Tuberculosis Immune Reconstitution Inflammatory Syndrome (TB-IRIS) Treatment Trial,University of Minnesota - Clinical and Translational Science Institute,Interventional,199754,2014-01-31 00:00:00,Terminated
null,1+,Phase 2b Clinical,C2B,metformin hydrochloride,6050,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Metformin in tuberculosis,"Open Source Pharma Foundation, Tuberculosis Research Centre",Interventional,325158,2018-11-01 00:00:00,Not yet recruiting
null,4,Phase not specified,NS,didanosine,2935,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Effectiveness of Directly Observed Therapy in Combined HIV and Tuberculosis Treatment in Resource-Limited Settings,National Institute of Allergy and Infectious Diseases,Interventional,8820,2009-08-31 00:00:00,Completed
null,2+,Phase 4 Clinical,C4,clarithromycin,2829,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,1+,Phase 3 Clinical,C3,trimethoprim + sulphamethoxazole,44363,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,SAPIT,A Study to Compare Three Existing Starting Points of Antiretroviral Therapy (ART) Initiation in HIV/Tuberculosis (TB) Co-infected Patients,Centre for the AIDS Program of Research in South Africa,Interventional,201474,2005-06-30 00:00:00,Completed
null,1,Phase 4 Clinical,C4,itraconazole,3411,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,A Comparative Study of Itraconazole in Various Doses Schedule in the Treatment of Pulmonary Aspergilloma in Treated  with the Patients of Pulmonary Tuberculosis,Sawai ManSingh Medical College,Interventional,131456,2012-07-31 00:00:00,Recruiting
null,2,Phase 2a Clinical,C2A,"doxycycline (once-daily, oral controlled release), CollaGenex",48140,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,Map2Co,Concomitant Infections of Mansonella Perstans in Tuberculosis and Buruli Ulcer Disease Patients From Ghana,kwame Nkrumah University of Science and Technology,Interventional,214864,2014-10-31 00:00:00,Completed
null,2+,Phase 4 Clinical,C4,gatifloxacin,7017,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,"BCG vaccine, Organon",13624,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Challenge Model for Assessment of Human TB Immunity,National Institute of Allergy and Infectious Diseases,Interventional,149358,2014-06-30 00:00:00,Completed
null,1+,Phase 1 Clinical,C1,efavirenz,10172,"Safety,Pharmacokinetics",Y,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Evaluating the Safety and Drug Interaction of PA-824, an Investigational Tuberculosis Medication, Together With Efavirenz, Ritonavir-Boosted Lopinavir or Rifampin",National Institute of Allergy and Infectious Diseases,Interventional,86312,2012-05-31 00:00:00,Completed
null,1+,Phase 2b Clinical,C2B,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,SAEFRIF,Safety and Efficacy of High Dose Rifampicin in Tuberculosis (TB)-HIV Co-infected Patients on Efavirenz- or Dolutegravir-based Antiretroviral Therapy,Makerere University,Interventional,384080,2019-04-30 00:00:00,Recruiting
null,3,Phase 1 Clinical,C1,efavirenz,10172,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Efavirenz (EFV) in HIV-Infected and HIV/Tuberculosis (TB) Coinfected Children,National Institute of Allergy and Infectious Diseases,Interventional,37985,2009-10-31 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RRHT,Rifampicin versus Rifabutin in HIV/AIDS Patients Combined With Tuberculosis,Shanghai Public Health Clinical Center,Interventional,334027,2018-04-15 00:00:00,Recruiting
null,1+,Phase 3b Clinical,C3B,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,INSPIRING,Open-Label Study of Dolutegravir (DTG) or Efavirenz (EFV) for Human Immunodeficiency Virus (HIV)-Tuberculosis (TB) Co-infection,ViiV Healthcare Ltd,Interventional,201302,2015-01-23 00:00:00,No longer recruiting
null,1+,Phase not specified,NS,efavirenz,10172,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Simultaneous Versus Sequential Antiretroviral Therapy (ARV) Therapy and Mycobacterium Tuberculosis (MTB) Treatment,Instituto Nacional de Enfermedades Respiratorias,Interventional,169697,2008-03-31 00:00:00,Terminated
null,3+,Phase 4 Clinical,C4,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RIFART,RIFART,Azienda Ospedaliera Spedali Civili di Brescia,Interventional,131240,2005-03-15 00:00:00,Terminated
null,1+,Phase 4 Clinical,C4,efavirenz,10172,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,IPEC-EFV,Randomized Clinical Trial to Assess the Efficacy and Safety of Concomitant Use of Rifampicin and Efavirenz 600 X  800 mg,Fundacao Oswaldo Cruz (Fiocruz),Interventional,11181,2007-01-31 00:00:00,Terminated
null,1+,Phase 3 Clinical,C3,efavirenz,10172,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Safety and Efficacy of Two Once Daily Anti Retroviral Treatment Regimens Along With Anti-Tuberculosis Treatment,Tuberculosis Research Centre,Interventional,10863,2006-06-30 00:00:00,Suspended
null,4,Phase 4 Clinical,C4,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,STRIDE,Immediate Versus Deferred Start of Anti-HIV Therapy in HIV Infected Adults Being Treated for Tuberculosis,AIDS Clinical Trials Group,Interventional,10681,2006-08-31 00:00:00,Completed
null,3,Phase 2 Clinical,C2,efavirenz,10172,"Safety,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TBTC-23C,Pharmacokinetics of Intermittent Rifabutin and Isoniazid With Daily Efavirenz,Centers for Disease Control and Prevention,Interventional,10657,1999-11-30 00:00:00,Completed
null,1+,Phase 1 Clinical,C1,"darunavir + cobicistat (fixed dose, HIV infection), Janssen R&D/ Gilead",72148,"Safety,Pharmacokinetics",Y,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Impact of Once-Weekly Rifapentine and Isoniazid on the Steady State Pharmacokinetics of Dolutegravir and Darunavir Boosted With Cobicistat in Healthy Volunteers,National Institutes of Health Clinical Center,Interventional,260814,2016-06-03 00:00:00,Recruiting
null,1+,Phase not specified,NS,midazolam hydrochloride,44303,Pharmacokinetics,Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,The Influence of Rifampicin Discontinuation on Rifampicin-Induced Cytochrome P450 Enzyme Activity,Hamamatsu University School of Medicine,Interventional,122291,2010-07-01 00:00:00,Completed
null,2+,Phase 4 Clinical,C4,ofloxacin,52139,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,5+,Phase 2 Clinical,C2,cefadroxil,46931,"Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Trial of Faropenem and Cefadroxil (in Combination With Amoxicillin/Clavulanic Acid and Standard TB Drugs) in Patients With Pulmonary Tuberculosis: Measurement of Early Bactericidal Activity and Effects on Novel Biomarkers,"National University Hospital (Singapore) Pte Ltd, Syneos Health Inc",Interventional,224111,2018-12-31 00:00:00,Not yet recruiting
null,5,Phase 1/Phase 2 Clinical,C12,linezolid,11036,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TBRU 10,"Early Bactericidal Activity of Linezolid, Gatifloxacin, Levofloxacin, Isoniazid (INH) and Moxifloxacin in HIV Negative Adults With Initial Episodes of Sputum Smear-Positive Pulmonary Tuberculosis",National Institute of Allergy and Infectious Diseases,Interventional,10869,2004-02-29 00:00:00,Completed
null,1+,Phase 1/Phase 2 Clinical,C12,dolutegravir,59062,"Safety,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,IMPAACT4TB,"Safety, Tolerability DDI Short Course Treatment of LTBI Infection With High-dose Rifapentine Isoniazid in HIV+ Patients",Aurum Institute,Interventional,329251,2018-01-18 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,raltegravir,54488,"Safety,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RIFRAL,The Effect of Intermittent Rifampicin on Raltegravir,The University of Liverpool,Interventional,80394,2012-01-31 00:00:00,Completed
null,4,Phase 2 Clinical,C2,VP-101,12014,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Clinical Trial of Phenylbutyrate and Vitamin D in Tuberculosis (TB),"International Centre For Diarrhoeal Disease Research, Bangladesh",Interventional,142323,2010-12-31 00:00:00,Completed
null,2,Phase 2 Clinical,C2,faropenem,4492,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Prospective, Randomized Control, Non-inferiority Study of the Use of Faropenem for Patients with etiology Positive Pulmonary Tuberculosis",Zhejiang University,Interventional,338648,2018-05-15 00:00:00,Not yet recruiting
null,2,Phase 1 Clinical,C1,levofloxacin,3492,"Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A Pilot Study of Methodology to Rapidly Evaluate Drugs for Bactericidal Activity, Tolerance and Pharmacokinetics in the Treatment of Pulmonary Tuberculosis Using Isoniazid and Levofloxacin",National Institute of Allergy and Infectious Diseases,Interventional,8780,1999-11-01 18:30:00,Completed
null,1+,Phase 4 Clinical,C4,levofloxacin,3492,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,05TB,"A randomized, double-blind, placebo-controlled trial to investigate the effect of intensified treatment with high dose rifampicin and levofloxacin for adult patients with tuberculous meningitis",University of Oxford,Interventional,75317,2011-04-18 00:00:00,Completed
null,1,Phase 4 Clinical,C4,levofloxacin,3492,"Safety,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Pharmacokinetic study and safety of levofloxacin in pediatric tuberculosis treatment,Center of Excellence for Pediatric Infectious Diseases and Vaccines,Interventional,381490,2019-05-12 00:00:00,Recruiting
Japanese Ancestry,1+,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,SURE,Short Intensive Treatment For Children With Tuberculous Meningitis,University College London,Interventional,360104,2018-01-02 00:00:00,Not yet recruiting
null,1+,Phase 4 Clinical,C4,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Shortened Regimens for Drug-susceptible Pulmonary Tuberculosis,Beijing Chest Hospital,Interventional,271641,2016-08-31 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,rifabutin,4229,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,RRHT,Rifampicin versus Rifabutin in HIV/AIDS Patients Combined With Tuberculosis,Shanghai Public Health Clinical Center,Interventional,334027,2018-04-15 00:00:00,Recruiting
null,3+,Phase not specified,NS,rifabutin,4229,Efficacy,N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,The research of new regimen for multidrug-resistant tuberculosis treatment,"Beijing Chest Hospital, Beijing Tuberculosis & Thoracic Tumor Research Institute, Capital Medical University",Interventional,244777,2008-10-01 00:00:00,No longer recruiting
null,2+,Phase 4 Clinical,C4,rifabutin,4229,Pharmacokinetics,N,N,Launched,L,Mycobacterium tuberculosis infection,221,TBTC-23B,Intensive PK of the Nelfinavir Rifabutin Interaction in Patients With HIV-TB,Centers for Disease Control and Prevention,Interventional,10656,2000-02-29 00:00:00,Completed
null,1,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",Y,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity of a Candidate Tuberculosis (TB) Vaccine in HIV-Positive Adults,GlaxoSmithKline plc,Interventional,19230,2008-06-30 00:00:00,Completed
null,2,Phase 2a Clinical,C2A,sutezolid,11088,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"PNU-100480 In Newly Diagnosed, Treatment Sensitive Patients With Pulmonary TB; Early Bactericidal Activity; Whole Blood Assay",Sequella Inc,Interventional,71511,2011-08-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,sutezolid,11088,"Safety,Pharmacokinetics",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"Study to Evaluate the Safety, Tolerability, and Pharmacokinetics of Sutezolid",TB Alliance,Interventional,303595,2017-09-26 00:00:00,Completed
null,2,Phase 1 Clinical,C1,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Effect of PA-824 and of PA-824 Plus Moxifloxacin on the QTc Interval in Healthy Volunteers,National Institute of Allergy and Infectious Diseases,Interventional,90512,2012-09-30 00:00:00,Completed
null,2+,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"Evaluation of 8 Weeks of Treatment With the Combination of Moxifloxacin, PA-824 and Pyrazinamide in Patients With Drug Sensitive and Multi Drug-Resistant Pulmonary Tuberculosis (TB)",TB Alliance,Interventional,83489,2012-03-31 00:00:00,Completed
null,1,Phase 4 Clinical,C4,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Pharmacokinetics and Safety of Moxifloxacin,University Medical Center Groningen,Interventional,76086,2011-05-31 00:00:00,Terminated
null,1+,Phase 3 Clinical,C3,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Latency in Pulmonary Tuberculosis,Tuberculosis Research Centre,Interventional,67984,2010-02-28 00:00:00,Recruiting
null,1+,Phase 3 Clinical,C3,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,REMoxTB,Controlled Comparison of Two Moxifloxacin Containing Treatment Shortening Regimens in Pulmonary Tuberculosis,TB Alliance,Interventional,49258,2008-01-01 00:00:00,Completed
null,1+,Phase 2b Clinical,C2B,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,SUDOCU,PanACEA Sutezolid Dose-finding and Combination Evaluation,Ludwig-Maximilians University of Munich,Interventional,381674,2019-08-31 00:00:00,Not yet recruiting
null,1,Phase 2 Clinical,C2,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,A study to evaluate the efficacy of moxifloxacin instead of ethambutol in the intensive phase of therapy in patients with newly diagnosed pulmonary tuberculosis,Academy of Medical Sciences of the Ukraine,Interventional,280029,null,Status not specified
null,2+,Phase 2/Phase 3 Clinical,C23,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,NEXT,An Open-label RCT to Evaluate a New Treatment Regimen for Patients With Multidrug-resistant Tuberculosis,University of Cape Town,Interventional,230529,2015-10-31 00:00:00,Recruiting
null,2,Phase not specified,NS,moxifloxacin,12978,"Bioequivalence,Pharmacokinetics",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"An Open-Label, Randomized, Crossover Study of Comparative Pharmacokinetics and Bioequivalence of Haynemoks, 400 mg (Hayglans Laboratories Pvt. Ltd., India) and Avelox, 400 mg (Bayer Healthcare AG, Germany) in Healthy Volunteers",HiGlance Laboratories Pvt ltd,Interventional,168898,2012-10-29 00:00:00,Status not specified
Japanese Ancestry,1,Phase Not Applicable,PNA,moxifloxacin,12978,"Pharmacokinetics,Pharmacodynamics",Y,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,The Effect of Ethnic on Moxifloxacin Induced QT Interval Prolongation in Korean and Japanese Healthy Subjects,Inje University,Interventional,139433,2011-11-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,moxifloxacin,12978,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,A Clinical Trial to Study the Effectiveness and Safety of 3- and 4-Month Regimens as Compared to the Standard 6-Month Regimen for the Treatment of Infectious Pulmonary Tuberculosis Patients,Indian Council of Medical Research,Interventional,121916,2007-05-30 00:00:00,Recruiting
null,3,Phase not specified,NS,moxifloxacin,12978,Efficacy,Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"A comparative, open-labeled, randomized study to evaluate the bactericidal activity of moxifloxacin in patients with pulmonary tuberculosis",Royal Free and University College Medical School,Interventional,114922,2003-12-01 00:00:00,Status not specified
null,3,Phase 2 Clinical,C2,moxifloxacin,12978,Pharmacokinetics,N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Pharmacokinetic Interaction Study in Indonesian Tuberculosis Patients Indonesia,Radboud University,Interventional,10860,2006-01-31 00:00:00,Completed
null,4+,Phase 2 Clinical,C2,pretomanid,13323,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,NC-003,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis With Clofazimine (C)-TMC-207 (J)-PA-824 (Pa)-Pyrazinamide (Z),TB Alliance,Interventional,92275,2012-10-31 00:00:00,Completed
Asian Ancestry,1,Phase 1 Clinical,C1,pretomanid,13323,"Safety,Pharmacokinetics,Pharmacodynamics",N,Y,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,Phase I clinical trial of single-dose of PA-824,"Shanghai Fosun Pharmaceutical (Group) Co Ltd, Shanghai Fosun Pharmaceutical Industry Development Co Ltd",Interventional,362102,2018-03-14 00:00:00,No longer recruiting
null,1+,Phase 2b Clinical,C2B,pretomanid,13323,"Safety,Efficacy,Pharmacokinetics",N,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,APT,Assessing PA-824 for Tuberculosis,Johns Hopkins Hospital,Interventional,213394,2015-04-29 00:00:00,Recruiting
null,3+,Phase 3 Clinical,C3,rifapentine,15102,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,BRIEF TB,Brief Rifapentine-Isoniazid Evaluation for TB Prevention,National Institute of Allergy and Infectious Diseases,Interventional,79741,2012-05-23 00:00:00,Completed
null,1,Phase 2 Clinical,C2,rifapentine,15102,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,SCRIPT-TB,Short Course Rifapentine and Isoniazid for the Preventive Treatment of Tuberculosis,Huashan Hospital,Interventional,375813,2018-12-01 00:00:00,Recruiting
null,1+,Phase 1/Phase 2 Clinical,C12,rifapentine,15102,"Safety,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,IMPAACT4TB,"Safety, Tolerability DDI Short Course Treatment of LTBI Infection With High-dose Rifapentine Isoniazid in HIV+ Patients",Aurum Institute,Interventional,329251,2018-01-18 00:00:00,Recruiting
null,1+,Phase not specified,NS,rifapentine,15102,Efficacy,Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"An open-label, active control trial of rifapentine to evaluate efficacy, in patients with pulmonary tuberculosis",Aventis Pharma AG,Interventional,15328,1998-12-31 00:00:00,Status not specified
null,1,Phase 2 Clinical,C2,delamanid,16545,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Safety and Pharmacokinetics (PK) in Multidrug-Resistant (MDR) Refractive Tuberculosis,Otsuka Holdings Co Ltd,Interventional,66735,2010-02-28 00:00:00,Completed
null,1+,Phase 2b Clinical,C2B,delamanid,16545,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,SUDOCU,PanACEA Sutezolid Dose-finding and Combination Evaluation,Ludwig-Maximilians University of Munich,Interventional,381674,2019-08-31 00:00:00,Not yet recruiting
null,2+,Phase 2/Phase 3 Clinical,C23,delamanid,16545,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,MDR-END,Treatment Shortening of MDR-TB Using Existing and New Drugs,Seoul National University Hospital,Interventional,247456,2016-01-31 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,delamanid,16545,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A 6-Month Safety, Efficacy and PK Trial of Delamanid in Pediatric Patients With Multidrug Resistant Tuberculosis",Otsuka Pharmaceutical Development and Commercialization Inc,Interventional,133567,2013-07-20 00:00:00,No longer recruiting
null,4+,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,NC-003,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis With Clofazimine (C)-TMC-207 (J)-PA-824 (Pa)-Pyrazinamide (Z),TB Alliance,Interventional,92275,2012-10-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,TMC207TBC1003 - A Study in Healthy Volunteers Investigating the Effect of Single-Dose TMC-207 on the QT/QTc Interval Under Fed Conditions,Janssen Diagnostics BVBA,Interventional,74529,2011-02-28 00:00:00,Completed
null,5+,Phase 3 Clinical,C3,bedaquiline,51310,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,endTB-Q,Evaluating Newly Approved Drugs in Combination Regimens for Multidrug-Resistant TB With Fluoroquinolone Resistance,Médecins Sans Frontières France,Interventional,375499,2019-06-30 00:00:00,Not yet recruiting
null,2+,Phase 4 Clinical,C4,bedaquiline,51310,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,3,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Early Bactericidal Activity and Pharmacokinetics of the Diarylquinoline TMC-207 in Treatment of Pulmonary Tuberculosis,Johnson & Johnson,Interventional,150059,null,Completed
null,1,Phase 1 Clinical,C1,GX-70,53019,"Safety,Efficacy",N,N,Discovery,DR,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity Study of GX-70 in TB Patient,Yonsei University,Interventional,298965,2018-03-31 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,"Ag85B-ESAT-6 vaccine (IC31 adjuvant, tuberculosis), SSI/ Valneva",53784,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,THYB-04,THYB-04,Statens Serum Institut,Interventional,285704,2012-08-27 00:00:00,No longer recruiting
null,1,Phase 2 Clinical,C2,AERAS-402,53975,"Safety,Efficacy",Y,N,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,"Safety and Immunogenicity of AERAS-402 in HIV-infected, Bacillus Calmette-Guerin (BCG)-Vaccinated Adults",Aeras Global TB Vaccine Foundation,Interventional,62096,2009-12-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"Safety, Immunogenicity and Impact of MVA-85A, on the Immunogenicity of the EPI Vaccines",University of Oxford,Interventional,52375,2006-10-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,MVA-85A Aerosol Versus Intramuscular Vaccination in Adults With Latent Mycobacterium Tuberculosis (M tb) Infection,University of Oxford,Interventional,238674,2015-09-30 00:00:00,Terminated
null,2,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,Safety Study of ChAdOx1-85A Vaccination With and Without MVA-85A Boost in Healthy Adults,University of Oxford,Interventional,120744,2013-07-31 00:00:00,Completed
null,1,Phase 2/Phase 3 Clinical,C23,VPM-1002,55569,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Phase II/III Study To Check The Efficacy And Safety Of Recombinant BCG Vaccine In TB Patients In India,Serum Institute of India Ltd,Interventional,292836,2017-04-01 00:00:00,Not yet recruiting
null,1,Phase 1 Clinical,C1,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Phase I Clinical Trial of ID93 + GLA-SE Vaccine in BCG-vaccinated Healthy Adolescent,Quratis Co Ltd,Interventional,366672,2019-04-02 00:00:00,Recruiting
null,1,Phase 2a Clinical,C2A,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,"Safety,Efficacy",Y,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Phase IIa ID93 + GLA-SE Vaccine Trial in TB Patients After Treatment Completion,Infectious Disease Research Institute,Interventional,231367,2015-06-30 00:00:00,Completed
null,2,Phase 2a Clinical,C2A,GSK-3036656,70581,"Safety,Efficacy,Pharmacokinetics",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"An Early Bactericidal Activity, Safety and Tolerability of GSK-3036656 in Subjects With Drug-sensitive Pulmonary Tuberculosis",GlaxoSmithKline plc,Interventional,343050,2019-03-27 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,Ad5Ag85A,71323,"Safety,Efficacy",Y,Y,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,Study of the Safety and Immunogenicity of an Adenovirus-based Tuberculosis Vaccine,McMaster University,Interventional,77668,2009-06-30 00:00:00,Terminated
null,1,Phase 1 Clinical,C1,Ad5Ag85A,71323,"Safety,Efficacy",N,Y,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,Phase I Clinical Trial of the Safety and Immunogenicity of an Adenovirus-based TB Vaccine Administered by Aerosol,McMaster University,Interventional,219950,2017-09-05 00:00:00,Recruiting
null,4,Phase 2 Clinical,C2,"ethambutol hydrochloride + rifampicin + isoniazid (fixed dose combination, tuberculosis), Shenyang Hongqi Pharmaceutical",82091,Efficacy,N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Appropriate course of the treatment of tuberculous pleurisy,Capital Medical University,Interventional,309137,2015-06-01 00:00:00,Not yet recruiting
null,2+,Phase not specified,NS,"ethambutol hydrochloride (150 mg) + pyrazinamide (300 mg) + rifampicin (90 mg) + isoniazid (60 mg) (oral tablet, tuberculosis), Shenyang Hongqi Pharmaceutical/Liaoning Hongwuxing Pharmaceutical",88505,"Bioequivalence,Bioavailability",N,Y,Discovery,DR,Mycobacterium tuberculosis infection,221,null,Ethylamine pyrazine Lifestyle Isonicotinic piece IV bioequivalence trials,Shenyang Hongqi Pharmaceutical Co Ltd,Interventional,177165,2013-11-30 00:00:00,Not yet recruiting
null,2,Phase 1 Clinical,C1,DAR-901,90231,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Phase I Trial of DAR-901,Dartmouth-Hitchcock Medical Center,Interventional,173446,2014-02-28 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,ESAT-6CFP10,95442,"Safety,Efficacy",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Clinical Study of Recombinant Mycobacterium Tuberculosis Allergen ESAT6-CFP10 on Healthy People Aged 18 to 65 years (III-healthy),Anhui Zhifei Longcom Biopharmaceutical Co Ltd,Interventional,262931,2016-05-31 00:00:00,Completed
null,2,Phase 3 Clinical,C3,ESAT-6CFP10,95442,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Clinical Study of Recombinant Mycobacterium Tuberculosis ESAT-6CFP10 Allergen,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,Interventional,247763,2015-12-31 00:00:00,Completed
null,1,Phase Not Applicable,PNA,OPC-167832,104447,Safety,N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,A multiple-ascending-dose and early-bactericidal-activity study to assess OPC-167832 in drug susceptible TB patients,Otsuka Pharmaceutical Co Ltd,Interventional,327016,2018-12-31 00:00:00,Planned
null,1,Phase 2 Clinical,C2,GamTBvac,107803,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Phase II Clinical Trial of Safety and Immunogenicity of Recombinant Subunit Tuberculosis Vaccine GamTBvac,"Gamalei Institute of Epidemiology and Microbiology, Health Ministry of the Russian Federation Collaborator",Interventional,373676,2018-12-01 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,GamTBvac,107803,"Safety,Efficacy",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,GamTBvac,Evaluation of the Safety and Immunogenicity of the Recombinant Subunit Vaccine 'GamTBvac' Against the Tuberculosis,"Gamalei Institute of Epidemiology and Microbiology, Health Ministry of the Russian Federation Collaborator",Interventional,309614,2017-01-15 00:00:00,Completed
null,3,Phase Not Applicable,PNA,68Ga-tilmanocept,116061,Safety,N,N,Discovery,DR,Mycobacterium tuberculosis infection,221,null,A comparative study to evaluate the use of 68Ga-tilmanocept in patients with tuberculosis (TB),Navidea Biopharmaceuticals Inc,Interventional,378644,null,Planned
null,1+,Phase 2 Clinical,C2,tenofovir disoproxil fumarate,14493,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RRHT,Rifampicin versus Rifabutin in HIV/AIDS Patients Combined With Tuberculosis,Shanghai Public Health Clinical Center,Interventional,334027,2018-04-15 00:00:00,Recruiting
null,6,Phase 4 Clinical,C4,lopinavir + ritonavir,14681,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,DATiC,Optimal Dosing of First-Line Antituberculosis and Antiretroviral Drugs in Children (a Pharmacokinetic Study),University of Cape Town,Interventional,89135,2012-11-30 00:00:00,Completed
null,4,Phase 3 Clinical,C3,stavudine,4481,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,N2R,Efavirenz-Based Versus Nevirapine-Based Antiretroviral Therapy Among HIV-Infected Patients Receiving Rifampin,Bamrasnaradura Infectious Diseases Institute,Interventional,10947,2007-01-31 00:00:00,Completed
null,1+,Phase 1 Clinical,C1,stavudine,4481,"Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Effectiveness of Anti-HIV Therapy (HAART) in HIV-Infected Patients With Tuberculosis,National Institute of Allergy and Infectious Diseases,Interventional,10646,2000-02-25 00:00:00,Completed
Japanese Ancestry,1+,Phase 3 Clinical,C3,ranitidine,44309,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,SURE,Short Intensive Treatment For Children With Tuberculous Meningitis,University College London,Interventional,360104,2018-01-02 00:00:00,Not yet recruiting
African Ancestry,1+,Phase not specified,NS,"artenimol + piperaquine (malaria), Sigma-Tau",53724,"Safety,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,ARTEM-TB STUDY,Evaluating Pharmacokinetic Interactions Between Artemisinin-Based Therapies and Rifampacin-Based Tuberculosis Treatment in African Patients,Infectious Diseases Institute of Makerer University,Interventional,142485,2013-01-31 00:00:00,Not yet recruiting
null,1+,Phase 3 Clinical,C3,didanosine,2935,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,SAPIT,A Study to Compare Three Existing Starting Points of Antiretroviral Therapy (ART) Initiation in HIV/Tuberculosis (TB) Co-infected Patients,Centre for the AIDS Program of Research in South Africa,Interventional,201474,2005-06-30 00:00:00,Completed
null,2+,Phase not specified,NS,lamivudine,3474,"Safety,Efficacy,Bioavailability",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,PK-TB-HAART,"Bioavailability of the Fixed Dose Formulation Rifafour Containing Isoniazid, Rifampicin, Pyrazinamide, Ethambutol and the World Health Organization (WHO) Recommended First Line Antiretroviral Drugs Zidovudine, Lamivudine, Efavirenz Administered to New Tuberculosis (TB) Patients at Different Levels of Immunosuppression",World Health Organization,Interventional,136052,2006-05-29 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,lamivudine,3474,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,IPEC-EFV,Randomized Clinical Trial to Assess the Efficacy and Safety of Concomitant Use of Rifampicin and Efavirenz 600 X  800 mg,Fundacao Oswaldo Cruz (Fiocruz),Interventional,11181,2007-01-31 00:00:00,Terminated
null,1+,Phase 4 Clinical,C4,Menitorix,11458,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,BAM,A Study of the Interaction Between BCG And MenC Immunization,University of Oxford,Interventional,162886,2014-06-20 00:00:00,Completed
null,1,Phase 4 Clinical,C4,ribavirin,5369,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Antivirus Therapy for Population with HIV, HCV and TB Co-infection Clinical Trial",Guangzhou eighth People's Hospital,Interventional,162528,2009-05-01 00:00:00,Recruiting
null,2+,Phase 3 Clinical,C3,emtricitabine,4728,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,Pred-ART,"Preventing TB-IRIS in High-risk Patients: a Randomized, Placebo-controlled Trial of Prednisone",University of Cape Town,Interventional,150793,2013-08-30 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,gatifloxacin,7017,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Multicenter, controlled clinical study of the safety, tolerability and efficacy of clofazimine in the treatment of drug-resistant tuberculosis",Beijing Chest Hospital,Interventional,328802,2009-12-01 00:00:00,No longer recruiting
null,1+,Phase 3 Clinical,C3,gatifloxacin,7017,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Thrice-Weekly, 4- Months Moxifloxacin or Gatifloxacin Regimens for Pulmonary TB",Indian Council of Medical Research,Interventional,150332,2004-05-14 00:00:00,Terminated
null,1,Phase 2 Clinical,C2,ertapenem,12543,"Safety,Pharmacokinetics,Pharmacodynamics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,PK/PD of Ertapenem in Patients with TB,University Medical Center Groningen,Interventional,98848,2017-01-26 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,ANRS 1295 CAMELIA,Early versus Late Introduction of Antiretroviral Therapy in HIV-infected Patients With Tuberculosis,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,145651,2006-01-31 00:00:00,Completed
null,2,Phase not specified,NS,nevirapine,3700,Pharmacokinetics,Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Population Pharmacokinetics of Nevirapine in Combination With Rifampicin-Based Short Course Chemotherapy in HIV- and Tuberculosis-Infected South African Patients,Uppsala University,Interventional,149504,null,Completed
null,2,Phase 4 Clinical,C4,nevirapine,3700,Pharmacokinetics,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Nevirapine Drug Levels in HIV Positive Patients Also Receiving Rifampicin for Tuberculosis,Makerere University,Interventional,11184,2008-05-31 00:00:00,Completed
null,2+,Phase 2 Clinical,C2,meropenem,3616,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Phase II Trial to Evaluate the Early Bactericidal Activity, Safety and Tolerability of Meropenem Plus Amoxycillin/CA and Faropenem Plus Amoxycillin/CA in Adult Patients With Newly Diagnosed Pulmonary Tuberculosis",Task Foundation NPC,Interventional,220739,2014-09-30 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,ofloxacin,52139,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Randomized Clinical Trial to Study the Efficacy and Tolerability of a 4-Month Regimen Containing Ofloxacin Compared to the Standard 6-Month Regimen in the Treatment of Patients with Superficial Lymphnode Tuberculosis,Indian Council of Medical Research,Interventional,142516,2012-10-20 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,azithromycin,2587,"Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Azithromycin as Host-directed Therapy for Pulmonary Tuberculosis,University Medical Center Groningen,Interventional,298743,2018-02-01 00:00:00,Recruiting
null,2,Phase 1 Clinical,C1,linezolid,11036,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Safety, Tolerability, Pharmacokinetics And Measurement Of Whole Blood Activity (WBA) Of PNU-100480 After Multiple Oral Doses In Healthy Adult Volunteers",Sequella Inc,Interventional,60906,2009-10-31 00:00:00,Completed
null,2+,Phase 3 Clinical,C3,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,DRAMATIC,"Efficacy and Tolerability of Bedaquiline, Delamanid, Levofloxacin, Linezolid, and Clofazimine for Treatment of Patients With MDR-TB",Boston University,Interventional,368916,2020-01-31 00:00:00,Terminated
null,2+,Phase 3 Clinical,C3,linezolid,11036,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,A Phase III Study Assessing the Safety and Efficacy of Bedaquiline Plus PA-824 Plus Linezolid in Subjects With Drug-Resistant Pulmonary Tuberculosis,TB Alliance,Interventional,219499,2015-03-31 00:00:00,No longer recruiting
null,1+,Phase 2 Clinical,C2,linezolid,11036,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Linezolid Instead of Ethambutol in Treatment of Drug-susceptible Tuberculosis,Seoul National University Hospital,Interventional,161831,2014-01-31 00:00:00,Recruiting
null,1,Phase 1/Phase 2 Clinical,C12,linezolid,11036,Safety,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,LiMiT,Pilot Study Examining the Safety and Tolerability of Low Dose Linezolid in the Treatment of Multi-Drug Resistant Tuberculosis,"Centers for Disease Control and Prevention, Pfizer Inc",Interventional,11219,2009-04-30 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,"lamivudine + zidovudine, GlaxoSmithKline",16696,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,"NVP",Efficacy and Safety of Concomitant Use of Nevirapine and Rifampicin With HIV-TB,All India Institute of Medical Sciences,Interventional,114300,2007-06-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,Actimmune,3365,"Safety,Efficacy",N,N,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,A phase III study to evaluate the safety and efficacy of aerosolized Actimmune for the treatment of pulmonary multidrug-resistant tuberculosis (MDR-TB) in patients who have failed a treatment regimen of anti-tuberculosis therapy,InterMune Inc,Interventional,14945,2000-08-01 00:00:00,Status not specified
null,13,Phase not specified,NS,levofloxacin,3492,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,A Prospective Study of Multidrug Resistance and a Pilot Study of the Safety of and Clinical and Microbiological Response to Levofloxacin in Combination With Other Antimycobacterial Drugs for Treatment of Multidrug-Resistant Pulmonary Tuberculosis (MDRTB) in HIV-Infected Patients,National Institute of Allergy and Infectious Diseases,Interventional,8776,1998-10-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,levofloxacin,3492,Pharmacokinetics,Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,A study to evaluate the pharmacokinetics of levofloxacin in children who received levofloxacin-based tuberculosis preventive therapy,Interactive Research and Development,Interventional,380303,null,Status not specified
null,1+,Phase 2/Phase 3 Clinical,C23,levofloxacin,3492,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,TRUNCATE-TB,A 2 Month Regimens Using Novel Combinations to Augment Treatment Effectiveness for Drug-Sensitive Tuberculosis,"Syneos Health Inc, University College London",Interventional,333435,2018-03-21 00:00:00,Recruiting
null,1+,Phase 2/Phase 3 Clinical,C23,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Study of Adjunctive Recombinant Human Interleukin-2 Therapy in Patients With MDR-TB (rhIL-2),Jiangsu Provincial People’s Hospital,Interventional,289837,2009-06-01 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,levofloxacin,3492,"Efficacy,Pharmacokinetics,Pharmacodynamics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,Population Pharmacokinetics and Pharmacodynamics Modeling to Optimize Dosage Regimen of Levofloxacin,Prince of Songkla University,Interventional,254949,2013-10-31 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,levofloxacin,3492,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Optimization of MDR-TB Treatment Regimen Based on the Molecular Drug Susceptibility Results of Pyrazinamide,Huashan Hospital,Interventional,183613,2014-04-30 00:00:00,Recruiting
null,2,Phase 4 Clinical,C4,levofloxacin,3492,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Is Levofloxacin Better Than Rifampicin in the Treatment of Tuberculous Meningitis- a Randomized, Control Study",Sanjay Gandhi Postgraduate Institute of Medical Sciences,Interventional,129005,2009-10-01 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,rifabutin,4229,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,EARNEST Rifabutin Pharmacokinetics (PK) Substudy,"Joint Clinical Research Centre, Medical Research Council",Interventional,90175,2012-05-03 00:00:00,Completed
null,2+,Phase 4 Clinical,C4,rifabutin,4229,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Raltegravir + ABC/3TC in HIV/TB Co-Infected Patients,Central Research Institute of Epidemiology,Interventional,63729,2010-10-31 00:00:00,Recruiting
Asian Ancestry,1,Phase not specified,NS,rifabutin,4229,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A self-controlled, single-center Taiwanese study to assess the efficacy and tolerability of rifabutin for re-treating chronic cases of multidrug-resistant pulmonary tuberculosis",Pharmacia & Upjohn AB,Interventional,15897,1996-12-31 00:00:00,Status not specified
null,3+,Phase 4 Clinical,C4,rifabutin,4229,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,RIFART,RIFART,Azienda Ospedaliera Spedali Civili di Brescia,Interventional,131240,2005-03-15 00:00:00,Terminated
null,3,Phase 2 Clinical,C2,rifalazil,8658,Efficacy,Y,N,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,"A randomized, multiple-dose, open-label, phase II clinical study to evaluate the early bactericidal activity of rifalazil (PA-1648) and isoniazid (INH), as compared with INH alone or INH plus rifampin in patients with tuberculosis",Chiron PathoGenesis,Interventional,20175,1997-10-20 00:00:00,Completed
null,2,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Safety and Immunogenicity of GSK Biological's Candidate Tuberculosis Vaccine Mtb72F/AS02A in Healthy PPD-Positive Adults,GlaxoSmithKline plc,Interventional,9528,2005-07-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,"Safety,Efficacy",Y,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Immunogenicity and Safety of a Candidate Tuberculosis (TB) Vaccine Given to Healthy Adults in a TB-Endemic Region,GlaxoSmithKline plc,Interventional,11563,2008-02-29 00:00:00,Completed
null,2,Phase 1 Clinical,C1,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,TMC207TBC1003 - A Study in Healthy Volunteers Investigating the Effect of Single-Dose TMC-207 on the QT/QTc Interval Under Fed Conditions,Janssen Diagnostics BVBA,Interventional,74529,2011-02-28 00:00:00,Completed
null,1+,Phase 1/Phase 2 Clinical,C12,moxifloxacin,12978,Efficacy,N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,RESWMEN,Using econazole to attempt to shorten the duration of treatment in MDR tuberculosis,Indian Council of Medical Research,Interventional,374838,2019-05-01 00:00:00,Not yet recruiting
null,1+,Phase 2 Clinical,C2,moxifloxacin,12978,Pharmacokinetics,Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"A prospective, single-centre pharmacokinetic study to develop population pharmacokinetic models for second-line drugs in patients with multi-drug-resistant tuberculosis, evaluate the recommended dosage regimens and, if necessary, suggest new dosage regimens","Ministry of Health & Welfare, Korea",Interventional,304264,null,Status not specified
null,2+,Phase 3 Clinical,C3,moxifloxacin,12978,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,STREAM,The Evaluation of a Standard Treatment Regimen of Anti-Tuberculosis Drugs for Patients With MDR-TB,International Union Against Tuberculosis and Lung Diseases,Interventional,228190,2016-04-30 00:00:00,Recruiting
null,1+,Phase not specified,NS,moxifloxacin,12978,"Safety,Efficacy",Y,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,"An open-label, comparative, multicenter trial to evaluate long-term tolerance and effectiveness of moxifloxacin therapy for tuberculosis",Ospedale Ninetto Melli,Interventional,113726,2003-02-28 00:00:00,Status not specified
null,2,Phase 1 Clinical,C1,pretomanid,13323,"Safety,Efficacy,Pharmacokinetics",N,Y,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,Effect of PA-824 and of PA-824 Plus Moxifloxacin on the QTc Interval in Healthy Volunteers,National Institute of Allergy and Infectious Diseases,Interventional,90512,2012-09-30 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,pretomanid,13323,"Safety,Efficacy",N,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,ZeNiX,"Safety and Efficacy of Various Doses and Treatment Durations of Linezolid Plus Bedaquiline and Pretomanid in Participants With Pulmonary TB, XDR-TB, Pre-XDR-TB or Non-responsive/Intolerant MDR-TB",TB Alliance,Interventional,293734,2017-10-31 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,rifapentine,15102,"Safety,Efficacy,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,TBTC S29B,"Pharmacokinetics, Safety and Tolerability of Escalating Rifapentine Doses in Healthy Volunteers",Johns Hopkins University,Interventional,68204,2010-04-30 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,rifapentine,15102,"Safety,Efficacy,Pharmacokinetics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Study of Daily Rifapentine for Pulmonary Tuberculosis,Johns Hopkins University,Interventional,39550,2010-04-30 00:00:00,Completed
null,1,Phase 3 Clinical,C3,rifapentine,15102,Efficacy,N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Rifapentine-containing tuberculosis treatment shortening regimens (S31/A5349),Centers for Disease Control and Prevention,Interventional,347338,2018-07-20 00:00:00,Not yet recruiting
null,1,Phase 4 Clinical,C4,rifapentine,15102,Efficacy,N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Taima TB: 3-HP Study,Ottawa Hospital Research Institute,Interventional,254050,2016-04-30 00:00:00,Recruiting
null,1,Phase 4 Clinical,C4,rifapentine,15102,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Intervention study in rural residents (50 to 70 years old) with latent Mycobacterium tuberculosis infection,Chinese Academy of Medical Sciences & Peking Union Medical College,Interventional,243294,2014-01-01 00:00:00,No longer recruiting
null,1+,Phase 3 Clinical,C3,rifapentine,15102,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Rifapentine-containing Tuberculosis Treatment Shortening Regimens,Centers for Disease Control and Prevention,Interventional,226815,2016-01-25 00:00:00,No longer recruiting
null,2,Phase 3 Clinical,C3,rifapentine,15102,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,TBTC-22,TBTC Study 22: Efficacy of Once-Weekly Rifapentine and Isoniazid in Treatment of Tuberculosis,Centers for Disease Control and Prevention,Interventional,10650,1995-04-30 00:00:00,Completed
null,2,Phase 1 Clinical,C1,delamanid,16545,"Safety,Pharmacokinetics",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Pharmacokinetic and Safety Trial to Determine the Appropriate Dose for Pediatric Patients With Multidrug Resistant Tuberculosis,Otsuka Pharmaceutical Development and Commercialization Inc,Interventional,132087,2013-06-14 00:00:00,Completed
null,1,Phase 2a Clinical,C2A,SQ-109,31010,"Safety,Efficacy",N,Y,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Evaluation of SQ-109 Plus PPI in Urea Breath Test-Positive Volunteers,Sequella Inc,Interventional,72716,2012-03-31 00:00:00,Terminated
null,1,Phase 1 Clinical,C1,LL-3858,49162,"Safety,Pharmacokinetics",Y,N,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,A phase I study to evaluate the safety and pharmacokinetics of LL-3858,Lupin Ltd,Interventional,8931,2005-04-01 00:00:00,Completed
null,1,Phase 3 Clinical,C3,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,A Study to Evaluate the Efficacy and Safety of TMC-207 in Patients With Pulmonary Infection With Multi-drug Resistant Mycobacterium Tuberculosis,Janssen Research & Development LLC,Interventional,87533,2014-03-31 00:00:00,Terminated
null,1,Phase 3 Clinical,C3,bedaquiline,51310,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Early Access of TMC-207 in Patients With Extensively Drug Resistant or Pre-XDR Pulmonary Tuberculosis,Janssen Diagnostics BVBA,Interventional,82132,2011-09-16 00:00:00,Completed
null,2,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis,TB Alliance,Interventional,71046,2010-04-30 00:00:00,Completed
null,1,Phase 1 Clinical,C1,bedaquiline,51310,"Safety,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,"A Study to Investigate Pharmacokinetics, Safety and Tolerability of TMC-207 in Patients With Moderately Impaired Hepatic Function",Janssen Diagnostics BVBA,Interventional,61895,2010-01-31 00:00:00,Completed
null,1,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"A phase II, randomized, placebo-controlled study assessing the safety and efficacy of TMC-207 in patients with multidrug-resistant tuberculosis",Johnson & Johnson Pharmaceutical Research & Development LLC,Interventional,57685,2009-06-03 00:00:00,Recruiting
null,1,Phase 1 Clinical,C1,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,TMC207-TiDP13-C117: Interaction Study in Human Immunodeficiency Virus-type 1 (HIV-1) Infected Patients With Nevirapine (NVP),"Janssen Diagnostics BVBA, Johnson & Johnson",Interventional,56959,2009-06-30 00:00:00,Completed
null,2,Phase 1 Clinical,C1,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",N,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,TMC207-TiDP13-C110: Interaction Study With Lopinavir/Ritonavir in Healthy Volunteer,Janssen Diagnostics BVBA,Interventional,42128,2009-02-28 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,Study on Tuberculosis Resistant to Treatment,"Indian Council of Medical Research, Tuberculosis Research Centre",Interventional,369747,2019-02-01 00:00:00,Not yet recruiting
null,1,Phase 1 Clinical,C1,bedaquiline,51310,"Safety,Bioequivalence,Bioavailability,Pharmacokinetics",Y,Y,Launched,L,Mycobacterium tuberculosis infection,221,BDQ Crush,TASK-002: Bioequivalence of Bedaquiline 400 mg Administered in Crushed Form Compared to Tablet Form in Healthy Male and Female Adults Under Fed Conditions,International Maternal Pediatric Adolescent AIDS Clinical Trials Group,Interventional,286376,2016-11-10 00:00:00,Completed
null,2,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy",Y,N,Launched,L,Mycobacterium tuberculosis infection,221,null,A study to investigate the safety and efficacy of bedaquiline and linezolid chemotherapy for extensively drug-resistant pulmonary tuberculosis within 6 months period,Russian Academy of Sciences,Interventional,280303,null,Status not specified
Japanese Ancestry,2+,Phase 2 Clinical,C2,bedaquiline,51310,"Safety,Efficacy,Pharmacokinetics",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,An Exploratory Study of TMC-207 in Japanese Participants with Pulmonary Multi-Drug Resistant Tuberculosis (MDR-TB),Janssen Pharmaceutical KK,Interventional,222400,2015-02-18 00:00:00,Completed
null,4+,Phase 1 Clinical,C1,bedaquiline,51310,"Safety,Pharmacokinetics",Y,Y,Launched,L,Mycobacterium tuberculosis infection,221,null,Pharmacokinetic Interaction Between Rifapentine or Rifampicin and a Single-dose of TMC-207 in Healthy Subjects,TB Alliance,Interventional,208141,2010-03-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,AERAS-402,53975,"Safety,Efficacy,Pharmacokinetics",Y,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,Safety Study of Tuberculosis Vaccines AERAS-402 and MVA-85A,University of Oxford,Interventional,91280,2012-09-30 00:00:00,Completed
null,1,Phase 1 Clinical,C1,AERAS-402,53975,Safety,Y,Y,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,"A phase I study to determine the safety of AERAS-402 in healthy adults, all of whom have been previously vaccinated with the Bacille Calmette-Guerin (BCG) vaccine and a subset of whom have evidence of having been exposed to tuberculosis","Aeras Global TB Vaccine Foundation, Crucell NV, Kenya Medical Research Institute",Interventional,59617,2008-10-17 00:00:00,Completed
null,1,Phase 2 Clinical,C2,AERAS-402,53975,"Safety,Efficacy",Y,N,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,"A phase II, dose escalation study to determine the safety of AERAS-402 in adults who have had active tuberculosis","South African Tuberculosis Vaccine Initiative, University of Cape Town",Interventional,59557,2008-10-17 00:00:00,Recruiting
null,1,Phase 3 Clinical,C3,cadi-05,55173,"Safety,Efficacy",N,N,No Development Reported,NDR,Mycobacterium tuberculosis infection,221,null,Efficacy and Safety of Immunomodulator as an Adjunct Therapy in New Pulmonary Tuberculosis (Category I) Patients,"Ministry of Science and Technology, India",Interventional,10866,2007-03-31 00:00:00,Completed
null,2,Phase 1 Clinical,C1,MVA-85A,55317,Efficacy,Y,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"A BCG Challenge Model Study to Assess Anti-mycobacterial Immunity Induced by BCG and a Candidate TB Vaccine, MVA-85A",University of Oxford,Interventional,69926,2010-05-31 00:00:00,Completed
African Ancestry,1,Phase 2 Clinical,C2,MVA-85A,55317,"Safety,Efficacy",Y,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"Efficacy Against TB Disease, Safety, and Immunogenicity of MVA-85A/AERAS-485 in HIV-Infected Adults",Aeras Global TB Vaccine Foundation,Interventional,67841,2011-07-31 00:00:00,Completed
null,1,Phase 1 Clinical,C1,MVA-85A,55317,"Safety,Efficacy",N,Y,Discontinued,DX,Mycobacterium tuberculosis infection,221,null,"Study Evaluating Aerosol and Intradermal Administration of a Candidate Tuberculosis (TB) Vaccine, MVA-85A, as a Way to Increase Immune Response and Avoid Anti-Vector Immunity",University of Oxford,Interventional,156675,2013-10-31 00:00:00,Completed
null,1,Phase 2a Clinical,C2A,RUTI,57308,"Safety,Efficacy",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,Safety of RUTI Vaccination in MDR-TB Patients,Archivel Farma SL,Interventional,256039,2019-01-01 00:00:00,Not yet recruiting
null,1,Phase 1 Clinical,C1,S-004992,61340,Safety,N,N,Phase 1 Clinical,C1,Mycobacterium tuberculosis infection,221,null,A phase I study to evaluate S-004992 in patients with tuberculosis,Shionogi & Co Ltd,Interventional,348025,null,Recruiting
null,1,Phase 2b Clinical,C2B,delpazolid,76307,"Safety,Efficacy",N,N,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,A clinical trial of RMX-2001 in multidrug-resistant tuberculosis (MDR-TB) in USA,"HaiHe Pharmaceuticals Co Ltd, LegoChem Bioscience Inc",Interventional,370698,null,Planned
null,1,Phase 1 Clinical,C1,AEC/BC02,81363,"Safety,Efficacy",N,N,Pre-registration,PR,Mycobacterium tuberculosis infection,221,null,Freeze-dried recombinant tuberculosis vaccine (AEC/BC02) phase I clinical human tolerance test,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,Interventional,329497,null,Not yet recruiting
null,1,Phase 1 Clinical,C1,telacebec,85970,"Safety,Pharmacokinetics",N,Y,Phase 2 Clinical,C2,Mycobacterium tuberculosis infection,221,null,"Open, phase I clinical trial to evaluate the safety, tolerability and pharmacokinetic parameters of Q-203 after single and multiple doses in healthy volunteers",Infectex,Interventional,255234,2016-01-12 00:00:00,Status not specified
null,1,Phase not specified,NS,Perchlozone,87251,"Safety,Efficacy",N,N,Launched,L,Mycobacterium tuberculosis infection,221,null,"Multicenter, randomized, double-blind, placebo-controlled, parallel-group study of the efficacy and safety of the drug Perhlozone in the treatment of patients with pulmonary MDR MBT, including the presence of HIV infection",Pharmasyntez,Interventional,183939,2014-04-08 00:00:00,Status not specified
null,1+,Phase 1/Phase 2 Clinical,C12,"clofazimine (oral, tuberculosis), Novartis",91861,Efficacy,N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,RESWMEN,Using econazole to attempt to shorten the duration of treatment in MDR tuberculosis,Indian Council of Medical Research,Interventional,374838,2019-05-01 00:00:00,Not yet recruiting
null,1,Phase 2/Phase 3 Clinical,C23,"clofazimine (oral, tuberculosis), Novartis",91861,"Safety,Efficacy",N,N,Phase 3 Clinical,C3,Mycobacterium tuberculosis infection,221,null,Clofazimine treatment of multidrug-resistant tuberculosis (MDRTB),Novartis AG,Interventional,284370,2016-03-01 00:00:00,Terminated
null,4,Phase 3 Clinical,C3,isoniazid + rifampicin + pyrazinamide + ethambutol,98013,"Safety,Efficacy",N,N,Discovery,DR,Mycobacterium tuberculosis infection,221,null,"Using electronic monitors and a smartphone app to improve treatment adherence of new pulmonary tuberculosis patients in Tibet, China",The Chinese Centre for Disease Control and Prevention,Interventional,359917,2018-09-01 00:00:00,Recruiting
null,1+,Phase 2 Clinical,C2,lopinavir + ritonavir,14681,"Safety,Efficacy,Pharmacokinetics,Pharmacodynamics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,EARNEST Rifabutin Pharmacokinetics (PK) Substudy,"Joint Clinical Research Centre, Medical Research Council",Interventional,90175,2012-05-03 00:00:00,Completed
null,2,Phase 1 Clinical,C1,lopinavir + ritonavir,14681,"Safety,Bioavailability,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,A Bioavailability Study of Rifabutin and Lopinavir/Ritonavir in Healthy Adult Subjects,Abbott Laboratories,Interventional,25327,2008-08-31 00:00:00,Terminated
null,1,Phase not specified,NS,albendazole,12132,Efficacy,Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Deworming Against Tuberculosis,Linkoping University,Interventional,48176,2009-03-31 00:00:00,Completed
null,8,Phase 2 Clinical,C2,albendazole,12132,Efficacy,N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TB-LION,Tuberculosis - Learning the Impact of Nutrition,Boston Medical Center Corp,Interventional,347635,2019-06-30 00:00:00,Not yet recruiting
null,1+,Phase 3 Clinical,C3,stavudine,4481,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,ANRS 1295 CAMELIA,Early versus Late Introduction of Antiretroviral Therapy in HIV-infected Patients With Tuberculosis,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,145651,2006-01-31 00:00:00,Completed
null,1+,Phase 2 Clinical,C2,lamivudine,3474,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,REFLATE TB,Efficacy and Safety of Two Raltegravir Doses in Naive HIV-1-Infected Patients Receiving Rifampin for Active Tuberculosis,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,40948,2009-07-31 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,lamivudine,3474,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,REFLATE TB2,Raltegravir Versus Efavirenz in Naive HIV-1-infected Patients Receiving Rifampin for Active Tuberculosis,INSERM,Interventional,214156,2015-09-30 00:00:00,Recruiting
null,2+,Phase 4 Clinical,C4,imipenem + cilastatin,44406,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,Centre for the AIDS Program of Research in South Africa,Interventional,307654,2017-06-14 00:00:00,Recruiting
null,2+,Phase 3 Clinical,C3,"tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",49219,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TEMPRANO,Early Antiretroviral Treatment and/or Early Isoniazid Prophylaxis Against Tuberculosis in HIV-Infected Adults,French National Agency for Research on AIDS and Viral Hepatitis,Interventional,195741,2008-03-31 00:00:00,Completed
null,1+,Phase 1/Phase 2 Clinical,C12,emtricitabine,4728,"Safety,Pharmacokinetics",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,IMPAACT4TB,"Safety, Tolerability DDI Short Course Treatment of LTBI Infection With High-dose Rifapentine Isoniazid in HIV+ Patients",Aurum Institute,Interventional,329251,2018-01-18 00:00:00,Recruiting
null,1+,Phase 0 Clinical,C0,emtricitabine,4728,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,TasP in Correctional Facilities,University of North Carolina,Interventional,280225,2016-02-01 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,Rotarix,12813,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,BAM,A Study of the Interaction Between BCG And MenC Immunization,University of Oxford,Interventional,162886,2014-06-20 00:00:00,Completed
null,3,Phase 1 Clinical,C1,clindamycin,44370,"Safety,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,Staph,Pharmacokinetics of Antistaphylococcal Antibiotics in Infants,Duke University,Interventional,98566,2013-01-31 00:00:00,Completed
null,2,Phase 1/Phase 2 Clinical,C12,"BCG vaccine, Organon",13624,"Safety,Efficacy",Y,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,A Clinical Challenge Study of BCG in Healthy Volunteers,University of Oxford,Interventional,177982,2014-03-31 00:00:00,Completed
null,3+,Phase 3 Clinical,C3,efavirenz,10172,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,BRIEF TB,Brief Rifapentine-Isoniazid Evaluation for TB Prevention,National Institute of Allergy and Infectious Diseases,Interventional,79741,2012-05-23 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,efavirenz,10172,Safety,Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TIME,Appropriate Timing of HAART in Co-infected HIV/TB Patients,Bamrasnaradura Infectious Diseases Institute,Interventional,61991,2009-10-31 00:00:00,Terminated
null,1+,Phase 0 Clinical,C0,efavirenz,10172,Efficacy,N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,TasP in Correctional Facilities,University of North Carolina,Interventional,280225,2016-02-01 00:00:00,Completed
null,1,Phase 4 Clinical,C4,efavirenz,10172,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,PrOMPT,Prevention of Early Mortality by Presumptive Tuberculosis (TB) Treatment,University of Amsterdam,Interventional,182316,2011-08-31 00:00:00,Terminated
null,1+,Phase 2 Clinical,C2,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,RIFAVIRENZ,Interaction Between High-Dose Rifampicine and Efavirenz in Pulmonary Tuberculosis and HIV Co-infection,INSERM,Interventional,161096,2013-12-31 00:00:00,No longer recruiting
null,2,Phase 3 Clinical,C3,efavirenz,10172,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,HIV-TB Pharmagene,Optimization of Tuberculosis and HIV Co-treatment in Africa,Karolinska Institutet,Interventional,131419,2008-01-09 00:00:00,Recruiting
null,4+,Phase not specified,NS,efavirenz,10172,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Once-Daily Dose of Nevirapine (400 mg) Versus Twice Daily Dose (200 mg) of Nevirapine in HIV and Tuberculosis Infection,National AIDS Control Organization,Interventional,126486,2012-09-01 00:00:00,Not yet recruiting
null,4+,Phase 2/Phase 3 Clinical,C23,ceftriaxone,44384,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,EMPIRICAL,Empirical Treatment Against Cytomegalovirus and Tuberculosis in HIV-infected Infants With Severe Pneumonia,Hospital Universitario 12 de Octubre,Interventional,377163,2020-01-01 00:00:00,Not yet recruiting
null,2+,Phase 3 Clinical,C3,nevirapine,3700,"Safety,Efficacy",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"Efficacy of Thrice Weekly Directly Observed Treatment, Short-course (DOTS) in HIV-associated Tuberculosis",All India Institute of Medical Sciences,Interventional,161275,2006-04-30 00:00:00,Completed
null,2+,Phase 1 Clinical,C1,"amoxicillin + clavulanate potassium, GSK",44284,"Efficacy,Pharmacokinetics,Pharmacodynamics",Y,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Whole Blood Bactericidal Activity (WBA) Against Mycobacterium Tuberculosis of Faropenem Plus Amoxicillin/Clavulanic Acid in Healthy Volunteers,National University Hospital (Singapore) Pte Ltd,Interventional,224811,2015-02-28 00:00:00,Completed
null,5+,Phase 2 Clinical,C2,"amoxicillin + clavulanate potassium, GSK",44284,"Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Trial of Faropenem and Cefadroxil (in Combination With Amoxicillin/Clavulanic Acid and Standard TB Drugs) in Patients With Pulmonary Tuberculosis: Measurement of Early Bactericidal Activity and Effects on Novel Biomarkers,"National University Hospital (Singapore) Pte Ltd, Syneos Health Inc",Interventional,224111,2018-12-31 00:00:00,Not yet recruiting
null,2,Phase 4 Clinical,C4,etanercept,4567,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Risk of Tuberculosis and Other Infections in Patients of Spondyloarthritis Treated With Tofacitinib in Bangladesh,Bangabandhu Sheikh Mujib Medical University,Interventional,337163,2018-01-16 00:00:00,Recruiting
null,1+,Phase 2a Clinical,C2A,meropenem,3616,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Early Bactericidal Activity of Rifampin + Meropenem + Amoxicillin/Clavulanate in Adults With Pulmonary TB,Johns Hopkins University,Interventional,300655,2017-08-23 00:00:00,Recruiting
null,5+,Phase 3 Clinical,C3,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,endTB-Q,Evaluating Newly Approved Drugs in Combination Regimens for Multidrug-Resistant TB With Fluoroquinolone Resistance,Médecins Sans Frontières France,Interventional,375499,2019-06-30 00:00:00,Not yet recruiting
null,1+,Phase 2/Phase 3 Clinical,C23,linezolid,11036,"Safety,Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,TRUNCATE-TB,A 2 Month Regimens Using Novel Combinations to Augment Treatment Effectiveness for Drug-Sensitive Tuberculosis,"Syneos Health Inc, University College London",Interventional,333435,2018-03-21 00:00:00,Recruiting
null,2+,Phase 3 Clinical,C3,linezolid,11036,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,DAZZLE,"Efficacy and Tolerability of Delamanid, Linezolid, Pyrazinamide and Levofloxacin",Boston University,Interventional,280651,2017-08-31 00:00:00,Terminated
null,1,Phase 1 Clinical,C1,linezolid,11036,"Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,LINEZOLIDE,Pharmacokinetic and Therapeutic Adaptation of Linezolid in the Treatment of Multi-Resistant Tuberculosis,Groupe Hospitalier Paris Saint-Joseph,Interventional,261481,2015-11-04 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,linezolid,11036,"Safety,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Drug Interaction Study Between Linezolid and Clarithromycin in Tuberculosis Patients,University Medical Center Groningen,Interventional,182646,2011-12-31 00:00:00,Completed
null,1+,Phase 4 Clinical,C4,Prevnar 13,34281,"Safety,Efficacy",N,Y,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,BAM,A Study of the Interaction Between BCG And MenC Immunization,University of Oxford,Interventional,162886,2014-06-20 00:00:00,Completed
null,1+,Phase 3 Clinical,C3,raltegravir,54488,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,REFLATE TB2,Raltegravir Versus Efavirenz in Naive HIV-1-infected Patients Receiving Rifampin for Active Tuberculosis,INSERM,Interventional,214156,2015-09-30 00:00:00,Recruiting
null,1,Phase 2 Clinical,C2,rosuvastatin,12420,"Safety,Efficacy",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Effect of rosuvastatin on HIV TB coinfection,Armed Forces Medical College,Interventional,292154,2017-04-01 00:00:00,Not yet recruiting
null,5+,Phase 2 Clinical,C2,faropenem,4492,"Efficacy,Pharmacokinetics",N,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,Trial of Faropenem and Cefadroxil (in Combination With Amoxicillin/Clavulanic Acid and Standard TB Drugs) in Patients With Pulmonary Tuberculosis: Measurement of Early Bactericidal Activity and Effects on Novel Biomarkers,"National University Hospital (Singapore) Pte Ltd, Syneos Health Inc",Interventional,224111,2018-12-31 00:00:00,Not yet recruiting
null,2+,Phase not specified,NS,ritonavir,7310,"Safety,Efficacy,Pharmacokinetics",Y,N,PHASE NOT SPECIFIED,NS,Mycobacterium tuberculosis infection,221,null,"A prospective, open-label, pilot study to evaluate the pharmacokinetics (PK)/safety/efficacy of an adjusted dose of indinavir/ritonavir (IDV/r) 600/100 mg plus two nucleoside reverse transcriptase inhibitors (NRTIs) in HIV/TB-coinfected Thais receiving rifampicin-based anti-TB treatment",Thai Red Cross AIDS Research Centre,Interventional,100728,2012-01-17 00:00:00,Status not specified</ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.QueryCsvResponse>