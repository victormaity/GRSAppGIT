<?xml version="1.0" ?><ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.AnalysisCsvResponse xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns2="local" xsi:type="xs:base64Binary">ArmCount,Biomarkers,Condition,Controls,DevStatus,DevStatusId,Drug,DrugId,EnrollmentCount,Interventions,Patients,ProtocolAcronym,ProtocolTitle,Reference,Sponsor,TrialId,TrialStartDate,TrialStatus
2+,Body temperature,Measles virus infection,Havrix; Prevnar 13; Varivax,Phase 3a Clinical,C3A,Prevnar 13,34281,1743,Havrix; M-M-R II; Prevnar 13; Priorix; Varivax,1736,null,"Safety and Immunogenicity Study of GlaxoSmithKline (GSK) Biologicals Measles, Mumps and Rubella (MMR) Vaccine (209762) Compared to Merck and Co, Inc's MMR Vaccine in Healthy Children 12 to 15 Months of Age",115650; 2011-006161-18; MMR-162; NCT02184572,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",203343,"AUGUST   , 25, 2014",Completed
2,null,Measles virus infection,MMR-II; PUVV,Phase 2 Clinical,C2,ProQuad,47279,1551,ProQuad,1551,null,ProQuad Dose Selection Study,2009_667; NCT00986232; V221-011,Merck & Co Inc,60684,"APRIL    , 30, 1999",Completed
6,null,Measles virus infection,Comvax; Tripedia; Varivax,Phase 3 Clinical,C3,varicella-zoster vaccine (Varivax/Zostavax),4645,1913,Comvax; ProQuad; Tripedia,822,null,Frozen ProQuad Administered Concomitantly Versus Nonconcomitantly With Other Pediatric Vaccines,2009_666; NCT00984295; V221-013,Merck Sharp & Dohme Corp,60653,"JUNE     , 30, 2000",Completed
2+,Anti-Bordetella pertussis antibodies; Anti-Bordetella pertussis filamentous hemagglutinin adhesin antibodies; Anti-Bordetella pertussis pertactin antibodies; Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies,Measles virus infection,"Infanrix-IPV; MMR vaccine, Merck & Co; ProQuad",Phase 3a Clinical,C3A,Priorix,11457,4011,"Infanrix-IPV; MMR vaccine, Merck & Co; Priorix; Priorix; ProQuad",4011,MMR-158,Immunogenicity and Safety Study of GlaxoSmithKline (GSK) Biologicals' Combined Measles-mumps-rubella (MMR) Vaccine in Subjects 4 to 6 Years of Age,115158; 2011-004638-32; 209762; MMR-158; NCT01621802,GlaxoSmithKline plc,88475,"JUNE     , 21, 2012",Completed
4+,null,Measles virus infection,"Haemophilus influenzae B (Hib) vaccine, Aventis Pasteur; ROR Vax",Phase 3 Clinical,C3,M-M-R II,3643,1128,Menactra; Menactra; PCV; ROR Vax,1128,null,"A Study of Two Doses of Menactra, a Meningococcal Conjugate Vaccine in Healthy Toddlers",MTA44; NCT00384397,Sanofi SA,9949,"SEPTEMBER, 30, 2006",Completed
1,null,Measles virus infection,null,Phase 4 Clinical,C4,Priorix-Tetra,17141,1439,Priorix-Tetra,1439,null,"Immunogenicity and Safety of a Combined Vaccine to Prevent Measles, Mumps, Rubella and Chickenpox Diseases",104020; 2004-005123-18; MeMuRu-OKA 043; NCT00126997,GlaxoSmithKline plc,11389,"MAY      , 31, 2005",Completed
5,Anti varicella zoster virus antibodies; Body temperature,Measles virus infection,"MMR vaccine, Merck & Co",Phase 3 Clinical,C3,varicella-zoster vaccine (Varivax/Zostavax),4645,5016,Priorix,5016,MMR-160,Consistency Study of GlaxoSmithKline(GSK) Biologicals MMR Vaccine (209762)(Priorix) Comparing Immunogenicity and Safety to Merck and Co Inc's MMR Vaccine (MMR II) in Children 12 to 15 Months of Age,115648; 2011-004891-12; MMR-160; NCT01702428,GlaxoSmithKline plc,94105,"NOVEMBER , 09, 2012",Completed
2,Body temperature,Measles virus infection,M-M-R II,Phase 3 Clinical,C3,M-M-R II,3643,752,Varivax,752,null,Immunogenicity and Safety of Concomitant Administration of MMR rHA and VARIVAX by Intramuscular Versus Subcutaneous Route,EudraCT#2004_002586_21; NCT00432523; V205-011; X04-MMRr-301,Merck Sharp & Dohme Corp,11525,"JANUARY  , 31, 2005",Completed
2,null,Measles virus infection,MMR-II; PUVV,Phase 2 Clinical,C2,M-M-R II,3643,1551,ProQuad,1551,null,ProQuad Dose Selection Study,2009_667; NCT00986232; V221-011,Merck & Co Inc,60684,"APRIL    , 30, 1999",Completed
1+,Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-Hepatitis B virus antibodies; Anti-Meningitis A virus antibodies; Anti-Meningitis C virus antibodies; Anti-Meningitis Y virus antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies; Anti-polyribitol phosphate antibodies; Anti-polyribosylribitol phosphate,Measles virus infection,M-M-RvaxPRO; Nimenrix; Prevnar 13; RotaTeq; V-419,Phase 3 Clinical,C3,Vaxelis,56585,350,M-M-RvaxPRO; NeisVac-C; Nimenrix; Prevnar 13; RotaTeq; V-419,312,null,Concomitant Administration of a New Hexavalent Vaccine With a Meningococcal Serogroup C Conjugate Vaccine in Healthy Infants During Primary Series Immunization Followed by Booster Vaccination,2012-005547-24; EUCTR2012-005547-24; HXM01C; NCT01839175,"Sanofi Pasteur MSD, Sanofi SA",124248,"APRIL    , 30, 2013",Completed
3,Immunoglobulin G; Serum bactericidal antibody,Measles virus infection,null,Phase 4 Clinical,C4,Menitorix,11458,200,Menitorix; Prevnar 13; Priorix,200,P13Boost,Responses to booster vaccinations in UK toddlers,12/LO/1875; 2012-005110-18; HPA Protocol No: 12/05; ISRCTN84763401; P13Boost; UKCRN 13975,Health Protection Agency,132011,"FEBRUARY , 01, 2013",Completed
1+,Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature,Measles virus infection,Havrix; M-M-R II; Prevnar 13; Varivax,Phase 3a Clinical,C3A,M-M-R II,3643,4538,Havrix; Prevnar 13; Priorix; Varivax,4538,null,Immunogenicity and Safety Study of GlaxoSmithKline (GSK) Biological's Combined Measles-mumps-rubella (MMR) Vaccine in Children in Their Second Year of Life,115649; 15049; 2011-004905-26; MMR-161; NCT01681992; NMRR-13-165-15049,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",91153,"OCTOBER  , 10, 2012",Completed
2,null,Measles virus infection,null,Phase 3 Clinical,C3,"MMR vaccine, Bio-Manguinhos/Fiocruz",94952,1560,"MMR vaccine, Bio-Manguinhos/Fiocruz; Priorix",1560,null,"Study of Immunogenicity, Reactogenicity and Safety of the Combined Measles, Mumps and Rubella Vaccine Produced by Bio-Manguinhos/Fiocruz in Children 12 to 15 Months of Age, Followed by Tetraviral Vaccine in Children 15 to 18 Months",ASCLIN/002/2013; NCT01991899,Bio-Manguinhos/Fiocruz,161697,"FEBRUARY , 28, 2015",Completed
2+,Body temperature,Measles virus infection,Havrix; Prevnar 13; Varivax,Phase 3a Clinical,C3A,Havrix,6621,1743,Havrix; M-M-R II; Prevnar 13; Priorix; Varivax,1736,null,"Safety and Immunogenicity Study of GlaxoSmithKline (GSK) Biologicals Measles, Mumps and Rubella (MMR) Vaccine (209762) Compared to Merck and Co, Inc's MMR Vaccine in Healthy Children 12 to 15 Months of Age",115650; 2011-006161-18; MMR-162; NCT02184572,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",203343,"AUGUST   , 25, 2014",Completed
1+,Anti-Clostridium tetani antibodies; Anti-polyribitol phosphate antibodies; Body temperature; Immunoglobulin G,Measles virus infection,null,Phase 2 Clinical,C2,Infanrix Quinta,17674,189,Bexsero; Infanrix-DTaP-IPV-Hib; Menitorix; Prevnar 13; Priorix; Rotarix,213,Sched3,Baby Vaccine Study,2015-000817-32; NCT02482636; OVG2015/03; Sched3,"Bill & Melinda Gates Foundation, National Institute for Health Research (NIHR), University of Oxford",233238,"AUGUST   , 31, 2015",No longer recruiting
1+,null,Measles virus infection,null,Phase 2 Clinical,C2,Vaxem HIB,84867,216,MenACWY-CRM; Pediacel; Prevnar; Priorix; Vaxem HIB,216,null,B Cell Response to a Primary and a Booster Course of the Novartis Meningococcal ACWY Conjugate Vaccine in Healthy Infants,2006-003476-35; NCT00488683; V59P16,Novartis AG,10223,"JULY     , 31, 2007",Completed
1,null,Measles virus infection,null,Phase 1/Phase 2 Clinical,C12,JVC-001,99518,null,JVC-001,100,null,"Non-blind, randomized trial to evaluate the safety and immunogenicity of JVC-001 intended for Japanese healthy children",JapicCTI-153031,Japan Vaccine Co Ltd,244020,"OCTOBER  , 05, 2015",Recruiting
3,Anti-Chikungunya virus antibodies; Anti-Measles antibodies; Mononuclear leukocytes; T-Lymphocytes,Measles virus infection,Priorix,Phase 2 Clinical,C2,MV-CHIK,75100,263,MV-CHIK; MV-CHIK; Priorix,263,null,Phase II Study to Evaluate Safety and Immunogenicity of a Chikungunya Vaccine,2015-004037-26; MV-CHIK-202; NCT02861586,Themis Bioscience GmbH,268409,"AUGUST   , 17, 2016",Completed
2,Body temperature,Measles virus infection,null,Phase 3 Clinical,C3,Vaqta,3263,1800,ProQuad; Vaqta,1800,null,"Hepatitis A Vaccine, Inactivated and Measles, Mumps, Rubella and Varicella Virus Vaccine Live Safety Study",2006_023; NCT00326183; V251-066,Merck & Co Inc,11511,"MARCH    , 31, 2007",Completed
1+,Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-Hepatitis B virus antibodies; Anti-Meningitis A virus antibodies; Anti-Meningitis C virus antibodies; Anti-Meningitis Y virus antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies; Anti-polyribitol phosphate antibodies; Anti-polyribosylribitol phosphate,Measles virus infection,M-M-RvaxPRO; Nimenrix; Prevnar 13; RotaTeq; V-419,Phase 3 Clinical,C3,Nimenrix,55366,350,M-M-RvaxPRO; NeisVac-C; Nimenrix; Prevnar 13; RotaTeq; V-419,312,null,Concomitant Administration of a New Hexavalent Vaccine With a Meningococcal Serogroup C Conjugate Vaccine in Healthy Infants During Primary Series Immunization Followed by Booster Vaccination,2012-005547-24; EUCTR2012-005547-24; HXM01C; NCT01839175,"Sanofi Pasteur MSD, Sanofi SA",124248,"APRIL    , 30, 2013",Completed
2,Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature,Measles virus infection,M-M-R II,Phase 3 Clinical,C3,M-M-R II,3643,996,Priorix,869,null,"Immunogenicity and Safety of GSK Biologicals Combined Measles-Mumps-Rubella Vaccine in Volunteers, 7 Years of Age and Older",115231; 2011-003672-36; 209762; MMR-159; NCT02058563,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",172270,"JULY     , 01, 2014",Completed
1+,Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature,Measles virus infection,Havrix; M-M-R II; Prevnar 13; Varivax,Phase 3a Clinical,C3A,varicella-zoster vaccine (Varivax/Zostavax),4645,4538,Havrix; Prevnar 13; Priorix; Varivax,4538,null,Immunogenicity and Safety Study of GlaxoSmithKline (GSK) Biological's Combined Measles-mumps-rubella (MMR) Vaccine in Children in Their Second Year of Life,115649; 15049; 2011-004905-26; MMR-161; NCT01681992; NMRR-13-165-15049,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",91153,"OCTOBER  , 10, 2012",Completed
4+,null,Measles virus infection,Infanrix hexa; ProQuad,Phase 3b Clinical,C3B,Infanrix HeXa,17821,955,Infanrix hexa; ProQuad,955,null,Immunogenicity and Safety Study of Proquad and Infanrix Hexa When Administered Concomitantly,2006-004129-27; NCT00432042; V221-035; X06-MMRV-302,Merck Sharp & Dohme Corp,10599,"JANUARY  , 12, 2007",Completed
1+,null,Measles virus infection,Havrix; Prevnar; Pro-Quad,Phase 2 Clinical,C2,Prevnar,4144,1851,Havrix; Prevnar; Priorix-Tetra,1783,MMRV-054 PRI,Immunogenicity and Safety of GlaxoSmithKline Biologicals' MMRV Vaccine versus ProQuad in Children 12 to 14 Months of Age,110058; 110058_1; 2017-000454-18; BB-IND 13510; MMRV-054 PRI; NCT00578175,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",11526,"NOVEMBER , 30, 2007",Completed
3,null,Measles virus infection,null,Phase 1/Phase 2 Clinical,C12,varicella-zoster vaccine (Varivax/Zostavax),4645,105,M-M-R II; ProQuad; Varivax,105,null,Immune Responses to Two Dose Varivax +/- MMR-II,04-073; NCT00258726,National Institute of Allergy and Infectious Diseases,11515,"OCTOBER  , 31, 2005",Terminated
1+,Anti-poliovirus type 1 antibody; Anti-poliovirus type 2 antibody; Anti-poliovirus type 3 antibody; Body temperature; Diphtheria antibody; Filamentous hemagglutinin (FHA); Fimbriae type 2; Fimbriae type 3; Limb muscle; Pertactin (PRN); Pertussis toxoid (PT); Polio antibody; Tetanus antibody,Measles virus infection,Daptacel; Daptacel + IPOL + M-M-R II + Varivax; IPOL; M-M-R II; Varivax,Phase 3 Clinical,C3,M-M-R II,3643,3372,M-M-R II; Quadracel; Quadracel + M-M-R II + Varivax; Varivax,3340,null,Study of DTap-IPV Compared to Daptacel and IPOL as the Fifth Dose in Children 4 to 6 Years of Age,M5I02; NCT01346293; U1111-1116-4842,Sanofi Pasteur Inc,77052,"APRIL    , 30, 2011",Completed
1,null,Measles virus infection,null,Phase 3 Clinical,C3,trimethoprim + sulphamethoxazole,44363,218,trimethoprim + sulfamethoxazole,218,null,A Phase III Study Of Prophylactic Antibiotics in Measles,NCT00168532; ProfAnt-BHP-1996,Bandim Health Project,11380,"JANUARY  , 31, 1998",Completed
2+,Anti-Bordetella pertussis antibodies; Anti-Bordetella pertussis filamentous hemagglutinin adhesin antibodies; Anti-Bordetella pertussis pertactin antibodies; Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies,Measles virus infection,"Infanrix-IPV; MMR vaccine, Merck & Co; ProQuad",Phase 3a Clinical,C3A,ProQuad,47279,4011,"Infanrix-IPV; MMR vaccine, Merck & Co; Priorix; Priorix; ProQuad",4011,MMR-158,Immunogenicity and Safety Study of GlaxoSmithKline (GSK) Biologicals' Combined Measles-mumps-rubella (MMR) Vaccine in Subjects 4 to 6 Years of Age,115158; 2011-004638-32; 209762; MMR-158; NCT01621802,GlaxoSmithKline plc,88475,"JUNE     , 21, 2012",Completed
2+,Meningococcal rSBA,Measles virus infection,Meningitec; Priorix-Tetra,Phase 3 Clinical,C3,Nimenrix,55366,1000,Nimenrix; Nimenrix + Priorix-Tetra; Priorix-Tetra; Priorix-Tetra + Meningitec,1000,null,Safety And Immunogenicity Study of Meningococcal Vaccine GSK-134612 Given With Priorix-Tetra to 12 to 23 Months-Old Children,109670; NCT00474266,GlaxoSmithKline plc,9859,"JUNE     , 05, 2007",Completed
1,null,Measles virus infection,null,Phase 4 Clinical,C4,M-M-R II,3643,74,ROR Vax,74,null,"Measles, Mumps, and Rubella (MMR) Immunity in College Students",IRB00007373; NCT00962819,Emory University,59758,"MARCH    , 31, 2010",Completed
2+,Anti-Bordetella pertussis antibodies; Anti-Bordetella pertussis filamentous hemagglutinin adhesin antibodies; Anti-Bordetella pertussis pertactin antibodies; Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies,Measles virus infection,"Infanrix-IPV; MMR vaccine, Merck & Co; ProQuad",Phase 3a Clinical,C3A,M-M-R II,3643,4011,"Infanrix-IPV; MMR vaccine, Merck & Co; Priorix; Priorix; ProQuad",4011,MMR-158,Immunogenicity and Safety Study of GlaxoSmithKline (GSK) Biologicals' Combined Measles-mumps-rubella (MMR) Vaccine in Subjects 4 to 6 Years of Age,115158; 2011-004638-32; 209762; MMR-158; NCT01621802,GlaxoSmithKline plc,88475,"JUNE     , 21, 2012",Completed
2+,Body temperature,Measles virus infection,Havrix; Prevnar 13; Varivax,Phase 3a Clinical,C3A,Priorix,11457,1743,Havrix; M-M-R II; Prevnar 13; Priorix; Varivax,1736,null,"Safety and Immunogenicity Study of GlaxoSmithKline (GSK) Biologicals Measles, Mumps and Rubella (MMR) Vaccine (209762) Compared to Merck and Co, Inc's MMR Vaccine in Healthy Children 12 to 15 Months of Age",115650; 2011-006161-18; MMR-162; NCT02184572,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",203343,"AUGUST   , 25, 2014",Completed
3,null,Measles virus infection,null,Phase 2 Clinical,C2,Priorix-Tetra,17141,446,Priorix; Priorix-Tetra; Varilrix,458,MeMuRu-OKA 046,"Immunogenicity, Safety of Measles-Mumps-Rubella-Varicella Vaccine (MeMuRu-OKA) Compared to Priorix Given With Varilrix",105908; EudraCT: 2005-006065-14; MeMuRu-OKA 046; NCT00353288,GlaxoSmithKline plc,102759,"MARCH    , 31, 2006",Completed
1,null,Measles virus infection,null,Phase 4 Clinical,C4,"measles vaccine (inhaled aerosol), WHO",56118,4050,"measles vaccine (inhaled aerosol), WHO",4050,null,Trial of Additional Measles Vaccine to Reduce Child Mortality. Burkina Faso,NCT01668745; OPTIMUNISE_NOUNA_EARLY MV,Bandim Health Project,200688,"MAY      , 31, 2013",Recruiting
5,Anti varicella zoster virus antibodies; Body temperature,Measles virus infection,"MMR vaccine, Merck & Co",Phase 3 Clinical,C3,Havrix,6621,5016,Priorix,5016,MMR-160,Consistency Study of GlaxoSmithKline(GSK) Biologicals MMR Vaccine (209762)(Priorix) Comparing Immunogenicity and Safety to Merck and Co Inc's MMR Vaccine (MMR II) in Children 12 to 15 Months of Age,115648; 2011-004891-12; MMR-160; NCT01702428,GlaxoSmithKline plc,94105,"NOVEMBER , 09, 2012",Completed
1+,Anti-poliovirus type 1 antibody; Anti-poliovirus type 2 antibody; Anti-poliovirus type 3 antibody; Body temperature; Diphtheria antibody; Filamentous hemagglutinin (FHA); Fimbriae type 2; Fimbriae type 3; Limb muscle; Pertactin (PRN); Pertussis toxoid (PT); Polio antibody; Tetanus antibody,Measles virus infection,Daptacel; Daptacel + IPOL + M-M-R II + Varivax; IPOL; M-M-R II; Varivax,Phase 3 Clinical,C3,"diphtheria/tetanus/pertussis vaccine, sanofi pasteur",30214,3372,M-M-R II; Quadracel; Quadracel + M-M-R II + Varivax; Varivax,3340,null,Study of DTap-IPV Compared to Daptacel and IPOL as the Fifth Dose in Children 4 to 6 Years of Age,M5I02; NCT01346293; U1111-1116-4842,Sanofi Pasteur Inc,77052,"APRIL    , 30, 2011",Completed
1+,Anti varicella zoster virus antibodies; Anti-Bordetella pertussis antibodies; Anti-Bordetella pertussis filamentous hemagglutinin adhesin antibodies; Anti-Bordetella pertussis pertactin antibodies; Anti-HBs antigen antibodies; Anti-Measles antibodies; Anti-Meningitis A antibodies; Anti-Meningitis C antibodies; Anti-Meningitis W antibodies; Anti-Meningitis W-135 antibodies; Anti-Meningitis Y antibodies; Anti-Parotitis virus antibodies; Anti-Rotavirus antibodies; Anti-Rubella antibodies; Anti-Streptococcus pneumoniae antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies; Anti-polyribitol phosphate antibodies; Immunoglobulin G,Measles virus infection,"DTaP-IPV//Hib vaccine; Hepatitis A vaccine; Hepatitis B vaccine; Measles, mumps, rubella (MMR) vaccine; Menveo; Pneumococcal 13-valent conjugate vaccine; RotaTeq; Varicella vaccine",Phase 3 Clinical,C3,RotaTeq,22877,2475,"Hepatitis A vaccine; Hepatitis B vaccine; Measles, mumps, rubella (MMR) vaccine; Pentaxim; Pneumococcal 13-valent conjugate vaccine; RotaTeq; Varicella vaccine; quadrivalent meningococcal tetanus toxoid conjugate vaccine (meningitis), Sanofi Pasteur",2475,null,Immunogenicity and Safety of a Quadrivalent Meningococcal Conjugate Vaccine When Administered Concomitantly With Routine Pediatric Vaccines in Healthy Infants and Toddlers in the US,MET42; NCT03537508,Sanofi Pasteur,340960,"APRIL    , 25, 2018",Recruiting
3+,null,Measles virus infection,Havrix; M-M-R II; M-M-R II + Varivax + Havrix + Prevnar; Prevnar; Varivax,Phase 2 Clinical,C2,Havrix,6621,1259,Havrix; Prevnar; Priorix; Priorix (lot 2); Priorix (lot 3); Priorix + Varivax + Havrix + Prevnar; Varivax,1220,null,"Immunogenicity of GSK's MMR Vaccine (209762) versus M-M-R II, When Given With Routine Vaccines at 12 to 15 Months of Age",111870; 111870_; 2011-005860-31; 7229; MMR-157 PRI; NCT00861744,GlaxoSmithKline plc,79465,"JUNE     , 30, 2009",Completed
1+,Anti varicella zoster virus antibodies; Anti-Bordetella pertussis antibodies; Anti-Bordetella pertussis filamentous hemagglutinin adhesin antibodies; Anti-Bordetella pertussis pertactin antibodies; Anti-HBs antigen antibodies; Anti-Measles antibodies; Anti-Meningitis A antibodies; Anti-Meningitis C antibodies; Anti-Meningitis W antibodies; Anti-Meningitis W-135 antibodies; Anti-Meningitis Y antibodies; Anti-Parotitis virus antibodies; Anti-Rotavirus antibodies; Anti-Rubella antibodies; Anti-Streptococcus pneumoniae antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies; Anti-polyribitol phosphate antibodies; Immunoglobulin G,Measles virus infection,"DTaP-IPV//Hib vaccine; Hepatitis A vaccine; Hepatitis B vaccine; Measles, mumps, rubella (MMR) vaccine; Menveo; Pneumococcal 13-valent conjugate vaccine; RotaTeq; Varicella vaccine",Phase 3 Clinical,C3,"quadrivalent meningococcal tetanus toxoid conjugate vaccine (meningitis), Sanofi Pasteur",102979,2475,"Hepatitis A vaccine; Hepatitis B vaccine; Measles, mumps, rubella (MMR) vaccine; Pentaxim; Pneumococcal 13-valent conjugate vaccine; RotaTeq; Varicella vaccine; quadrivalent meningococcal tetanus toxoid conjugate vaccine (meningitis), Sanofi Pasteur",2475,null,Immunogenicity and Safety of a Quadrivalent Meningococcal Conjugate Vaccine When Administered Concomitantly With Routine Pediatric Vaccines in Healthy Infants and Toddlers in the US,MET42; NCT03537508,Sanofi Pasteur,340960,"APRIL    , 25, 2018",Recruiting
2+,Anti-Bordetella pertussis antibodies; Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-Measles antibodies; Anti-Parotitis virus antibodies,Measles virus infection,Adacel; Priorix,Phase 4 Clinical,C4,Priorix,11457,150,Diphtherinum; Morbilinum; Ourlianum; Pertussinum; Tetanotxicum,150,HVT,Homeopathic Vaccine Trial,HVT; HVT-2016; NCT02825368,McMaster University,265194,"SEPTEMBER, 30, 2016",Recruiting
2+,Body temperature,Measles virus infection,HepA; MMRV; Prevnar,Phase 3 Clinical,C3,ProQuad,47279,1378,HepA; Menactra; Menactra; Prevnar; ProQuad,1378,null,Study of the Safety of Menactra Vaccine When Administered With Other Pediatric Vaccines to Healthy Toddlers,MTA48; NCT00483574,Sanofi SA,9965,"MAY      , 31, 2007",Completed
3,null,Measles virus infection,null,Phase 1/Phase 2 Clinical,C12,ProQuad,47279,105,M-M-R II; ProQuad; Varivax,105,null,Immune Responses to Two Dose Varivax +/- MMR-II,04-073; NCT00258726,National Institute of Allergy and Infectious Diseases,11515,"OCTOBER  , 31, 2005",Terminated
4+,null,Measles virus infection,"Haemophilus influenzae B (Hib) vaccine, Aventis Pasteur; ROR Vax",Phase 3 Clinical,C3,"Haemophilus influenzae B (Hib) vaccine, Aventis Pasteur",7167,1128,Menactra; Menactra; PCV; ROR Vax,1128,null,"A Study of Two Doses of Menactra, a Meningococcal Conjugate Vaccine in Healthy Toddlers",MTA44; NCT00384397,Sanofi SA,9949,"SEPTEMBER, 30, 2006",Completed
3,null,Measles virus infection,Priorix; Varilrix,Phase 2 Clinical,C2,Varilrix,9474,400,Priorix-Tetra; Varilrix + Priorix,400,null,"Immunogenicity, Safety of Measles-mumps-rubella-varicella Vaccine (MeMuRu-OKA) Compared to Priorix Given With Varilrix",105909; 2005-005825-75; NCT00352898,GlaxoSmithKline plc,187831,"APRIL    , 30, 2006",Completed
1,null,Measles virus infection,null,Phase 3 Clinical,C3,Priorix-Tetra,17141,559,Priorix-Tetra,559,null,"Immunogenicity and Safety of a Combined Vaccine to Prevent Measles, Mumps, Rubella and Chickenpox Diseases",103388; MMRV-042; NCT00127010,GlaxoSmithKline Biologicals,11387,"NOVEMBER , 30, 2005",Completed
1+,Polyribosylribitol phosphate,Measles virus infection,null,Phase 3 Clinical,C3,Menitorix,11458,284,"M-M-RvaxPRO; Men-C CRM liquid vaccine, Novartis; Menitorix; NeisVac-C; Prevnar 13; V-419",284,null,Immunogenicity and Safety of V-419 (PR-51) in Combination With MCC in Infants and Toddlers,2011-002413-11; NCT01553279; PRI01C; UKCRN ID: 11587; V419-011,MCM Vaccine BV,85664,"MARCH    , 30, 2012",Completed
3+,null,Measles virus infection,Priorix,Phase 3b Clinical,C3B,Varilrix,9474,5735,Priorix; Priorix-Tetra; Varilrix; Varilrix + Priorix,5803,null,"Evaluate Vaccine Against Chickenpox and a Combined Vaccine Against 4 Viral Childhood Diseases: Measles, Mumps, Rubella and Chickenpox",100388; 100388 (OKAH-179); 103494; 103494 (EXT FU Y1); 103494 (OKAH-180 EXT 179 Y1); 104105; 104105 (EXT FU Y2); 104105 (OKAH-181 EXT 179 Y2); 104106; 104106 (EXT FU Y4-Y6-Y8-Y10); 111433; 180 Y1; 181 Y2; 182 Y4-Y6-Y8-Y10; 2004-002676-41; NCT00226499; OKAH-179 and EXT,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",11418,"SEPTEMBER, 30, 2005",Completed
1,null,Measles virus infection,null,Phase 3b Clinical,C3B,Priorix-Tetra,17141,330,Priorix-Tetra,330,null,Immunogenicity/Safety of Measles-Mumps-Rubella-Varicella Vaccine (MeMuRu-OKA): Using Two Different Administration Routes,106670; EudraCT: 2005-005944-22; NCT00351923,GlaxoSmithKline plc,11963,"MARCH    , 31, 2006",Completed
1+,Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-Hepatitis B virus antibodies; Anti-Meningitis A virus antibodies; Anti-Meningitis C virus antibodies; Anti-Meningitis Y virus antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies; Anti-polyribitol phosphate antibodies; Anti-polyribosylribitol phosphate,Measles virus infection,M-M-RvaxPRO; Nimenrix; Prevnar 13; RotaTeq; V-419,Phase 3 Clinical,C3,RotaTeq,22877,350,M-M-RvaxPRO; NeisVac-C; Nimenrix; Prevnar 13; RotaTeq; V-419,312,null,Concomitant Administration of a New Hexavalent Vaccine With a Meningococcal Serogroup C Conjugate Vaccine in Healthy Infants During Primary Series Immunization Followed by Booster Vaccination,2012-005547-24; EUCTR2012-005547-24; HXM01C; NCT01839175,"Sanofi Pasteur MSD, Sanofi SA",124248,"APRIL    , 30, 2013",Completed
1+,null,Measles virus infection,null,Phase 2 Clinical,C2,Priorix,11457,216,MenACWY-CRM; Pediacel; Prevnar; Priorix; Vaxem HIB,216,null,B Cell Response to a Primary and a Booster Course of the Novartis Meningococcal ACWY Conjugate Vaccine in Healthy Infants,2006-003476-35; NCT00488683; V59P16,Novartis AG,10223,"JULY     , 31, 2007",Completed
1,null,Measles virus infection,null,Phase 4 Clinical,C4,Priorix,11457,150,Priorix,150,null,Assess GSK Biologicals' MMR Vaccine (Priorix) When Given to Healthy Children at the Age of 12 to 18 Months in Singapore,209762/147; NCT00388440,GlaxoSmithKline Biologicals,11425,"NOVEMBER , 30, 2000",Completed
1,null,Measles virus infection,null,Phase 4 Clinical,C4,"measles vaccine (inhaled aerosol), WHO",56118,3750,"measles vaccine (inhaled aerosol), WHO",8309,null,Trial of Additional Measles Vaccine to Reduce Child Mortality,NCT01644721; OPTIMUNISE_BHP_EARLY MV,Bandim Health Project,198691,"JULY     , 31, 2012",Recruiting
1+,Anti varicella zoster virus antibodies; Anti-Bordetella pertussis antibodies; Anti-Bordetella pertussis filamentous hemagglutinin adhesin antibodies; Anti-Bordetella pertussis pertactin antibodies; Anti-HBs antigen antibodies; Anti-Measles antibodies; Anti-Meningitis A antibodies; Anti-Meningitis C antibodies; Anti-Meningitis W antibodies; Anti-Meningitis W-135 antibodies; Anti-Meningitis Y antibodies; Anti-Parotitis virus antibodies; Anti-Rotavirus antibodies; Anti-Rubella antibodies; Anti-Streptococcus pneumoniae antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies; Anti-polyribitol phosphate antibodies; Immunoglobulin G,Measles virus infection,"DTaP-IPV//Hib vaccine; Hepatitis A vaccine; Hepatitis B vaccine; Measles, mumps, rubella (MMR) vaccine; Menveo; Pneumococcal 13-valent conjugate vaccine; RotaTeq; Varicella vaccine",Phase 3 Clinical,C3,Pentaxim,59852,2475,"Hepatitis A vaccine; Hepatitis B vaccine; Measles, mumps, rubella (MMR) vaccine; Pentaxim; Pneumococcal 13-valent conjugate vaccine; RotaTeq; Varicella vaccine; quadrivalent meningococcal tetanus toxoid conjugate vaccine (meningitis), Sanofi Pasteur",2475,null,Immunogenicity and Safety of a Quadrivalent Meningococcal Conjugate Vaccine When Administered Concomitantly With Routine Pediatric Vaccines in Healthy Infants and Toddlers in the US,MET42; NCT03537508,Sanofi Pasteur,340960,"APRIL    , 25, 2018",Recruiting
2+,Anti-Bordetella pertussis antibodies; Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-Measles antibodies; Anti-Parotitis virus antibodies,Measles virus infection,Adacel; Priorix,Phase 4 Clinical,C4,Adacel,47199,150,Diphtherinum; Morbilinum; Ourlianum; Pertussinum; Tetanotxicum,150,HVT,Homeopathic Vaccine Trial,HVT; HVT-2016; NCT02825368,McMaster University,265194,"SEPTEMBER, 30, 2016",Recruiting
1,Immunoglobulin G,Measles virus infection,null,Phase 4 Clinical,C4,Priorix,11457,628,Priorix; SA-14-14-2,628,null,Immunogenicity and Safety of Japanese Encephalitis Vaccine When Given With Measles-Mumps-Rubella Vaccine,JEV06 (862058-1); NCT02880865,Path Inc,269874,"OCTOBER  , 31, 2016",Recruiting
3,null,Measles virus infection,null,Phase 3 Clinical,C3,ProQuad,47279,405,ProQuad,405,null,ProQuad Intramuscular versus Subcutaneous,2006-001986-40; F05-MMRV-304; NCT00402831; V221-036,Merck Sharp & Dohme Corp,11634,"OCTOBER  , 06, 2006",Completed
3+,null,Measles virus infection,Havrix; M-M-R II; M-M-R II + Varivax + Havrix + Prevnar; Prevnar; Varivax,Phase 2 Clinical,C2,Priorix,11457,1259,Havrix; Prevnar; Priorix; Priorix (lot 2); Priorix (lot 3); Priorix + Varivax + Havrix + Prevnar; Varivax,1220,null,"Immunogenicity of GSK's MMR Vaccine (209762) versus M-M-R II, When Given With Routine Vaccines at 12 to 15 Months of Age",111870; 111870_; 2011-005860-31; 7229; MMR-157 PRI; NCT00861744,GlaxoSmithKline plc,79465,"JUNE     , 30, 2009",Completed
1,Body temperature,Measles virus infection,null,Phase 3 Clinical,C3,ProQuad,47279,3388,ProQuad,3388,null,Safety Study of ProQuad rHA in Infants,2007-002438-12; MRV01C; NCT00560755; V221-037,Merck Sharp & Dohme Corp,11426,"OCTOBER  , 24, 2007",Completed
4+,null,Measles virus infection,Infanrix hexa; ProQuad,Phase 3b Clinical,C3B,ProQuad,47279,955,Infanrix hexa; ProQuad,955,null,Immunogenicity and Safety Study of Proquad and Infanrix Hexa When Administered Concomitantly,2006-004129-27; NCT00432042; V221-035; X06-MMRV-302,Merck Sharp & Dohme Corp,10599,"JANUARY  , 12, 2007",Completed
1+,Polyribosylribitol phosphate,Measles virus infection,null,Phase 3 Clinical,C3,Vaxelis,56585,284,"M-M-RvaxPRO; Men-C CRM liquid vaccine, Novartis; Menitorix; NeisVac-C; Prevnar 13; V-419",284,null,Immunogenicity and Safety of V-419 (PR-51) in Combination With MCC in Infants and Toddlers,2011-002413-11; NCT01553279; PRI01C; UKCRN ID: 11587; V419-011,MCM Vaccine BV,85664,"MARCH    , 30, 2012",Completed
3+,null,Measles virus infection,Havrix; M-M-R II; M-M-R II + Varivax + Havrix + Prevnar; Prevnar; Varivax,Phase 2 Clinical,C2,Prevnar,4144,1259,Havrix; Prevnar; Priorix; Priorix (lot 2); Priorix (lot 3); Priorix + Varivax + Havrix + Prevnar; Varivax,1220,null,"Immunogenicity of GSK's MMR Vaccine (209762) versus M-M-R II, When Given With Routine Vaccines at 12 to 15 Months of Age",111870; 111870_; 2011-005860-31; 7229; MMR-157 PRI; NCT00861744,GlaxoSmithKline plc,79465,"JUNE     , 30, 2009",Completed
1+,Anti-poliovirus type 1 antibody; Anti-poliovirus type 2 antibody; Anti-poliovirus type 3 antibody; Body temperature; Diphtheria antibody; Filamentous hemagglutinin (FHA); Fimbriae type 2; Fimbriae type 3; Limb muscle; Pertactin (PRN); Pertussis toxoid (PT); Polio antibody; Tetanus antibody,Measles virus infection,Daptacel; Daptacel + IPOL + M-M-R II + Varivax; IPOL; M-M-R II; Varivax,Phase 3 Clinical,C3,"polio vaccine, Sanofi Pasteur",44408,3372,M-M-R II; Quadracel; Quadracel + M-M-R II + Varivax; Varivax,3340,null,Study of DTap-IPV Compared to Daptacel and IPOL as the Fifth Dose in Children 4 to 6 Years of Age,M5I02; NCT01346293; U1111-1116-4842,Sanofi Pasteur Inc,77052,"APRIL    , 30, 2011",Completed
3,null,Measles virus infection,"Haemophilus influenzae B (Hib) vaccine, Aventis Pasteur; ROR Vax",Phase 3 Clinical,C3,"Haemophilus influenzae B (Hib) vaccine, Aventis Pasteur",7167,1664,Menactra,1664,null,Immunogenicity and Safety of Pediatric Vaccines When Administered With Menactra in Healthy Toddlers,MTA37; NCT00422292,Sanofi SA,9967,"DECEMBER , 31, 2006",Completed
2+,Body temperature,Measles virus infection,Havrix; Prevnar 13; Varivax,Phase 3a Clinical,C3A,M-M-R II,3643,1743,Havrix; M-M-R II; Prevnar 13; Priorix; Varivax,1736,null,"Safety and Immunogenicity Study of GlaxoSmithKline (GSK) Biologicals Measles, Mumps and Rubella (MMR) Vaccine (209762) Compared to Merck and Co, Inc's MMR Vaccine in Healthy Children 12 to 15 Months of Age",115650; 2011-006161-18; MMR-162; NCT02184572,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",203343,"AUGUST   , 25, 2014",Completed
3,null,Measles virus infection,"Haemophilus influenzae B (Hib) vaccine, Aventis Pasteur; ROR Vax",Phase 3 Clinical,C3,M-M-R II,3643,1664,Menactra,1664,null,Immunogenicity and Safety of Pediatric Vaccines When Administered With Menactra in Healthy Toddlers,MTA37; NCT00422292,Sanofi SA,9967,"DECEMBER , 31, 2006",Completed
1+,Polyribosylribitol phosphate,Measles virus infection,null,Phase 3 Clinical,C3,"meningococcal C/CRM-197 conjugate vaccine, Chiron",3612,284,"M-M-RvaxPRO; Men-C CRM liquid vaccine, Novartis; Menitorix; NeisVac-C; Prevnar 13; V-419",284,null,Immunogenicity and Safety of V-419 (PR-51) in Combination With MCC in Infants and Toddlers,2011-002413-11; NCT01553279; PRI01C; UKCRN ID: 11587; V419-011,MCM Vaccine BV,85664,"MARCH    , 30, 2012",Completed
3,null,Measles virus infection,null,Phase 2 Clinical,C2,Priorix,11457,446,Priorix; Priorix-Tetra; Varilrix,458,MeMuRu-OKA 046,"Immunogenicity, Safety of Measles-Mumps-Rubella-Varicella Vaccine (MeMuRu-OKA) Compared to Priorix Given With Varilrix",105908; EudraCT: 2005-006065-14; MeMuRu-OKA 046; NCT00353288,GlaxoSmithKline plc,102759,"MARCH    , 31, 2006",Completed
3+,null,Measles virus infection,Priorix,Phase 3b Clinical,C3B,Priorix-Tetra,17141,5735,Priorix; Priorix-Tetra; Varilrix; Varilrix + Priorix,5803,null,"Evaluate Vaccine Against Chickenpox and a Combined Vaccine Against 4 Viral Childhood Diseases: Measles, Mumps, Rubella and Chickenpox",100388; 100388 (OKAH-179); 103494; 103494 (EXT FU Y1); 103494 (OKAH-180 EXT 179 Y1); 104105; 104105 (EXT FU Y2); 104105 (OKAH-181 EXT 179 Y2); 104106; 104106 (EXT FU Y4-Y6-Y8-Y10); 111433; 180 Y1; 181 Y2; 182 Y4-Y6-Y8-Y10; 2004-002676-41; NCT00226499; OKAH-179 and EXT,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",11418,"SEPTEMBER, 30, 2005",Completed
3,null,Measles virus infection,Priorix; Varilrix,Phase 3 Clinical,C3,Priorix-Tetra,17141,450,Priorix; Priorix-Tetra; Priorix-Tetra,450,MMRV-053 PRI,Comparison of GSK Measles-Mumps-Rubella-Varicella (MMRV) Vaccine Versus Priorix,109995; 2011-005882-19; MMRV-053 PRI; NCT00969436,GlaxoSmithKline plc,60050,"NOVEMBER , 09, 2009",Completed
1+,null,Measles virus infection,Havrix; Prevnar; Pro-Quad,Phase 2 Clinical,C2,Priorix-Tetra,17141,1851,Havrix; Prevnar; Priorix-Tetra,1783,MMRV-054 PRI,Immunogenicity and Safety of GlaxoSmithKline Biologicals' MMRV Vaccine versus ProQuad in Children 12 to 14 Months of Age,110058; 110058_1; 2017-000454-18; BB-IND 13510; MMRV-054 PRI; NCT00578175,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",11526,"NOVEMBER , 30, 2007",Completed
2,Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature,Measles virus infection,M-M-R II,Phase 3 Clinical,C3,Priorix,11457,996,Priorix,869,null,"Immunogenicity and Safety of GSK Biologicals Combined Measles-Mumps-Rubella Vaccine in Volunteers, 7 Years of Age and Older",115231; 2011-003672-36; 209762; MMR-159; NCT02058563,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",172270,"JULY     , 01, 2014",Completed
1,null,Measles virus infection,null,Phase 4 Clinical,C4,Priorix,11457,600,Priorix,732,null,"A Phase IV, Open, Multicentric, Post-marketing Surveillance Study to Monitor the Safety and Reactogenicity of GlaxoSmithKline Biologicals’ Live Attenuated Measles-Mumps-Rubella vaccine (Priorix) in Korean Subjects Administered According to the Prescribing Information",209762-145 (MeMuRu-145),GlaxoSmithKline plc,172850,"AUGUST   , 20, 1999",Completed
5,Anti varicella zoster virus antibodies; Body temperature,Measles virus infection,"MMR vaccine, Merck & Co",Phase 3 Clinical,C3,Prevnar 13,34281,5016,Priorix,5016,MMR-160,Consistency Study of GlaxoSmithKline(GSK) Biologicals MMR Vaccine (209762)(Priorix) Comparing Immunogenicity and Safety to Merck and Co Inc's MMR Vaccine (MMR II) in Children 12 to 15 Months of Age,115648; 2011-004891-12; MMR-160; NCT01702428,GlaxoSmithKline plc,94105,"NOVEMBER , 09, 2012",Completed
2,null,Measles virus infection,null,Phase 3 Clinical,C3,Priorix,11457,1560,"MMR vaccine, Bio-Manguinhos/Fiocruz; Priorix",1560,null,"Study of Immunogenicity, Reactogenicity and Safety of the Combined Measles, Mumps and Rubella Vaccine Produced by Bio-Manguinhos/Fiocruz in Children 12 to 15 Months of Age, Followed by Tetraviral Vaccine in Children 15 to 18 Months",ASCLIN/002/2013; NCT01991899,Bio-Manguinhos/Fiocruz,161697,"FEBRUARY , 28, 2015",Completed
2,IgG,Measles virus infection,null,Phase 4 Clinical,C4,NeisVac-C,10774,100,MMR; NeisVac-C,100,null,Immunological Effect of Early Extra MMR Immunization in Infants Between 6 and 12 Months of Age in an Outbreak Setting,2013-003078-28; IIV-273,National Institute for Public Health and the Environment,156178,"AUGUST   , 22, 2013",Recruiting
1,null,Measles virus infection,null,Phase 3 Clinical,C3,Priorix-Tetra,17141,716,Meningitec; Priorix-Tetra,716,null,Immunogenicity and Safety Study of PriorixTetra When Co-administered With Conjugated MenC Vaccine in Healthy Children,115555; 115555MMRV-063; 2011-001608-37; MMRV-063; NCT01506193,GlaxoSmithKline plc,83852,"FEBRUARY , 29, 2012",Completed
2,null,Measles virus infection,ROR Vax,Phase 2 Clinical,C2,M-M-R II,3643,467,"second-generation MMR vaccine, Berna",467,null,"A phase II, multicenter, open, randomized study to compare the safety and immunogenicity of MMR vaccine, Berna with MMR vaccine, Merck & Co in children",PMID: 16371870,Crucell Switzerland AG,17279,"DECEMBER , 31, 2005",Completed
2,Anti varicella zoster virus antibodies; Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature; Immunoglobulin G,Measles virus infection,ProQuad,Phase 3 Clinical,C3,ProQuad,47279,1412,M-M-R II,1412,null,"Safety, Tolerability, and Immunogenicity of Measles, Mumps, Rubella, and Varicella (MMRV) Vaccine Made With an Alternative Manufacturing Process (AMP)",2017-001443-13; NCT01536405; P20930; V221-027,Merck Sharp & Dohme Corp,184151,"JUNE     , 05, 2012",Completed
2+,Body temperature,Measles virus infection,Havrix; Prevnar 13; Varivax,Phase 3a Clinical,C3A,varicella-zoster vaccine (Varivax/Zostavax),4645,1743,Havrix; M-M-R II; Prevnar 13; Priorix; Varivax,1736,null,"Safety and Immunogenicity Study of GlaxoSmithKline (GSK) Biologicals Measles, Mumps and Rubella (MMR) Vaccine (209762) Compared to Merck and Co, Inc's MMR Vaccine in Healthy Children 12 to 15 Months of Age",115650; 2011-006161-18; MMR-162; NCT02184572,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",203343,"AUGUST   , 25, 2014",Completed
1+,null,Measles virus infection,Havrix; Prevnar; Pro-Quad,Phase 2 Clinical,C2,Havrix,6621,1851,Havrix; Prevnar; Priorix-Tetra,1783,MMRV-054 PRI,Immunogenicity and Safety of GlaxoSmithKline Biologicals' MMRV Vaccine versus ProQuad in Children 12 to 14 Months of Age,110058; 110058_1; 2017-000454-18; BB-IND 13510; MMRV-054 PRI; NCT00578175,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",11526,"NOVEMBER , 30, 2007",Completed
2,Anti varicella zoster virus antibodies; Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature,Measles virus infection,MMR II; Varivax,Phase 3 Clinical,C3,M-M-R II,3643,30,ProQuad,30,null,A study of ProQuad in healthy Korean children,2009_538; NCT00839917; V221-023,Merck & Co Inc,44865,"FEBRUARY , 29, 2008",Terminated
2,null,Measles virus infection,null,Phase 4 Clinical,C4,Avaxim,14438,470,Avaxim; Trimovax,470,null,"Immunogenicity and Safety of Hepatitis A Vaccine Given at the Same Time of Measles, Mumps, Rubella Combined Vaccine",2015-005192-24; HAF65; NCT00313950,Sanofi SA,11423,"SEPTEMBER, 30, 2006",Completed
1+,Anti-Clostridium tetani antibodies; Anti-polyribitol phosphate antibodies; Body temperature; Immunoglobulin G,Measles virus infection,null,Phase 2 Clinical,C2,Bexsero,42065,189,Bexsero; Infanrix-DTaP-IPV-Hib; Menitorix; Prevnar 13; Priorix; Rotarix,213,Sched3,Baby Vaccine Study,2015-000817-32; NCT02482636; OVG2015/03; Sched3,"Bill & Melinda Gates Foundation, National Institute for Health Research (NIHR), University of Oxford",233238,"AUGUST   , 31, 2015",No longer recruiting
1,null,Measles virus infection,null,Phase 1 Clinical,C1,"MV-NIS (lung cancer), Vyriad",101326,4,"MV-NIS (lung cancer), Vyriad; atezolizumab",4,null,Trial of Measles Virotherapy in Combination With Atezolizumab in Patients With Metastatic Non-Small Cell Lung Cancer,NCT02919449; VYR-MV1-101,Vyriad,273428,"AUGUST   , 03, 2017",Terminated
1,Body temperature; Heart rate; Respiratory frequency,Measles virus infection,null,Phase 4 Clinical,C4,MRBEV,95202,1000,"measles/rubella vaccine, Biological E",1000,null,A Post Licensure Clinical Trial to Assess the Safety and Tolerability of BE’s Measles-rubella Vaccine in 9 to 12 Months Old Healthy Infants in a Single-Dose,BECT048/MRV-PIV/CTP-02; CTRI/2019/04/018683,Biological E Ltd,378426,"APRIL    , 30, 2019",Not yet recruiting
3,null,Measles virus infection,Priorix; Varilrix,Phase 2 Clinical,C2,Priorix-Tetra,17141,400,Priorix-Tetra; Varilrix + Priorix,400,null,"Immunogenicity, Safety of Measles-mumps-rubella-varicella Vaccine (MeMuRu-OKA) Compared to Priorix Given With Varilrix",105909; 2005-005825-75; NCT00352898,GlaxoSmithKline plc,187831,"APRIL    , 30, 2006",Completed
1,Immunoglobulin G,Measles virus infection,null,Phase 4 Clinical,C4,SA-14-14-2,60890,628,Priorix; SA-14-14-2,628,null,Immunogenicity and Safety of Japanese Encephalitis Vaccine When Given With Measles-Mumps-Rubella Vaccine,JEV06 (862058-1); NCT02880865,Path Inc,269874,"OCTOBER  , 31, 2016",Recruiting
2+,Meningococcal rSBA,Measles virus infection,Meningitec; Priorix-Tetra,Phase 3 Clinical,C3,Priorix-Tetra,17141,1000,Nimenrix; Nimenrix + Priorix-Tetra; Priorix-Tetra; Priorix-Tetra + Meningitec,1000,null,Safety And Immunogenicity Study of Meningococcal Vaccine GSK-134612 Given With Priorix-Tetra to 12 to 23 Months-Old Children,109670; NCT00474266,GlaxoSmithKline plc,9859,"JUNE     , 05, 2007",Completed
1+,null,Measles virus infection,Havrix; Prevnar; Pro-Quad,Phase 2 Clinical,C2,ProQuad,47279,1851,Havrix; Prevnar; Priorix-Tetra,1783,MMRV-054 PRI,Immunogenicity and Safety of GlaxoSmithKline Biologicals' MMRV Vaccine versus ProQuad in Children 12 to 14 Months of Age,110058; 110058_1; 2017-000454-18; BB-IND 13510; MMRV-054 PRI; NCT00578175,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",11526,"NOVEMBER , 30, 2007",Completed
5,Anti varicella zoster virus antibodies; Body temperature,Measles virus infection,"MMR vaccine, Merck & Co",Phase 3 Clinical,C3,Priorix,11457,5016,Priorix,5016,MMR-160,Consistency Study of GlaxoSmithKline(GSK) Biologicals MMR Vaccine (209762)(Priorix) Comparing Immunogenicity and Safety to Merck and Co Inc's MMR Vaccine (MMR II) in Children 12 to 15 Months of Age,115648; 2011-004891-12; MMR-160; NCT01702428,GlaxoSmithKline plc,94105,"NOVEMBER , 09, 2012",Completed
3+,null,Measles virus infection,Priorix,Phase 3b Clinical,C3B,Priorix,11457,5735,Priorix; Priorix-Tetra; Varilrix; Varilrix + Priorix,5803,null,"Evaluate Vaccine Against Chickenpox and a Combined Vaccine Against 4 Viral Childhood Diseases: Measles, Mumps, Rubella and Chickenpox",100388; 100388 (OKAH-179); 103494; 103494 (EXT FU Y1); 103494 (OKAH-180 EXT 179 Y1); 104105; 104105 (EXT FU Y2); 104105 (OKAH-181 EXT 179 Y2); 104106; 104106 (EXT FU Y4-Y6-Y8-Y10); 111433; 180 Y1; 181 Y2; 182 Y4-Y6-Y8-Y10; 2004-002676-41; NCT00226499; OKAH-179 and EXT,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",11418,"SEPTEMBER, 30, 2005",Completed
1,null,Measles virus infection,null,Phase 3 Clinical,C3,Meningitec,10593,716,Meningitec; Priorix-Tetra,716,null,Immunogenicity and Safety Study of PriorixTetra When Co-administered With Conjugated MenC Vaccine in Healthy Children,115555; 115555MMRV-063; 2011-001608-37; MMRV-063; NCT01506193,GlaxoSmithKline plc,83852,"FEBRUARY , 29, 2012",Completed
3,null,Measles virus infection,Priorix; Varilrix,Phase 3 Clinical,C3,Priorix-Tetra,17141,944,Priorix-Tetra,970,null,"Immunogenicity and Safety of a Combined Vaccine to Prevent Measles, Mumps, Rubella and Chickenpox Diseases",104389; EudraCT: 2004-005263-19; NCT00127023,GlaxoSmithKline plc,11388,"MAY      , 31, 2005",Completed
2,Anti-Measles antibodies; Immunoglobulin G; serum anti-Measles IgG,Measles virus infection,null,Phase 1 Clinical,C1,"measles vaccine (inhaled dry powder/CAN-BD), Aktiv-Dry",57263,60,"licensed subcutaneous measles vaccine; measles vaccine (inhaled dry powder/CAN-BD), Aktiv-Dry",60,null,A Clinical Trial to Assess the Safety of a Measles Vaccine (Dry Powder) Administered by Two Different Devices,CTRI/2012/02/002447; NCT01557699; PMV-001,Serum Institute of India Ltd,85837,"MARCH    , 31, 2012",Completed
1+,Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-Hepatitis B virus antibodies; Anti-Meningitis A virus antibodies; Anti-Meningitis C virus antibodies; Anti-Meningitis Y virus antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies; Anti-polyribitol phosphate antibodies; Anti-polyribosylribitol phosphate,Measles virus infection,M-M-RvaxPRO; Nimenrix; Prevnar 13; RotaTeq; V-419,Phase 3 Clinical,C3,NeisVac-C,10774,350,M-M-RvaxPRO; NeisVac-C; Nimenrix; Prevnar 13; RotaTeq; V-419,312,null,Concomitant Administration of a New Hexavalent Vaccine With a Meningococcal Serogroup C Conjugate Vaccine in Healthy Infants During Primary Series Immunization Followed by Booster Vaccination,2012-005547-24; EUCTR2012-005547-24; HXM01C; NCT01839175,"Sanofi Pasteur MSD, Sanofi SA",124248,"APRIL    , 30, 2013",Completed
2,null,Measles virus infection,null,Phase 2 Clinical,C2,M-M-R II,3643,270,"Attenuvax; MMR vaccine, Merck & Co; MMR vaccine, Merck & Co",110,null,"A Phase II, Comparative Study of Seroconversion of Single-Dose and Two-Dose Measles Vaccination in HIV-Infected and HIV-Uninfected Children: A Multicenter Trial of the Pediatric AIDS Clinical Trials Group",11202; ACTG 225; NCT00000815,National Institute of Allergy and Infectious Diseases,11384,"NOVEMBER , 30, 1999",Completed
3,null,Measles virus infection,null,Phase 1/Phase 2 Clinical,C12,M-M-R II,3643,105,M-M-R II; ProQuad; Varivax,105,null,Immune Responses to Two Dose Varivax +/- MMR-II,04-073; NCT00258726,National Institute of Allergy and Infectious Diseases,11515,"OCTOBER  , 31, 2005",Terminated
1+,Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-Hepatitis B virus antibodies; Anti-Meningitis A virus antibodies; Anti-Meningitis C virus antibodies; Anti-Meningitis Y virus antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies; Anti-polyribitol phosphate antibodies; Anti-polyribosylribitol phosphate,Measles virus infection,M-M-RvaxPRO; Nimenrix; Prevnar 13; RotaTeq; V-419,Phase 3 Clinical,C3,Prevnar 13,34281,350,M-M-RvaxPRO; NeisVac-C; Nimenrix; Prevnar 13; RotaTeq; V-419,312,null,Concomitant Administration of a New Hexavalent Vaccine With a Meningococcal Serogroup C Conjugate Vaccine in Healthy Infants During Primary Series Immunization Followed by Booster Vaccination,2012-005547-24; EUCTR2012-005547-24; HXM01C; NCT01839175,"Sanofi Pasteur MSD, Sanofi SA",124248,"APRIL    , 30, 2013",Completed
3,null,Measles virus infection,null,Phase 2 Clinical,C2,Varilrix,9474,446,Priorix; Priorix-Tetra; Varilrix,458,MeMuRu-OKA 046,"Immunogenicity, Safety of Measles-Mumps-Rubella-Varicella Vaccine (MeMuRu-OKA) Compared to Priorix Given With Varilrix",105908; EudraCT: 2005-006065-14; MeMuRu-OKA 046; NCT00353288,GlaxoSmithKline plc,102759,"MARCH    , 31, 2006",Completed
2,Anti-Measles antibodies,Measles virus infection,"measles vaccine (live, freeze-dried), Serum Institute of India Limited",Phase 3 Clinical,C3,"measles vaccine, Cadila Healthcare",97346,327,"measles vaccine, Cadila healthcare",327,null,"Clinical Study To Compare The Immune Response And Safety Of Measles Vaccine Manufactured By Cadila Healthcare Ltd, With Measles Vaccine Manufactured By Serum Institute Of India Ltd, In Children 9 to 12 Months Of Age",14-05; CTRI/2015/05/005739,Zydus Cadila Healthcare Ltd,229988,"MAY      , 12, 2015",No longer recruiting
4+,null,Measles virus infection,"Haemophilus influenzae B (Hib) vaccine, Aventis Pasteur; ROR Vax",Phase 3 Clinical,C3,Menactra,30177,1128,Menactra; Menactra; PCV; ROR Vax,1128,null,"A Study of Two Doses of Menactra, a Meningococcal Conjugate Vaccine in Healthy Toddlers",MTA44; NCT00384397,Sanofi SA,9949,"SEPTEMBER, 30, 2006",Completed
3,null,Measles virus infection,Priorix; Varilrix,Phase 3 Clinical,C3,Priorix,11457,944,Priorix-Tetra,970,null,"Immunogenicity and Safety of a Combined Vaccine to Prevent Measles, Mumps, Rubella and Chickenpox Diseases",104389; EudraCT: 2004-005263-19; NCT00127023,GlaxoSmithKline plc,11388,"MAY      , 31, 2005",Completed
1+,null,Measles virus infection,null,Phase 2 Clinical,C2,Prevnar,4144,216,MenACWY-CRM; Pediacel; Prevnar; Priorix; Vaxem HIB,216,null,B Cell Response to a Primary and a Booster Course of the Novartis Meningococcal ACWY Conjugate Vaccine in Healthy Infants,2006-003476-35; NCT00488683; V59P16,Novartis AG,10223,"JULY     , 31, 2007",Completed
1+,Anti varicella zoster virus antibodies; Anti-Bordetella pertussis antibodies; Anti-Bordetella pertussis filamentous hemagglutinin adhesin antibodies; Anti-Bordetella pertussis pertactin antibodies; Anti-HBs antigen antibodies; Anti-Measles antibodies; Anti-Meningitis A antibodies; Anti-Meningitis C antibodies; Anti-Meningitis W antibodies; Anti-Meningitis W-135 antibodies; Anti-Meningitis Y antibodies; Anti-Parotitis virus antibodies; Anti-Rotavirus antibodies; Anti-Rubella antibodies; Anti-Streptococcus pneumoniae antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies; Anti-polyribitol phosphate antibodies; Immunoglobulin G,Measles virus infection,"DTaP-IPV//Hib vaccine; Hepatitis A vaccine; Hepatitis B vaccine; Measles, mumps, rubella (MMR) vaccine; Menveo; Pneumococcal 13-valent conjugate vaccine; RotaTeq; Varicella vaccine",Phase 3 Clinical,C3,Menveo,39031,2475,"Hepatitis A vaccine; Hepatitis B vaccine; Measles, mumps, rubella (MMR) vaccine; Pentaxim; Pneumococcal 13-valent conjugate vaccine; RotaTeq; Varicella vaccine; quadrivalent meningococcal tetanus toxoid conjugate vaccine (meningitis), Sanofi Pasteur",2475,null,Immunogenicity and Safety of a Quadrivalent Meningococcal Conjugate Vaccine When Administered Concomitantly With Routine Pediatric Vaccines in Healthy Infants and Toddlers in the US,MET42; NCT03537508,Sanofi Pasteur,340960,"APRIL    , 25, 2018",Recruiting
2,Anti varicella zoster virus antibodies; Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature,Measles virus infection,MMR II; Varivax,Phase 3 Clinical,C3,varicella-zoster vaccine (Varivax/Zostavax),4645,30,ProQuad,30,null,A study of ProQuad in healthy Korean children,2009_538; NCT00839917; V221-023,Merck & Co Inc,44865,"FEBRUARY , 29, 2008",Terminated
1,Anti varicella zoster virus antibodies; Body temperature; Glycoproteins,Measles virus infection,null,Phase 3 Clinical,C3,varicella-zoster vaccine (Varivax/Zostavax),4645,600,M-M-R II; Varivax,600,null,Evaluation of Immunogenicity and Safety of VARIVAX Passage Extension 34 (PE34) Process in Children,NCT03239873; V210-A03,Merck Sharp & Dohme Corp,307614,"OCTOBER  , 17, 2017",Completed
1,null,Measles virus infection,null,Phase 1 Clinical,C1,atezolizumab,72699,4,"MV-NIS (lung cancer), Vyriad; atezolizumab",4,null,Trial of Measles Virotherapy in Combination With Atezolizumab in Patients With Metastatic Non-Small Cell Lung Cancer,NCT02919449; VYR-MV1-101,Vyriad,273428,"AUGUST   , 03, 2017",Terminated
2,null,Measles virus infection,null,Phase 4 Clinical,C4,"measles vaccine (inhaled aerosol), WHO",56118,1960,"Schwarz measles vaccine; measles vaccine (inhaled aerosol), WHO",1960,null,Long-term Follow-up of Measles Antibodies,LTAB-2288/2292-Twodose1; Lægevidenskabens Fremme-2292; NCT00168571; NOVO-2288,Bandim Health Project,14946,"MARCH    , 31, 2002",Completed
2,Body temperature; Heart rate; Respiratory frequency,Measles virus infection,SIIL’s MR-Vac,Phase 2/Phase 3 Clinical,C23,MRBEV,95202,600,"measles/rubella vaccine, Biological E",600,null,A clinical trial to assess the safety and protective efficacy of Biological Es Measles-Rubella Vaccine in 9 to 12 months old Infants in India,BECT036/MRV-PII/III/CTP-02; CTRI/2016/07/007109,Biological E Ltd,266205,"JULY     , 29, 2016",No longer recruiting
2,null,Measles virus infection,"MMR vaccine, Bio-Manguinhos/Fiocruz",Phase 2/Phase 3 Clinical,C23,"MMR vaccine, Bio-Manguinhos/Fiocruz",94952,432,"double viral vaccine (measles and rubella), Bio-Manguinhos/Fiocruz",432,BIOMR,"Study to Evaluate the Immunogenicity, Reatogenicity and Safety of Double Viral Vaccine (MR) for Measles and Rubella",ASCLIN 002/2017; BIOMR; NCT03148990,Bio-Manguinhos/Fiocruz,298150,"NOVEMBER , 20, 2018",Recruiting
1+,Anti-Clostridium tetani antibodies; Anti-polyribitol phosphate antibodies; Body temperature; Immunoglobulin G,Measles virus infection,null,Phase 2 Clinical,C2,Rotarix,12813,189,Bexsero; Infanrix-DTaP-IPV-Hib; Menitorix; Prevnar 13; Priorix; Rotarix,213,Sched3,Baby Vaccine Study,2015-000817-32; NCT02482636; OVG2015/03; Sched3,"Bill & Melinda Gates Foundation, National Institute for Health Research (NIHR), University of Oxford",233238,"AUGUST   , 31, 2015",No longer recruiting
4,null,Measles virus infection,MR-Vac; Stamaril; Vitamin A,Phase not specified,NS,"malaria vaccine, GlaxoSmithKline/Malaria Vaccine Initiative",14289,700,"malaria vaccine, GlaxoSmithKline/Malaria Vaccine Initiative",700,null,"Immunogenicity and safety of GSK Biologicals malaria vaccine given at 6,7.5 and 9 months of age coadministered with measles,rubella and yellow fever vaccines",PACTR201602001483150,GlaxoSmithKline Biologicals,261663,"SEPTEMBER, 14, 2016",Not yet recruiting
2,null,Measles virus infection,MR vaccine (Serum Institute of India),Phase 3 Clinical,C3,MRVAC,113162,756,MRVAC,756,null,Clinical Trial for Measles - Rubella Combined Vaccine (MRVAC) Produced by POLYVAC (phase III),MRVAC VX.2016.01; NCT03713359,POLYVAC,357452,"APRIL    , 30, 2016",Completed
3,null,Measles virus infection,Priorix; Varilrix,Phase 3 Clinical,C3,Priorix,11457,450,Priorix; Priorix-Tetra; Priorix-Tetra,450,MMRV-053 PRI,Comparison of GSK Measles-Mumps-Rubella-Varicella (MMRV) Vaccine Versus Priorix,109995; 2011-005882-19; MMRV-053 PRI; NCT00969436,GlaxoSmithKline plc,60050,"NOVEMBER , 09, 2009",Completed
1+,Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-Hepatitis B virus antibodies; Anti-Meningitis A virus antibodies; Anti-Meningitis C virus antibodies; Anti-Meningitis Y virus antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies; Anti-polyribitol phosphate antibodies; Anti-polyribosylribitol phosphate,Measles virus infection,M-M-RvaxPRO; Nimenrix; Prevnar 13; RotaTeq; V-419,Phase 3 Clinical,C3,M-M-RvaxPRO,89684,350,M-M-RvaxPRO; NeisVac-C; Nimenrix; Prevnar 13; RotaTeq; V-419,312,null,Concomitant Administration of a New Hexavalent Vaccine With a Meningococcal Serogroup C Conjugate Vaccine in Healthy Infants During Primary Series Immunization Followed by Booster Vaccination,2012-005547-24; EUCTR2012-005547-24; HXM01C; NCT01839175,"Sanofi Pasteur MSD, Sanofi SA",124248,"APRIL    , 30, 2013",Completed
1+,Polyribosylribitol phosphate,Measles virus infection,null,Phase 3 Clinical,C3,M-M-RvaxPRO,89684,284,"M-M-RvaxPRO; Men-C CRM liquid vaccine, Novartis; Menitorix; NeisVac-C; Prevnar 13; V-419",284,null,Immunogenicity and Safety of V-419 (PR-51) in Combination With MCC in Infants and Toddlers,2011-002413-11; NCT01553279; PRI01C; UKCRN ID: 11587; V419-011,MCM Vaccine BV,85664,"MARCH    , 30, 2012",Completed
1+,Anti-poliovirus type 1 antibody; Anti-poliovirus type 2 antibody; Anti-poliovirus type 3 antibody; Body temperature; Diphtheria antibody; Filamentous hemagglutinin (FHA); Fimbriae type 2; Fimbriae type 3; Limb muscle; Pertactin (PRN); Pertussis toxoid (PT); Polio antibody; Tetanus antibody,Measles virus infection,Daptacel; Daptacel + IPOL + M-M-R II + Varivax; IPOL; M-M-R II; Varivax,Phase 3 Clinical,C3,Quadracel,49241,3372,M-M-R II; Quadracel; Quadracel + M-M-R II + Varivax; Varivax,3340,null,Study of DTap-IPV Compared to Daptacel and IPOL as the Fifth Dose in Children 4 to 6 Years of Age,M5I02; NCT01346293; U1111-1116-4842,Sanofi Pasteur Inc,77052,"APRIL    , 30, 2011",Completed
2,Body temperature,Measles virus infection,null,Phase 3 Clinical,C3,ProQuad,47279,1800,ProQuad; Vaqta,1800,null,"Hepatitis A Vaccine, Inactivated and Measles, Mumps, Rubella and Varicella Virus Vaccine Live Safety Study",2006_023; NCT00326183; V251-066,Merck & Co Inc,11511,"MARCH    , 31, 2007",Completed
4,Anti varicella zoster virus antibodies; Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies,Measles virus infection,null,Phase 3 Clinical,C3,ProQuad,47279,1620,ProQuad; ProQuad (group 1); ProQuad (group 2); ProQuad (group 3),1620,null,Comparative Study of Immunogenicity and Safety of a two-dose Regimen of ProQuad Manufactured With rHA,2007-002468-88; MRV02C; NCT00566527; V221-038,"Merck Sharp & Dohme Corp, Sanofi Pasteur MSD",11632,"NOVEMBER , 29, 2007",Completed
1,null,Measles virus infection,null,Phase 3 Clinical,C3,ProQuad,47279,1200,ProQuad,1200,null,"Study to evaluate frozen versus refrigerated MMRV (combined Measles, Mumps, Rubella, and Varicella) investigational vaccine",2004_076; NCT00092430,Merck & Co Inc,12456,"SEPTEMBER, 30, 2002",Completed
6,null,Measles virus infection,Comvax; Tripedia; Varivax,Phase 3 Clinical,C3,Comvax,10530,1913,Comvax; ProQuad; Tripedia,822,null,Frozen ProQuad Administered Concomitantly Versus Nonconcomitantly With Other Pediatric Vaccines,2009_666; NCT00984295; V221-013,Merck Sharp & Dohme Corp,60653,"JUNE     , 30, 2000",Completed
2,Anti varicella zoster virus antibodies; Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies,Measles virus infection,Priorix-Tetra,Phase 2 Clinical,C2,Priorix-Tetra,17141,501,"208136 vaccine, new formulation",498,MEMURU-OKA-049,Immunogenicity and Safety Study of GSK Biologicals 208136 Vaccine Formulated With New Measles and Rubella Working Seeds,108760; 2011-005881-38; MEMURU-OKA-049; MEMURU-OKA-049; NCT00892775,GlaxoSmithKline plc,54026,"JUNE     , 03, 2009",Completed
3,null,Measles virus infection,Priorix; Varilrix,Phase 3 Clinical,C3,Varilrix,9474,450,Priorix; Priorix-Tetra; Priorix-Tetra,450,MMRV-053 PRI,Comparison of GSK Measles-Mumps-Rubella-Varicella (MMRV) Vaccine Versus Priorix,109995; 2011-005882-19; MMRV-053 PRI; NCT00969436,GlaxoSmithKline plc,60050,"NOVEMBER , 09, 2009",Completed
3,null,Measles virus infection,Priorix; Varilrix,Phase 3 Clinical,C3,Varilrix,9474,944,Priorix-Tetra,970,null,"Immunogenicity and Safety of a Combined Vaccine to Prevent Measles, Mumps, Rubella and Chickenpox Diseases",104389; EudraCT: 2004-005263-19; NCT00127023,GlaxoSmithKline plc,11388,"MAY      , 31, 2005",Completed
1+,Polyribosylribitol phosphate,Measles virus infection,null,Phase 3 Clinical,C3,Prevnar 13,34281,284,"M-M-RvaxPRO; Men-C CRM liquid vaccine, Novartis; Menitorix; NeisVac-C; Prevnar 13; V-419",284,null,Immunogenicity and Safety of V-419 (PR-51) in Combination With MCC in Infants and Toddlers,2011-002413-11; NCT01553279; PRI01C; UKCRN ID: 11587; V419-011,MCM Vaccine BV,85664,"MARCH    , 30, 2012",Completed
2,Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies,Measles virus infection,"MMR (GSK-TV), GlaxoSmithKline",Phase 4 Clinical,C4,"MMR vaccine, Bio-Manguinhos/Fiocruz",94952,240,"MMR vaccine, Bio-Manguinhos/Fiocruz",240,MMR,"Comparative Study of the Immunogenicity of MMR (Measles, Mumps and Rubella) Single- Dose and Multidose Presentations",Asclin 003/2012; MMR; NCT01777529,Bio-Manguinhos/Fiocruz,106360,"OCTOBER  , 31, 2012",Completed
1+,Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature,Measles virus infection,Havrix; M-M-R II; Prevnar 13; Varivax,Phase 3a Clinical,C3A,Prevnar 13,34281,4538,Havrix; Prevnar 13; Priorix; Varivax,4538,null,Immunogenicity and Safety Study of GlaxoSmithKline (GSK) Biological's Combined Measles-mumps-rubella (MMR) Vaccine in Children in Their Second Year of Life,115649; 15049; 2011-004905-26; MMR-161; NCT01681992; NMRR-13-165-15049,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",91153,"OCTOBER  , 10, 2012",Completed
3,null,Measles virus infection,Priorix; Varilrix,Phase 2 Clinical,C2,Priorix,11457,400,Priorix-Tetra; Varilrix + Priorix,400,null,"Immunogenicity, Safety of Measles-mumps-rubella-varicella Vaccine (MeMuRu-OKA) Compared to Priorix Given With Varilrix",105909; 2005-005825-75; NCT00352898,GlaxoSmithKline plc,187831,"APRIL    , 30, 2006",Completed
1+,null,Measles virus infection,null,Phase 2 Clinical,C2,Pentacel,15298,216,MenACWY-CRM; Pediacel; Prevnar; Priorix; Vaxem HIB,216,null,B Cell Response to a Primary and a Booster Course of the Novartis Meningococcal ACWY Conjugate Vaccine in Healthy Infants,2006-003476-35; NCT00488683; V59P16,Novartis AG,10223,"JULY     , 31, 2007",Completed
1,null,Measles virus infection,null,Phase 1 Clinical,C1,"live-attenuated viral vaccine (sc, measles/rubella virus infection), Indian Immunologicals",115970,55,"Measles and Rubella Vaccine (Live), HBI",55,null,A clinical trial to evaluate the safety and immunogenicity of HBI Measles and Rubella vaccine (Live) in two age groups of healthy male subjects,CTRI/2019/04/018635; HBI/MR/I/2018/001.01.00 Version 01,Indian Immunologicals Ltd,377732,"APRIL    , 17, 2019",Not yet recruiting
1+,Anti-Clostridium tetani antibodies; Anti-polyribitol phosphate antibodies; Body temperature; Immunoglobulin G,Measles virus infection,null,Phase 2 Clinical,C2,Prevnar 13,34281,189,Bexsero; Infanrix-DTaP-IPV-Hib; Menitorix; Prevnar 13; Priorix; Rotarix,213,Sched3,Baby Vaccine Study,2015-000817-32; NCT02482636; OVG2015/03; Sched3,"Bill & Melinda Gates Foundation, National Institute for Health Research (NIHR), University of Oxford",233238,"AUGUST   , 31, 2015",No longer recruiting
1,null,Measles virus infection,null,Phase 1 Clinical,C1,"double viral vaccine (measles/rubella), Bio-Manguinhos/Fiocruz",99042,30,"double viral vaccine (measles/rubella), Bio-Manguinhos/Fiocruz",30,null,Study to Evaluate Safety and Imunogenicity of Double Viral Vaccine (MR) for Measles and Rubella,ASCLIN 002/2014; NCT02196285,Bio-Manguinhos/Fiocruz,206205,"SEPTEMBER, 30, 2015",Completed
3,Anti-Chikungunya virus antibodies; Anti-Measles antibodies; Mononuclear leukocytes; T-Lymphocytes,Measles virus infection,Priorix,Phase 2 Clinical,C2,Priorix,11457,263,MV-CHIK; MV-CHIK; Priorix,263,null,Phase II Study to Evaluate Safety and Immunogenicity of a Chikungunya Vaccine,2015-004037-26; MV-CHIK-202; NCT02861586,Themis Bioscience GmbH,268409,"AUGUST   , 17, 2016",Completed
1,null,Measles virus infection,null,Phase 2 Clinical,C2,MVA-mBN85B,54328,90,MVA mBN85B,90,null,"Study to Evaluate Safety, Dose Response and Immunogenicity of the Measles Vaccine MVA mBN85B in Healthy Children Aged 6 Months to 6 Years",MEA-HFN-002; NCT00891007,Bavarian Nordic A/S,59936,"JUNE     , 30, 2009",Completed
2,Body temperature,Measles virus infection,M-M-R II,Phase 3 Clinical,C3,varicella-zoster vaccine (Varivax/Zostavax),4645,752,Varivax,752,null,Immunogenicity and Safety of Concomitant Administration of MMR rHA and VARIVAX by Intramuscular Versus Subcutaneous Route,EudraCT#2004_002586_21; NCT00432523; V205-011; X04-MMRr-301,Merck Sharp & Dohme Corp,11525,"JANUARY  , 31, 2005",Completed
6,null,Measles virus infection,Comvax; Tripedia; Varivax,Phase 3 Clinical,C3,ProQuad,47279,1913,Comvax; ProQuad; Tripedia,822,null,Frozen ProQuad Administered Concomitantly Versus Nonconcomitantly With Other Pediatric Vaccines,2009_666; NCT00984295; V221-013,Merck Sharp & Dohme Corp,60653,"JUNE     , 30, 2000",Completed
1+,Anti-poliovirus type 1 antibody; Anti-poliovirus type 2 antibody; Anti-poliovirus type 3 antibody; Body temperature; Diphtheria antibody; Filamentous hemagglutinin (FHA); Fimbriae type 2; Fimbriae type 3; Limb muscle; Pertactin (PRN); Pertussis toxoid (PT); Polio antibody; Tetanus antibody,Measles virus infection,Daptacel; Daptacel + IPOL + M-M-R II + Varivax; IPOL; M-M-R II; Varivax,Phase 3 Clinical,C3,varicella-zoster vaccine (Varivax/Zostavax),4645,3372,M-M-R II; Quadracel; Quadracel + M-M-R II + Varivax; Varivax,3340,null,Study of DTap-IPV Compared to Daptacel and IPOL as the Fifth Dose in Children 4 to 6 Years of Age,M5I02; NCT01346293; U1111-1116-4842,Sanofi Pasteur Inc,77052,"APRIL    , 30, 2011",Completed
1+,Polyribosylribitol phosphate,Measles virus infection,null,Phase 3 Clinical,C3,NeisVac-C,10774,284,"M-M-RvaxPRO; Men-C CRM liquid vaccine, Novartis; Menitorix; NeisVac-C; Prevnar 13; V-419",284,null,Immunogenicity and Safety of V-419 (PR-51) in Combination With MCC in Infants and Toddlers,2011-002413-11; NCT01553279; PRI01C; UKCRN ID: 11587; V419-011,MCM Vaccine BV,85664,"MARCH    , 30, 2012",Completed
3+,null,Measles virus infection,Havrix; M-M-R II; M-M-R II + Varivax + Havrix + Prevnar; Prevnar; Varivax,Phase 2 Clinical,C2,varicella-zoster vaccine (Varivax/Zostavax),4645,1259,Havrix; Prevnar; Priorix; Priorix (lot 2); Priorix (lot 3); Priorix + Varivax + Havrix + Prevnar; Varivax,1220,null,"Immunogenicity of GSK's MMR Vaccine (209762) versus M-M-R II, When Given With Routine Vaccines at 12 to 15 Months of Age",111870; 111870_; 2011-005860-31; 7229; MMR-157 PRI; NCT00861744,GlaxoSmithKline plc,79465,"JUNE     , 30, 2009",Completed
2+,Anti-Bordetella pertussis antibodies; Anti-Bordetella pertussis filamentous hemagglutinin adhesin antibodies; Anti-Bordetella pertussis pertactin antibodies; Anti-Clostridium tetani antibodies; Anti-Corynebacterium diphtheriae antibodies; Anti-poliovirus type 1 antibodies; Anti-poliovirus type 2 antibodies; Anti-poliovirus type 3 antibodies,Measles virus infection,"Infanrix-IPV; MMR vaccine, Merck & Co; ProQuad",Phase 3a Clinical,C3A,Kinrix,57017,4011,"Infanrix-IPV; MMR vaccine, Merck & Co; Priorix; Priorix; ProQuad",4011,MMR-158,Immunogenicity and Safety Study of GlaxoSmithKline (GSK) Biologicals' Combined Measles-mumps-rubella (MMR) Vaccine in Subjects 4 to 6 Years of Age,115158; 2011-004638-32; 209762; MMR-158; NCT01621802,GlaxoSmithKline plc,88475,"JUNE     , 21, 2012",Completed
1,null,Measles virus infection,null,Phase 2/Phase 3 Clinical,C23,Trivivac,83793,200,Trivivac,200,null,Immunogenicity and Reactogenicity of a Trivalent MMR (Trivivac) in Healthy Infants,NCT01763268; Trivivac2012,Queen Sirikit National Institute of Child Health,104131,"SEPTEMBER, 30, 2012",Recruiting
3+,null,Measles virus infection,Havrix; M-M-R II; M-M-R II + Varivax + Havrix + Prevnar; Prevnar; Varivax,Phase 2 Clinical,C2,M-M-R II,3643,1259,Havrix; Prevnar; Priorix; Priorix (lot 2); Priorix (lot 3); Priorix + Varivax + Havrix + Prevnar; Varivax,1220,null,"Immunogenicity of GSK's MMR Vaccine (209762) versus M-M-R II, When Given With Routine Vaccines at 12 to 15 Months of Age",111870; 111870_; 2011-005860-31; 7229; MMR-157 PRI; NCT00861744,GlaxoSmithKline plc,79465,"JUNE     , 30, 2009",Completed
2,null,Measles virus infection,ROR Vax,Phase 2 Clinical,C2,"second-generation MMR vaccine, Berna",41069,467,"second-generation MMR vaccine, Berna",467,null,"A phase II, multicenter, open, randomized study to compare the safety and immunogenicity of MMR vaccine, Berna with MMR vaccine, Merck & Co in children",PMID: 16371870,Crucell Switzerland AG,17279,"DECEMBER , 31, 2005",Completed
5,Anti varicella zoster virus antibodies; Body temperature,Measles virus infection,"MMR vaccine, Merck & Co",Phase 3 Clinical,C3,M-M-R II,3643,5016,Priorix,5016,MMR-160,Consistency Study of GlaxoSmithKline(GSK) Biologicals MMR Vaccine (209762)(Priorix) Comparing Immunogenicity and Safety to Merck and Co Inc's MMR Vaccine (MMR II) in Children 12 to 15 Months of Age,115648; 2011-004891-12; MMR-160; NCT01702428,GlaxoSmithKline plc,94105,"NOVEMBER , 09, 2012",Completed
3,Immunoglobulin G; Serum bactericidal antibody,Measles virus infection,null,Phase 4 Clinical,C4,Prevnar 13,34281,200,Menitorix; Prevnar 13; Priorix,200,P13Boost,Responses to booster vaccinations in UK toddlers,12/LO/1875; 2012-005110-18; HPA Protocol No: 12/05; ISRCTN84763401; P13Boost; UKCRN 13975,Health Protection Agency,132011,"FEBRUARY , 01, 2013",Completed
1,Anti varicella zoster virus antibodies; Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Immunoglobulin G,Measles virus infection,null,Phase 1/Phase 2 Clinical,C12,ProQuad,47279,5,ProQuad,5,null,Safety and Efficacy of ProQuad in Children 6 to 24 Months Being Evaluated for Solid Organ Transplant,NCT02687763; PRO25854,Medical University of South Carolina,254035,"DECEMBER , 31, 2015",Completed
1,Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Hydrocortisone; Immunoglobulin G; Immunoglobulin G/Immunoglobulin M ratio; Interleukin-1 beta; Interleukin-6; Pancreatic alpha-amylase; Tumor necrosis factor,Measles virus infection,null,Phase 4 Clinical,C4,M-M-RvaxPRO,89684,6500,M-M-RvaxPRO,6500,null,MMR at 6 Months Trial,2016-001901-18; LGS.MMR.01.2016.2022; NCT03780179,"Danish National University Hospital, Rigshospitalet, Denmark",364134,"APRIL    , 15, 2019",Recruiting
1,Anti varicella zoster virus antibodies; Body temperature; Glycoproteins,Measles virus infection,null,Phase 3 Clinical,C3,M-M-R II,3643,600,M-M-R II; Varivax,600,null,Evaluation of Immunogenicity and Safety of VARIVAX Passage Extension 34 (PE34) Process in Children,NCT03239873; V210-A03,Merck Sharp & Dohme Corp,307614,"OCTOBER  , 17, 2017",Completed
1,null,Measles virus infection,null,Phase 1 Clinical,C1,MRBEV,95202,24,"measles/rubella vaccine, Biological E",24,null,A phase-I study to evaluate the safety and tolerability of Measles Rubella(MR) vaccine in 4 to 5 years old healthy children in a single-dose schedule,BECT032/MRV-PI/CTP-02; CTRI/2015/11/006375,Biological E Ltd,246741,"NOVEMBER , 25, 2015",Not yet recruiting
1,Anti-Parotitis virus antibodies; B-lymphocytes; Immunoglobulin A; Immunoglobulin G; Memory B-Lymphocytes; Memory T-Lymphocytes; T-Lymphocytes,Measles virus infection,null,Phase 2 Clinical,C2,M-M-RvaxPRO,89684,150,M-M-RvaxPRO,150,BMR-3,Third MMR Vaccine Dose In Young Adults,BMR-3; NL57282.094.16 IIV-291; NTR5911,National Institute for Public Health and the Environment,270107,"SEPTEMBER, 01, 2016",Not yet recruiting
1+,null,Measles virus infection,null,Phase 2 Clinical,C2,Menveo,39031,216,MenACWY-CRM; Pediacel; Prevnar; Priorix; Vaxem HIB,216,null,B Cell Response to a Primary and a Booster Course of the Novartis Meningococcal ACWY Conjugate Vaccine in Healthy Infants,2006-003476-35; NCT00488683; V59P16,Novartis AG,10223,"JULY     , 31, 2007",Completed
2+,Meningococcal rSBA,Measles virus infection,Meningitec; Priorix-Tetra,Phase 3 Clinical,C3,Meningitec,10593,1000,Nimenrix; Nimenrix + Priorix-Tetra; Priorix-Tetra; Priorix-Tetra + Meningitec,1000,null,Safety And Immunogenicity Study of Meningococcal Vaccine GSK-134612 Given With Priorix-Tetra to 12 to 23 Months-Old Children,109670; NCT00474266,GlaxoSmithKline plc,9859,"JUNE     , 05, 2007",Completed
2,CD4,Measles virus infection,null,Phase not specified,NS,Prevnar,4144,300,Pneumovax 23; Prevnar,300,null,Pneumococcal Vaccine and Routine Pediatric Immunizations in HIV-Infected Children Receiving Anti-HIV Drugs,10609; ACTG P1024; NCT00013871; P1024; PACTG 1024,National Institute of Allergy and Infectious Diseases,10810,"MARCH    , 31, 2001",Completed
1,Blood pressure; Body temperature; Heart rate; Respiratory frequency,Measles virus infection,null,Phase 1 Clinical,C1,"MMRV vaccine, Zydus Cadila Healthcare",97994,24,"MMRV vaccine, Zydus Cadila Healthcare",24,null,"To Assess the Safety and Tolerability of Measles, Mumps, Rubella and Varicella Vaccine (Live-Attenuated, Freeze-Dried) in Healthy Adult Male Human Subjects",CTRI/2015/10/006291; MMRVC 1001,Zydus Cadila Healthcare Ltd,243853,"OCTOBER  , 30, 2015",Not yet recruiting
2+,Body temperature,Measles virus infection,HepA; MMRV; Prevnar,Phase 3 Clinical,C3,Prevnar,4144,1378,HepA; Menactra; Menactra; Prevnar; ProQuad,1378,null,Study of the Safety of Menactra Vaccine When Administered With Other Pediatric Vaccines to Healthy Toddlers,MTA48; NCT00483574,Sanofi SA,9965,"MAY      , 31, 2007",Completed
2,CD4,Measles virus infection,null,Phase not specified,NS,Pneumovax 23,7080,300,Pneumovax 23; Prevnar,300,null,Pneumococcal Vaccine and Routine Pediatric Immunizations in HIV-Infected Children Receiving Anti-HIV Drugs,10609; ACTG P1024; NCT00013871; P1024; PACTG 1024,National Institute of Allergy and Infectious Diseases,10810,"MARCH    , 31, 2001",Completed
2,Anti varicella zoster virus antibodies; Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature; Immunoglobulin G,Measles virus infection,ProQuad,Phase 3 Clinical,C3,M-M-R II,3643,1412,M-M-R II,1412,null,"Safety, Tolerability, and Immunogenicity of Measles, Mumps, Rubella, and Varicella (MMRV) Vaccine Made With an Alternative Manufacturing Process (AMP)",2017-001443-13; NCT01536405; P20930; V221-027,Merck Sharp & Dohme Corp,184151,"JUNE     , 05, 2012",Completed
2,null,Measles virus infection,M-M-R II,Phase 4 Clinical,C4,varicella-zoster vaccine (Varivax/Zostavax),4645,500,Varivax,507,null,Safety Study of a Refrigerator-Stable Formulation of Varivax,2004-002669-19; NCT00432731; V210-061; X04-VAR-402,Merck Sharp & Dohme Corp,11524,"DECEMBER , 31, 2004",Completed
1+,Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature,Measles virus infection,Havrix; M-M-R II; Prevnar 13; Varivax,Phase 3a Clinical,C3A,Priorix,11457,4538,Havrix; Prevnar 13; Priorix; Varivax,4538,null,Immunogenicity and Safety Study of GlaxoSmithKline (GSK) Biological's Combined Measles-mumps-rubella (MMR) Vaccine in Children in Their Second Year of Life,115649; 15049; 2011-004905-26; MMR-161; NCT01681992; NMRR-13-165-15049,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",91153,"OCTOBER  , 10, 2012",Completed
3,Immunoglobulin G; Serum bactericidal antibody,Measles virus infection,null,Phase 4 Clinical,C4,Priorix,11457,200,Menitorix; Prevnar 13; Priorix,200,P13Boost,Responses to booster vaccinations in UK toddlers,12/LO/1875; 2012-005110-18; HPA Protocol No: 12/05; ISRCTN84763401; P13Boost; UKCRN 13975,Health Protection Agency,132011,"FEBRUARY , 01, 2013",Completed
1,Immunoglobulin G; Immunoglobulin M,Measles virus infection,null,Phase 4 Clinical,C4,Priorix,11457,14,Priorix,14,BREMEAVAC,Search for the Measles Vaccine Virus Excretion in Breast Milk of Breastfeeding Women After Postpartum Vaccination With MMR,2014-001538-28; BREMEAVAC; NCT02325310; P130930,"Assistance Publique Hopitaux de Paris, Centre Hospitalier Universitaire de Limoges",218981,"FEBRUARY , 04, 2015",Completed
2+,Body temperature,Measles virus infection,HepA; MMRV; Prevnar,Phase 3 Clinical,C3,Menactra,30177,1378,HepA; Menactra; Menactra; Prevnar; ProQuad,1378,null,Study of the Safety of Menactra Vaccine When Administered With Other Pediatric Vaccines to Healthy Toddlers,MTA48; NCT00483574,Sanofi SA,9965,"MAY      , 31, 2007",Completed
3,null,Measles virus infection,"Haemophilus influenzae B (Hib) vaccine, Aventis Pasteur; ROR Vax",Phase 3 Clinical,C3,Menactra,30177,1664,Menactra,1664,null,Immunogenicity and Safety of Pediatric Vaccines When Administered With Menactra in Healthy Toddlers,MTA37; NCT00422292,Sanofi SA,9967,"DECEMBER , 31, 2006",Completed
1+,Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature,Measles virus infection,Havrix; M-M-R II; Prevnar 13; Varivax,Phase 3a Clinical,C3A,Havrix,6621,4538,Havrix; Prevnar 13; Priorix; Varivax,4538,null,Immunogenicity and Safety Study of GlaxoSmithKline (GSK) Biological's Combined Measles-mumps-rubella (MMR) Vaccine in Children in Their Second Year of Life,115649; 15049; 2011-004905-26; MMR-161; NCT01681992; NMRR-13-165-15049,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",91153,"OCTOBER  , 10, 2012",Completed
2,Anti varicella zoster virus antibodies; Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies; Body temperature,Measles virus infection,MMR II; Varivax,Phase 3 Clinical,C3,ProQuad,47279,30,ProQuad,30,null,A study of ProQuad in healthy Korean children,2009_538; NCT00839917; V221-023,Merck & Co Inc,44865,"FEBRUARY , 29, 2008",Terminated
1+,Anti-Clostridium tetani antibodies; Anti-polyribitol phosphate antibodies; Body temperature; Immunoglobulin G,Measles virus infection,null,Phase 2 Clinical,C2,Menitorix,11458,189,Bexsero; Infanrix-DTaP-IPV-Hib; Menitorix; Prevnar 13; Priorix; Rotarix,213,Sched3,Baby Vaccine Study,2015-000817-32; NCT02482636; OVG2015/03; Sched3,"Bill & Melinda Gates Foundation, National Institute for Health Research (NIHR), University of Oxford",233238,"AUGUST   , 31, 2015",No longer recruiting
1,Anti-Measles antibodies; Anti-Parotitis virus antibodies; Anti-Rubella antibodies,Measles virus infection,null,Phase 4 Clinical,C4,"measles/mumps/rubella vaccine (live-attenuated),  Beijing Tiantan Biological Products",79144,873,"measles/mumps/rubella vaccine (live-attenuated),  Beijing Tiantan Biological Products",873,null,Study on Immunization Schedule of Beijing Tiantan Biological's Measles-mumps-rubella(MMR) Vaccine,BJCDCWJ201601; NCT03160820,The Chinese Centre for Disease Control and Prevention,298801,"MARCH    , 31, 2016",Completed
1+,Anti-Clostridium tetani antibodies; Anti-polyribitol phosphate antibodies; Body temperature; Immunoglobulin G,Measles virus infection,null,Phase 2 Clinical,C2,Priorix,11457,189,Bexsero; Infanrix-DTaP-IPV-Hib; Menitorix; Prevnar 13; Priorix; Rotarix,213,Sched3,Baby Vaccine Study,2015-000817-32; NCT02482636; OVG2015/03; Sched3,"Bill & Melinda Gates Foundation, National Institute for Health Research (NIHR), University of Oxford",233238,"AUGUST   , 31, 2015",No longer recruiting
1,null,Measles virus infection,null,Phase 4 Clinical,C4,SA-14-14-2,60890,628,SA-14-14-2,628,null,Evaluation of the immunogenicity and safety of Japanese encephalitis vaccine when given with measles-mumps-rubella vaccine,2016-CT0360; JEV06; PHRR160822-001339,"Path Inc, Syneos Health Inc",268796,"OCTOBER  , 01, 2016",Not yet recruiting</ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.AnalysisCsvResponse>