<?xml version="1.0" ?><ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.QueryCsvResponse xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns2="local" xsi:type="xs:base64Binary">ArmCount,Biomarkers,Condition,Controls,DevStatus,DevStatusId,Drug,DrugId,EnrollmentCount,Interventions,Patients,ProtocolAcronym,ProtocolTitle,Reference,Sponsor,TrialId,TrialStartDate,TrialStatus
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Epidermal growth factor receptor; Programmed cell death 1 ligand 1,Metastatic non small cell lung cancer,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,75,NKTR-214; atezolizumab; pembrolizumab,75,PROPEL,A Study of a CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 (Pembrolizumab) and of NKTR-214 in Combination With Anti-PD-L1 (Atezolizumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-05; NCT03138889; PROPEL,Nektar Therapeutics,296922,"JUNE     , 09, 2017",Recruiting
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Cytotoxic T-Lymphocytes; Epidermal growth factor receptor; Inducible T-cell costimulator; Programmed cell death 1 ligand 1; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Brain tumor,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,480,Halaven; NKTR-214; NKTR-214 + Opdivo; Opdivo; Yervoy; carboplatin; cisplatin; nab-paclitaxel; paclitaxel; pemetrexed disodium,283,PIVOT-02,A Dose-Escalation and Cohort Expansion Study of CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 Antibody (Nivolumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-02; 2016-003543-11; NCT02983045; PIVOT-02,Nektar Therapeutics,281291,"OCTOBER  , 31, 2016",Recruiting
1,Monocytes,Stage IV melanoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,null,NKTR-214; entinostat,null,null,"A phase Ib/II trial to evaluate the safety and efficacy of NKTR-214 in combination with entinostat, in patients with metastatic melanoma who have previously progressed on treatment with an anti-PD-1 (programmed death receptor-1) agent",ENCORE 606,Syndax Pharmaceuticals Inc,341373,"JUNE     , 30, 2019",Planned
1,Antigen KI-67; Chemokines; Cytokines; Granzyme B; Interferon gamma; Interleukin-2 receptor alpha chain ; Lymphocytes; Natural killer cells; Perforin-1; Programmed cell death protein 1; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor mass; Tumor-Infiltrating Lymphocytes,Sarcoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,40,NKTR-214,28,null,"A Phase I/II, Multicenter, Dose-Escalation and Expansion Study Of NKTR-214 In Subjects With Locally Advanced Or Metastatic Solid Tumors",15-214-01; 2015-0573; 2016-001134-10; NCT02869295,Nektar Therapeutics,268769,"DECEMBER , 31, 2015",Completed
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Cytotoxic T-Lymphocytes; Epidermal growth factor receptor; Inducible T-cell costimulator; Programmed cell death 1 ligand 1; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Metastatic bladder cancer,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,480,Halaven; NKTR-214; NKTR-214 + Opdivo; Opdivo; Yervoy; carboplatin; cisplatin; nab-paclitaxel; paclitaxel; pemetrexed disodium,283,PIVOT-02,A Dose-Escalation and Cohort Expansion Study of CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 Antibody (Nivolumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-02; 2016-003543-11; NCT02983045; PIVOT-02,Nektar Therapeutics,281291,"OCTOBER  , 31, 2016",Recruiting
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Cytotoxic T-Lymphocytes; Epidermal growth factor receptor; Inducible T-cell costimulator; Programmed cell death 1 ligand 1; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Metastatic breast cancer,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,480,Halaven; NKTR-214; NKTR-214 + Opdivo; Opdivo; Yervoy; carboplatin; cisplatin; nab-paclitaxel; paclitaxel; pemetrexed disodium,283,PIVOT-02,A Dose-Escalation and Cohort Expansion Study of CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 Antibody (Nivolumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-02; 2016-003543-11; NCT02983045; PIVOT-02,Nektar Therapeutics,281291,"OCTOBER  , 31, 2016",Recruiting
1+,B-CLL cells; IL-2,Chronic lymphocytic leukemia,null,Phase 1 Clinical,C1,"autologous IL2 and CD40 ligand-expressing tumor cells (B-CLL), Baylor College of Medicine",45937,2,"IL-2/CD40L-expressing leukemia vaccine, Baylor College of Medicine/Maxcyte; allopurinol; lenalidomide",2,TAIL,Treatment of B-CLL With Autologous IL2 and CD40 Ligand-Expressing Tumor Cells + Lenalidomide,H-30087 TAIL; NCT01604031; TAIL,Baylor College of Medicine,87716,"FEBRUARY , 28, 2013",Terminated
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Uterus tumor,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Transitional cell carcinoma,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Programmed cell death 1 ligand 1; Programmed cell death 1 ligand 1,Metastasis,carboplatin; gemcitabine,Phase 2 Clinical,C2,bempegaldesleukin,77588,165,NKTR-214; nivolumab,165,PIVOT-10,A Randomized Study of NKTR-214 Plus Nivolumab and of Reference Chemotherapy in Cisplatin Ineligible Patients Who Have Locally Advanced or Metastatic Urothelial Cancer With Low PD-L1 Expression,18-214-10; CA045-012; NCT03785925; PIVOT-10,Nektar Therapeutics,364590,"APRIL    , 29, 2019",Recruiting
1,null,Sarcoma,null,Phase 2 Clinical,C2,bempegaldesleukin,77588,100,NKTR-214; nivolumab,100,null,A Study of NKTR-214 in Combination With Nivolumab in Patients With Metastatic and/or Locally Advanced Sarcoma,17-366; CA209-9EM; NCT03282344,Memorial Sloan-Kettering Cancer Center,312527,"SEPTEMBER, 12, 2017",Recruiting
1+,null,Prostate tumor,null,Phase 1b Clinical,C1B,tucotuzumab celmoleukin,21065,45,EMD-273066; EMD-273066 (0.5 mg) + cyclophosphamide; EMD-273066 (1.0 mg) + cyclophosphamide; EMD-273066 (2.0 mg) + cyclophosphamide; EMD-273066 (3.0 mg) + cyclophosphamide; EMD-273066 (4.0 mg) + cyclophosphamide; cyclophosphamide,27,null,"EMD-273066 in Patients With Recurrent EpCAM Positive Ovarian, Prostate, Colorectal or Non-Small Cell Lung Cancers When First Given Cyclophosphamide",EMR 62206-015; NCT00132522,Merck KGaA,28529,"MAY      , 31, 2005",Completed
2,Programmed cell death 1 ligand 1,Stage IV melanoma,null,Phase 3 Clinical,C3,bempegaldesleukin,77588,764,NKTR-214; nivolumab; nivolumab,764,null,A Study of NKTR-214 Combined With Nivolumab versus Nivolumab Alone in Participants With Previously Untreated Inoperable or Metastatic Melanoma,17-214-08; 2018-001423-40; CA045-001; NCT03635983,"Bristol-Myers Squibb Co, bristol myers squibb international corporation belgium",350572,"SEPTEMBER, 14, 2018",Recruiting
1+,CD8-Positive T-Lymphocytes; Cytotoxic T-Lymphocytes; Natural killer cells; T-Helper Lymphocytes,Metastatic colorectal cancer,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,393,NKTR-214; NKTR-262; nivolumab,13,REVEAL,A Study of NKTR-262 in Combination With NKTR-214 and With NKTR-214 Plus Nivolumab in Patients With Locally Advanced or Metastatic Solid Tumor Malignancies,17-262-01; NCT03435640; REVEAL,Nektar Therapeutics,329566,"MARCH    , 15, 2018",Recruiting
1,null,Lymphoplasmacytic lymphoma,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,40,NKTR-214; TAK-659,40,null,A Study of TAK-659 in Combination With NKTR-214 in Participants With Advanced Non-Hodgkin Lymphoma (NHL),C34015; NCT03772288; U1111-1218-4372,Takeda Oncology,337393,"APRIL    , 03, 2019",Recruiting
1,null,Marginal zone B-cell lymphoma,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,40,NKTR-214; TAK-659,40,null,A Study of TAK-659 in Combination With NKTR-214 in Participants With Advanced Non-Hodgkin Lymphoma (NHL),C34015; NCT03772288; U1111-1218-4372,Takeda Oncology,337393,"APRIL    , 03, 2019",Recruiting
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Cytotoxic T-Lymphocytes; Epidermal growth factor receptor; Inducible T-cell costimulator; Programmed cell death 1 ligand 1; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Stage IV melanoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,480,Halaven; NKTR-214; NKTR-214 + Opdivo; Opdivo; Yervoy; carboplatin; cisplatin; nab-paclitaxel; paclitaxel; pemetrexed disodium,283,PIVOT-02,A Dose-Escalation and Cohort Expansion Study of CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 Antibody (Nivolumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-02; 2016-003543-11; NCT02983045; PIVOT-02,Nektar Therapeutics,281291,"OCTOBER  , 31, 2016",Recruiting
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Cytotoxic T-Lymphocytes; Epidermal growth factor receptor; Inducible T-cell costimulator; Programmed cell death 1 ligand 1; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Transitional cell carcinoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,480,Halaven; NKTR-214; NKTR-214 + Opdivo; Opdivo; Yervoy; carboplatin; cisplatin; nab-paclitaxel; paclitaxel; pemetrexed disodium,283,PIVOT-02,A Dose-Escalation and Cohort Expansion Study of CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 Antibody (Nivolumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-02; 2016-003543-11; NCT02983045; PIVOT-02,Nektar Therapeutics,281291,"OCTOBER  , 31, 2016",Recruiting
2,Chemokine; Chemokines; Cytokine; Interleukin-2 receptor; Leukocyte count; Neopterin,Metastatic non small cell lung cancer,null,Phase 1b Clinical,C1B,NHS-IL2-LT,57922,15,EMD-521873; Radiotherapy (5 x 4 Gy),13,null,EMD-521873 Plus Radiotherapy in Non-Small-Cell Lung Cancer (NSCLC),EMR 62235-002; NCT00879866,Merck KGaA,51498,"APRIL    , 30, 2009",Completed
1,Antigen KI-67; Chemokines; Cytokines; Granzyme B; Interferon gamma; Interleukin-2 receptor alpha chain ; Lymphocytes; Natural killer cells; Perforin-1; Programmed cell death protein 1; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor mass; Tumor-Infiltrating Lymphocytes,Stage IV melanoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,40,NKTR-214,28,null,"A Phase I/II, Multicenter, Dose-Escalation and Expansion Study Of NKTR-214 In Subjects With Locally Advanced Or Metastatic Solid Tumors",15-214-01; 2015-0573; 2016-001134-10; NCT02869295,Nektar Therapeutics,268769,"DECEMBER , 31, 2015",Completed
1,Antigen KI-67; Chemokines; Cytokines; Granzyme B; Interferon gamma; Interleukin-2 receptor alpha chain ; Lymphocytes; Natural killer cells; Perforin-1; Programmed cell death protein 1; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor mass; Tumor-Infiltrating Lymphocytes,Metastatic colorectal cancer,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,40,NKTR-214,28,null,"A Phase I/II, Multicenter, Dose-Escalation and Expansion Study Of NKTR-214 In Subjects With Locally Advanced Or Metastatic Solid Tumors",15-214-01; 2015-0573; 2016-001134-10; NCT02869295,Nektar Therapeutics,268769,"DECEMBER , 31, 2015",Completed
2,CD4+; CD8+; Cytotoxic T-Lymphocytes; Lymphocytes; Natural killer (NK); Natural killer cells; Neopterin; T-Helper Lymphocytes; Thromboplastin time; sIL2R,Advanced solid tumor,null,Phase 1 Clinical,C1,NHS-IL2-LT,57922,66,NHS-IL2-LT; NHS-IL2-LT; cyclophosphamide,48,null,"EMD-521873 in Advanced Solid Tumors, MTD Finding",EMR62235_001; NCT01032681,Merck KGaA,62646,"DECEMBER , 31, 2006",Completed
1,Interleukin-2; Lymphocytes,Solid tumor,null,Phase 1 Clinical,C1,"salmonella-IL-2 cancer therapy (oral, cancer), Botanic Oil Innovations",70160,22,"salmonella-IL-2 cancer therapy (oral, cancer), Botanic Oil Innovations",22,null,"IL-2 Expressing, Attenuated Salmonella Typhimurium in Unresectable Hepatic Spread",0906M68041; 2009LS003; NCT01099631; Protocol #0907-991,Masonic Cancer Center,74920,"APRIL    , 30, 2010",Completed
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Sarcoma,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Metastatic breast cancer,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Metastatic prostate cancer,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Metastatic non small cell lung cancer,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Advanced solid tumor,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,null,Advanced solid tumor,null,Phase 1 Clinical,C1,SO-C101,74941,null,SO-C101; SO-C101; pembrolizumab,null,null,"A first-in-human, phase I/Ib study to evaluate the safety and preliminary efficacy of SO-C101 as monotherapy and in combination with pembrolizumab in selected patients with advanced/metastatic solid tumors",SC103,Sotio AS,352089,"MAY      , 31, 2019",Planned
1,null,Angiosarcoma,null,Phase 2 Clinical,C2,bempegaldesleukin,77588,100,NKTR-214; nivolumab,100,null,A Study of NKTR-214 in Combination With Nivolumab in Patients With Metastatic and/or Locally Advanced Sarcoma,17-366; CA209-9EM; NCT03282344,Memorial Sloan-Kettering Cancer Center,312527,"SEPTEMBER, 12, 2017",Recruiting
3,null,Metastatic renal cell carcinoma,Cabometyx; Sutene,Phase 3 Clinical,C3,bempegaldesleukin,77588,600,NKTR-214; Opdivo,600,null,A Study of NKTR-214 in Combination With Nivolumab Compared With the Investigator's Choice of a Tyrosine Kinase Inhibitor (TKI) Therapy (Either Sunitinib or Cabozantinib Monotherapy) for Advanced Metastatic Renal Cell Carcinoma (RCC),17-214-09; 17-214-09 / CA045002; CA045002; NCT03729245,"Nektar Therapeutics, PPD Development (S) Pte Ltd",358884,"DECEMBER , 28, 2018",Recruiting
1+,CD8-Positive T-Lymphocytes; Cytotoxic T-Lymphocytes; Natural killer cells; T-Helper Lymphocytes,Transitional cell carcinoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,393,NKTR-214; NKTR-262; nivolumab,13,REVEAL,A Study of NKTR-262 in Combination With NKTR-214 and With NKTR-214 Plus Nivolumab in Patients With Locally Advanced or Metastatic Solid Tumor Malignancies,17-262-01; NCT03435640; REVEAL,Nektar Therapeutics,329566,"MARCH    , 15, 2018",Recruiting
1,null,Diffuse large B-cell lymphoma,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,40,NKTR-214; TAK-659,40,null,A Study of TAK-659 in Combination With NKTR-214 in Participants With Advanced Non-Hodgkin Lymphoma (NHL),C34015; NCT03772288; U1111-1218-4372,Takeda Oncology,337393,"APRIL    , 03, 2019",Recruiting
1,null,B-cell lymphoma,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,40,NKTR-214; TAK-659,40,null,A Study of TAK-659 in Combination With NKTR-214 in Participants With Advanced Non-Hodgkin Lymphoma (NHL),C34015; NCT03772288; U1111-1218-4372,Takeda Oncology,337393,"APRIL    , 03, 2019",Recruiting
1,null,Squamous cell carcinoma,null,Phase 1 Clinical,C1,CUE-101,105120,50,CUE-101,50,null,A Phase I Study in Patients With HPV+ Recurrent/Metastatic Head and Neck Squamous Cell Carcinoma,CUE-101-01; NCT03978689,Cue Biopharma Inc,383734,"JUNE     , 30, 2019",Not yet recruiting
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Cytotoxic T-Lymphocytes; Epidermal growth factor receptor; Inducible T-cell costimulator; Programmed cell death 1 ligand 1; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Metastatic non small cell lung cancer,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,480,Halaven; NKTR-214; NKTR-214 + Opdivo; Opdivo; Yervoy; carboplatin; cisplatin; nab-paclitaxel; paclitaxel; pemetrexed disodium,283,PIVOT-02,A Dose-Escalation and Cohort Expansion Study of CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 Antibody (Nivolumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-02; 2016-003543-11; NCT02983045; PIVOT-02,Nektar Therapeutics,281291,"OCTOBER  , 31, 2016",Recruiting
1,Antigen KI-67; Chemokines; Cytokines; Granzyme B; Interferon gamma; Interleukin-2 receptor alpha chain ; Lymphocytes; Natural killer cells; Perforin-1; Programmed cell death protein 1; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor mass; Tumor-Infiltrating Lymphocytes,Metastatic bladder cancer,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,40,NKTR-214,28,null,"A Phase I/II, Multicenter, Dose-Escalation and Expansion Study Of NKTR-214 In Subjects With Locally Advanced Or Metastatic Solid Tumors",15-214-01; 2015-0573; 2016-001134-10; NCT02869295,Nektar Therapeutics,268769,"DECEMBER , 31, 2015",Completed
1,CD40 ligand; Granzyme B; Immunoglobulin G; Interferon gamma ; Interleukin-2; Interleukin-5,Acute myelogenous leukemia,null,Phase 1 Clinical,C1,"autologous IL2 and CD40 ligand-expressing tumor cells (B-CLL), Baylor College of Medicine",45937,11,"autologous IL2 and CD40 ligand-expressing tumor cells (B-CLL), Baylor College of Medicine",10,null,Treating High Risk Leukemia With CD40 Ligand and IL-2 Gene Modified Tumor Vaccine,H6408-LEU LEU; NCT00058799,Baylor College of Medicine,184129,"JUNE     , 30, 1999",Completed
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Metastatic ovary cancer,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
1,null,Chondrosarcoma,null,Phase 2 Clinical,C2,bempegaldesleukin,77588,100,NKTR-214; nivolumab,100,null,A Study of NKTR-214 in Combination With Nivolumab in Patients With Metastatic and/or Locally Advanced Sarcoma,17-366; CA209-9EM; NCT03282344,Memorial Sloan-Kettering Cancer Center,312527,"SEPTEMBER, 12, 2017",Recruiting
1+,CD8-Positive T-Lymphocytes; Cytotoxic T-Lymphocytes; Natural killer cells; T-Helper Lymphocytes,Sarcoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,393,NKTR-214; NKTR-262; nivolumab,13,REVEAL,A Study of NKTR-262 in Combination With NKTR-214 and With NKTR-214 Plus Nivolumab in Patients With Locally Advanced or Metastatic Solid Tumor Malignancies,17-262-01; NCT03435640; REVEAL,Nektar Therapeutics,329566,"MARCH    , 15, 2018",Recruiting
1+,CD8-Positive T-Lymphocytes; Cytotoxic T-Lymphocytes; Natural killer cells; T-Helper Lymphocytes,Merkel cell carcinoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,393,NKTR-214; NKTR-262; nivolumab,13,REVEAL,A Study of NKTR-262 in Combination With NKTR-214 and With NKTR-214 Plus Nivolumab in Patients With Locally Advanced or Metastatic Solid Tumor Malignancies,17-262-01; NCT03435640; REVEAL,Nektar Therapeutics,329566,"MARCH    , 15, 2018",Recruiting
1+,CD8-Positive T-Lymphocytes; Cytotoxic T-Lymphocytes; Natural killer cells; T-Helper Lymphocytes,Metastatic breast cancer,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,393,NKTR-214; NKTR-262; nivolumab,13,REVEAL,A Study of NKTR-262 in Combination With NKTR-214 and With NKTR-214 Plus Nivolumab in Patients With Locally Advanced or Metastatic Solid Tumor Malignancies,17-262-01; NCT03435640; REVEAL,Nektar Therapeutics,329566,"MARCH    , 15, 2018",Recruiting
1,null,Non-Hodgkin lymphoma,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,40,NKTR-214; TAK-659,40,null,A Study of TAK-659 in Combination With NKTR-214 in Participants With Advanced Non-Hodgkin Lymphoma (NHL),C34015; NCT03772288; U1111-1218-4372,Takeda Oncology,337393,"APRIL    , 03, 2019",Recruiting
1,null,Glioblastoma,null,Phase 1/Phase 2 Clinical,C12,AFTVac,55115,24,AFTVac,22,null,A phase I/IIa study to evaluate the safety and efficacy of AFTVac in patients with newly diagnosed glioblastoma multiforme,C000000002,Tokyo Women's Medical College,67525,"JUNE     , 06, 2010",Status not specified
1,null,Renal cell carcinoma,null,Phase 1 Clinical,C1,tucotuzumab celmoleukin,21065,24,interleukin-2; tucotuzumab celmoleukin,24,null,"Interleukin-2 combined with monoclonal antibody therapy in treating patients with kidney, bladder, or lung cancer that has not responded to previous treatment",CDR0000068612; EMD-EMR-62-206-003; MSKCC-00141; NCI-G01-1944; NCT00016237,Memorial Sloan-Kettering Cancer Center,28011,"DECEMBER , 31, 2000",Completed
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Cytotoxic T-Lymphocytes; Epidermal growth factor receptor; Inducible T-cell costimulator; Programmed cell death 1 ligand 1; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Metastatic renal cell carcinoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,480,Halaven; NKTR-214; NKTR-214 + Opdivo; Opdivo; Yervoy; carboplatin; cisplatin; nab-paclitaxel; paclitaxel; pemetrexed disodium,283,PIVOT-02,A Dose-Escalation and Cohort Expansion Study of CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 Antibody (Nivolumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-02; 2016-003543-11; NCT02983045; PIVOT-02,Nektar Therapeutics,281291,"OCTOBER  , 31, 2016",Recruiting
2+,Circulating Tumor Cells; Prostate-specific antigen; Testosterone,Hormone refractory prostate cancer,null,Phase 1 Clinical,C1,bempegaldesleukin,77588,30,CDX-301; NKTR-214; Stereotactic body radiation therapy 30 to 50 Gy; nivolumab; poly-ICLC,30,PORTER,Platform Study for Prostate Researching Translational Endpoints Correlated to Response to Inform Use of Novel Combinations,NCT03835533; PICI0033; PORTER,Parker Institute for Cancer Immunotherapy,369648,"JUNE     , 30, 2019",Not yet recruiting
4+,null,Squamous cell carcinoma,Radiotherapy (60 to 70 Gy); cisplatin,Phase 3 Clinical,C3,Multikine,7401,928,Multikine; Radiotherapy (60 to 70 Gy); cisplatin; cyclophosphamide; indomethacin; zinc,928,IT-MATTERS,"Efficacy and Safety Study of Leukocyte Interleukin, Injection (LI) to Treat Cancer of the Oral Cavity",2010-019952-35; CS001P3; CTRI/2011/05/001716; IT-MATTERS; NCT01265849; SLCTR/2014/017; UKCRN 16800,CEL-SCI Corp,73333,"DECEMBER , 31, 2010",No longer recruiting
2,CD4+; CD8+; Cytotoxic T-Lymphocytes; Lymphocytes; Natural killer (NK); Natural killer cells; Neopterin; T-Helper Lymphocytes; Thromboplastin time; sIL2R,Non-Hodgkin lymphoma,null,Phase 1 Clinical,C1,NHS-IL2-LT,57922,66,NHS-IL2-LT; NHS-IL2-LT; cyclophosphamide,48,null,"EMD-521873 in Advanced Solid Tumors, MTD Finding",EMR62235_001; NCT01032681,Merck KGaA,62646,"DECEMBER , 31, 2006",Completed
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Epidermal growth factor receptor; Programmed cell death 1 ligand 1,Stage IV melanoma,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,75,NKTR-214; atezolizumab; pembrolizumab,75,PROPEL,A Study of a CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 (Pembrolizumab) and of NKTR-214 in Combination With Anti-PD-L1 (Atezolizumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-05; NCT03138889; PROPEL,Nektar Therapeutics,296922,"JUNE     , 09, 2017",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Metastatic esophageal cancer,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Metastatic lung cancer,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Squamous cell carcinoma,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Head and neck tumor,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Stage IV melanoma,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,"HLA class I histocompatibility antigen, A alpha chain; IL-2; p53",Stage IV melanoma,null,Phase 1/Phase 2 Clinical,C12,"ALT-801 (bolus injection, cancer), Altor",57607,25,"ALT-801 (bolus injection, cancer), Altor; cisplatin",22,null,Study of ALT-801 With Cisplatin in Patients With Metastatic Melanoma,CA-ALT-801-02-09; NCT01029873; QUILT-2.008; R44CA097550,Altor BioScience Corp,62586,"FEBRUARY , 28, 2010",Completed
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Metastatic renal cell carcinoma,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
1,null,Liposarcoma,null,Phase 2 Clinical,C2,bempegaldesleukin,77588,100,NKTR-214; nivolumab,100,null,A Study of NKTR-214 in Combination With Nivolumab in Patients With Metastatic and/or Locally Advanced Sarcoma,17-366; CA209-9EM; NCT03282344,Memorial Sloan-Kettering Cancer Center,312527,"SEPTEMBER, 12, 2017",Recruiting
1,null,Advanced solid tumor,null,Phase 1 Clinical,C1,bempegaldesleukin,77588,6,NKTR-214; nivolumab,6,null,An Investigational Study of NKTR-214 Combined With Nivolumab in Japanese Participants With Advanced Solid Tumors,18-214-14; CA045-010; JapicCTI-184237; NCT03745807,Bristol-Myers Squibb Co,360513,"FEBRUARY , 12, 2019",Recruiting
1,null,Metastasis,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,40,NKTR-214; TAK-659,40,null,A Study of TAK-659 in Combination With NKTR-214 in Participants With Advanced Non-Hodgkin Lymphoma (NHL),C34015; NCT03772288; U1111-1218-4372,Takeda Oncology,337393,"APRIL    , 03, 2019",Recruiting
1,null,Carcinoma,null,Phase 1 Clinical,C1,tucotuzumab celmoleukin,21065,24,interleukin-2; tucotuzumab celmoleukin,24,null,"Interleukin-2 combined with monoclonal antibody therapy in treating patients with kidney, bladder, or lung cancer that has not responded to previous treatment",CDR0000068612; EMD-EMR-62-206-003; MSKCC-00141; NCI-G01-1944; NCT00016237,Memorial Sloan-Kettering Cancer Center,28011,"DECEMBER , 31, 2000",Completed
1,CD4(+) T cell,HIV infection,null,Phase 1/Phase 2 Clinical,C12,AIC-284,28450,56,BAY-50-4798,82,null,Safety and Efficacy of BAY-50-4798 in Patients With HIV Infection,10630; NCT00048191; NCT00059462,Bayer Inc,13695,"DECEMBER , 31, 2002",Completed
1,Antigen KI-67; Chemokines; Cytokines; Granzyme B; Interferon gamma; Interleukin-2 receptor alpha chain ; Lymphocytes; Natural killer cells; Perforin-1; Programmed cell death protein 1; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor mass; Tumor-Infiltrating Lymphocytes,Metastatic breast cancer,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,40,NKTR-214,28,null,"A Phase I/II, Multicenter, Dose-Escalation and Expansion Study Of NKTR-214 In Subjects With Locally Advanced Or Metastatic Solid Tumors",15-214-01; 2015-0573; 2016-001134-10; NCT02869295,Nektar Therapeutics,268769,"DECEMBER , 31, 2015",Completed
2,Anti-EMD-273066 antibody,Small-cell lung cancer,cyclophosphamide,Phase 2 Clinical,C2,tucotuzumab celmoleukin,21065,110,EMD-273066; cyclophosphamide,108,null,"A phase II, multicenter, randomized, open-label, parallel-group study to assess the safety and efficacy of EMD-273066 following low-dose cyclophosphamide compared to supportive care alone in patients with small cell lung cancer",2006-004566-13; EMR 62206-017,Merck KGaA,89159,"MARCH    , 06, 2007",Completed
1,null,Condyloma,null,Phase 1 Clinical,C1,Multikine,7401,8,Multikine,8,PAW,Study of Leukocyte Interleukin Injection for Treatment of Perianal Warts,NCT03038828; NMCSD2013.008_UCSF; PAW,CEL-SCI Corp,286956,"APRIL    , 30, 2015",Terminated
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Mesothelioma,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Leiomyosarcoma,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Metastatic pancreas cancer,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
1,null,Metastasis,null,Phase 2 Clinical,C2,bempegaldesleukin,77588,100,NKTR-214; nivolumab,100,null,A Study of NKTR-214 in Combination With Nivolumab in Patients With Metastatic and/or Locally Advanced Sarcoma,17-366; CA209-9EM; NCT03282344,Memorial Sloan-Kettering Cancer Center,312527,"SEPTEMBER, 12, 2017",Recruiting
1,null,Osteosarcoma,null,Phase 2 Clinical,C2,bempegaldesleukin,77588,100,NKTR-214; nivolumab,100,null,A Study of NKTR-214 in Combination With Nivolumab in Patients With Metastatic and/or Locally Advanced Sarcoma,17-366; CA209-9EM; NCT03282344,Memorial Sloan-Kettering Cancer Center,312527,"SEPTEMBER, 12, 2017",Recruiting
1+,CD8-Positive T-Lymphocytes; Cytotoxic T-Lymphocytes; Natural killer cells; T-Helper Lymphocytes,Metastatic renal cell carcinoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,393,NKTR-214; NKTR-262; nivolumab,13,REVEAL,A Study of NKTR-262 in Combination With NKTR-214 and With NKTR-214 Plus Nivolumab in Patients With Locally Advanced or Metastatic Solid Tumor Malignancies,17-262-01; NCT03435640; REVEAL,Nektar Therapeutics,329566,"MARCH    , 15, 2018",Recruiting
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Epidermal growth factor receptor; Programmed cell death 1 ligand 1,Metastatic bladder cancer,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,75,NKTR-214; atezolizumab; pembrolizumab,75,PROPEL,A Study of a CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 (Pembrolizumab) and of NKTR-214 in Combination With Anti-PD-L1 (Atezolizumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-05; NCT03138889; PROPEL,Nektar Therapeutics,296922,"JUNE     , 09, 2017",Recruiting
1,null,Ovary tumor,null,Phase 2 Clinical,C2,tucotuzumab celmoleukin,21065,null,EMD-273066; cyclophosphamide,null,null,Determine if Either of Two Doses of Study Drug Given With a Low-Dose of Cyclophosphamide After a Complete or Partial Response to a Platinum-Based Second-Line Therapy in Women With Recurrent Ovarian Carcinoma Results in a Longer Time to Progression When Compared to the First Time to Progression,EMR 62206-016; NCT00408967,EMD Pharmaceuticals Inc,35819,"DECEMBER , 31, 2006",Terminated
1+,null,Acute myelogenous leukemia,null,Phase 1 Clinical,C1,"ALT-801 (donor lymphocyte infusion, cancer), Altor",63685,null,"ALT-801 (donor lymphocyte infusion, cancer), Altor; G-CSF; cytarabine; fludarabine",null,null,ALT-801-Activated Natural Killer Cells After FLAG Induction for Acute Myeloid Leukemia,CA-ALT-801-02-08; NCT01478074,Altor BioScience Corp,82721,"NOVEMBER , 30, 2011",Terminated
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Metastatic stomach cancer,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
2,Programmed cell death 1 ligand 1; Programmed cell death 1 ligand 1,Transitional cell carcinoma,carboplatin; gemcitabine,Phase 2 Clinical,C2,bempegaldesleukin,77588,165,NKTR-214; nivolumab,165,PIVOT-10,A Randomized Study of NKTR-214 Plus Nivolumab and of Reference Chemotherapy in Cisplatin Ineligible Patients Who Have Locally Advanced or Metastatic Urothelial Cancer With Low PD-L1 Expression,18-214-10; CA045-012; NCT03785925; PIVOT-10,Nektar Therapeutics,364590,"APRIL    , 29, 2019",Recruiting
1+,null,Ovary tumor,null,Phase 1b Clinical,C1B,tucotuzumab celmoleukin,21065,45,EMD-273066; EMD-273066 (0.5 mg) + cyclophosphamide; EMD-273066 (1.0 mg) + cyclophosphamide; EMD-273066 (2.0 mg) + cyclophosphamide; EMD-273066 (3.0 mg) + cyclophosphamide; EMD-273066 (4.0 mg) + cyclophosphamide; cyclophosphamide,27,null,"EMD-273066 in Patients With Recurrent EpCAM Positive Ovarian, Prostate, Colorectal or Non-Small Cell Lung Cancers When First Given Cyclophosphamide",EMR 62206-015; NCT00132522,Merck KGaA,28529,"MAY      , 31, 2005",Completed
1+,null,Colorectal tumor,null,Phase 1b Clinical,C1B,tucotuzumab celmoleukin,21065,45,EMD-273066; EMD-273066 (0.5 mg) + cyclophosphamide; EMD-273066 (1.0 mg) + cyclophosphamide; EMD-273066 (2.0 mg) + cyclophosphamide; EMD-273066 (3.0 mg) + cyclophosphamide; EMD-273066 (4.0 mg) + cyclophosphamide; cyclophosphamide,27,null,"EMD-273066 in Patients With Recurrent EpCAM Positive Ovarian, Prostate, Colorectal or Non-Small Cell Lung Cancers When First Given Cyclophosphamide",EMR 62206-015; NCT00132522,Merck KGaA,28529,"MAY      , 31, 2005",Completed
1+,CD8-Positive T-Lymphocytes; Cytotoxic T-Lymphocytes; Natural killer cells; T-Helper Lymphocytes,Advanced solid tumor,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,393,NKTR-214; NKTR-262; nivolumab,13,REVEAL,A Study of NKTR-262 in Combination With NKTR-214 and With NKTR-214 Plus Nivolumab in Patients With Locally Advanced or Metastatic Solid Tumor Malignancies,17-262-01; NCT03435640; REVEAL,Nektar Therapeutics,329566,"MARCH    , 15, 2018",Recruiting
1+,CD8-Positive T-Lymphocytes; Cytotoxic T-Lymphocytes; Natural killer cells; T-Helper Lymphocytes,Metastatic ovary cancer,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,393,NKTR-214; NKTR-262; nivolumab,13,REVEAL,A Study of NKTR-262 in Combination With NKTR-214 and With NKTR-214 Plus Nivolumab in Patients With Locally Advanced or Metastatic Solid Tumor Malignancies,17-262-01; NCT03435640; REVEAL,Nektar Therapeutics,329566,"MARCH    , 15, 2018",Recruiting
1,null,Follicle center lymphoma,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,40,NKTR-214; TAK-659,40,null,A Study of TAK-659 in Combination With NKTR-214 in Participants With Advanced Non-Hodgkin Lymphoma (NHL),C34015; NCT03772288; U1111-1218-4372,Takeda Oncology,337393,"APRIL    , 03, 2019",Recruiting
2,Programmed cell death 1 ligand 1,Stage III melanoma,null,Phase 3 Clinical,C3,bempegaldesleukin,77588,764,NKTR-214; nivolumab; nivolumab,764,null,A Study of NKTR-214 Combined With Nivolumab versus Nivolumab Alone in Participants With Previously Untreated Inoperable or Metastatic Melanoma,17-214-08; 2018-001423-40; CA045-001; NCT03635983,"Bristol-Myers Squibb Co, bristol myers squibb international corporation belgium",350572,"SEPTEMBER, 14, 2018",Recruiting
2,CD8-Positive T-Lymphocytes; Forkhead box protein P3; Interleukin-7 receptor subunit alpha ; Leukocyte count; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain; Tumor-Infiltrating Lymphocytes,Stage IV melanoma,null,Phase 2a Clinical,C2A,NHS-IL2-LT,57922,12,NHS-IL2-LT; Stereotactic Body Radiation therapy (24 Gy),12,null,MSB-0010445 and Stereotactic Body Radiation Therapy in Advanced Melanoma,EMR 062235-005; NCT01973608,EMD Serono Inc,159844,"JANUARY  , 31, 2014",Terminated
1,null,Condyloma,null,Phase 1 Clinical,C1,Multikine,7401,4,Multikine,4,null,Safety Study of Multikine in the Treatment of Perianal Warts,NCT02115919; NMCSD.2013.0080,"United States Naval Medical Center, San Diego",182223,"APRIL    , 30, 2014",Terminated
1,null,Bladder cancer,null,Phase 1 Clinical,C1,tucotuzumab celmoleukin,21065,24,interleukin-2; tucotuzumab celmoleukin,24,null,"Interleukin-2 combined with monoclonal antibody therapy in treating patients with kidney, bladder, or lung cancer that has not responded to previous treatment",CDR0000068612; EMD-EMR-62-206-003; MSKCC-00141; NCI-G01-1944; NCT00016237,Memorial Sloan-Kettering Cancer Center,28011,"DECEMBER , 31, 2000",Completed
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Epidermal growth factor receptor; Programmed cell death 1 ligand 1,Transitional cell carcinoma,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,75,NKTR-214; atezolizumab; pembrolizumab,75,PROPEL,A Study of a CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 (Pembrolizumab) and of NKTR-214 in Combination With Anti-PD-L1 (Atezolizumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-05; NCT03138889; PROPEL,Nektar Therapeutics,296922,"JUNE     , 09, 2017",Recruiting
1,Antigen KI-67; Chemokines; Cytokines; Granzyme B; Interferon gamma; Interleukin-2 receptor alpha chain ; Lymphocytes; Natural killer cells; Perforin-1; Programmed cell death protein 1; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor mass; Tumor-Infiltrating Lymphocytes,Metastatic non small cell lung cancer,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,40,NKTR-214,28,null,"A Phase I/II, Multicenter, Dose-Escalation and Expansion Study Of NKTR-214 In Subjects With Locally Advanced Or Metastatic Solid Tumors",15-214-01; 2015-0573; 2016-001134-10; NCT02869295,Nektar Therapeutics,268769,"DECEMBER , 31, 2015",Completed
1,Antigen KI-67; Chemokines; Cytokines; Granzyme B; Interferon gamma; Interleukin-2 receptor alpha chain ; Lymphocytes; Natural killer cells; Perforin-1; Programmed cell death protein 1; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor mass; Tumor-Infiltrating Lymphocytes,Advanced solid tumor,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,40,NKTR-214,28,null,"A Phase I/II, Multicenter, Dose-Escalation and Expansion Study Of NKTR-214 In Subjects With Locally Advanced Or Metastatic Solid Tumors",15-214-01; 2015-0573; 2016-001134-10; NCT02869295,Nektar Therapeutics,268769,"DECEMBER , 31, 2015",Completed
1+,"Anti-ALT-801; Cellular tumor antigen p53; HLA class I histocompatibility antigen, A alpha chain; HLA-A*0201/p53 aa 264 to 272; Interferon gamma; Interleukin-10; Interleukin-2 (IL-2); Interleukin-6; Tumor necrosis factor",Bladder cancer,null,Phase 1/Phase 2 Clinical,C12,"ALT-801 (bolus injection, cancer), Altor",57607,52,"ALT-801 (bolus injection, cancer), Altor; gemcitabine; gemcitabine + ALT-801",52,null,A Study of ALT-801 in Patients With Bacillus Calmette-Guerin (BCG) Failure Non-Muscle Invasive Bladder Cancer,CA-ALT-801-01-12; NCT01625260,Altor BioScience Corp,88603,"APRIL    , 30, 2012",No longer recruiting
1+,null,Non-small-cell lung cancer,null,Phase 1b Clinical,C1B,tucotuzumab celmoleukin,21065,45,EMD-273066; EMD-273066 (0.5 mg) + cyclophosphamide; EMD-273066 (1.0 mg) + cyclophosphamide; EMD-273066 (2.0 mg) + cyclophosphamide; EMD-273066 (3.0 mg) + cyclophosphamide; EMD-273066 (4.0 mg) + cyclophosphamide; cyclophosphamide,27,null,"EMD-273066 in Patients With Recurrent EpCAM Positive Ovarian, Prostate, Colorectal or Non-Small Cell Lung Cancers When First Given Cyclophosphamide",EMR 62206-015; NCT00132522,Merck KGaA,28529,"MAY      , 31, 2005",Completed
1+,null,Carcinoma,null,Phase 1b Clinical,C1B,tucotuzumab celmoleukin,21065,45,EMD-273066; EMD-273066 (0.5 mg) + cyclophosphamide; EMD-273066 (1.0 mg) + cyclophosphamide; EMD-273066 (2.0 mg) + cyclophosphamide; EMD-273066 (3.0 mg) + cyclophosphamide; EMD-273066 (4.0 mg) + cyclophosphamide; cyclophosphamide,27,null,"EMD-273066 in Patients With Recurrent EpCAM Positive Ovarian, Prostate, Colorectal or Non-Small Cell Lung Cancers When First Given Cyclophosphamide",EMR 62206-015; NCT00132522,Merck KGaA,28529,"MAY      , 31, 2005",Completed
1+,CD8-Positive T-Lymphocytes; Cytotoxic T-Lymphocytes; Natural killer cells; T-Helper Lymphocytes,Stage IV melanoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,393,NKTR-214; NKTR-262; nivolumab,13,REVEAL,A Study of NKTR-262 in Combination With NKTR-214 and With NKTR-214 Plus Nivolumab in Patients With Locally Advanced or Metastatic Solid Tumor Malignancies,17-262-01; NCT03435640; REVEAL,Nektar Therapeutics,329566,"MARCH    , 15, 2018",Recruiting
1,null,Metastatic head and neck cancer,null,Phase 1 Clinical,C1,CUE-101,105120,50,CUE-101,50,null,A Phase I Study in Patients With HPV+ Recurrent/Metastatic Head and Neck Squamous Cell Carcinoma,CUE-101-01; NCT03978689,Cue Biopharma Inc,383734,"JUNE     , 30, 2019",Not yet recruiting
1,null,Lung tumor,null,Phase 1 Clinical,C1,tucotuzumab celmoleukin,21065,24,interleukin-2; tucotuzumab celmoleukin,24,null,"Interleukin-2 combined with monoclonal antibody therapy in treating patients with kidney, bladder, or lung cancer that has not responded to previous treatment",CDR0000068612; EMD-EMR-62-206-003; MSKCC-00141; NCI-G01-1944; NCT00016237,Memorial Sloan-Kettering Cancer Center,28011,"DECEMBER , 31, 2000",Completed
4+,null,Metastatic head and neck cancer,Radiotherapy (60 to 70 Gy); cisplatin,Phase 3 Clinical,C3,Multikine,7401,928,Multikine; Radiotherapy (60 to 70 Gy); cisplatin; cyclophosphamide; indomethacin; zinc,928,IT-MATTERS,"Efficacy and Safety Study of Leukocyte Interleukin, Injection (LI) to Treat Cancer of the Oral Cavity",2010-019952-35; CS001P3; CTRI/2011/05/001716; IT-MATTERS; NCT01265849; SLCTR/2014/017; UKCRN 16800,CEL-SCI Corp,73333,"DECEMBER , 31, 2010",No longer recruiting
1,Antigen KI-67; Chemokines; Cytokines; Granzyme B; Interferon gamma; Interleukin-2 receptor alpha chain ; Lymphocytes; Natural killer cells; Perforin-1; Programmed cell death protein 1; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor mass; Tumor-Infiltrating Lymphocytes,Metastatic renal cell carcinoma,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,40,NKTR-214,28,null,"A Phase I/II, Multicenter, Dose-Escalation and Expansion Study Of NKTR-214 In Subjects With Locally Advanced Or Metastatic Solid Tumors",15-214-01; 2015-0573; 2016-001134-10; NCT02869295,Nektar Therapeutics,268769,"DECEMBER , 31, 2015",Completed
1+,ALK receptor; B-Raf proto-oncogene serine/threonine-protein kinase; Cytotoxic T-Lymphocytes; Epidermal growth factor receptor; Inducible T-cell costimulator; Programmed cell death 1 ligand 1; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Advanced solid tumor,null,Phase 1/Phase 2 Clinical,C12,bempegaldesleukin,77588,480,Halaven; NKTR-214; NKTR-214 + Opdivo; Opdivo; Yervoy; carboplatin; cisplatin; nab-paclitaxel; paclitaxel; pemetrexed disodium,283,PIVOT-02,A Dose-Escalation and Cohort Expansion Study of CD122-Biased Cytokine (NKTR-214) in Combination With Anti-PD-1 Antibody (Nivolumab) in Patients With Select Advanced or Metastatic Solid Tumors,16-214-02; 2016-003543-11; NCT02983045; PIVOT-02,Nektar Therapeutics,281291,"OCTOBER  , 31, 2016",Recruiting
1,CD40 ligand; Granzyme B; Immunoglobulin G; Interferon gamma ; Interleukin-2; Interleukin-5,Myelodysplastic syndrome,null,Phase 1 Clinical,C1,"autologous IL2 and CD40 ligand-expressing tumor cells (B-CLL), Baylor College of Medicine",45937,11,"autologous IL2 and CD40 ligand-expressing tumor cells (B-CLL), Baylor College of Medicine",10,null,Treating High Risk Leukemia With CD40 Ligand and IL-2 Gene Modified Tumor Vaccine,H6408-LEU LEU; NCT00058799,Baylor College of Medicine,184129,"JUNE     , 30, 1999",Completed
2,null,Metastatic renal cell carcinoma,tyrosine kinase inhibitor (TKI) monotherapy,Phase 3 Clinical,C3,bempegaldesleukin,77588,null,bempegaldesleukin; nivolumab,null,PIVOT-09,A phase III clinical study to assess the effect of bempegaldesleukin in combination with nivolumab compared to tyrosine kinase inhibitor (TKI) monotherapy in patients with advanced metastatic renal cell carcinoma,PIVOT-09,Nektar Therapeutics,372111,"DECEMBER , 31, 2018",Recruiting
2,Creatinine; Cytokines; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-6; Leukocyte count; Lymphocytes; Mononuclear leukocytes; Natural killer cells; Neutrophils; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Metastatic colorectal cancer,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,300,ALKS-4230; ALKS-4230; pembrolizumab,36,ARTISTRY-1,A Study of the Effects of ALKS-4230 on Subjects With Solid Tumors,ALK4230-A101; ARTISTRY-1; NCT02799095,Alkermes plc,263216,"JULY     , 31, 2016",Recruiting
1,null,Leiomyosarcoma,null,Phase 2 Clinical,C2,bempegaldesleukin,77588,100,NKTR-214; nivolumab,100,null,A Study of NKTR-214 in Combination With Nivolumab in Patients With Metastatic and/or Locally Advanced Sarcoma,17-366; CA209-9EM; NCT03282344,Memorial Sloan-Kettering Cancer Center,312527,"SEPTEMBER, 12, 2017",Recruiting
1,null,Histiocytoma,null,Phase 2 Clinical,C2,bempegaldesleukin,77588,100,NKTR-214; nivolumab,100,null,A Study of NKTR-214 in Combination With Nivolumab in Patients With Metastatic and/or Locally Advanced Sarcoma,17-366; CA209-9EM; NCT03282344,Memorial Sloan-Kettering Cancer Center,312527,"SEPTEMBER, 12, 2017",Recruiting
1,null,Mantle cell lymphoma,null,Phase 1b Clinical,C1B,bempegaldesleukin,77588,40,NKTR-214; TAK-659,40,null,A Study of TAK-659 in Combination With NKTR-214 in Participants With Advanced Non-Hodgkin Lymphoma (NHL),C34015; NCT03772288; U1111-1218-4372,Takeda Oncology,337393,"APRIL    , 03, 2019",Recruiting
2,Cytokines; Mononuclear leukocytes,Advanced solid tumor,null,Phase 1/Phase 2 Clinical,C12,ALKS-4230,86441,230,ALKS-4230; ALKS-4230; Keytruda,230,ARTISTRY-2,A Dose-Escalation and Cohort Expansion Study of Subcutaneously-Administered Cytokine (ALKS-4230) as a Single Agent and in Combination With Anti-PD-1 Antibody (pembrolizumab) in Patients With Select Advanced or Metastatic Solid Tumors,ALKS 4230-001; ARTISTRY-2; NCT03861793,Alkermes plc,372173,"FEBRUARY , 26, 2019",Recruiting</ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.QueryCsvResponse>