<?xml version="1.0" ?><ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.AnalysisCsvResponse xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns2="local" xsi:type="xs:base64Binary">ArmCount,Biomarkers,Condition,Controls,DevStatus,DevStatusId,Drug,DrugId,EnrollmentCount,Interventions,Patients,ProtocolAcronym,ProtocolTitle,Reference,Sponsor,TrialId,TrialStartDate,TrialStatus
2,null,Chronic obstructive pulmonary disease,fluticasone propionate; salmeterol,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,100,fluticasone furoate; vilanterol,100,null,"A 12-week study to compare the 24 h action to restore lung function with the combination of fluticasone furoate (FF) / vilanterol (VI), produced in the form of powder for inhalation and used by patients with chronic obstructive pulmonary disease (COPD), qd, and the combination of salmeterol / fluticasone propionate (FP), in the form of powder for inhalation, applied bid",2010-021059-25; HZC113107,GlaxoSmithKline plc,165373,"FEBRUARY , 22, 2011",Completed
3+,null,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",81111,50,"Charcoal; Seretide Diskus; Seretide Diskus; fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion; fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",50,null,Comparison of Salmeterol and Fluticasone Propionate Absorption From Salmeterol/Fluticasone Easyhaler and Seretide Diskus,3106007; EudraCT 2012-00378-41; NCT01766843,Orion Corp,104633,"JANUARY  , 31, 2013",Completed
2,null,Ocular infection,prednisolone acetate,Phase 3 Clinical,C3,"tobramycin + prednisolone acetate (ophthalmic), ISTA",53134,132,"tobramycin + prednisolone acetate (ophthalmic), ISTA",132,null,A Bioequivalence Study of Tobramycin and Prednisolone Acetate Compared to PredForte,ISTA-TP-CPK01; NCT00198523,ISTA Pharmaceuticals Inc,10077,"JULY     , 31, 2005",Completed
2+,null,Retinopathy,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,9,aflibercept; aflibercept; triamcinolone acetonide; verteporfin,9,PED,A Study Testing if Medicine Can Make Pigment Epithelium Detachments Regress and Stabilize the Vision in Eyes,2012/1743; NCT01746875; PED,Norwegian University of Science and Technology (NTNU),101391,"FEBRUARY , 28, 2014",Terminated
2,null,Atopic dermatitis,mometasone,Phase 2 Clinical,C2,"auranofin + mometasone furoate (Sorafin dermatological formulation), Viralytics",57631,56,Sorafin-AD,52,null,Phase II proof-of-concept trial of Sorafin-AD ointment versus topical mometasone in adults with atopic dermatitis,PSX-AD-001,Viralytics Ltd,69513,"AUGUST   , 09, 2005",Status not specified
2,null,Asthma,null,Phase not specified,NS,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,658,"ciclesonide (metered dose inhaler), Nycomed; fluticasone",528,STAR,"A randomized, open-label, parallel-group study to compare the safety and efficacy of twice-daily inhaled ciclesonide and fluticasone propionate in patients with moderate-to-severe persistent asthma",BY9010/M1-134; STAR,Takeda GmbH,76911,"NOVEMBER , 28, 2006",Status not specified
2,null,Perennial allergic rhinitis,fluticasone propionate,Phase 3 Clinical,C3,dexamethasone cipecilate,12806,null,dexamethasone cipecilate,null,null,"Phase III, parallel group, comparative trial of NS-126C and fluticasone propionate in patients with perennial allergic rhinitis",JapicCTI-050155,"Hisamitsu Pharmaceutical Co Inc, Nippon Shinyaku Co Ltd",104452,"OCTOBER  , 20, 2005",Completed
3,Glucose; Insulin; Serum albumin (ALB); Serum corticosteroid-binding globulin (CBG); Serum cortisol,Adrenal gland hypofunction,hydrocortisone,Phase 1 Clinical,C1,"hydrocortisone (oral granules, adrenal insufficiency), Diurnal/Emerge Health/Medison Pharma",79146,14,"dexamethasone; hydrocortisone (oral granules, adrenal insufficiency), Diurnal",14,null,An Investigational Study of Hydrocortisone,INFACORT 002; NCT01960530,Diurnal Ltd,157428,"OCTOBER  , 31, 2013",Completed
1,null,Xerophthalmia,null,Phase 2 Clinical,C2,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,722,difluprednate,722,null,Evaluation of Anti-Inflammatory Treatment in Dry Eye Patients,C-10-078; NCT01276223,Alcon Research Ltd,73801,"FEBRUARY , 28, 2011",Completed
3,Forced expiratory volume; Peak expiratory flow rate,Asthma,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,430,Relovair; fluticasone; fluticasone furoate,430,null,A Study to Compare the Efficacy and Safety of Fluticasone Furoate (FF) 100 microg qd With Fluticasone Propionate (FP) 250 microg bid and FP 100 microg bid in Well-Controlled Asthmatic Japanese Subjects,201135; JapicCTI-142503; NCT02094937,GlaxoSmithKline plc,178963,"MARCH    , 27, 2014",Completed
2,FEV1; serum cortisol,Asthma,fluticasone propionate,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,40,GW685698X,40,null,"A phase II, multicenter, randomized, double-blind, placebo-controlled, incomplete block, three-way crossover study to determine the effect of repeat inhaled doses of GW685698X compared to fluticasone propionate, on airway responsiveness to adenosine 5'-monophosphate (AMP) in patients with mild asthma",FFA10022,GlaxoSmithKline plc,87425,"SEPTEMBER, 11, 2003",Completed
2,null,Allergic rhinitis,fluticasone propionate,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,360,fluticasone furoate,360,null,Comparator Study Evaluating Patient Experience And Preference Of FFNS versus FPNS,FFU105927; NCT00519636,GlaxoSmithKline plc,11559,"AUGUST   , 31, 2007",Completed
2,null,Psoriasis,"calcipotriol + betamethasone dipropionate, LEO",Phase 2 Clinical,C2,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique",78444,20,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique",20,null,"An Exploratory, Open-Label, Intra-Individual, Active-Controlled Study Comparing the Efficacy and Safety of Betesil Versus Daivobet for the Treatment of Chronic Plaque Psoriasis",08F/BET01; EudraCT 2008-005518-29,Laboratoires Genevrier SA,118017,"DECEMBER , 01, 2008",Recruiting
3,null,Alopecia areata,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,60,minoxidil; tacrolimus; triamcinolone acetonide,60,null,"Comparative Study of the Safety and Efficacy Of Intralesional Steroid, Tacrolimus (0.1%) Ointment and Minoxidil (5%) in the Treatment of Alopecia Areata",CTRI/2013/08/003880,Father Muller Med Coll,154386,"OCTOBER  , 12, 2012",Recruiting
1,Retinal thickness,Eale disease,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,100,triamcinolone acetonide,100,null,Clinical study about ophthalmic local administrations of triamcinolone acetonide for macular edema and/or retinal periphlebitis,JPRN-UMIN000005778,Yamagata University,121608,"JULY     , 01, 2006",Recruiting
1,null,Gastrointestinal disease,null,Phase 2 Clinical,C2,"beclomethasone dipropionate (oral, radiation enteritis), Soligenix",49161,2,orBec,2,null,Study of orBec as Monotherapy in the Treatment of Patients With Upper GI Symptoms Caused by Chronic Graft Versus Host Disease (GVHD),BDP-GVHD-08; NCT01925950,Soligenix Inc,151308,"DECEMBER , 31, 2013",Terminated
4,null,Skin atrophy,Karison® Creme; mometasone furoate; nortriptyline HCl,Phase 1 Clinical,C1,"mometasone + nortriptyline (topical cream, psoriasis), CombinatoRx",56234,20,CRx-191,20,null,Phase I study of topical CRx-191 in normal healthy volunteers,CRx-191-002; EudraCT Number: 2006-005903-33; NCT00544687,Zalicus Inc,23649,"SEPTEMBER, 30, 2007",Completed
1+,null,Crohns disease,null,Phase not specified,NS,"budesonide (gastroresistant capsule, Crohn's disease/ulcerative colitis), Dr Falk Pharma/Salix",59671,130,Budenofalk; Entocort; Flagyl; Medrol; azathioprine; folic acid; infliximab; methotrexate; prednisolone,130,null,"The Ideal Management of Crohn's Disease: Top-Down Versus Step-Up Strategies - A Prospective, Controlled Trial in the Benelux",ISRCTN61510219; NTR379,"Academic Medical Center, University of Amsterdam",120593,"MAY      , 01, 2001",Completed
1,intraocular pressure,Macular edema,null,Phase 1 Clinical,C1,"triamcinolone acetonide (controlled release/intravitreal injection/Verisome, diabetic macular edema), EyePoint",60951,10,IBI-20089,10,null,"An Open-Label, Dose-Escalation Study of the Safety and Tolerability of 20089 (Triamcinolone Acetonide Intravitreal Injection) in the Treatment of Patients with Cystoid Macular Edema Associated with Retinal Vein Occlusion or Cataract Surgery",ACTRN12608000603314,Icon Bioscience Inc,120774,"MAY      , 11, 2007",Completed
1,null,Retinitis pigmentosa,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,87,triamcinolone acetonide,87,null,Intravitreal Injection of Triamcinolone Acetonide in Retinitis,IRCT201104266293N1,Tehran University of Medical Sciences,122471,"SEPTEMBER, 23, 2007",No longer recruiting
1,Adrenocorticotropic Hormone; Hydrocortisone,Ulcerative colitis,null,Phase 2 Clinical,C2,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,2,Entocort; hydrocortisone,2,null,The Use of Oral Budesonide and Rectal Hydrocortisone for the Treatment of Active Ulcerative Colitis,H-30365; NCT00805285,University of Maryland,193417,"OCTOBER  , 31, 2008",Terminated
2+,6 beta-Hydroxycortisol; Hydrocortisone,Asthma,albuterol; montelukast,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,111,Ellipta; albuterol; montelukast,111,null,Effect of Fluticasone Furoate Inhalation Powder on the Hypothalamic-Pituitary-Adrenocortical Axis of Children Aged 5 to 11 Years With Asthma,107118; NCT02483975,GlaxoSmithKline plc,233443,"OCTOBER  , 09, 2015",Completed
3,Blood pressure; Cortisol; Heart rate; Peak expiratory flow rate; Potassium,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,16,GW-642444M; GW-685698X; fluticasone furoate + vilanterol,16,null,Comparing Two Respiratory Drugs When Used In Combination And Separately From A Novel Inhaler Device In Healthy Subjects,HZA105871; NCT00538057,GlaxoSmithKline plc,23398,"OCTOBER  , 02, 2007",Completed
1,null,Asthma,null,Phase 4 Clinical,C4,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,1121,Alvesco,1121,ACCEPT,Asthma Care With Alvesco (Ciclesonide) in Primary Care in Adults,ACCEPT; BY9010/CA-102; NCT00404547,AstraZeneca plc,22240,"NOVEMBER , 30, 2006",Completed
1,CRP; cytokines,Rheumatoid arthritis,null,Phase 2 Clinical,C2,"prednisolone + paroxetine (rheumatoid arthritis, inflammation), CombinatoRx",45643,220,"prednisolone + paroxetine (rheumatoid arthritis, inflammation), CombinatoRx",220,null,"A phase II, multicenter, randomized, blinded study of 14 weeks duration comparing the effect of CRx-139 plus DMARD therapy to that of steroid plus DMARD therapy using ACR-20 in subjects with active rheumatoid arthritis partially responsive to the DMARD",CRx-139-002; CRx-139-RA; CZ::Protocol CRx-139-002; EudraCT 2004-004995-35; Protocol CRx-139-002,Zalicus Inc,133649,"FEBRUARY , 24, 2006",Recruiting
2+,null,Chronic obstructive pulmonary disease,"prednisone; salbutamol, GlaxoSmithKline",Phase 2 Clinical,C2,"beclomethasone dipropionate, (CFC-free), Teva",44414,6,"beclometasone (inhaled, CFC-free), Teva; prednisone; salbutamol, GlaxoSmithKline",6,null,Repeat Emergency Department Visits Among Patients With Asthma and COPD,754754; NCT02499887,State University of New York,235195,"JANUARY  , 31, 2016",Terminated
2,null,Asthma,"beclometasone (inhaled, CFC-free), Teva",Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,1568,"ciclesonide (metered dose inhaler), Nycomed",1568,null,Effects of ciclesonide and beclomethasone on lens opacification in adult subjects with moderate to severe persistent asthma,NCT00254956; SFY6160; XRP1526B/3027,Sanofi SA,22103,"JANUARY  , 31, 2004",Completed
2,null,Ulcerative proctitis,null,Phase 3 Clinical,C3,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,252,Rectabul; budesonide rectal suppository,252,null,Novel budesonide suppository versus budesonide foam in acute ulcerative proctitis,2016-001921-15; BUS-4/UCA,Dr Falk Pharma GmbH,291869,"MARCH    , 09, 2017",Recruiting
1,null,Asthma,null,Phase 1 Clinical,C1,"870086 (inhaled, asthma), GlaxoSmithKline",54598,20,"870086 (inhaled, asthma), GlaxoSmithKline",20,null,Examine the Effect of Repeat Inhaled Doses of GW-870086X on Lung Function in Mild Asthmatic Male Subjects,NCT00483899; SIG102335,GlaxoSmithKline plc,22317,"OCTOBER  , 31, 2005",Completed
1,null,Pain,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,150,triamcinolone acetonide,150,null,"The Role Of Intra-Operative Peri-Articular Steroid Injection In Reducing Post-Operative Pain And Improving Knee Function After Total Knee Arthroplasty: a Prospective, Randomized, Controlled Trial",ACTRN12609000345280; ANZCTR83890,Rhone-Poulenc Rorer Ltd,134330,"JUNE     , 01, 2009",Not yet recruiting
1,null,Allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,288,"fluticasone furoate (nasal, allergic rhinitis), GSK",288,null,A Study To Evaluate The Efficacy And Safety Of A Once-Daily Investigational Nasal Spray In Adults And Adolescents With Perennial Allergic Rhinitis (PAR),FFR30002; NCT00103454,GlaxoSmithKline plc,13384,"JANUARY  , 31, 2005",Completed
2,null,Choroidal neovascularization,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,40,photodynamic therapy; triamcinolone acetonide; verteporfin,40,null,"Comparison of Reduced Fluence Versus Standard Photodynamic Therapy (In Combination With Intravitreal Triamcinolone Acetonide): A Prospective, Randomized, Comparative Study",EudraCT 2005-000776-41,Medical University of Vienna,139550,"JUNE     , 22, 2005",Recruiting
1,null,Asthma,null,Phase 4 Clinical,C4,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,4820,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",4820,null,"A 12-Month, Open-Label, Randomized, Effectiveness Study to Evaluate Fluticasone Furoate (FF, GW-685698/vilanterol (VI, GW-642444) Inhalation Powder Delivered Once Daily via a Novel Dry Powder Inhaler Compared With Usual Maintenance Therapy in Subjects With Asthma",CCRN 997; UKCRN:13263,GlaxoSmithKline plc,139569,null,Recruiting
1,null,Spinal stenosis,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,60,lidocaine; triamcinolone acetonide,60,null,Effect Of Pulsed Radiofrequency Treatment Of The Dorsal Root Ganglion In Spinal Stenosis With Intermittent Neurogenic Claudication,KCT0000743,Asan Medical Center,143635,"OCTOBER  , 06, 2011",Completed
1,Intraocular pressure,Diabetic retinopathy,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,23,triamcinolone acetonide,23,null,Efficacy of Intravitreal Triamcinolone Acetonide before Pan Retinal Photocoagulation for Improvement of Visual Acuity and Macular Edema in Diabetic Retinopathy,ACTRN12607000225415; HREC 356,Farabi Eye Hospital,143664,"NOVEMBER , 01, 2005",Completed
1,Intraocular pressure,Diabetic macular edema,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,19,triamcinolone acetonide,19,null,The Use of Intravitreal Injection of Triamcinolone Acetonide in Diabetic Patients to Reduce Diabetic Macular Edema,ACTRN12613000249752,Suez Canal University,138776,"MARCH    , 25, 2010",Completed
2,intraocular pressure,Ocular inflammation,Tobradex,Phase not specified,NS,"dexamethasone + netilmicin (ophthalmic), SIFI",56575,103,Netildex,103,null,Evaluation of the efficacy and safety of a new steroid-antibiotic ophthalmic gel as anti-inflammatory and antimicrobial topical treatment following microincisional vitreo-retinal surgery,2008-005082-64,SIFI Societa Industria Farmaceutica Italiana SpA,138949,"OCTOBER  , 13, 2008",Status not specified
1,null,Graft versus host disease,null,Phase 3a Clinical,C3A,"beclomethasone dipropionate (oral, radiation enteritis), Soligenix",49161,140,beclomethasone dipropionate; prednisone,140,SUPPORTS,Study of orBec With Prednisone Therapy in the Treatment of Patients With Graft Versus Host Disease (GVHD),2010-022247-37; ACTRN12610000593033; BDP-GVHD-03; NCT00926575; SUPPORTS,Soligenix Inc,58209,"OCTOBER  , 31, 2009",Terminated
1,null,Choroid disease,null,Phase 1 Clinical,C1,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,16,fluocinolone acetonide,16,null,Fluocinolone implant to treat macular degeneration,01-EI-0058; 010058; NCT00008515,National Eye Institute,4710,"JANUARY  , 31, 2001",Completed
4,Forced expiratory volume,Chronic obstructive pulmonary disease,Symbicort; budesonide; formoterol,Phase 3 Clinical,C3,"budesonide + formoterol (inhalant aerosol, chronic obstructive pulmonary disease), Pearl Therapeutics",70143,3316,PT-009,2389,TELOS,"Study to Assess Efficacy and Safety of PT-009 Compared to PT-005, PT-008 and Symbicort Turbuhaler on Lung Function Over 24 Weeks in Subjects With Moderate to Very Severe COPD",2016-000154-34; D7820C00001; NCT02766608; PT009002; TELOS,"AstraZeneca AB, Pearl Therapeutics Inc",260435,"MAY      , 31, 2016",Completed
1,null,Ulcerative colitis,null,Phase 3 Clinical,C3,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,120,Rectabul,120,null,Phase III study of AJG-511 in patients with active ulcerative colitis,AJG511/CT1; JapicCTI-142704,EA Pharma Co Ltd,215968,"NOVEMBER , 30, 2014",Completed
1,Forced expiratory volume; Peak expiratory flow rate,Asthma,null,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,1113,Qvar,1113,null,A Safety and Efficacy Study of Beclomethasone Dipropionate Delivered Via Breath-Actuated Inhaler (BAI) or Metered-Dose Inhaler (MDI) in Participants >/= 12 Years Old With Persistent Asthma,2013-003397-27; BDB-AS-301; DRKS00005827; NCT02031640,Teva Pharmaceutical Industries Ltd,167002,"DECEMBER , 31, 2013",Completed
1,Serum cortisol,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,48,GW-685698X,48,null,A Study of GW-685698X in Healthy Japanese Male Subjects,112018; HZA112018; NCT00972673,GlaxoSmithKline plc,60174,"SEPTEMBER, 24, 2008",Completed
1,Anterior chamber,Cataract,null,Phase 2 Clinical,C2,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,45,EGP-437,45,null,Safety and Efficacy of Iontophoretic Dexamethasone Phosphate Delivery Prior to Implantation of a Posterior Chamber IOL,EGP-437-005; NCT01602068,Eyegate Pharmaceuticals Inc,87599,"MAY      , 31, 2012",Completed
3,Afamin; Afamin; Angiopoietin-2; Angiopoietin-2; Angiotensinogen; Angiotensinogen; Ankle motion; Blood pressure; Body Mass Index; Body height; Body temperature; C-C motif chemokine 22; C-C motif chemokine 22; Collagen type I trimeric cross-linked peptide; Dystrophin; Elbow motion; Fibrinogen gamma chain; Fibrinogen gamma chain; Glucose; Growth hormone receptor; Growth hormone receptor; Heart rate; Hydrocortisone; Insulin; Insulin; Insulin-like growth factor binding protein 2; Insulin-like growth factor binding protein 2; Insulin-like growth factor-binding protein 5; Insulin-like growth factor-binding protein 5; Integrin alpha-1; Integrin alpha-1; Integrin alpha1beta1; Integrin alpha1beta1; Interleukin-22 receptor subunit alpha-2; Interleukin-22 receptor subunit alpha-2; Intraocular pressure; Knee motion; Leptin; Leptin; Low affinity immunoglobulin epsilon Fc receptor; Low affinity immunoglobulin epsilon Fc receptor; Lymphocytes; Lymphotoxin-alpha; Lymphotoxin-alpha; Lymphotoxin-beta; Lymphotoxin-beta; Macrophage metalloelastase; Macrophage metalloelastase; Osteocalcin; Procollagen Type I N-terminal peptide; Respiratory frequency; Saposin-D; Saposin-D; Six-minute walk distance; Stromelysin-1; Stromelysin-1; T-lymphocyte surface antigen Ly-9; T-lymphocyte surface antigen Ly-9; Total body mass,Duchenne dystrophy,prednisone; vamorolone; vamorolone,Phase 2b Clinical,C2B,vamorolone,70712,120,vamorolone,120,VISION DMD,A Study to Assess the Efficacy and Safety of Vamorolone in Boys With Duchenne Muscular Dystrophy (DMD),118942; 2017-002704-27; FDA IND 118942; NCT03439670; VBP15-004; VBP15-004-A1; VBP15-004-A2; VBP15-004-A3; VISION DMD,ReveraGen BioPharma Inc,329964,"JUNE     , 19, 2018",Recruiting
1,null,Asthma,null,Phase 1 Clinical,C1,"budesonide + procaterol hydrochloride (MDI formulation, asthma), Intech Biopharm",91606,16,"budesonide + procaterol hydrochloride (MDI formulation, asthma), Intech Biopharm",16,null,"Multiple-dose, Pharmacokinetics Study of 'SYN-006 HFA MDI' Administered Orally to Healthy Volunteers",MCPK10002J1; NCT02165033,"Benefit Biotechnology Co, Ltd, Intech Biopharm Ltd",203681,"NOVEMBER , 30, 2012",Completed
1,Alkaline phosphatase; Blood pressure; Body temperature; Estradiol; Follicle-stimulating hormone; Glucose; Heart rate; Hydrocortisone; Luteinizing Hormone; Lymphocytes; PR interval; Prostate-specific antigen; QRS complex; QT interval; Sex hormone-binding globulin; Testosterone,Bone metastases,null,Phase 1/Phase 2 Clinical,C12,"dexamethasone (liposome formulation, castration resistant prostate carcinoma/multiple myeloma), Enceladus",77410,10,Oncocort,10,null,Study investigating intravenously administrated Oncocort in patients with metastatic prostate cancer,2016-003121-42; CHDR1635,Enceladus Pharmaceuticals,291118,"NOVEMBER , 28, 2016",Recruiting
1,null,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"beclomethasone dipropionate  (waterless nasal spray, allergic rhinitis), Teva",76229,547,Qnaze,547,null,Study of an Investigational Nasal Aerosol or Placebo in Children (Ages 4 to 11) With Perennial Allergic Rhinitis (PAR),BDP-AR-306; NCT01783548,Teva Pharmaceutical Industries Ltd,107743,"JANUARY  , 31, 2013",Completed
2,null,Herpesvirus infection,acyclovir,Phase 3 Clinical,C3,"aciclovir + hydrocortisone (dermatological), Medivir",17335,1443,ME-609,2437,null,Efficacy And Safety Study Of ME-609 And Acyclovir For Treatment Of Herpes Simplex Labialis,609-04; NCT00361881,Medivir AB,11577,"JULY     , 31, 2006",Completed
2,Forced expiratory volume,Chronic obstructive pulmonary disease,formoterol,Phase 3 Clinical,C3,"budesonide + formoterol (inhalant aerosol, chronic obstructive pulmonary disease), Pearl Therapeutics",70143,1941,PT-009,1941,Sophos,A Study to Assess the Efficacy and Safety of PT-009 Compared to PT-005 on COPD Exacerbations Over a 52 Weeks Period in Subjects With Moderate to Very Severe COPD,2016-000155-28; D7820C00002; NCT02727660; PT009003; Sophos,Pearl Therapeutics Inc,257369,"APRIL    , 29, 2016",Completed
1,Forced expiratory volume; Fractional concentration of exhaled nitric oxide; Peak expiratory flow rate,Asthma,null,Phase 2a Clinical,C2A,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,28,Relvar,27,null,"A Phase IIa, FF/VI Study to Measure FeNO in Asthmatic Patients",201499; NCT02712047,GlaxoSmithKline plc,256043,"APRIL    , 29, 2016",Completed
1,Cortisol,Allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,474,fluticasone furoate,450,null,Phase IV Fluticasone Furoate Nasal Spray (Veramyst) Long-Term Pediatric Growth Study,EudraCT: 2007-005148-26; FFR101782; NCT00570492,GlaxoSmithKline plc,14133,"NOVEMBER , 26, 2007",Completed
2,Corneal endothelium; Fundus of eye; Intraocular pressure; Visual acuity,Ocular inflammation,prednisolone,Phase 3 Clinical,C3,"dexamethasone intraocular injection (controlled/sustained release/Verisome), EyePoint",65274,194,IBI-10090,194,null,Study to Evaluate the Safety for the Treatment of Inflammation Associated With Cataract Surgery,C15-01; NCT02547623,Icon Bioscience Inc,240288,"NOVEMBER , 06, 2015",Completed
1,null,Crohns disease,null,Phase 4 Clinical,C4,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,200,Zentacort,200,null,Investigation of the safety and efficacy of Budesonide (Zentacort capsules) in patients with Crohn's disease,JapicCTI-184152,Zeria Pharmaceutical Co Ltd,357577,"SEPTEMBER, 30, 2017",Recruiting
2,Fovea centralis; Intraocular pressure; Retina; Visual acuity,Diabetic macular edema,null,Phase 1/Phase 2 Clinical,C12,"suprachoroidal triamcinolone acetonide + intravitreal aflibercept (diabetic macular edema), Clearside Biomedical",92483,20,"CLS-1003; triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical; triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical",20,HULK,Suprachoroidal Injection of CLS-TA Alone or With Aflibercept in Subjects With Diabetic Macular Edema,CLS1004-101; HULK; NCT02944240; NCT02949024,Clearside Biomedical Inc,277937,"NOVEMBER , 30, 2016",Completed
1,Macula retinae; Visual acuity,Diabetic macular edema,null,Phase 2/Phase 3 Clinical,C23,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,64,triamcinolone acetonide,64,TDMX Study,"Open-Label, Extension of a Clinical Trial of Intravitreal Triamcinolone for Diabetic Macular Edema",ACTRN12605000244606; NCT00148330; NHMRC project 402573; TDMX Study,University of Sydney,177951,"MAY      , 31, 2005",Completed
2,null,Psoriasis,null,Phase 3 Clinical,C3,"betamethasone valerate (topical emollient foam, psoriasis/dermatitis), Foamix",53978,170,"Prednisolone acetate cream; betamethasone valerate (topical emollient foam, psoriasis/dermatitis), Foamix",170,null,Efficacy and Tolerability of Prednisolone Acetate 0.5% Cream Versus Betamethasone Valerate 0.1% Cream in Cortisosensitive Dermatosis,NCT01011621; PRE/P/08-1,Mantecorp Industria Quimica e Farmaceutica Ltd,180987,"FEBRUARY , 28, 2010",Not yet recruiting
2,null,Seborrheic dermatitis,null,Phase 3 Clinical,C3,"betamethasone valerate (topical emollient foam, psoriasis/dermatitis), Foamix",53978,170,"Prednisolone acetate cream; betamethasone valerate (topical emollient foam, psoriasis/dermatitis), Foamix",170,null,Efficacy and Tolerability of Prednisolone Acetate 0.5% Cream Versus Betamethasone Valerate 0.1% Cream in Cortisosensitive Dermatosis,NCT01011621; PRE/P/08-1,Mantecorp Industria Quimica e Farmaceutica Ltd,180987,"FEBRUARY , 28, 2010",Not yet recruiting
1,Fovea centralis,Diabetic macular edema,null,Phase not specified,NS,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,20,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",20,null,Evaluation Of Durezol9415 For Macular Edema And Neovascular Disease,JPRN-UMIN000001432; UMIN000001432,Yamagata University,234454,"NOVEMBER , 01, 2008",Recruiting
2,FEV1,Asthma,null,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,2020,Relovair; fluticasone furoate,2019,null,Asthma Exacerbation Study,106837; 2009-011461-84; HZA106837; JapicCTI-101072; NCT01086384,GlaxoSmithKline plc,64836,"FEBRUARY , 22, 2010",Completed
1,FEV1,Asthma,null,Phase 3b Clinical,C3B,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,101,"ciclesonide (metered dose inhaler), Nycomed",101,null,Effect of Ciclesonide on Quality of Life in Patients With Moderate Persistent Asthma (21 to 65 years),BY9010/AR-101; NCT00305461,AstraZeneca plc,22129,"FEBRUARY , 28, 2006",Completed
4,null,Gout,triamcinolone acetonide,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,397,canakinumab; canakinumab-LYO; canakinumab-PFS,399,null,Safety and Efficacy of Canakinumab Prefilled Syringes in Frequently Flaring Acute Gouty Arthritis Patients,2010-024173-39; CACZ885H2361; NCT01356602,Novartis AG,77484,"MAY      , 31, 2011",Completed
1,FEV,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,708,"ciclesonide (metered dose inhaler), Nycomed",700,null,Efficacy of Ciclesonide Versus Placebo Administered as Once Daily or Twice Daily in Patients Not Treated With Inhaled Corticosteroid,EFC6164; NCT00174720; XRP1526B/3031,Sanofi SA,22083,"SEPTEMBER, 30, 2005",Completed
2,Forced expiratory volume,Chronic obstructive pulmonary disease,"fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline",Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,110,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",110,null,"A 12-Week Study To Compare Lung Function Within 24 H With The Combination Of Fluticasone Furoate (FF)/Vilanterol (VI) Of 100/25 microg, qd, And A Combination Of Fluticasone Propionate/Salmeterol Of 250/50 microg, bid, In Patients With Chronic Obstructive Pulmonary Disease (COPD)",2010-023418-29; HZC113109,GlaxoSmithKline plc,165358,"APRIL    , 06, 2011",Completed
2,FEV1,Asthma,null,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,248,"albuterol/salbutamol; fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",242,null,Clinical Study Evaluating Safety and Efficacy of Fluticasone Furoate in People With Asthma,115283; FFA115283; NCT01436071,GlaxoSmithKline plc,80899,"SEPTEMBER, 30, 2011",Completed
5,Forced expiratory volume; Peak expiratory flow rate,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",90982,338,"Arnuity; GSK-2834425; Relvar Ellipta; Seretide; fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",338,null,Evaluation of Umeclidinium Bromide in Combination With Fluticasone Furoate in COPD Subjects With an Asthmatic Component,2014-000883-16; GSK: 200699; NCT02164539,GlaxoSmithKline plc,197089,"JULY     , 01, 2014",Completed
1,C-terminal telopeptide of collagen type I; Collagen type I trimeric cross-linked peptide; Plasma cortisol; Plasma insulin; Serum adiponectin; Serum glucose; Serum osteocalcin; Urine N terminal telopeptide of type I collagen (uNTX),Rheumatoid arthritis,null,Phase 1 Clinical,C1,fosdagrocorat,59618,27,PF-04171327,18,null,PK And Safety Study Of PF-04171327 In Healthy Japanese And Western Subjects In Fasting And Fed Conditions,A9391012; NCT01362673,Pfizer Inc,77776,"MAY      , 31, 2011",Completed
2,Glycated hemoglobin; Hydrocortisone,Addisons disease,hydrocortisone,Phase 2/Phase 3 Clinical,C23,"dual-release hydrocortisone (oral, adrenal insufficiency), ViroPharma",58174,64,"dual-release hydrocortisone (oral, adrenal insufficiency), ViroPharma",64,DC 06/02,Once-Daily Oral Modified-Release Hydrocortisone in Patients With Adrenal Insufficiency,104-07; DC 06/02; EudraCT: 2006-0007084-89; NCT00915343,Shire plc,57668,"AUGUST   , 31, 2007",Completed
2,Bone Mineral Density (BMD); Lumbar spine bone mineral density,Chronic obstructive pulmonary disease,vilanterol,Phase 4 Clinical,C4,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,283,Relovair,283,null,Study Evaluating the Effect of Fluticasone Furoate/Vilanterol (FF/VI) Inhalation Powder Compared With Vilanterol (VI) Inhalation Powder on Bone Mineral Density (BMD) in Subjects With Chronic Obstructive Pulmonary Disease (COPD),102972; 2012-004801-28; HZC102972; NCT01957150,GlaxoSmithKline plc,157075,"JANUARY  , 28, 2014",Completed
3,null,Asthma,Symbicort Turbohaler; Viani,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,422,Relvar Ellipta,422,null,Efficacy study to evaluate fluticasone furoate/vilanterol inhalation powder delivered once daily via the Dry Powder Inhaler Ellipta compared with usual ICS/LABA maintenance therapy delivered by dry powder Inhaler in subjects with persistent asthma,2014-000551-81; HZA116492,GlaxoSmithKline Research & Development Ltd,309224,"AUGUST   , 01, 2016",Completed
2,Blood cell count; Thyroid-stimulating hormone,Vulvar intraepithelial neoplasia,null,Phase 2 Clinical,C2,"clobetasol propionate foam, Connetics",18168,56,clobetasol; tacrolimus,56,null,Tacrolimus Versus Clobetasol Propionate in the Treatment of Vulvar Lichen Sclerosus,NCT00757874; STJUSTINEH,CHU de Quebec-Universite Laval,198682,"APRIL    , 30, 2006",Completed
1,null,Ataxia telangiectasia,null,Phase 3 Clinical,C3,"dexamethasone sodium phosphate (erythrocyte encapsulated), Urbino University/EryDel",70257,180,EryDex,180,ATTeST,EDS in Ataxia Telangiectasia Patients,115929; 2015-005241-31; ATTeST; CTRI/2017/02/007912; IEDAT-02-2015; NCT02770807,EryDel SPA,260767,"MARCH    , 02, 2017",Recruiting
4,Blood pressure; Diastolic blood pressure; Glucose; Heart rate; QT interval; Systolic blood pressure,Asthma,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,50,CHF-5993; HFA-pressurised Metered Dose Inhaler; NEXThaler Dry Powder Inhaler; Valved Holding Chamber,50,null,Clinical Pharmacology Study to Evaluate the Total Systemic Exposure and the Lung Availability of CHF-5993 in Healthy Volunteers,2015-005198-19; CCD-05993BA1-01; NCT02743013,Chiesi Farmaceutici SpA,258618,"APRIL    , 30, 2016",Completed
1,null,Adrenal gland hypofunction,null,Phase 3 Clinical,C3,"hydrocortisone (oral granules, adrenal insufficiency), Diurnal/Emerge Health/Medison Pharma",79146,24,Infacort,24,null,Treatment of Adrenal Insufficiency in Children,2014-002265-30; INFACORT-003; NCT02720952,Diurnal Ltd,256755,"MARCH    , 31, 2015",Completed
1,null,Atrophy,null,Phase 2 Clinical,C2,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,17,Medidur FA,17,null,Fluocinolone Acetonide Intravitreal Inserts in Geographic Atrophy,C-01-08-004; NCT00695318,Alimera Sciences Inc,32426,"DECEMBER , 01, 2008",Terminated
1,Blood pressure; Heart rate; Heart rate; Serum cortisol; Serum potassium,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,35,Relovair,35,null,"A Study to Assess the Effects of Fluticasone Furoate and GW-642444-M Combination in Healthy Subjects and in Subjects With Mild, Moderate or Severe Hepatic Impairment",111789; NCT01266941,GlaxoSmithKline plc,73503,"OCTOBER  , 18, 2010",Completed
3,null,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,16,GW-642444; fluticasone furoate; fluticasone furoate/GW-642444,16,null,Study to Look at and Compare How Inhaled and Intravenous Fluticasone Furoate and GW-642444 Are Processed by the Body in Healthy Subjects,102934; NCT01299558,GlaxoSmithKline plc,75477,"MAY      , 17, 2010",Completed
2+,Blood platelets; Neutrophils,Graft versus host disease,Medrol; Rayos,Phase 3 Clinical,C3,"prednisone (oral, delayed release), Vectura/Mundipharma/Merck KGaA",54733,439,Medrol; Rayos; itacitinib,439,GRAVITAS-301,A Study of Itacitinib or Placebo in Combination With Corticosteroids for Treatment of Acute Graft-Versus-Host Disease,2017-000538-78; GRAVITAS-301; INCB 39110-301; INCB39110-301; NCT03139604,"Incyte Corp, MEDPACE SINGAPORE PTE LTD",297219,"JUNE     , 08, 2017",No longer recruiting
1,Blood flow; Cephalic vein; Radial artery,Fistula,null,Phase 2 Clinical,C2,"prednisolone (injectable liposome formulation, rheumatoid arthritis/ulcerative colitis), Enceladus",59891,30,Nanocort,30,LIPMAT,Liposomal Prednisolone to Improve Hemodialysis Fistula Maturation,2015-002488-40; LIPMAT; LIPMAT; NCT02495662,Leiden University Medical Center,234690,"NOVEMBER , 30, 2015",Terminated
3,FEV1; Peak Expiratory Flow (PEF),Asthma,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline; fluticasone furoate + vilanterol (oral inhalant, asthma/COPD), GlaxoSmithKline",Phase 2 Clinical,C2,"fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",90982,421,"fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",421,ILA115938,"Evaluate the Safety, Efficacy and Dose Response of GSK-573719 in Combination With Fluticasone Furoate in Subjects With Asthma",115938; ILA115938; ILA115938; NCT01573624,GlaxoSmithKline plc,86335,"APRIL    , 03, 2012",Completed
2,Forced expiratory volume; Inspiratory capacity,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"budesonide + formoterol (inhalant aerosol, chronic obstructive pulmonary disease), Pearl Therapeutics",70143,null,PT-009; PT-010,null,null,To Assess the Efficacy and Safety of PT-010 Compared to PT-009 in Subjects With Moderate to Very Severe Chronic Obstructive Pulmonary Disease,NCT03081247; PT010017,Pearl Therapeutics Inc,290987,"APRIL    , 16, 2018",Terminated
2,null,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,30,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline; fluticasone furoate + vilanterol (oral inhalant, asthma/COPD), GlaxoSmithKline",30,null,Bioequivalence Study to Compare Fluticasone Furoate (FF) Single-strip Inhaler With FF Two-strip Inhaler and With FF/Vilanterol Combination,115440; NCT01485445,GlaxoSmithKline plc,82997,"DECEMBER , 21, 2011",Completed
3,null,Arthralgia,Monovisc; triamcinolone hexacetonide,Phase 3 Clinical,C3,CINGAL,103224,526,CINGAL,526,null,Study of Cingal for the Relief of Knee Osteoarthritis Compared to Triamcinolone Hexacetonide at 39 Weeks Follow-up,2017-003205-18; CINGAL 17-02; NCT03390036,Anika Therapeutics Inc,324751,"DECEMBER , 07, 2017",Completed
1,null,Enteritis,null,Phase 1/Phase 2 Clinical,C12,"beclomethasone dipropionate (oral, radiation enteritis), Soligenix",49161,16,SGX-201,16,null,A Dose-Ranging Study of Delayed Release Beclomethasone for Prevention of Acute Enteritis in Patients With Rectal Cancer,1R43CA141968-01; BDP-ENT-01; NCT01073384,Soligenix Inc,64387,"DECEMBER , 31, 2009",Completed
1+,Bone mineral density; Lumbar spine bone mineral density,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"budesonide + formoterol (inhalant aerosol, chronic obstructive pulmonary disease), Pearl Therapeutics",70143,500,PT-003; PT-009; PT-010; symbicort,500,null,"Study to Assess the Safety and Tolerability of PT-010, PT-009 and PT-003 in Subjects With Moderate to Very Severe Chronic Obstructive Pulmonary Disease",NCT02536508; NCT03313570; PT010008,"AstraZeneca plc, Pearl Therapeutics Inc",239329,"AUGUST   , 10, 2015",Completed
1,null,Adrenal gland hypofunction,null,Phase 1 Clinical,C1,"hydrocortisone (oral granules, adrenal insufficiency), Diurnal/Emerge Health/Medison Pharma",79146,18,Infacort,18,null,Bioavailability of Infacort When Administered Onto Food Compared to Direct Oral Administration,2016-001388-36; INFACORT 006; NCT03178214,Diurnal Ltd,300900,"MAY      , 22, 2017",Completed
1,null,Chronic sinusitis,null,Phase 1 Clinical,C1,"mometasone furoate (sustained release transmucosal formulation, chronic sinusitis), Lyra Therapeutics",103922,20,mometasone,20,null,480 Biomedical Sinus Drug Depot,480MFSDD2016-001; NCT02942186; NCT02967731,Lyra Therapeutics,280158,"JUNE     , 06, 2017",Completed
2,null,Allergic rhinitis,mometasone (nasal/ dermatological),Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,125,GW-685698X,125,null,Long Term Safety Of GW-685698X Via Nasal Biopsy,FFR104503; NCT00224523,GlaxoSmithKline plc,12096,"SEPTEMBER, 30, 2005",Completed
1,null,Seasonal allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,288,fluticasone furoate,285,null,Study In Adults And Adolescents With Seasonal Allergic Rhinitis,FFR103184; NCT00225823,GlaxoSmithKline plc,12097,"MAY      , 31, 2005",Completed
2,Cortisol,Osteoarthritis,triamcinolone acetonide,Phase 2 Clinical,C2,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,24,FX-006,24,null,Pharmacokinetic and Pharmacodynamic Study of FX-006 in Patients With Osteoarthritis of the Knee,FX006-2011-002; NCT01487200,Flexion Therapeutics Inc,83055,"JULY     , 31, 2012",Completed
2,Alanine transaminase; Albumin; Aspartate aminotransferase; Bicarbonates; Bilirubin; Blood platelets; Body temperature; Calcium; Chlorides; Creatinine; Diastolic blood pressure; Erythrocytes; Glucose; Heart; Heart rate; Hematocrit; Hemoglobin; Ketones; Lactate dehydrogenase; Leukocyte count; Lung; Mean corpuscular hemoglobin; Nitrite; Phosphate; Potassium; Skin; Sodium; Systolic blood pressure; Total cholesterol; Total protein; Triglycerides; Urea nitrogen; Uric acid; Urobilinogen; gamma-Glutamyltransferase,Psoriasis,betamethasone valerate,Phase 1b Clinical,C1B,"SEGRA (topical, plaque psoriasis), Leo Pharma",112485,13,LEO-134310,13,null,"Clinical Trial to Assess Safety, Tolerability and the Pharmacodynamic Effect of Different Concentrations of a New Anti-inflammatory Substance in Subjects With Chronic Plaque Psoriasis",2018-000140-26; LP0155-1375; NCT03669757,LEO Pharma A/S,353433,"SEPTEMBER, 27, 2018",Completed
1,ACR20; ACR50; ACR70; Joint swelling; Joint tenderness,Rheumatoid arthritis,null,Phase 3 Clinical,C3,"prednisone (oral, delayed release), Vectura/Mundipharma/Merck KGaA",54733,350,"prednisone (oral, delayed release), Horizon/Mundipharma",350,CAPRA-2,Study to Assess the Safety and Efficacy of Modified-Release Prednisone (Lodotra) Therapy in Patients With Active Rheumatoid Arthritis,CAPRA-2; EudraCT-Number: 2007-003508-36; NCT00650078; NP01-007,Horizon Pharma plc,9663,"MARCH    , 31, 2008",Completed
5,Skin,Psoriasis,calcipotriene + betamethasone dipropionate; calcipotriol; clobetasol; prednicarbate,Phase 1 Clinical,C1,mapracorat,46177,24,mapracorat,24,null,Open Psoriasis Plaque Test to Evaluate Efficacy of Different Comparator to Mapracorat,1404003; 16599; 2012-004171-39; NCT03399526,Bayer AG,325659,"FEBRUARY , 11, 2013",Completed
1,null,Meniere disease,null,Phase 3 Clinical,C3,"dexamethasone (sustained release/intratympanic injection, ear disorders), Otonomy",65289,160,OTO-104,160,null,Phase III Study of OTO-104 in Subjects With Unilateral Meniere's Disease,104-201811; NCT03664674,Otonomy Inc,352993,"AUGUST   , 27, 2018",Recruiting
2,serum cortisol,Allergic rhinitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,140,"loratadine; triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",140,null,Nasacort AQ Hypothalamic-Pituitary-Adrenal (HPA) Axis Study in Children With Allergic Rhinitis,2014-004646-98; NCT01154153; TRICA_L_04286,Sanofi SA,67836,"JUNE     , 30, 2010",Completed
2,Intraocular pressure; Retina; Visual acuity,Diabetic macular edema,Lucentis,Phase 2/Phase 3 Clinical,C23,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,null,Iluvien; Lucentis,null,CASSIE,"Randomized, Control Trial on Combined Iluvien and Lucentis for Diabetic Macular Oedema",CASSIE; NCT03784443; P78912,Imperial College London,364319,"SEPTEMBER, 01, 2019",Terminated
2,null,Allergic rhinitis,fluticasone propionate,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,377,fluticasone furoate,377,null,Comparator Study Evaluating Patient Preference Of FFNS versus FPNS,FFU105924; NCT00539006,GlaxoSmithKline plc,11295,"AUGUST   , 31, 2007",Completed
2,null,Psoriasis,"clobetasol propionate foam, Connetics",Phase 4 Clinical,C4,"clobetasol propionate foam, Connetics",18168,16,triamcinolone,16,null,Comparison of Efficacy of Intralesional Triamcinolone Injection and Clobetasol Propionate Ointment for Psoriatic Nails,NCT01703325; Si599/2010,Mahidol University,94221,"NOVEMBER , 30, 2010",Completed
3,null,Pemphigoid,Dermovate; orabase,Phase 1 Clinical,C1,"clobetasol propionate foam, Connetics",18168,20,orabase; platelet rich fibrin gel,20,null,PRF in Management of Chronic Multiple Oral Ulcers,00UAD; NCT03878771,Beni-Suef University,373754,"MARCH    , 13, 2019",Not yet recruiting
3,null,Mouth ulcer,Dermovate; orabase,Phase 1 Clinical,C1,"clobetasol propionate foam, Connetics",18168,20,orabase; platelet rich fibrin gel,20,null,PRF in Management of Chronic Multiple Oral Ulcers,00UAD; NCT03878771,Beni-Suef University,373754,"MARCH    , 13, 2019",Not yet recruiting
1,Forced Vital Capacity; Fukutin-related protein; Maximal expiratory pressure; Maximal inspiratory mouth pressure,Limb girdle muscular dystrophy,null,Phase 3 Clinical,C3,"deflazacort (oral tablet/suspension, Duchenne muscular dystrophy), PCT Therapeutics",86985,100,deflazacort,100,null,A Study of Deflazacort (Emflaza) in Participants With Limb-Girdle Muscular Dystrophy 2I (LGMD2I),NCT03783923; PTCEMF-GD-004-LGMD,PTC Therapeutics Inc,364440,"MAY      , 15, 2019",Not yet recruiting
2+,6 beta-Hydroxycortisol; Hydrocortisone,null,null,Phase 1 Clinical,C1,"deflazacort (oral tablet/suspension, Duchenne muscular dystrophy), PCT Therapeutics",86985,58,clarithromycin; deflazacort; deflazacort; rifampin,58,null,Evaluate Effects of Multiple Doses of Rifampin and Clarithromycin on the Single-Dose Pharmacokinetics of Deflazacort,MP-104-CL-025; NCT02286635,PTC Therapeutics Inc,215408,"NOVEMBER , 30, 2014",Completed
1,null,null,null,Phase 1 Clinical,C1,"glucocorticoid receptor agonists (immune disorders, inflammatory diseases), Bristol-Myers Squibb",61788,120,BMS-791826; prednisolone,120,null,A Study of Pharmacokinetics (PK) and Pharmacodynamics (PD) in Relation to Prednisolone in Healthy Males,IM125-001; NCT03198013,Bristol-Myers Squibb Co,303059,"NOVEMBER , 11, 2008",Completed
1,null,Psoriasis,null,Phase 3 Clinical,C3,"clobetasol propionate shampoo (psoriasis), Galderma/Maruho",96680,null,GK-664-S,null,null,A Phase III Clinical Study of GK-664S in Plaque Psoriasis Patients,JapicCTI-152858,Maruho Co Ltd,226223,"JANUARY  , 31, 2015",Recruiting
2,null,Lichen,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,60,betamethasone; triamcinolone acetonide,60,null,"A Randomized, Positive Controlled, Parallel, Phase II Trial To Evaluate The Efficacy And Safety Of Betamethasone Injection In The Local Blockage Treatment Of Oral Erosion Lichen Planus",ChiCTR-TRC-11001225,Sichuan University,91441,"JUNE     , 01, 2010",Not yet recruiting
1,Ear pressure,Middle ear disease,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,91,Azmacort,91,null,Short-Term Relief of Eustachian Tube Dysfunction and Serous Otitis Media Using Intranasal Steroid Sprays,103-04; IST4008; NCT00279916; XRG5029C/4008,Mayo Clinic Foundation,11760,"SEPTEMBER, 01, 2005",Completed
2,Forced expiratory volume in 1 s; Peak expiratory flow (PEF),Asthma,Flixotide,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,510,GW-685698X,510,null,"A Randomized, Double-Blind, Placebo-Controlled, Parallel-Group, Multicenter Study to Evaluate the Efficacy and Safety of GW-685698X Inhalation Powder 200, 400, 600 and 800 microg Administered qd in the Morning and Fluticasone Propionate 500 microg bid via Diskus Inhalation Powder Compared with Placebo for 8 Weeks in Adolescent and Adult Subjects (= 12 years old) with Persistent Asthma Symptomatic on Moderate-Dose ICS Therapy",EudraCT 2005-001122-87; FFA20003,GlaxoSmithKline plc,117748,"SEPTEMBER, 19, 2005",Terminated
2+,null,Age related macular degeneration,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,9,aflibercept; aflibercept; triamcinolone acetonide; verteporfin,9,PED,A Study Testing if Medicine Can Make Pigment Epithelium Detachments Regress and Stabilize the Vision in Eyes,2012/1743; NCT01746875; PED,Norwegian University of Science and Technology (NTNU),101391,"FEBRUARY , 28, 2014",Terminated
2+,null,Age related macular degeneration,bevacizumab; triamcinolone acetonide; verteporfin,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,null,bevacizumab; verteporfin,null,null,"Combined PDT and Intravitreal Bevacizumab versus Combination of PDT, Intravitreal Bevacizumab and Triamcinolone for Neovascular AMD",8542; NCT00370539,Shaheed Beheshti Medical University,33340,"SEPTEMBER, 30, 2006",Recruiting
2+,Pigment epithelium-derived factor; Retinal thickness; Vascular endothelial growth factor; Vascular endothelial growth factors,Age related macular degeneration,null,Phase 1 Clinical,C1,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,100,bevacizumab; bevacizumab; triamcinolone acetonide; verteporfin,100,null,A Randomized Controlled Trial of Intravitreal Bevacizumab Monotherapy Versus Triple Therapy With Half Fluence Verteporfin Photodynamic Therapy and Intravitreal Bevacizumab and Triamcinolone Acetonide for the Treatment of Neovascular Age-Related Macular Degeneration,CUHK_CCT00272; ChiCTR-TRC-10001137,Hong Kong Eye Hospital,94644,"AUGUST   , 26, 2010",No longer recruiting
2,FEV1; cortisol,Asthma,null,Phase not specified,NS,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,431,budesonide; ciclesonide,403,null,"A randomized, double-blind, double-dummy, parallel-group study to investigate the efficacy and safety of ciclesonide compared with budesonide in adolescents with severe asthma",EudraCT No: 2004-001233-41,Takeda GmbH,76905,"FEBRUARY , 12, 2007",Status not specified
1,null,Vitiligo,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,18,triamcinolone acetonide,18,null,Efficacy and Safety of Intralesional Corticosterois in the Treatment of Vitiligo,H12-02140; NCT01766609,University of British Columbia,104547,"JANUARY  , 31, 2013",Recruiting
1,FEV1; FVC,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,456,ciclesonide,456,null,Efficacy of Ciclesonide Versus Placebo Administered Either as Once Daily or Twice Daily in Patients Treated Previously With an Inhaled Corticosteroid,EFC6163; NCT00174733; XRP1526B/3030,"Sanofi SA, Takeda Pharmaceuticals International GmbH",22084,"JULY     , 31, 2005",Completed
2,null,Hypertrophic skin disease,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,60,5-fluorouracil; bleomycin; triamcinolone acetonide,60,null,"Efficacy and Safety of Intralesional Bleomycin in Comparision to Combination of Intralesional 5-Fluorouracil and Triamcinolone Acetonide in Patients of Keloid and Hypertrophic Scars: A Randomized, Open-Labelled, Comparative Study",CTRI/2013/11/004155,"Government Medical College, Bhavnagar",162474,"MARCH    , 01, 2011",Completed
1,null,Inflammatory disease,null,Phase 1 Clinical,C1,PF-4308515,64584,58,PF-04308515,58,null,Multiple-Dose Escalation Trial Of PF-04308515 In Healthy Volunteers,B0861002; NCT01101932,Pfizer Inc,65603,"MARCH    , 31, 2010",Completed
2+,null,Crohns disease,Entocort,Phase not specified,NS,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,100,ciprofloxacin; metronidazole; trimethoprim,100,null,"A Pilot, Randomized Study to Compare Antibiotic Therapy (Ciprofloxacin, Trimethoprim and Metronidazole) with Standard Therapy (Budesonide) in the Treatment of Active Crohns Disease",UKCRN 13163,Royal Liverpool and Broadgreen University Hospitals NHS Trust,116894,null,Not yet recruiting
2,FEV1; PEF,Asthma,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,164,salmeterol; triamcinolone acetonide,164,SCOS,"A 28-week, randomized, triple-blinded, placebo-controlled, parallel-group study to assess the effectiveness of long-acting beta-2-agonist, salmeterol monotherapy versus continued therapy with inhaled corticosteroids (ICS) in patients with persistent asthma",SCOS,University of California,76806,"FEBRUARY , 28, 1997",Completed
1,null,Perennial allergic rhinitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,651,triamcinolone acetonide,651,null,"A phase IV, open-label study to assess the safety and efficacy of Nasacort in patients with seasonal and perennial allergic rhinitis",XRG5029C/4005,Sanofi SA,89194,"MARCH    , 22, 2002",No longer recruiting
2,null,Seasonal allergic rhinitis,"budesonide (inhaled formulations), AstraZeneca",Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,476,triamcinolone acetonide,476,null,"A phase IV, multicenter, randomized, single-blind, active-controlled, parallel group study to assess the safety and efficacy of Nasacort compared to Rhinocort Aqua in patients with seasonal allergic rhinitis",XRG5029C/4007,Sanofi SA,91058,"FEBRUARY , 12, 2003",Status not specified
2,null,Skin allergy,methylprednisolone aceponate,Phase 3 Clinical,C3,"clobetasol propionate foam, Connetics",18168,82,"clobetasol propionate foam, Connetics",82,null,"Randomized Study on the Effectiveness, Safety and Acceptability Of Clobetasol Propionate Foam-cooled (OLUX) in Comparison With Cream Aceponato Methylprednisolone in the Treatment of Allergic Contact Dermatitis",EudraCT 2008-004331-38; olux 01/08,Mipharm SpA,117327,"AUGUST   , 28, 2008",Completed
1,null,Inflammatory disease,null,Phase 2a Clinical,C2A,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,24,difluprednate,24,null,Study of Difluprednate Opthalmic Emulsion in the Treatment of Postoperative Inflammation,NCT00407225; SJE2079/2-01-PC,Sirion Therapeutics Inc,21570,"DECEMBER , 31, 1999",Completed
2,null,Seasonal allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,237,"cetirizine; fluticasone furoate (nasal, allergic rhinitis), GSK",237,null,"A Multicenter, Randomized, Double-blind, Double-dummy, Parallel Group Study of Intranasal Fluticasone Once Daily Compared with Once-Daily Cetirizine in the Treatment of Seasonal Allergic Rhinitis",FNM40072,GlaxoSmithKline plc,153743,null,Completed
1,null,Asthma,null,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,440,Qvar,440,null,Evaluation of Two Doses of Qvar by Breath Operated and Metered Dose Inhalers in Asthmatic Children,IXR-302-25-197; NCT00094016,Teva Pharmaceutical Industries Ltd,22290,"OCTOBER  , 31, 2004",Completed
1,null,Dermatitis,null,Phase 2 Clinical,C2,"triamcinolone acetonide (DuraPeel cream, dermatitis/psoriasis), Nuvo Research",64063,56,"triamcinolone acetonide (DuraPeel cream, dermatitis), Nuvo Research",56,TAC-202,Safety and Efficacy Study of Triamcinolone Acetonide DuraPeel to Treat Hand Dermatitis,NCT00890968; TAC-202; TAC-202,ZARS Pharma Inc,88586,"APRIL    , 30, 2009",Completed
2,null,Choroidal neovascularization,verteporfin,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,400,triamcinolone acetonide; verteporfin,400,TPDT,"The Safety and Efficacy of Posterior Juxta-scleral (40 mg) or Intra-vitreal (4 mg) Triamcinolone Acetonide, in Addition to Verteporfin Photodynamic Therapy for Choroidal Neovascularization (CNV), in Age-related Macular Degeneration (AMD): A Randomized, Controlled Trial",ISRCTN81615611; NRR Pub ID N0503172670 (03428); TPDT,Newcastle Upon Tyne Hospitals NHS Trust,122573,"OCTOBER  , 01, 2005",Completed
1,FEV1; Nitric oxide,Asthma,null,Phase 2 Clinical,C2,"budesonide (controlled release/inhaled/AKITA, adult asthma), Vectura",83838,40,"budesonide (controlled release/inhaled/AKITA, adult asthma),  Activaero",40,null,"An Open-Label Randomized Pilot Trial to Evaluate Tolerability, Safety and Applicability of AKITA Inhaled Budesonide Suspension in Children aged 3 to 11 years with Mild to Moderate Asthma",Acti-SCIPE-001; EudraCT 2010-023981-27,Activaero GmbH,118612,"MARCH    , 08, 2011",Completed
2,null,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",81111,48,"fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline; fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",48,null,Comparison of Salmeterol and Fluticasone Propionate Absorption From Salmeterol/Fluticasone Easyhaler With Seretide Diskus,3106008; EUDRACT 2012-003782-18; NCT01856621,Orion Corp,132070,"MAY      , 31, 2013",Completed
2,null,Age related macular degeneration,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,200,transpupillary thermal rherapy; triamcinolone acetonide,200,null,Intravitreal Triamcinolone with Transpupillary Thermal Therapy (TTT) for Subfoveal Choroidal Neovascularization in Age Related Macular Degeneration,ISRCTN74123635,Asociacion Para Evitar la Ceguera en Mexico,122141,"FEBRUARY , 01, 2004",Not yet recruiting
1,null,Age related macular degeneration,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,80,triamcinolone acetonide; verteporfin,80,null,"A Pilot Study to Examine the Safety and Efficacy of Posterior Juxtascleral Triamcinolone Acetonide Administration, in Addition to Visudyne Photoynamic Therapy for Predominantly Classic Choroidal Neovascularization Secondary to Age Related Macular Degeneration: An Open-Label, Randomized, Active-Controlled Trial",EudraCT 2005-002466-11; version125/05/05,Kings College Hospital NHS Trust,142831,"JANUARY  , 03, 2006",Terminated
2,null,Diabetic macular edema,ranibizumab,Phase 2 Clinical,C2,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,50,ranibizumab; triamcinolone acetonide,50,null,Combination therapy for DME,UMIN000021630,Mie University School of Medicine,256819,"FEBRUARY , 01, 2015",Completed
4,Eosinophils; Forced expiratory volume,Chronic obstructive pulmonary disease,Symbicort Turbuhaler,Phase 3 Clinical,C3,"budesonide + formoterol (inhalant aerosol, chronic obstructive pulmonary disease), Pearl Therapeutics",70143,1800,PT-003; PT-009; PT-010,1900,KRONOS,"A Randomized, Double-Blind, Parallel-Group, 24-Week, Chronic-Dosing, Multicenter Study to Assess the Efficacy and Safety of PT-010, PT-003, and PT-009 Compared With Symbicort Turbuhaler",JapicCTI-184079; KRONOS; NCT02497001; PT010006,Pearl Therapeutics Inc,234795,"AUGUST   , 10, 2015",Completed
3,null,Asthma,"budesonide (inhaled formulations), AstraZeneca; procaterol hydrochloride (Meptin Air)",Phase 1 Clinical,C1,"budesonide + procaterol hydrochloride (MDI formulation, asthma), Intech Biopharm",91606,24,"budesonide + procaterol hydrochloride (MDI formulation, asthma), Intech Biopharm",24,null,"Bioavailability Study of SYN-006, Pulmicort pMDI and Meptin Air in Healthy Adult",MCPK09003J1; NCT02165046,Intech Biopharm Ltd,197305,"FEBRUARY , 29, 2012",Completed
1,null,Diabetic macular edema,null,Phase 2 Clinical,C2,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,150,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",150,null,Phase II study of Efficacy and Safety of SJE-2079 in the Treatment for Diabetic Macular Edema,JPRN-UMIN000005648,Senju Usa Inc,124785,"OCTOBER  , 01, 2010",Completed
1,Forced expiratory volume; Hydrocortisone; PR interval; Peak expiratory flow rate; QRS complex; QT interval,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,20,GW-685698X,20,null,Single-Dose GW-685698X Magnesium Stearate Study In Asthmatic Patients,HZA108799; NCT00444509,GlaxoSmithKline plc,22276,"FEBRUARY , 17, 2007",Completed
1,null,Pain,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,60,triamcinolone acetonide,60,null,To Determine the Efficacy of Subacromial Bursa Corticosteroid Injection in Stroke Patients With Periarticular Shoulder Disorder,AJIRB-MED-CT4-09-124; KCT0000104,Ajou University Hospital,127285,"AUGUST   , 20, 2009",Completed
1,null,End stage renal disease,null,Phase 1 Clinical,C1,"deflazacort (oral tablet/suspension, Duchenne muscular dystrophy), PCT Therapeutics",86985,16,deflazacort,16,null,A Single-Dose Evaluation of the Effects of Renal Impairment on Deflazacort Pharmacokinetics,MP-104-CL-024; NCT02286622,PTC Therapeutics Inc,215407,"DECEMBER , 31, 2014",Completed
1,null,Osteoarthritis,null,Phase 3b Clinical,C3B,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,208,Zilretta,208,null,Study to Assess the Safety of Repeat Administration of FX-006 Administered to Patients With Osteoarthritis of the Knee,FX006-2016-011; NCT03046446,Flexion Therapeutics Inc,287683,"FEBRUARY , 21, 2017",Completed
1,null,Lichen,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,60,triamcinolone acetonide,60,null,An Evaluation of The Assistant Efficacy of Periodontal Treatment for The Oral Erosion Lichen Planus and The Post-Treatment,ChiCTR-TRC-13004128,Sichuan University,168620,"APRIL    , 01, 2012",Recruiting
2,null,Herpesvirus infection,acyclovir,Phase 3 Clinical,C3,"aciclovir + hydrocortisone (dermatological), Medivir",17335,201,ME-609,201,null,Study of ME-609 and Acyclovir for Treatment of Herpes Simplex Labialis in Immunocompromised Patients,609-06; NCT00735761,Medivir AB,23402,"DECEMBER , 31, 2006",Completed
1,Cytokine,Ulcerative colitis,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,100,triamcinolone acetonide,100,null,Periappendiceal Injection of Steroids in Ulcerative Colitis,CTRI/2012/04/002605; Project number: P-130,Postgraduate Institute of Medical Education and Research,128187,"JULY     , 01, 2012",Not yet recruiting
1,null,Rheumatoid arthritis,null,Phase 0 Clinical,C0,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,60,triamcinolone acetonide,60,null,Effectiveness Intra-articular Corticosteroid,IIA- 3131- AR; NCT01851278,Universidade Federal de Sao Paulo - UNIFESP,129636,"APRIL    , 30, 2013",Recruiting
4,null,Chronic obstructive pulmonary disease,"Carbomix granules; fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline; fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline",Phase 1 Clinical,C1,"fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",81111,129,Carbomix granules; fluticasone propionate + salmeterol xinafoate; fluticasone propionate + salmeterol xinafoate,129,null,Pharmacokinetic Study Comparing Salmeterol/Fluticasone Easyhaler Products and Seretide Diskus,3106009; NCT02162485,Orion Corp,196211,"JUNE     , 30, 2014",Completed
1,null,Allergic rhinitis,null,Phase 2 Clinical,C2,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,102,GW-685698,102,null,A Pilot Study In Adults And Adolescents With Irritant (Non-Allergic) Rhinitis,2015-004888-37; FFR111158; NCT00730756,GlaxoSmithKline plc,22961,"MARCH    , 31, 2008",Completed
1,Collagen; Lymphocytes,Colitis,null,Phase 3 Clinical,C3,"budesonide (gastroresistant capsule, Crohn's disease/ulcerative colitis), Dr Falk Pharma/Salix",59671,106,budesonide,106,null,Budesonide for Induction of Remission in Incomplete Microscopical Colitis,2013-001912-31; BUG-3/MIC; NCT02142634,Dr Falk Pharma GmbH,188822,"MAY      , 31, 2014",Recruiting
3,Blood pressure; Heart rate; Hydrocortisone; Peak expiratory flow rate; Potassium,Chronic obstructive pulmonary disease,Avamys; Relovair,Phase 1 Clinical,C1,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,16,vilanterol,16,null,Comparing Two Respiratory Drugs in Combination and Separately From a Novel Inhaler Device in Healthy Japanese Subjects,HZA102940; NCT00625196,GlaxoSmithKline plc,23384,"FEBRUARY , 27, 2008",Completed
2,Intraocular pressure,Diabetic macular edema,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,105,bevacizumab; triamcinolone acetonide,105,null,"Multicenter, Randomized, Three Parallel-Groups to Estimate the Safety and Efficacy of Triamcinolone Acetonide Associated Laser, the Laser Associated Bevacizumab Versus Laser Alone for the Treatment of Diffuse Diabetic Macular Edema",ALBA2009; EudraCT 2009-014654-15,"Roche Holding AG, Sanofi SA",130318,"JULY     , 07, 2010",Recruiting
2,Forced expiratory volume in 1 s (FEV1); Peak expiratory flow (PEF),Asthma,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,612,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline; fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",609,null,Efficacy/Safety Study of Fluticasone Furoate/Vilanterol (GW-642444) in Adult and Adolescent Asthmatics,106827; 2010-019590-15; HZA106827; NCT01165138; P/119/2011,GlaxoSmithKline plc,68324,"AUGUST   , 20, 2010",Completed
1,null,Lichen,null,Phase 2b Clinical,C2B,"clobetasol propionate  patch (intraoral, bio-adhesive, oral lichen planus), Dermtreat Aps",111733,240,Rivelin-CLO,240,null,Intra-oral Treatment of OLP With Rivelin-CLO Patches,2017-002193-40; DT-001-R-004; NCT03592342,AFYX Therapeutics,346927,"JUNE     , 28, 2018",Recruiting
3,Dystrophin; Muscle; Six-minute walk distance,Duchenne dystrophy,deflazacort; prednisone,Phase 3 Clinical,C3,"deflazacort (oral tablet/suspension, Duchenne muscular dystrophy), PCT Therapeutics",86985,230,ataluren,230,ACT DMD,Phase III Study of Ataluren in Patients With Nonsense Mutation Duchenne Muscular Dystrophy,"2012-004527-20; 2017-001223-49; 431; 68; ACT DMD; IND Number Number: 68,431; NCT01826487; PTC124-GD-020-DMD",PTC Therapeutics Inc,119769,"MARCH    , 31, 2013",Completed
1,Intra-ocular pressure,Diabetic macular edema,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,null,triamcinolone acetonide,null,null,"Randomized, Controlled Trial of Intravitreal Triamcinolone in Patients with Diabetic Macular edema Refractory to Laser Treatment",ISRCTN90614292; N0192133909,Department of Health,135441,"NOVEMBER , 28, 2003",Completed
1,null,Seasonal allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,288,fluticasone furoate,288,null,Once-Daily Investigational Nasal Spray In Adults And Adolescents With Seasonal Allergic Rhinitis (SAR),FFR104861; NCT00197262,GlaxoSmithKline plc,13577,"AUGUST   , 31, 2005",Completed
2,Intraocular pressure,Diabetic macular edema,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,null,grid laser photocoagulation treatment; triamcinolone acetonide,null,null,The Safety and Efficacy of Combined Subtenon Triamcinolone and Grid Laser Photocoagulation as Primary Treatment for Diabetic Macular Edema - A Pilot Study,CUHK_CCT00130; ChiCTR-TRC-09000743,Chinese University of Hong Kong,135786,"JUNE     , 09, 2007",Completed
2,null,Seasonal allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,1000,fexofenadine; fluticasone furoate,1000,null,Fluticasone Furoate Nasal Spray Versus Oral Fexofenadine,2015-004885-27; FFU109045; NCT00435461,GlaxoSmithKline Inc,13581,"DECEMBER , 31, 2006",Completed
2,null,Seasonal allergic rhinitis,null,Phase 2 Clinical,C2,"budesonide + azelastine (intranasal Captisol-enabled, allergic rhinitis), Sedor Pharmaceuticals",62431,108,Astelin; CDX-313; Rhinocort Aqua,108,null,Compare Captisol-Enabled (CE) Budesonide + Azelastine Nasal Solution and Rhinocort Aqua + Astelin in an Environmental Exposure Chamber (EEC) Study of Allergic Rhinitis,CDX313CT001; NCT00940953; P2DS07001,Ligand Pharmaceuticals Inc,58894,"FEBRUARY , 29, 2008",Completed
2,Diastolic blood pressure; Forced Vital Capacity; Forced expiratory volume; Glucose; Heart rate; Peak expiratory flow rate; Potassium; Systolic blood pressure,Asthma,Pulmicort Turbuhaler; Serevent Diskus,Phase 2 Clinical,C2,"budesonide + salmeterol  (inhalation powder, respiratory diseases), Laboratoires SMB",78537,48,Busal,48,null,"A study to compare the blood concentration of budesonide and the bronchodilatory effect after administration of the following study drugs: Budesonide-Salmeterol DPI capsule 75-25 microg, Budesonide-Salmeterol DPI capsule 75-12.5 microg, Budesonide-Salmeterol DPI capsule 75-6.25 microg delivered by the Axahaler versus Serevent Diskus 50 microg + Pulmicort Turbuhaler 100 microg co-administration in asthmatic children",2017-003330-91; BUSAL-II-17-1,Laboratoires SMB SA,337272,"NOVEMBER , 29, 2017",Completed
1,Heart rate; Hydrocortisone; Potassium,Chronic obstructive pulmonary disease,null,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,36,"GW-642444-M; fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",36,null,"An open-label, non-randomized, pharmacokinetic and safety study of repeat-doses of fluticasone furoate and GW-42444M combination in healthy subjects and in subjects with mild, moderate or severe hepatic impairment",2010-020157-13; HZA111789,GlaxoSmithKline plc,257760,"SEPTEMBER, 20, 2010",Terminated
1,Heart rate; Hydrocortisone; Potassium,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,36,"GW-642444-M; fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",36,null,"An open-label, non-randomized, pharmacokinetic and safety study of repeat-doses of fluticasone furoate and GW-42444M combination in healthy subjects and in subjects with mild, moderate or severe hepatic impairment",2010-020157-13; HZA111789,GlaxoSmithKline plc,257760,"SEPTEMBER, 20, 2010",Terminated
1,null,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,65,GW-685698,65,null,Study Of Perennial Allergic Rhinitis,FFR100688; JapicCTI-050024; NCT00358475,GlaxoSmithKline plc,13878,"JUNE     , 30, 2005",Completed
2,Peak nasal inspiratory flow; Peak nasal inspiratory flow,Allergic rhinitis,fexofenadine,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,680,"fluticasone furoate (nasal, allergic rhinitis), GSK",680,null,Fluticasone Furoate Nasal Spray Versus Oral Fexofenadine,2015-004873-34; FFU109047; NCT00502775,GlaxoSmithKline Inc,13883,"AUGUST   , 31, 2007",Completed
2,Forced expiratory volume in 1 s,Asthma,fluticasone propionate,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,49,"beclometasone (inhaled, CFC-free), Teva",30,null,Efficacy of Qvar Versus Flovent Diskus on Small Airways in Poorly Controlled Asthmatic Adolescents/Adult Patients,IXR-402-4-196; NCT00071552,"IVAX Research Inc, Teva Pharmaceutical Industries Ltd",22588,"JANUARY  , 31, 2004",Terminated
2,Eosinophils; FEV1,Chronic obstructive pulmonary disease,vilanterol,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,1626,fluticasone furoate + vilanterol trifenatate,1626,null,A Study to Evaluate the Efficacy and Safety of Fluticasone Furoate (FF)/GW-642444 Inhalation Powder in Subjects With Chronic Obstructive Pulmonary Disease (COPD),102871; HZC102871; NCT01009463,"Glaxo Group Research Ltd, GlaxoSmithKline plc",61703,"SEPTEMBER, 25, 2009",Completed
2,Forced expiratory volume; Peak expiratory flow rate,Asthma,null,Phase 3 Clinical,C3,"salmeterol xinafoate + fluticasone propionate (inhaled/Spiromax, asthma), Teva",95991,625,Airexar Spiromax; fluticasone,1363,null,Study of Fluticasone Propionate MDPI Compared With Fluticasone/Salmeterol MDPI in Adolescent and Adult Patients With Persistent Asthma,2014-001149-25; FSS-AS-301; NCT02139644,Teva Pharmaceutical Industries Ltd,187642,"MAY      , 31, 2014",Completed
3,Forced expiratory volume; Glucose; PR interval; Peak expiratory flow rate; QRS complex; QT interval,Asthma,fluticasone furoate,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,870,ELLIPTA dry powder inhaler; Ellipta,870,null,Safety and Efficacy Study of Fluticasone Furoate/Vilanterol (FF/VI) Fixed Dose Combination (FDC) Compared to FF Alone in Subjects With Asthma,107116; 2016-004086-87; CTR20181312; HZA107116; JapicCTI-183937; NCT03248128,"Glaxo Group Research Ltd, GlaxoSmithKline plc",308779,"OCTOBER  , 20, 2017",Recruiting
3,null,Blepharoconjunctivitis,AzaSite; dexamethasone,Phase 3 Clinical,C3,"azithromycin + dexamethasone (sustained release, DuraSite), InSite",55854,null,AzaSite Plus,null,null,Comparative Study of AzaSite Plus Compared to AzaSite Alone and Dexamethasone Alone to Treat Subjects With Blepharoconjunctivitis,C-07-502-003; NCT00754949,InSite Vision Inc,28944,"SEPTEMBER, 16, 2008",Terminated
3,FEV1; Heart rate; Plasma glucose; Plasma potassium,Asthma,null,Phase 2 Clinical,C2,"beclomethasone dipropionate, (CFC-free), Teva",44414,60,AeroChamber Plus; Foster; Qvar; formoterol fumarate (Atimos),60,ADO pMDI,Single-Dose Clinical Pharmacology Study in Asthmatic Adolescent and Adult Patients,2011-005108-14; ADO pMDI; CCD-1104-PR-0062; NCT01803087,Chiesi Farmaceutici SpA,113665,"FEBRUARY , 29, 2012",Completed
2,null,Asthma,null,Phase not specified,NS,"beclomethasone dipropionate, (CFC-free), Teva",44414,85,"beclometasone (inhaled, CFC-free), Teva; budesonide",85,null,To Compare the Clinical Effects of Beclomethasone Dipropionate MDI With Spacer and Budesonide MDI With Spacer in the Treatment of Children With Mild Persistent Asthma Aged 7 to 15 Years,CTRI/2013/03/003495,"Department of Pharmacology, PGIMER",156545,"NOVEMBER , 04, 2011",Completed
1,null,Age related macular degeneration,null,Phase 1 Clinical,C1,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,16,fluocinolone acetonide,16,null,Fluocinolone implant to treat macular degeneration,01-EI-0058; 010058; NCT00008515,National Eye Institute,4710,"JANUARY  , 31, 2001",Completed
2,Retina,Diabetic macular edema,null,Phase not specified,NS,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,60,triamcinolone acetonide; vitrectomy,60,null,Vitrectomy combined with IVTA for DME,UMIN000017250,Tohoku University,228441,"MAY      , 01, 2015",Not yet recruiting
2,Carbon monoxide diffusing capacity,Chronic obstructive pulmonary disease,null,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,95,Anoro Ellipta; Arnuity Ellipta; hyper polarized xenon-129 MRI,95,null,Hyperpolarized Xenon-129 MRI: a New Multi-dimensional Biomarker to Determine Pulmonary Physiologic Responses to COPD Therapeutics,19352; NCT03002389,University of Virginia,283200,"NOVEMBER , 05, 2017",Recruiting
4,null,Chalazion,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,120,"5-fluorouracil; 5-fluorouracil; incision and curettage; triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi; triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",120,CTS,Chalazia Treatment Study,42336; 42336-D; CTS; NCT02025023; STUDY00003748,University of Washington,165479,"DECEMBER , 31, 2013",Recruiting
3,FEV1,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,1226,GW-642444; Relovair; fluticasone furoate,1224,null,Efficacy and Safety Study of Fluticasone Furoate(FF)/GW-642444 Inhalation Powder and the Individual Components in Subjects With Chronic Obstructive Pulmonary Disease (COPD),112207; 2009-013067-19; HZC112207; JapicCTI-101097; NCT01054885,GlaxoSmithKline plc,63564,"OCTOBER  , 19, 2009",Completed
3,Cortisol; FEV1,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,1031,GW-642444; Relovair; fluticasone furoate,1030,null,A 6-Month Study to Evaluate the Efficacy and Safety of Fluticasone Furoate(FF)/GW-642444 Inhalation Powder in Subjects With Chronic Obstructive Pulmonary Disease (COPD),112206; HZC112206; JapicCTI-101096; NCT01053988,GlaxoSmithKline plc,63573,"OCTOBER  , 05, 2009",Completed
1,null,Xerophthalmia,null,Phase 2 Clinical,C2,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",56108,350,BOL-303242X,350,null,Study to Assess the Safety and Efficacy of BOL-303242X Ophthalmic Suspension in Dry Eye Syndrome,637; EudraCT: 2010-018441-61; NCT01163643,Bausch & Lomb Inc,68287,"JULY     , 31, 2010",Completed
3,null,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"budesonide + formoterol (inhalant aerosol, chronic obstructive pulmonary disease), Pearl Therapeutics",70143,59,PT-009; PT-010; Symbicort Turbohaler,72,null,Pharmacokinetics and Safety Study of PT-010 in Healthy Subjects,NCT02189304; PT010002-00,Pearl Therapeutics Inc,204168,"JUNE     , 01, 2014",Completed
1,null,Dermatitis,null,Phase 4 Clinical,C4,"clobetasol propionate foam, Connetics",18168,30,clobetasol propionate,30,null,"Study to Evaluate Safety, Efficacy and Tolerability of Clobetasol Propionate for Chronic Dermatitis",NCT00828464; U0280-401,Stiefel,55280,"OCTOBER  , 31, 2008",Completed
3,Forced expiratory volume; Peak expiratory flow rate,Asthma,Foster; Foster; Tiotropium Respimat,Phase 3 Clinical,C3,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,1433,Trimbow,1433,TRIGGER,Triple in Asthma High Strength Versus ICS/LABA HS and Tiotropium,2015-000717-40; CCD-05993AB2-02; NCT02676089; TRIGGER,Chiesi Farmaceutici SpA,252801,"APRIL    , 06, 2016",Completed
2,null,Chronic obstructive pulmonary disease,vilanterol,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,408,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",408,null,A 24-week study to evaluate the effect of fluticasone furoate/vilanterol 100/25 microg Inhalation Powder delivered once-daily via a Novel Dry Powder Inhaler on arterial stiffness compared with placebo and vilanterol in subjects with Chronic Obstructive Pulmonary Disease (COPD),2010-023091-10; HZC113108,GlaxoSmithKline plc,220553,"APRIL    , 05, 2011",Completed
1,Anterior chamber; Intraocular pressure,Ocular inflammation,null,Phase 3b Clinical,C3B,"dexamethasone (punctum plug, ocular inflammation), Ocular Therapeutix",80269,240,dexamethasone,241,null,"Second, Phase III Study Evaluating Safety and Efficacy of OTX-DP for Treatment of Ocular Inflammation and Pain After Cataract Surgery",NCT02089113; OTX-14-003,Ocular Therapeutix Inc,178013,"APRIL    , 30, 2014",Completed
2,Airway resistance; Forced Vital Capacity; Forced expiratory flow ; Forced expiratory volume; Lung; Lung clearance index; Partial pressure of oxygen,Asthma,Relvar Ellipta,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,105,Abriff,105,null,A Study to Evaluate the Effect of Fluticasone/Formoterol Breath Actuated Inhaler (BAI) or Relvar Ellipta DPI on Ventilation Heterogeneity in Asthma,2015-000801-38; KFL3502; NCT02753712,Mundipharma International Corp Ltd,259438,"JUNE     , 15, 2016",Completed
3,Forced Vital Capacity; Forced expiratory volume,Chronic obstructive pulmonary disease,null,Phase 2b Clinical,C2B,"budesonide (aerosol inhalant/MDI, asthma), Pearl Therapeutics",90863,180,PT-009; budesonide; formoterol,180,null,"Efficacy and Safety Study of PT-009, PT-008, and PT-005 in Subjects With Moderate to Severe Chronic Obstructive Pulmonary Disease (COPD)",NCT02196077; PT009001,Pearl Therapeutics Inc,205952,"AUGUST   , 01, 2014",Completed
3,Forced Vital Capacity; Forced expiratory volume,Chronic obstructive pulmonary disease,null,Phase 2b Clinical,C2B,"budesonide + formoterol (inhalant aerosol, chronic obstructive pulmonary disease), Pearl Therapeutics",70143,180,PT-009; budesonide; formoterol,180,null,"Efficacy and Safety Study of PT-009, PT-008, and PT-005 in Subjects With Moderate to Severe Chronic Obstructive Pulmonary Disease (COPD)",NCT02196077; PT009001,Pearl Therapeutics Inc,205952,"AUGUST   , 01, 2014",Completed
1,null,Nasal polyps,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,30,fluticasone furoate,30,null,Compare the Effects of Fluticasone Furoate Nasal Spray versus Placebo in Patients With Nasal Polypoid Disease,NA_00029405; NCT01013701,Johns Hopkins University,61959,"NOVEMBER , 30, 2009",Not yet recruiting
1,Intraocular pressure,Xerophthalmia,null,Phase 2 Clinical,C2,"dexamethasone (punctum plug, ocular inflammation), Ocular Therapeutix",80269,43,OTX-DP,43,null,A Phase II Study Evaluating the Safety and Efficacy of OTX-DP for the Treatment of Dry Eye,NCT02468700; OTX-14-006,Ocular Therapeutix Inc,231838,"JANUARY  , 31, 2015",Completed
3+,Central cornea; Intraocular pressure; Macula retinae,Ocular infection,Moxeza; nepafenac; prednisolone acetate,Phase 4 Clinical,C4,"triamcinolone acetonide + moxifloxicin hydrochloride + vancomycin (ocular disease), Harrow Health",95157,59,TriMoxiVanc; TriMoxiVanc; nepafenac,66,null,Dropless Versus Standard Drops Contralateral Eye Study,CEP 14-002; NCT02515045,"Carolina Eyecare Physicians, LLC",236566,"JANUARY  , 31, 2015",Completed
1,Dystrophin,Duchenne dystrophy,null,Phase 1 Clinical,C1,"deflazacort (oral tablet/suspension, Duchenne muscular dystrophy), PCT Therapeutics",86985,24,deflazacort,24,null,"An Open-Label, Long-Term Extension Study to Evaluate the Safety and Tolerability Deflazacort",MP-104-CL-022OLE; NCT02295748,PTC Therapeutics Inc,216535,"DECEMBER , 31, 2014",Completed
2,null,Colitis,null,Phase 3 Clinical,C3,"budesonide (gastroresistant capsule, Crohn's disease/ulcerative colitis), Dr Falk Pharma/Salix",59671,92,budesonide; mesalazine,92,null,Budesonide Capsules Versus Mesalazine Granules Versus Placebo in Collagenous Colitis,2006-004159-39; BUC-60/COC; NCT00450086,Dr Falk Pharma GmbH,19193,"MARCH    , 31, 2007",Completed
2,FEV1,Asthma,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,2020,Relovair; fluticasone furoate,2019,null,Asthma Exacerbation Study,106837; 2009-011461-84; HZA106837; JapicCTI-101072; NCT01086384,GlaxoSmithKline plc,64836,"FEBRUARY , 22, 2010",Completed
1,Body surface area,Psoriasis,null,Phase 3 Clinical,C3,"halobetasol propionate (0.01% topical lotion, plaque psoriasis), Ortho Dermatologics",109395,213,Bryhali,213,null,Safety and Efficacy of IDP-122 in the Treatment of Plaque Psoriasis,NCT02515097; V01-122A-302,Bausch Health Companies Inc,236598,"NOVEMBER , 10, 2015",Completed
3,Retina; Visual acuity,Diabetic macular edema,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,142,bevacizumab; bevacizumab; triamcinolone acetonide; triamcinolone acetonide,65,ATEMD,Efficacy Study of Triamcinolone and Bevacizumab Intravitreal for Treatment of Diabetic Macular Edema,108/08; ATEMD; NCT00737971,Universidade Federal de Sao Paulo - UNIFESP,24389,"AUGUST   , 31, 2008",Completed
3,Forced expiratory volume,Asthma,Qvar,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,480,beclomethasone dipropionate,480,null,Beclomethasone dipropionate HFA in adult and adolescent subjects with persistent asthma,APC-1000-02; NCT03834012,Adamis Pharmaceuticals Corp,369472,"FEBRUARY , 28, 2019",Not yet recruiting
2,Diastolic blood pressure; Heart rate; Systolic blood pressure,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,24,CHF-5993; hydrofluoroalkane 134-a pressurized-metered dose inhaler (HFA pMDI),24,Triple study,Pharmacokineticsof the active components of anextrafine formulation of beclomethasone dipropionate/formoterol fumarate/glycopyrronium bromide (BDP/FF/G)delivered via a hydrofluoroalkane 134-a pressurized-metered dose inhaler (HFA pMDI) in Chinese healthy adults,ChiCTR1800019095; Triple study,"Chiesi Farmaceutici SpA, West China Hospital",358796,"OCTOBER  , 29, 2018",Recruiting
1,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bicarbonates; Bilirubin; Blood platelets; Blood pressure; Carbon dioxide; Chlorides; Creatine kinase; Creatinine; Eosinophils; Erythrocytes; Glucose; Heart rate; Hematocrit; Hemoglobin; Hydrocortisone; Ketones; Lactate dehydrogenase; Leukocyte count; Lymphocytes; Monocytes; Neutrophils; Potassium; Sodium; Total protein; Urea; Urea nitrogen; Uric acid; gamma-Glutamyltransferase,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,187,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",187,null,A Long-term Safety Study of Fluticasone Furoate (FF)/GW-642444 in Japanese Subjects With COPD,114156; JapicCTI-101342; NCT01192191,GlaxoSmithKline plc,230954,"AUGUST   , 31, 2010",Completed
5,Forced expiratory volume; Peak expiratory flow rate,Chronic obstructive pulmonary disease,null,Phase 2 Clinical,C2,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,338,"Arnuity; GSK-2834425; Relvar Ellipta; Seretide; fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",338,null,Evaluation of Umeclidinium Bromide in Combination With Fluticasone Furoate in COPD Subjects With an Asthmatic Component,2014-000883-16; GSK: 200699; NCT02164539,GlaxoSmithKline plc,197089,"JULY     , 01, 2014",Completed
2,Retina; Visual acuity,Ocular inflammation,prednisolone acetate,Phase 4 Clinical,C4,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,52,Durezol,52,null,"Study of Difluprednate versus Prednisolone Acetate on Visual Acuity, and Corneal Edema Following Cataract Surgery",NCT01244334; SEMC 5/2009-011,Cincinnati Eye Institute,72412,"MARCH    , 31, 2009",Completed
1,null,Ocular pain,null,Phase 2 Clinical,C2,"dexamethasone (punctum plug, ocular inflammation), Ocular Therapeutix",80269,60,OTX-DP,60,null,Phase II Study Evaluating Safety/Efficacy of OTX-DP for Treatment of Ocular Inflammation and Pain After Cataract Surgery,NCT01666210; OTX-12-002,Ocular Therapeutix Inc,90260,"OCTOBER  , 31, 2012",Completed
1+,null,Allergic rhinitis,null,Phase 4 Clinical,C4,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,25,Alvesco; Beconase; Omnaris; Qvar,25,null,Sunovion Growth Study Pediatric Subjects With Mild Asthma and Allergic Rhinitis,NCT01550471; RC#5401,West Penn Allegheny Health System Inc,86234,"MARCH    , 31, 2012",Completed
4,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bicarbonates; Bilirubin; Blood platelets; Body temperature; Bone mineral density; Calcium; Carbon dioxide; Chlorine; Creatine kinase; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; Forced expiratory volume; Glucose; Heart rate; Hematocrit; Hemoglobin; Leukocyte count; Lymphocytes; Monocytes; Neutrophils; Phosphorus; Potassium; Sodium; Systolic blood pressure; Urea nitrogen; Uric acid; gamma-Glutamyltransferase,Chronic obstructive pulmonary disease,Ellipta; umeclidinium bromide,Phase 3b Clinical,C3B,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,1058,Elebrato Ellipta,1055,null,Comparative Study of Fluticasone Furoate(FF)/Umeclidinium Bromide (UMEC)/Vilanterol (VI) Closed Therapy Versus FF/VI Plus UMEC Open Therapy in Subjects With Chronic Obstructive Pulmonary Disease (COPD),200812; 2015-005212-14; JapicCTI-163329; NCT02729051,GlaxoSmithKline plc,257588,"JUNE     , 29, 2016",Completed
3,null,Allergic conjunctivitis,null,Phase 2 Clinical,C2,"ciclosporin + prednisolone (allergic conjunctivitis), CombinatoRx/Fovea",56186,716,"cyclosporine; cyclosporine + prednisolone (allergic conjunctivitis), CombinatoRx/Fovea; prednisolone",716,null,Study Evaluating the Efficacy of Administration of Cyclosporine (Low-Dose and High-Dose) and Prednisolone Acetate Compared to Its Components and Vehicle in Patients With Allergic Conjunctivitis,10-003-03; FOV1101/CLIN202; NCT01120132,Fovea Pharmaceuticals SA,66292,"MAY      , 31, 2010",Completed
2,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bicarbonates; Bilirubin; Blood platelets; Blood pressure; Calcium; Carbon dioxide; Chlorides; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; FEV1; Glucose; Heart rate; Hematocrit; Hemoglobin; Ketones; Lactate dehydrogenase; Leukocyte count; Lymphocytes; Monocytes; Neutrophils; PEF; Phosphorus; Potassium; Sodium; Systolic blood pressure; Total cholesterol; Total protein; Urea; Uric acid; Urinary protein; cortisol; gamma-Glutamyltransferase,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,627,fluticasone; fluticasone furoate,627,null,A Randomized Study To Evaluate The Efficacy And Safety Of An Investigational Drug In Adolescent And Adult Subjects With Asthma Uncontrolled on Moderate-Dose ICS Therapy,2007-004458-98; FFA109684; NCT00603746,"GlaxoSmithKline Research & Development Ltd, GlaxoSmithKline plc",22441,"DECEMBER , 01, 2007",Completed
1,null,Colitis,null,Phase 3 Clinical,C3,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,75,budesonide,48,null,Budesonide for Maintenance Treatment of Collagenous Colitis,MIMIC; NCT00180076,University of Dresden,64504,"JULY     , 31, 2004",Completed
1,null,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"beclomethasone dipropionate  (waterless nasal spray, allergic rhinitis), Teva",76229,474,Qnaze,470,null,Study in Adult and Adolescent Subjects With PAR (Perennial Allergic Rhinitis),BDP-AR-302; NCT01134705,Teva Pharmaceutical Industries Ltd,66890,"MAY      , 31, 2010",Completed
2,Cytokines; Neutrophils,Chronic obstructive pulmonary disease,budesonide,Phase 2 Clinical,C2,TPI-1020,29656,62,TPI-1020 ,62,null,"Safety, Tolerability and PD Activity of Inhaled TPI-1020 Versus Inhaled Budesonide in COPD Patients",NCT00483743; TPI 1020-203,Pharmaxis Ltd,3700,"NOVEMBER , 30, 2007",Completed
2+,"Antral follicles; Blood pressure; Body Mass Index; Bone mineral density; Hemoglobin A, glycosylated; High-density lipoprotein cholesterol; Testosterone/Androstenedione ratio; Total cholesterol; Triglycerides",Congenital adrenal hyperplasia,cortisone acetate; dexamethasone; hydrocortisone; prednisolone; prednisone,Phase 4 Clinical,C4,"dual-release hydrocortisone (oral, adrenal insufficiency), ViroPharma",58174,150,Plenadren,150,CareOnTIME,Innovative Treatment in Congenital Adrenal Hyperplasia,140/16; CareOnTIME; NCT03760835,Universita degli Studi di Napoli Federico II,362194,"AUGUST   , 11, 2016",Recruiting
1,Eosinophils,Eosinophilic esophagitis,null,Phase 3 Clinical,C3,"budesonide (oral, eosinophilic esophagitis), Shire",60523,200,budesonide,200,ORBIT2,An Extension Study to Evaluate Maintenance of Efficacy and Long-term Treatment Effect of Oral Budesonide Suspension (OBS) in Adults and Adolescents With Eosinophilic Esophagitis (EoE),NCT02736409; ORBIT2; SHP621-302,Shire plc,258090,"APRIL    , 29, 2016",No longer recruiting
1,Visual acuity,Retinal venous occlusion,null,Phase 2 Clinical,C2,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,20,fluocinolone acetonide,20,FAVOR,Fluocinolone Acetonide Intravitreal Inserts for Vein Occlusion in Retina,C-01-08-006; FAVOR; NCT00770770,Alimera Sciences Inc,30143,"MAY      , 31, 2009",Terminated
5,null,Contact dermatitis,vehicle ointment (paraffin oil/soft white paraffin),Phase 4 Clinical,C4,"triamcinolone acetonide (topical, dermatoses, AzoneTS), Echo",59469,36,Clarelux; Durhalieve; Protopic; glycerol,36,null,"Efficacy of glycerol, two topical steroids, and a topical immune modulator against skin irritation",2008-001678-34; NCT00779792; WA+TR_1,Odense University Hospital,31700,"SEPTEMBER, 30, 2008",No longer recruiting
1,null,Eczema,null,Phase 3 Clinical,C3,"clobetasol propionate shampoo (psoriasis), Galderma/Maruho",96680,50,GK-664-S,50,null,"A Open-Label, Phase III, Multicenter, Parallel Group Study to Evaluate Efficacy and Safety Study of GK-664-S in Subjects With Moderate-to-Severe Scalp Eczema Dermatitis Except for Seborrheic Dermatitis",JapicCTI-184247,Maruho Co Ltd,366908,"DECEMBER , 01, 2018",Not yet recruiting
1,Blood pressure; Heart rate; Potassium; QT interval; Serum cortisol; Whole blood potassium,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,16,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",16,null,Relovair PD PK in Chinese Healthy Subjects,115199; NCT01711463,GlaxoSmithKline plc,95532,"DECEMBER , 31, 2012",Completed
2+,Forced expiratory volume,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,null,"Ellipta inhaler; fluticasone furoate + umeclidinium + vilanterol (dry powder inhaled, COPD), GlaxoSmithKline; fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline; salbutamol, GlaxoSmithKline; umeclidinium bromide",null,null,"A Study Comparing the Closed Triple Therapy, Open Triple Therapy and a Dual Therapy for Effect on Lung Function in Subjects With Chronic Obstructive Pulmonary Disease (COPD)",205165; NCT02731846,GlaxoSmithKline plc,257690,"JUNE     , 30, 2016",Terminated
1,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Calcium; Chlorides; Creatinine; Diastolic blood pressure; Eosinophils; FEV1; Glucose; Heart rate; Hematocrit; Hemoglobin; Interleukin-8; Leukocyte count; Lymphocytes; Mean corpuscular hemoglobin; Mean corpuscular volume; Monocytes; Myeloperoxidase; Neutrophils; Potassium; Reticulocytes; Sodium; Systolic blood pressure; Total protein; gamma-Glutamyltransferase,Asthma,null,Phase 2 Clinical,C2,"870086 (inhaled, asthma), GlaxoSmithKline",54598,24,"870086 (inhaled, asthma), GlaxoSmithKline",24,null,A Study to Evaluate the Effect of GW-870086-X on Allergen Challenge in Mild Asthmatics,110762; 2007-005791-14; NCT00857857,GlaxoSmithKline plc,48265,"FEBRUARY , 16, 2009",Completed
2,Anterior chamber; Intraocular pressure; Retina,Pain,Prednefrin,Phase 3 Clinical,C3,"Difluprednate (ophthalmic solution, ocular inflammation/ocular pain), Laboratorios Sophia",112786,178,PRO-145,178,PRO-145/III,Clinical Study of the Efficacy of the Ophthalmic Emulsion PRO-145 for Inflammation and Pain After Phacoemulsification,NCT03693989; PRO-145/III; SOPH145-0716 / III,Laboratorios Sophia,355334,"OCTOBER  , 01, 2018",Recruiting
1,null,Allergic rhinitis,null,Phase Not Applicable,PNA,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,2000,Allermist,2000,null,Drug Use Investigation for Allermist,113407; NCT01376206,GlaxoSmithKline plc,78401,"DECEMBER , 31, 2009",Completed
1,null,Atopic dermatitis,null,Phase 2 Clinical,C2,mapracorat,46177,263,mapracorat,263,null,Efficacy and Safety of Different Concentrations of ZK-245186 in Atopic Dermatitis (AD),1403380; 15267; NCT01228513,Bayer AG,71668,"NOVEMBER , 30, 2010",Completed
2,Forced expiratory volume in 1 s (FEV1),Chronic obstructive pulmonary disease,"fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline",Phase 3b Clinical,C3B,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,828,"fluticasone furoate + vilanterol trifenatate (oral inhalant, asthma/COPD), GlaxoSmithKline",828,null,A Study To Assess The Efficacy Of Fluticasone Furoate/Vilanterol (FF/VI) Inhalation Powder 100/25 Microg Once-Daily Compared With Fluticasone Propionate/Salmeterol Inhalation Powder 250/50 Microg Twice-daily In Subjects With Chronic Obstructive Pulmonary Disease (COPD),077855 and 050703; 116974; NCT01706328; RLV116974,GlaxoSmithKline plc,94705,"OCTOBER  , 15, 2012",Completed
3,Blood pressure; Diastolic blood pressure; Heart rate; Systolic blood pressure,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",90982,18,"fluticasone furoate; fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline; umeclidinium",18,null,To Investigate the Pharmacokinetics and Safety of Fluticasone Furoate (FF/Umeclidinium (UMEC) Combination Compared With FF and UMEC Monotherapies in Adult Healthy Volunteers Using a Dry Powder Inhaler (DPI),116524; NCT01725685,GlaxoSmithKline plc,97979,"NOVEMBER , 08, 2012",Completed
3,Blood pressure; Diastolic blood pressure; Heart rate; Systolic blood pressure,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,18,"fluticasone furoate; fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline; umeclidinium",18,null,To Investigate the Pharmacokinetics and Safety of Fluticasone Furoate (FF/Umeclidinium (UMEC) Combination Compared With FF and UMEC Monotherapies in Adult Healthy Volunteers Using a Dry Powder Inhaler (DPI),116524; NCT01725685,GlaxoSmithKline plc,97979,"NOVEMBER , 08, 2012",Completed
1,null,Meniere disease,null,Phase 3 Clinical,C3,"dexamethasone (sustained release/intratympanic injection, ear disorders), Otonomy",65289,141,dexamethasone,141,null,A 6-Month Extension Study of OTO-104 in Meniere's Disease,104-201610; 2016-000766-29; NCT02768662,Otonomy Inc,260634,"AUGUST   , 31, 2016",Terminated
1,null,Meniere disease,null,Phase 3 Clinical,C3,"dexamethasone (sustained release/intratympanic injection, ear disorders), Otonomy",65289,176,dexamethasone,174,AVERTS-2,Study of OTO-104 in Subjects With Unilateral Meniere's Disease,104-201508; 2015-004496-71; AVERTS-2; NCT02717442,Otonomy Inc,256498,"MARCH    , 31, 2016",Terminated
2,Knee stiffness,Osteoarthritis,Monovisc,Phase 4 Clinical,C4,CINGAL,103224,60,CINGAL,60,EEFFEK,Early Effect of Cingal Compared to Monovisc in Patients With Osteoarthritis of the Knee,CIN-401; EEFFEK; NCT03062787,Pharmascience Inc,289267,"APRIL    , 05, 2017",Completed
3,null,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"budesonide + formoterol (inhalant aerosol, chronic obstructive pulmonary disease), Pearl Therapeutics",70143,8564,PT-003; PT-009; PT-010,8564,Ethos,Study to Assess the Efficacy and Safety of PT-010 Relative to PT-003 and PT-009 in Subjects With Moderate to Very Severe COPD,118313; 2014-005671-92; Ethos; JapicCTI-184078; NCT02465567; PT010005,Pearl Therapeutics Inc,231627,"JUNE     , 30, 2015",No longer recruiting
2+,FVC,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,24,GW-685698X; fluticasone propionate,24,null,"A Randomised, Double-blind, Placebo-controlled, 6-way Cross-over Design Study to Investigate the Effect of 250 microg Single Inhaled Doses of GW-685698X and Fluticasone Propionate on Airway Responsiveness to Adenosine 5’-monophosphate (AMP) Challenge in Mild Asthmatic Patients",FFA10027,GlaxoSmithKline plc,87519,"APRIL    , 23, 2004",Completed
3,Diastolic blood pressure; Forced Vital Capacity; Forced expiratory volume; Glucose; Heart rate; PR interval; Peak expiratory flow rate; Potassium; QRS complex; QT interval; Systolic blood pressure,Asthma,Perforomist,Phase 2 Clinical,C2,"beclomethasone dipropionate, (CFC-free), Teva",44414,67,CHF-1531,67,FLASH,A Dose-Ranging Study of CHF-1531 in Asthmatic Subjects,CCD-05993AA3-03; FLASH; NCT03086460,Chiesi Farmaceutici SpA,291496,"SEPTEMBER, 08, 2017",Completed
5,null,Psoriasis,Dermovate; Diprosone; Elocon; Locoid,Phase 1 Clinical,C1,"clobetasol propionate foam, Connetics",18168,36,Enstilar,36,null,Vasoconstriction Trial With LEO-90100 Aerosol Foam,LP0053-1276; NCT02973776,LEO Pharma A/S,280409,"DECEMBER , 31, 2016",Completed
1,null,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,460,Nasacort AQ,474,null,An Efficacy and Safety Evaluation of Nasacort AQ in Children Ages 2 to 5 Years With Perennial Allergic Rhinitis,NCT00132925; XRG5029C_3502,Sanofi SA,12107,"NOVEMBER , 30, 2003",Completed
2,Alanine transaminase; Albumin; Aspartate aminotransferase; Bicarbonates; Bilirubin; Blood platelets; Body temperature; Calcium; Chlorides; Creatinine; Diastolic blood pressure; Erythrocytes; Glucose; Heart; Heart rate; Hematocrit; Hemoglobin; Ketones; Lactate dehydrogenase; Leukocyte count; Lung; Mean corpuscular hemoglobin; Nitrite; Phosphate; Potassium; Skin; Sodium; Systolic blood pressure; Total cholesterol; Total protein; Triglycerides; Urea nitrogen; Uric acid; Urobilinogen; gamma-Glutamyltransferase,Psoriasis,betamethasone valerate,Phase 1b Clinical,C1B,"betamethasone valerate (topical emollient foam, psoriasis/dermatitis), Foamix",53978,13,LEO-134310,13,null,"Clinical Trial to Assess Safety, Tolerability and the Pharmacodynamic Effect of Different Concentrations of a New Anti-inflammatory Substance in Subjects With Chronic Plaque Psoriasis",2018-000140-26; LP0155-1375; NCT03669757,LEO Pharma A/S,353433,"SEPTEMBER, 27, 2018",Completed
3,null,Arthralgia,Monovisc; triamcinolone hexacetonide,Phase 3 Clinical,C3,CINGAL,103224,576,CINGAL,576,null,Study of Cingal for the Relief of Knee Osteoarthritis Compared to Triamcinolone Hexacetonide,2017-000355-46; CINGAL 16-02; NCT03191903,Anika Therapeutics Inc,301892,"MAY      , 25, 2017",Completed
4,Anterior chamber,Uveitis,prednisolone acetate ophthalmic,Phase 3 Clinical,C3,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,251,EGP-437; EyeGate II Drug Delivery System (EGDS); ocular iontophoresis,251,null,Safety and Efficacy of Iontophoretic Dexamethasone Phosphate Ophthalmic Solution in Non-Infectious Anterior Uveitis,EGP-437-006; NCT02517619,Eyegate Pharmaceuticals Inc,236849,"JANUARY  , 16, 2016",Completed
1,Estimated glomerular filtration rate; Synovial membrane,Inflammatory disease,null,Phase 3 Clinical,C3,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,100,FX-006,100,null,Study to Evaluate the Effect of FX-006 on Synovial Inflammation in Patients With osteoarthritis (OA) of the Knee,FX006-2017-014; NCT03529942,Flexion Therapeutics Inc,340019,"APRIL    , 24, 2018",Recruiting
1,Body surface area; Hydrocortisone,Psoriasis,null,Phase 4 Clinical,C4,"halobetasol propionate (0.01% topical lotion, plaque psoriasis), Ortho Dermatologics",109395,45,IDP-122,45,null,A Safety and Pharmacokinetics Study of IDP-122 Lotion in Pediatric Participants With Plaque Psoriasis,NCT03987763; V01-122A-401,"Bausch Health Americas, Inc.",384836,"JUNE     , 08, 2019",Recruiting
1,null,Osteoarthritis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,70,Zilretta,70,null,The Effect of Intra-articular Bilateral Knee Injections of Zilretta on Performance Measures in Adults With Knee OA,NCT03895840; STUDY00142926,University of Kansas Medical Center,375286,"MARCH    , 19, 2018",Recruiting
1,null,null,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,null,Fibrin Glue; triamcinolone acetonide,null,null,A randomized trial for the evaluation of Triamcinolone Acetonide and Fibrin Glue in the prevention of seroma formation after axillary dissection,2011/02145,Tan Tock Seng Hospital,161209,null,Status not specified
3,null,null,PT-007; PT-008,Phase 1 Clinical,C1,"budesonide + salbutamol (asthma), Pearl/ Avillion",109733,91,PT-027,91,LOGAN,A Study to Compare the Pharmacokinetics of Budesonide and Albuterol Delivered by PT027 Compared With PT-007 and PT-008 Administered Separately,D6930C00003; LOGAN; NCT03772223,AstraZeneca plc,363124,"JANUARY  , 21, 2019",Completed
3,null,null,"ciclesonide (metered dose inhaler), Nycomed",Phase 1 Clinical,C1,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,56,BI-54903; butylated hydroxytoluene,56,null,"Safety, Tolerability and Pharmacokinetics of Multiple Rising Doses of Butylated Hydroxytoluene and BI-54903 XX Via Respimat Soft MistTM Inhaler B in Healthy Male Subjects",1256.1; NCT02221375,Boehringer Ingelheim International GmbH,208595,"JUNE     , 30, 2008",Completed
1,null,Ocular inflammation,null,Phase 3 Clinical,C3,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,219,difluprednate,438,null,Study of Difluprednate in the Treatment of Inflammation Following Ocular Surgery,NCT00430092; ST-601A-002b,Sirion Therapeutics Inc,21685,"JANUARY  , 30, 2007",Completed
1,CYP3A4; Hydrocortisone,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,80,fluticasone furoate,80,null,"Study to Look at and Compare How Inhaled and Intravenous Fluticasone Furoate is Processed by the Body in Healthy Caucasian, Japanese, Korean and Chinese Subjects",113477; NCT01000597,GlaxoSmithKline plc,61354,"SEPTEMBER, 17, 2009",Completed
2,Blood cells; C-reactive protein; Cortisol/Creatinine ratio; Glucose; Hydrocortisone; Interleukin-6; Nitric oxide; Tumor necrosis factor,Chronic obstructive pulmonary disease,prednisolone,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,16,Qvar,16,null,Does Extra-Fine Hydrofluoroalkane-Beclomethasone Dipropionate (HFA-BDP) Suppress Small Airways Inflammation in Chronic Obstructive Pulmonary Disease (COPD)?,2008-005909-19; NCT00921921; PAW002,University of Dundee,58085,"JUNE     , 30, 2009",Completed
1,Blood pressure; Cortisol; Diastolic blood pressure; FEV1; Fasting glucose; Potassium; Pulse rate; Systolic blood pressure,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,54,Relovair,54,null,"A Study to Evaluate the Efficacy, Safety, Tolerability, Pharmacokinetic (PK), and Pharmacodynamic (PD) Profiles of Three Doses of Fluticasone Furoate (FF)/GW-642444 Inhalation Powder at the End of a 28-day Treatment Period in Subjects With Chronic Obstructive Pulmonary Disease (COPD) Compared to Placebo",110946; NCT01072149,GlaxoSmithKline plc,64307,"JANUARY  , 01, 2010",Completed
2,null,Allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,300,"fluticasone furoate (nasal, allergic rhinitis), GSK; mometasone (nasal)",300,null,Patient Preference Study of Fluticasone Furoate and Mometasone Furoate Nasal Sprays,201474; NCT02397915,GlaxoSmithKline plc,225253,"MARCH    , 26, 2015",Completed
2,null,Bacterial infection,prednisolone acetate,Phase 3 Clinical,C3,"tobramycin + prednisolone acetate (ophthalmic), ISTA",53134,132,"tobramycin + prednisolone acetate (ophthalmic), ISTA",132,null,A Bioequivalence Study of Tobramycin and Prednisolone Acetate Compared to PredForte,ISTA-TP-CPK01; NCT00198523,ISTA Pharmaceuticals Inc,10077,"JULY     , 31, 2005",Completed
2,null,Ulcerative colitis,mesalazine,Phase 3 Clinical,C3,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,343,Uceris,343,null,Budesonide Capsules Versus Mesalazine Granules in Active Ulcerative Colitis (UC),2006-005377-22; BUC-57/UCA; NCT00747110,Dr Falk Pharma GmbH,187399,"OCTOBER  , 31, 2007",Completed
1,Intraocular Pressure,Uveitis,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,30,triamcinolone acetonide,30,null,Intracameral different dosage triamcinolone acetonide preventing anterior uveitis after pediatric cataract surgery,ChiCTR-TRC-13003465,Beijing Shijitan Hospital,151509,"SEPTEMBER, 02, 2013",Not yet recruiting
2,null,Allergic rhinitis,fluticasone propionate,Phase 1 Clinical,C1,784568,56749,45,GW-784568-X,69,null,Effects Of Single Doses Of GW-784568-X On Allergic Rhinitis Symptoms In Male Subjects Whilst In An Environmental Chamber,BGS105049; NCT00404586,GlaxoSmithKline plc,14031,"SEPTEMBER, 11, 2006",Completed
1,Intraocular pressure,Diabetic macular edema,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,76,triamcinolone acetonide,76,null,"A Randomized, Placebo-Controlled Clinical Trial of Intravitreal Triamcinolone for Refractory Diabetic Macular Edema",8126; NCT00369863,Shaheed Beheshti Medical University,166045,"JUNE     , 30, 2002",Completed
1,null,Unidentified indication,null,Phase 1 Clinical,C1,PF-4308515,64584,27,PF-04308515,27,null,"A Phase I, Single Dose-Escalation Study of PF-04308515 in Healthy Volunteers",B0861001; NCT00990015,Pfizer Inc,60956,"OCTOBER  , 31, 2009",Completed
2,C-peptide; Plasma glucose; Plasma insulin,Inflammatory disease,null,Phase 1 Clinical,C1,PF-4308515,64584,18,PF-04308515; prednisone,18,null,Single Dose Study Of PF-04308515 And Prednisone On Carbohydrate,B0861004; NCT01199029,Pfizer Inc,70171,"AUGUST   , 31, 2010",Completed
1,ACTH; CRP; HgbA1c; IOP; lipid; platelet,Rheumatoid arthritis,null,Phase 2 Clinical,C2,"prednisolone + dipyridamole (osteoarthritis, inflammation), Zalicus",50159,616,CRx-102,616,null,"A Randomized, Double-Blind, Multicenter, One-Year Extension Study to Evaluate the Long-term Safety, Tolerability, and Effectiveness of CRx-102 in Subjects with Active Rheumatoid Arthritis",CRx-102-007E; EudraCT 2007-004399-38,Zalicus Inc,125078,"APRIL    , 18, 2008",Terminated
2,null,Ocular inflammation,BETABIOPTAL,Phase 4 Clinical,C4,"dexamethasone + netilmicin (ophthalmic), SIFI",56575,240,"dexamethasone + netilmicin (ophthalmic), SIFI",240,null,Efficacy and Safety of Topical Steroid/antibiotic Association Treatments Following Phacoemulsification Cataract Extraction,033/SI; EudraCT 2006-003305-13,SIFI Societa Industria Farmaceutica Italiana SpA,118314,"AUGUST   , 01, 2006",Completed
3,Intraocular pressure,Uveitis,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,90,Phacoemulsification; Trabeculectomy; triamcinolone acetonide,90,null,"A Randomized, parallel and Controlled study to Evaluate Inhibition effect of different doses of triamcinolone acetonide in inhibiting anterior uveitis after combined phacoemulsification and trabeculectomy",ChiCTR-TRC-12002314,Beijing Shijitan Hospital,98799,"JANUARY  , 01, 2012",Recruiting
2,Cortisol; Creatinine; FEV1,Asthma,fluticasone + salmeterol,Phase 2 Clinical,C2,"ciclesonide + formoterol (inhaled, asthma), Altana/sanofi-aventis",48419,160,"ciclesonide + formoterol (inhaled, asthma), Altana/sanofi-aventis",160,EXCITED,Comparison of the Efficacy of a Fixed Combination of Ciclesonide and Formoterol versus a Fixed Combination of Fluticasone and Salmeterol,BY9010/M1-502; EXCITED; EudraCT 2004-002983-80,"Mainz University Hospital, Takeda GmbH",116883,"FEBRUARY , 14, 2005",Completed
2+,null,Escherichia coli infection,Entocort,Phase not specified,NS,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,100,ciprofloxacin; metronidazole; trimethoprim,100,null,"A Pilot, Randomized Study to Compare Antibiotic Therapy (Ciprofloxacin, Trimethoprim and Metronidazole) with Standard Therapy (Budesonide) in the Treatment of Active Crohns Disease",UKCRN 13163,Royal Liverpool and Broadgreen University Hospitals NHS Trust,116894,null,Not yet recruiting
1,null,Diabetic macular edema,null,Phase 1 Clinical,C1,"triamcinolone acetonide (intravitreal implant, I-vation, diabetic macular edema), SurModics",55108,30,Triamcinolone acetonide,30,STRIDE,"Sustained Triamcinolone Release for Inhibition of Diabetic macular Edema. A phase I, safety and tolerability study of tramiconolone acetonide (intravitreal implant) for the potential treatment of diabteic macular edema.",STRIDE,SurModics Inc,5034,"JUNE     , 30, 2005",No longer recruiting
2,null,Contact dermatitis,methylprednisolone aceponate,Phase 3 Clinical,C3,"clobetasol propionate foam, Connetics",18168,82,"clobetasol propionate foam, Connetics",82,null,"Randomized Study on the Effectiveness, Safety and Acceptability Of Clobetasol Propionate Foam-cooled (OLUX) in Comparison With Cream Aceponato Methylprednisolone in the Treatment of Allergic Contact Dermatitis",EudraCT 2008-004331-38; olux 01/08,Mipharm SpA,117327,"AUGUST   , 28, 2008",Completed
3,Forced expiratory volume; Peak expiratory flow rate,Asthma,null,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,430,Relovair; fluticasone; fluticasone furoate,430,null,A Study to Compare the Efficacy and Safety of Fluticasone Furoate (FF) 100 microg qd With Fluticasone Propionate (FP) 250 microg bid and FP 100 microg bid in Well-Controlled Asthmatic Japanese Subjects,201135; JapicCTI-142503; NCT02094937,GlaxoSmithKline plc,178963,"MARCH    , 27, 2014",Completed
1,null,Xerophthalmia,null,Phase 2 Clinical,C2,DE-110,66735,140,DE-110,140,null,Safety and Efficacy Study of DE-110 Ophthalmic Suspension for the Treatment of Dry Eye Disease,30-002; NCT01239069,Santen Inc,72186,"NOVEMBER , 30, 2010",Completed
2,Forced expiratory volume,Asthma,fluticasone,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,700,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",700,null,"A Randomized, Double-Blind, Placebo-Controlled, Parallel-Group, Multicenter, Study to Evaluate the Efficacy and Safety of GW-685698X Inhalation Powder 25, 50, 100, and 200 microg Administered Once Daily in the Morning and Fluticasone Propionate 100 microg bid via Diskus Inhalation Powder compared with Placebo for 8 Weeks in Adolescent and Adult Subjects (>/= 12 years old) with Persistent Asthma Symptomatic on Non-ICS Therapy",2005-001123-11; FFA100240,GlaxoSmithKline plc,118070,"AUGUST   , 24, 2005",Completed
2,FEV1,Asthma,"budesonide + formoterol fumarate, AstraZeneca",Phase 3 Clinical,C3,"budesonide + salmeterol  (inhalation powder, respiratory diseases), Laboratoires SMB",78537,216,"budesonide + salmeterol  (inhalation powder, respiratory diseases), Laboratoires SMB",216,null,"A Phase III, Randomized, Parallel-roup, Open Study to Compare the Therapeutic Efficacy and Safety of SMB Budesonide-Salmeterol DPI Capsule 150/25 microg bid Delivered by the Axahaler Versus Symbicort Turbuhaler 200/12 microg bid Over 12 Weeks in Moderate to Severe Persistent Asthmatic Patients",BUSAL-III-08-1; EudraCT 2008-004833-70,Laboratoires SMB SA,118139,"JANUARY  , 16, 2009",Completed
3,null,Adhesive capsulitis,lidocaine; triamcinolone acetonide,Phase not specified,NS,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,64,hydrodilatation; lidocaine; triamcinolone acetonide,64,null,Hydrodilatation with corticosteroid versus corticosteroid injection alone in adhesive capsulitis of shoulder,AJIRB-MED-CT4-10-104; KCT0002006,Ajou University Hospital,268407,"JUNE     , 30, 2010",Completed
2,null,Diabetic macular edema,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,30,bevacizumab; laser photocoagulation; triamcinolone acetonide,30,TRIMADE,"Triple Therapy for Diabetic Macular Edema: Intravitreal Bevacizumab, Triamcinolone Acetonide and Macular Photocoagulation",ChiCTR-TNC-09000606; TRIMADE,Sorocaba Eye Bank,92537,"JANUARY  , 01, 2009",Recruiting
1,Blood glucose level; Blood pressure; Hemoglobin A1c (HbA1c); Intraocular pressure,Macular edema,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,40,triamcinolone acetonide,40,null,Injection of Triamicinolone Acetonide Into the Sub-Tenon Capsule for Treatment of Macular Edema,JPRN-UMIN000000907,"University Of Tokyo, Graduate School Of Medicine",122358,"APRIL    , 01, 2003",Completed
2,null,Asthma,beclomethasone dipropionate,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,null,BTR-15,null,null,"A phase III, randomized, comparative, dose-confirmation study of BTR-15 to target pediatric asthma patients",JapicCTI-090805,Teijin Pharma Ltd,122480,"JULY     , 23, 2009",Completed
1,null,Psoriasis,null,Phase 2 Clinical,C2,DSXS-1538b,103843,3,DSXS-1538b,3,null,Safety Study in Patients With Scalp Psoriasis Suppression Following Maximal Use Treatment With Topical Product,DSXS 1538B; NCT02933502,Taro Pharmaceuticals USA Inc,275506,"JULY     , 11, 2016",Completed
1,intraoccular pressure,Glaucoma,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,110,5-fluorouracil; triamcinolone acetonide,110,null,Prospective Study into the Effect of an Intraocular Injection of a Steroid in the Prevention of Glaucoma Drainage Surgery Failure After Cataract Surgery,ACTRN12611000336987; U1111-1120-4139,Royal Victorian Eye and Ear Hospital,123904,"MAY      , 31, 2011",Not yet recruiting
2,null,Psoriasis,Ultravate,Phase 2 Clinical,C2,"halobetasol propionate (0.01% topical lotion, plaque psoriasis), Ortho Dermatologics",109395,150,Jemdel,150,null,Safety and Efficacy of IDP-122 Lotion When Applied Topically to Subjects With Moderate to Severe Plaque Psoriasis,NCT02785185; V01-122A-203,Bausch Health Companies Inc,262106,"JUNE     , 30, 2016",Completed
2,Forced Vital Capacity; Forced expiratory volume,Chronic obstructive pulmonary disease,Ultibro Breezhaler,Phase 3b Clinical,C3B,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,1532,Trimbow,1532,TRIBUTE,"A Two-arm, Parallel-Group Study of Fixed Combination of CHF-5993 Versus Ultibro in COPD Patients",2014-001704-22; CCD-05993AA1-08; NCT02579850; TRIBUTE,Chiesi Farmaceutici SpA,243510,"MAY      , 29, 2015",Completed
1,null,Scleritis,null,Phase 1 Clinical,C1,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,18,dexamethasone,18,null,"Iontophoresis Delivery of Dexamethasone Phosphate for Non-infectious, Non-necrotizing Anterior Scleritis, Phase I, Dose-Varying Study",1R01FD003910; EGP-IST-001; NCT01059955,University of Pennsylvania,63816,"JANUARY  , 31, 2012",Completed
3,Blood pressure; Heart rate; Hydrocortisone; Peak expiratory flow rate; Potassium,Asthma,Avamys; Relovair,Phase 1 Clinical,C1,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,16,vilanterol,16,null,Comparing Two Respiratory Drugs in Combination and Separately From a Novel Inhaler Device in Healthy Japanese Subjects,HZA102940; NCT00625196,GlaxoSmithKline plc,23384,"FEBRUARY , 27, 2008",Completed
1,null,Uveitis,null,Phase 3 Clinical,C3,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,20,difluprednate,20,null,Study of Difluprednate Ophthalmic Emulsion in the Treatment of Severe Uveitis,NCT00407056; SJE2079/3-02-PC,Sirion Therapeutics Inc,21749,"AUGUST   , 31, 2002",Completed
2,FEV1; Forced Vital Capacity; Peak expiratory flow rate,Asthma,budesonide,Phase 3b Clinical,C3B,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,240,ciclesonide,249,null,Effectiveness of Ciclesonide Versus Budesonide in Patients With Asthma (18 to 75 years),BY9010/M1-136; NCT00163384,AstraZeneca plc,22072,"JANUARY  , 31, 2004",Completed
1,null,Xerophthalmia,null,Phase 2 Clinical,C2,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,89,dexamethasone,105,null,Safety and Efficacy Study of Iontophoresis and Dexamethasone Phosphate to Treat Dry Eye,EGP-437-002; NCT00765804,Eyegate Pharmaceuticals Inc,31793,"OCTOBER  , 31, 2008",Completed
2,null,Pain,"bupivacaine, AstraZeneca",Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,240,"bupivacaine, AstraZeneca; triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",240,null,Randomized Controlled Trial of Transforaminal Injections for Sciatica,06/12/13/3/01; ACTRN12608000401358; ANZCTR82969,Newcastle Bone and Joint institute,135001,"FEBRUARY , 01, 2007",Recruiting
3,Blood pressure; Heart rate; QT interval,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,50,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi; charcoal block; pressurized metered dose inhaler",50,null,Clinical Pharmacology Study to Evaluate the Total Systemic Exposure and Lung Bioavailability of CHF-5993 pMDI Combination in Healthy Volunteers,CCD-05993AB2-01; NCT02359292,Chiesi Farmaceutici SpA,221592,"FEBRUARY , 28, 2015",Completed
2+,null,Asthma,"prednisone; salbutamol, GlaxoSmithKline",Phase 2 Clinical,C2,"beclomethasone dipropionate, (CFC-free), Teva",44414,6,"beclometasone (inhaled, CFC-free), Teva; prednisone; salbutamol, GlaxoSmithKline",6,null,Repeat Emergency Department Visits Among Patients With Asthma and COPD,754754; NCT02499887,State University of New York,235195,"JANUARY  , 31, 2016",Terminated
2,null,Proliferative diabetic retinopathy,null,Phase 2/Phase 3 Clinical,C23,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,30,panretinal photocoagulation; triamcinolone acetonide,30,null,Triamcinolone as Adjunctive Treatment to Laser Panretinal Photocoagulation for Proliferative Diabetic Retinopathy,310/05; NCT00443521,University of Sao Paulo,165786,"MARCH    , 31, 2005",Completed
3,null,Diabetic macular edema,null,Phase 1 Clinical,C1,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,null,"Macular focal laser photocoagulation; Vitrectomy; triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto",null,null,"Sequentially Combined Vitrectomy, IVTA and Macular Focal Laser Photocoagulation for Diabetic Macular Edema",2006-05-029; NCT00371410,Samsung Medical Center (SMC),165530,"APRIL    , 30, 2005",Completed
1,Intra occular pressure (IOP),Pain,null,Phase not specified,NS,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,200,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon; moxifloxacin (ophthalmic), Alcon",200,null,"A Clinical Trial in Patients With Steroid Responsive Inflammatory Ocular Conditions. Clinical Trial Is to Study Efficacy, Safety and Tolerability of Moxifloxacin HCL + Difluprednate Ophthalmic Solution Versus Moxifloxacin HCL + Dexamethasone Phosphate Eye Drops",AJ/SC/12/2009; CTRI/2010/091/001121,Ajanta Pharma Ltd,132784,"AUGUST   , 10, 2010",Not yet recruiting
1,null,Atopic dermatitis,null,Phase 2 Clinical,C2,mapracorat,46177,23,mapracorat,23,null,HPA Axis Study in Adults,1403161; 1403161; NCT01408511,"Bayer AG, Intendis GmbH",79784,"JULY     , 31, 2011",Completed
1,null,Asthma,null,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,60,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",60,null,Study to assess the effect of fluticasone furoate on growth rate in children aged 5 to 11,2015-000841-22; HZA107112,GlaxoSmithKline plc,253752,"AUGUST   , 04, 2015",Completed
1,17-alpha-hydroxyprogesterone; Androgens; Androstenedione; Testosterone,Adrenal gland hypofunction,null,Phase 3 Clinical,C3,"hydrocortisone (oral granules, adrenal insufficiency), Diurnal/Emerge Health/Medison Pharma",79146,18,Infacort,24,null,Extension Study for Patients Entered Into Study Infacort 003,2015-000458-40; INFACORT 004; NCT02733367,Diurnal Ltd,257842,"MARCH    , 04, 2016",Completed
1+,null,Graft versus host disease,null,Phase 2 Clinical,C2,"beclomethasone dipropionate, (CFC-free), Teva",44414,140,"beclometasone (inhaled, CFC-free), Teva; methotrexate; tacrolimus",140,null,Beclomethasone Dipropionate in Preventing Acute Graft-Versus-Host Disease in Patients Undergoing a Donor Stem Cell Transplant for Hematological Cancer,2079.00; NCI-2009-01544; NCT00489203,Fred Hutchinson Cancer Research Center,58495,"APRIL    , 30, 2007",Completed
1,null,Allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,301,GW-685698X,301,null,Once-Daily Investigational Nasal Spray In Adults And Adolescents With Perennial Allergic Rhinitis (PAR),FFR106080; NCT00289198,GlaxoSmithKline plc,14192,"FEBRUARY , 28, 2006",Completed
1,Intraocular pressure,Macular edema,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,23,triamcinolone acetonide,23,null,Efficacy of Intravitreal Triamcinolone Acetonide before Pan Retinal Photocoagulation for Improvement of Visual Acuity and Macular Edema in Diabetic Retinopathy,ACTRN12607000225415; HREC 356,Farabi Eye Hospital,143664,"NOVEMBER , 01, 2005",Completed
3,null,Allergic rhinitis,fluticasone furoate,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,64,fluticasone furoate; oxymetazoline; oxymetazoline,64,null,A Combination of Intranasal Steroid/Oxymetazoline Leads to Faster Relief of Nasal Congestion Without Inducing Rhinitis Medicamentosa,15059B; NCT00584987,University of Chicago,14092,"JUNE     , 30, 2007",Completed
2,FEV1,Chronic obstructive pulmonary disease,"fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline",Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,800,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",800,null,A 12-Week Study to Evaluate the 24-h Pulmonary Function Profile of Fluticasone Furoate/Vilanterol (FF/VI) Inhalation Powder 100/25 microg Once Daily Compared with Fluticasone Propionate/Salmeterol Inhalation Powder 250/50 microg Twice Daily in Subjects with Chronic Obstructive Pulmonary Disease,EudraCT: 2012-003106-27; RLV116974,GlaxoSmithKline plc,142783,"NOVEMBER , 01, 2012",Completed
1,null,Crohns disease,null,Phase 1/Phase 2 Clinical,C12,"beclomethasone dipropionate (oral dual release tablet, Crohn’s disease), Soligenix",116385,24,"beclomethasone dipropionate (oral dual release), Soligenix/Sigma-Tau",24,null,SGX-203 for The Treatment of Pediatric Crohn's Disease,BDP-PCD-01,Soligenix Inc,125927,"MAY      , 15, 2013",Completed
2,null,Addisons disease,hydrocortisone,Phase 1 Clinical,C1,"hydrocortisone (oral granules, adrenal insufficiency), Diurnal/Emerge Health/Medison Pharma",79146,16,Infacort,16,null,Comparison of Pharmacokinetics of Infacort Versus Immediate-release Hydrocortisone,2013-000260-28; INFACORT 001; NCT02777268,Diurnal Ltd,261362,"JULY     , 31, 2013",Completed
1,null,Allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,110,fluticasone furoate,110,null,"Daily versus as-needed use of fluticasone furoate nasal spray in patients with allergic rhinitis: A randomized, controlled trial",TCTR20170310002,"Mahidol University, Siriraj Hospital",290776,"JUNE     , 01, 2017",Not yet recruiting
1,null,Pain,null,Phase 3 Clinical,C3,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",56108,369,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",369,null,"Mapracorat Ophthalmic Suspension, 3% for the Treatment of Ocular Inflammation and Pain Following Cataract Surgery",790; NCT01591161,Bausch & Lomb Inc,87111,"JULY     , 31, 2012",Completed
1,null,Ocular inflammation,null,Phase 3 Clinical,C3,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",56108,369,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",369,null,"Mapracorat Ophthalmic Suspension, 3% for the Treatment of Ocular Inflammation and Pain Following Cataract Surgery",790; NCT01591161,Bausch & Lomb Inc,87111,"JULY     , 31, 2012",Completed
1+,null,Multiple myeloma,null,Phase 2 Clinical,C2,dexamethasone cipecilate,12806,25,"dexamethasone cipecilate; doxorubicin (liposomal, STEALTH), Alza; thalidomide",25,null,"A Study Evaluating Efficacy, Toxicity, Harvest Yield and Quality of Life",Doxil; NCT00222105,University of Kansas,48539,"NOVEMBER , 30, 2002",Completed
3,FEV1,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,1226,GW-642444; Relovair; fluticasone furoate,1224,null,Efficacy and Safety Study of Fluticasone Furoate(FF)/GW-642444 Inhalation Powder and the Individual Components in Subjects With Chronic Obstructive Pulmonary Disease (COPD),112207; 2009-013067-19; HZC112207; JapicCTI-101097; NCT01054885,GlaxoSmithKline plc,63564,"OCTOBER  , 19, 2009",Completed
2,FEV1; Forced Vital Capacity,Asthma,fluticasone,Phase 3b Clinical,C3B,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,480,ciclesonide,480,null,Efficacy of ciclesonide versus fluticasone propionate in patients with mild to moderate asthma (12 to 75 years),2004-001072-39; BY9010/M1-142; NCT00163423,"AstraZeneca plc, Takeda GmbH",22040,"NOVEMBER , 30, 2004",Completed
1,null,Pain,null,Phase 2b Clinical,C2B,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,310,Zilretta,310,null,Study of FX-006 versus Normal Saline in Patients With Osteoarthritis of the Knee,FX006-2014-006; NCT02116972,Flexion Therapeutics Inc,182577,"APRIL    , 30, 2014",Completed
3,null,Chronic obstructive pulmonary disease,null,Phase not specified,NS,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,1,"budesonide + formoterol fumarate, AstraZeneca; fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline; fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline",1,null,Evidence Synthesis and Mixed Treatment Comparison of Efficacy of Treatments for the Maintenance of COPD,200342,GlaxoSmithKline plc,158632,"JULY     , 01, 2013",No longer recruiting
3+,Forced expiratory volume in 1 s,Chronic obstructive pulmonary disease,Fostair; Spiriva; Spiriva; beclometasone dipropionate + formoterol fumarate + tiotropium bromide,Phase 3 Clinical,C3,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,3686,Trimbow,2691,TRINITY,Efficacy of Fixed Combination of Beclometasone + Formoterol + Glycopyrrolate in Chronic Obstructive Pulmonary Disease,2013-000063-91; CCD-1208-PR-0090; NCT01911364; TRINITY,Chiesi Farmaceutici SpA,148190,"JANUARY  , 31, 2014",Completed
9,null,Retinopathy,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,40,Kenalog; flurbiprofen (Froben); guttae prednisolone (Pred Forte); triamcinolone acetonide,40,AOT,Triamcinolone acetonide to prevent PVR in eyes undergoing vitreoretinal surgery for open globe trauma,2007-005138-35; AOT; CHAD1024,Moorfields Eye Hospital,133460,"SEPTEMBER, 30, 2011",Recruiting
2,null,Fatigue,prednisone,Phase 4 Clinical,C4,"prednisone (oral, delayed release), Vectura/Mundipharma/Merck KGaA",54733,62,Rayos,62,RIFLE,A Crossover Study to Compare Rayos to IR Prednisone to Improve Fatigue and Morning Symptoms for SLE,AMP-002; NCT03098823; RIFLE,"Ampel BioSolutions, LLC",294933,"SEPTEMBER, 12, 2017",No longer recruiting
2,null,Rheumatoid arthritis,prednisone,Phase 2 Clinical,C2,"prednisolone + dipyridamole (osteoarthritis, inflammation), Zalicus",50159,18,"prednisolone + dipyridamole (osteoarthritis, inflammation), Zalicus",18,null,Long Term Safety Trial of Z-102 and Prednisone in Patients With Moderate to Severe Rheumatoid Arthritis,NCT01612377; Z102-009,Zalicus Inc,88095,"MARCH    , 31, 2012",Terminated
1,null,Meniere disease,null,Phase 3 Clinical,C3,"dexamethasone (sustained release/intratympanic injection, ear disorders), Otonomy",65289,165,OTO-104,165,AVERTS-1,Study of OTO-104 in Subjects With Unilateral Meniere's Disease,104-201506; AVERTS-1; NCT02612337,Otonomy Inc,246584,"OCTOBER  , 27, 2015",Completed
2,Knee stiffness,Osteoarthritis,triamcinolone acetonide injectable suspension,Phase 3 Clinical,C3,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,484,Zilretta,484,null,Study of FX-006 for the Treatment of Pain in Patients With Osteoarthritis of the Knee,2014-005329-11; FX006-2014-008; NCT02357459,Flexion Therapeutics Inc,221476,"JANUARY  , 31, 2015",Completed
2,null,Osteoarthritis,triamcinolone acetonide (Kenalog),Phase 2 Clinical,C2,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,81,Zilretta,81,null,Study to Characterize the PK and Local Extent and Duration of Exposure From FX-006 in Patients With OA of the Knee,FX006-2015-009; NCT02637323,Flexion Therapeutics Inc,249253,"NOVEMBER , 30, 2015",Completed
1,Calprotectin; Cytokines,Crohns disease,null,Phase 1 Clinical,C1,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,28,B-FAHF-2; Entocort EC,28,null,"Study to Evaluate Safety, Tolerability and Efficacy of Oral B-FAHF-2 in Mild-to-Moderate Crohns Disease",0266-3308; GCO 19-0125; NCT03992469,Mount Sinai School of Medicine,385284,"JULY     , 31, 2019",Not yet recruiting
2,TNF-alpha,Peripheral vascular disease,methylprednisolone (Pfizer),Phase 1/Phase 2 Clinical,C12,"prednisolone (injectable liposome formulation, rheumatoid arthritis/ulcerative colitis), Enceladus",59891,21,"prednisolone (injectable liposome formulation, rheumatoid arthritis), Galapagos",21,DELIVER,A Proof of Concept Study to Determine the Local Delivery and Efficacy of Nanocort,DELIVER; NCT01647685; NL39717.018.12,"Academic Medical Center, University of Amsterdam",89428,"MAY      , 31, 2012",Recruiting
1,null,Herpes simplex virus infection,null,Phase 3 Clinical,C3,"aciclovir + hydrocortisone (dermatological), Medivir",17335,54,"aciclovir + hydrocortisone (dermatological), Medivir",54,null,"An Open-label, Safety Study of Xerese Cream in the Treatment of Recurrent Herpes Labialis in Children 6 to 11 Years Old",MP 800; NCT01574612,Meda Pharmaceuticals Ltd,86381,"MARCH    , 31, 2012",Completed
2,Forced Vital Capacity; Forced expiratory volume,Chronic obstructive pulmonary disease,Relovair; Spiriva,Phase 3 Clinical,C3,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,1479,CHF-5993,1479,Tristar,Non-Inferiority of Fixed Combination of Beclomethasone Dipropionate (BDP) + Formoterol Fumarate (FF) + Glycopyrronium Bromide (GB) Versus Combination of Fluticasone Furoate (FlF)/Vilanterol (VI) + Tiotropium Bromide in Chronic Obstructive Pulmonary Disease (COPD),2014-001487-35; CCD-05993AA1-07; NCT02467452; Tristar,Chiesi Farmaceutici SpA,231716,"MAY      , 31, 2015",Completed
2,Intraocular pressure; Visual acuity,Uveitis,null,Phase 3 Clinical,C3,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,111,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon; prednisolone acetate",110,null,Safety and Efficacy of Difluprednate 0.05% for the Treatment of Anterior Uveitis,C-10-034; NCT01201798,Alcon Research Ltd,70332,"OCTOBER  , 31, 2010",Completed
1,null,Eosinophilic esophagitis,null,Phase 2 Clinical,C2,"budesonide (oral, eosinophilic esophagitis), Shire",60523,33,"Prevacid; budesonide (oral, eosinophilic esophagitis), Meritage",33,null,Use of Topical Budesonide in the Treatment of Eosinophilic Esophagitis,NCT00638456; VPI-106-01,University of California San Diego,57129,"FEBRUARY , 29, 2008",Completed
1,Alanine transaminase; Aspartate aminotransferase; Cortisol; Hemoglobin; Mean corpuscular volume; Urea nitrogen; gamma-Glutamyltransferase,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"beclomethasone dipropionate  (waterless nasal spray, allergic rhinitis), Teva",76229,99,Qnaze,99,null,Hypothalamic-Pituitary-Adrenal (HPA)-Axis Study In Pediatric Subjects With Perennial Allergic Rhinitis (PAR),BDP-AR-307; NCT01697956,Teva Pharmaceutical Industries Ltd,93137,"OCTOBER  , 31, 2012",Completed
1,null,Meniere disease,null,Phase 1b Clinical,C1B,"dexamethasone (sustained release/intratympanic injection, ear disorders), Otonomy",65289,44,OTO-104,44,null,OTO-104 for Meniere's Disease,104-200901; NCT01084525,Otonomy Inc,64740,"MARCH    , 31, 2010",Completed
2,null,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,25,beclomethasone dipropionate + formoterol fumarate + CHF-5992; beclomethasone dipropionate + formoterol fumarate + CHF-5992; cimetidine,26,null,Drug-drug Interaction Study of CHF-5993 With Cimetidine,2013-005491-18; CCD-05993AA1-12; NCT02287272,Chiesi Farmaceutici SpA,215420,"MAY      , 31, 2014",Completed
2,Eosinophils; FEV1; Neutrophils,Asthma,"budesonide (inhaled formulations), AstraZeneca",Phase 2 Clinical,C2,AZD-5423,64294,27,AZD-5423,20,null,The Study Will Evaluate the Efficacy of AZD-5423 in Patients With Mild Asthma Challenged With an Inhaled Allergen,D2340C00005; NCT01225549,AstraZeneca plc,71513,"NOVEMBER , 30, 2010",Completed
2,null,Vitreous humor disease,null,Phase 1 Clinical,C1,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,10,EyeGate II drug delivery system; dexamethasone,10,null,PK Study of Iontophoretic Dexamethasone Phosphate Ophthalmic Solution in Patients Undergoing Vitrectomy,EGP-437-010; NCT02644694,Eyegate Pharmaceuticals Inc,250160,"MARCH    , 31, 2016",Completed
1,Forced expiratory volume,Vitamin D deficiency,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,408,"ciclesonide (metered dose inhaler), Nycomed; vitamin D3",408,VIDA,Study of the Effect of Vitamin D as an Add-on Therapy to Corticosteroids in Asthma,1U10HL098115; ASTHMANET 001; NCT01248065; VIDA,Milton S. Hershey Medical Center,188785,"APRIL    , 30, 2011",Completed
3,null,Allergic rhinitis,null,Phase 1 Clinical,C1,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,30,"fluticasone furoate (nasal, allergic rhinitis), GSK; fluticasone furoate + levocabastine; levocabastine hydrochloride",30,null,A Relative Bioavailability Study of Fluticasone Furoate and Levocabastine,200284; NCT01962467,GlaxoSmithKline plc,157921,"OCTOBER  , 31, 2013",Completed
3,null,Perennial allergic rhinitis,null,Phase 1 Clinical,C1,"fluticasone furoate + levocabastine (intranasal spray, perennial and seasonal allergic rhinitis), GlaxoSmithKline",89013,30,"fluticasone furoate (nasal, allergic rhinitis), GSK; fluticasone furoate + levocabastine; levocabastine hydrochloride",30,null,A Relative Bioavailability Study of Fluticasone Furoate and Levocabastine,200284; NCT01962467,GlaxoSmithKline plc,157921,"OCTOBER  , 31, 2013",Completed
3,null,Seasonal allergic rhinitis,null,Phase 1 Clinical,C1,"fluticasone furoate + levocabastine (intranasal spray, perennial and seasonal allergic rhinitis), GlaxoSmithKline",89013,30,"fluticasone furoate (nasal, allergic rhinitis), GSK; fluticasone furoate + levocabastine; levocabastine hydrochloride",30,null,A Relative Bioavailability Study of Fluticasone Furoate and Levocabastine,200284; NCT01962467,GlaxoSmithKline plc,157921,"OCTOBER  , 31, 2013",Completed
2,null,Psoriasis,calcipotriol betamethasone (Defubao),Phase 4 Clinical,C4,"clobetasol propionate + tretinoin (topical/ointment, psoriasis vulgaris), Jiangsu Zeyuan Pharmaceutical",96651,240,Jinniuer,240,null,"A multicenter, randomized, single-blind, positive controlled trials that assess the effect, safety and cost in patients with mild to moderate psoriasis vulgaris and compare fufangbingsuanlvbeitasuo (Jinniuer) ointment to gaibosanchunbeitamisong (Defubao) ointment",ChiCTR-IPR-16008126,"Curegen (Jiangsu) Pharmaceuticals Inc, The First Hospital Of China Medical University",256863,"APRIL    , 17, 2015",No longer recruiting
1,Hydrocortisone,Ulcerative proctitis,null,Phase 3 Clinical,C3,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,265,Rectabul,265,null,Efficacy and Safety of Budesonide Foam for Patients With Active Mild to Moderate Ulcerative Proctitis or Proctosigmoiditis,BUCF3001; NCT01008410,Bausch Health Companies Inc,62013,"NOVEMBER , 30, 2009",Completed
2,Cortisol,Asthma,prednisolone,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,185,Relovair,73,null,Safety Study of the Effects of Inhaled Fluticasone Furoate/GW-642444 on the Hypothalamic-Pituitary-Adrenal (HPA) Axis,106851; HZA106851; NCT01086410,GlaxoSmithKline plc,64852,"MARCH    , 31, 2010",Completed
2+,"Antral follicles; Blood pressure; Body Mass Index; Bone mineral density; Hemoglobin A, glycosylated; High-density lipoprotein cholesterol; Testosterone/Androstenedione ratio; Total cholesterol; Triglycerides",Adrenal gland hypofunction,cortisone acetate; dexamethasone; hydrocortisone; prednisolone; prednisone,Phase 4 Clinical,C4,"dual-release hydrocortisone (oral, adrenal insufficiency), ViroPharma",58174,150,Plenadren,150,CareOnTIME,Innovative Treatment in Congenital Adrenal Hyperplasia,140/16; CareOnTIME; NCT03760835,Universita degli Studi di Napoli Federico II,362194,"AUGUST   , 11, 2016",Recruiting
1,Arterial stiffness; Ejection fraction; Left atrial ejection fraction; Left atrium; Left ventricle; Pulmonary artery; Pulse Wave Transit Time; Pulse wave velocity; Right ventricle; Right ventricular ejection fraction; Stroke volume,Chronic obstructive pulmonary disease,null,Phase 3b Clinical,C3B,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,45,Relovair,45,null,Relovair Lung Deflation Study,116601; 2012-000927-42; HZC116601; NCT01691885,GlaxoSmithKline plc,92645,"NOVEMBER , 30, 2012",Completed
1,null,Rheumatoid arthritis,null,Phase 2 Clinical,C2,"prednisolone + dipyridamole (osteoarthritis, inflammation), Zalicus",50159,51,CRx-102,51,MARS-1,Multicenter Study to Evaluate CRx-102 versus Each of Its Components to Treat Active Rheumatoid Arthritis,CRx-102-007; MARS-1; NCT00551707,Zalicus Inc,5373,"OCTOBER  , 31, 2007",Completed
1,null,Seasonal allergic rhinitis,null,Phase 3 Clinical,C3,"beclomethasone dipropionate  (waterless nasal spray, allergic rhinitis), Teva",76229,340,Qnaze,340,null,Study in Adult and Adolescent Subjects With Seasonal Allergic Rhinitis (SAR),BDP-AR-301; NCT01024608,Teva Pharmaceutical Industries Ltd,62468,"DECEMBER , 31, 2009",Completed
1,Anterior chamber; Intraocular pressure; Leukocyte count,Ocular inflammation,null,Phase 3 Clinical,C3,"dexamethasone (punctum plug, ocular inflammation), Ocular Therapeutix",80269,438,OTX-DP,438,null,A Phase III Study Evaluating the Safety and Efficacy of OTX-DP for the Treatment of Ocular Inflammation and Pain After Cataract Surgery,NCT02736175; OTX-15-003,Ocular Therapeutix Inc,258056,"OCTOBER  , 31, 2015",Completed
3,Intraocular pressure,Blepharitis,"azithromycin (ophthalmic sustained release, DuraSite), InSite; dexamethasone (sustained release, DuraSite), InSite",Phase 3 Clinical,C3,"azithromycin + dexamethasone (sustained release, DuraSite), InSite",55854,917,"azithromycin + dexamethasone (sustained release, DuraSite), InSite",907,DOUBle,Efficacy and Safety Study of a Steroid/Antibiotic Combination Eyedrop to Treat Non-Bacterial Blepharitis,C-10-502-004; DOUBle; NCT01408082,InSite Vision Inc,79770,"OCTOBER  , 31, 2011",Completed
4,Blood glucose; FEV1; Heart rate; Serum cortisol; Serum potassium; Urine cortisol,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"batefenterol succinate + fluticasone furoate (COPD), GlaxoSmithKline",78547,24,"GSK-961081 + fluticasone propionate (COPD), GlaxoSmithKline; batefenterol succinate; batefenterol succinate; fluticasone; fluticasone",24,null,An Investigation of the Pharmacokinetics of GSK-961081 and Fluticasone Propionate in Healthy Volunteers,113423; NCT01449799,GlaxoSmithKline plc,81468,"JULY     , 31, 2011",Completed
2,Diastolic blood pressure; Glucose; Heart rate; Hydrocortisone; Potassium; Systolic blood pressure,Asthma,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,26,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",26,null,A study to see if it is safe to give a new asthma controller drug and a new asthma reliever drug together (called fluticasone furoate/vilanterol) to 5 to 11 year old children with asthma,2012-000754-55; HZA112777,GlaxoSmithKline plc,211035,null,Status not specified
1,Choroid; Oxygen saturation; Retina; Transcriptional regulator ERG,Retinitis pigmentosa,null,Phase 2 Clinical,C2,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,20,Iluvien,20,null,A Pilot Study Evaluating the Effect of Intravitreal Fluocinolone Acetonide (0.19 mg) in Patients with Retinitis Pigmentosa,2016-002523-28; KHAK1001,Moorfields Eye Hospital,328923,"SEPTEMBER, 16, 2016",Recruiting
1,Blood pressure; Heart rate; Potassium; QT interval; Serum cortisol; Whole blood potassium,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,16,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",16,null,Relovair PD PK in Chinese Healthy Subjects,115199; NCT01711463,GlaxoSmithKline plc,95532,"DECEMBER , 31, 2012",Completed
1,null,Meniere disease,null,Phase 2 Clinical,C2,"dexamethasone (sustained release/intratympanic injection, ear disorders), Otonomy",65289,34,dexamethasone,34,null,Open-Label Study of OTO-104 in Subjects With Meniere's Disease,104-201505; NCT02740387,Otonomy Inc,258351,"JUNE     , 30, 2016",Terminated
2,Joint swelling; Joint tenderness,Rheumatoid arthritis,methylprednisolone,Phase 3 Clinical,C3,"prednisolone (injectable liposome formulation, rheumatoid arthritis/ulcerative colitis), Enceladus",59891,330,Nanocort,330,null,To Evaluate The Efficacy And Safety Of Sunpharma-1505 Compared With Reference-1505 In Subjects With Active Rheumatoid Arthritis,2015-002924-17; CLR_15_05; NCT02534896,Sun Pharmaceutical Industries Ltd,238910,"NOVEMBER , 30, 2015",Terminated
2,Anterior chamber; Intraocular pressure; Retina,Ocular inflammation,Prednefrin,Phase 3 Clinical,C3,"Difluprednate (ophthalmic solution, ocular inflammation/ocular pain), Laboratorios Sophia",112786,178,PRO-145,178,PRO-145/III,Clinical Study of the Efficacy of the Ophthalmic Emulsion PRO-145 for Inflammation and Pain After Phacoemulsification,NCT03693989; PRO-145/III; SOPH145-0716 / III,Laboratorios Sophia,355334,"OCTOBER  , 01, 2018",Recruiting
1,Intraocular pressure,Diabetic macular edema,null,Phase 4 Clinical,C4,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,153,Iluvien,153,PALADIN,Phase IV IOP Signals Associated With Iluvien,M-01-15-004; NCT02424019; PALADIN,Alimera Sciences Inc,227463,"MAY      , 06, 2015",No longer recruiting
1,17-alpha-hydroxyprogesterone; Adrenocorticotropic hormone; Blood pressure; Body Mass Index; Body temperature; C-terminal telopeptide of collagen type I; Corticosterone; Cortodoxone; Glucose; Heart rate; High-density lipoprotein cholesterol; Hydrocortisone; Insulin; Low-density lipoprotein cholesterol; Muscle strength; Osteocalcin; Procollagen Type I N-terminal peptide; Respiratory frequency; Six-minute walk distance; Testosterone; Total body mass; Total cholesterol; Triglycerides,Duchenne dystrophy,null,Phase 2 Clinical,C2,vamorolone,70712,48,vamorolone,48,VISION-DMD,Long-term Extension Study to Assess Vamorolone in Boys With Duchenne Muscular Dystrophy (DMD),2017-003568-10; NCT03038399; VBP15-LTE; VISION-DMD,ReveraGen BioPharma Inc,287053,"JANUARY  , 31, 2017",Recruiting
1,Blood pressure; Eosinophils,Eosinophilic esophagitis,null,Phase 2b Clinical,C2B,"budesonide (oral, eosinophilic esophagitis), Shire",60523,82,"budesonide (oral, eosinophilic esophagitis), Meritage",71,PEER,Dose-Ranging Study of Oral Viscous Budesonide in Pediatrics With Eosinophilic Esophagitis,MPI-101-01; NCT00762073; PEER,Shire plc,42073,"NOVEMBER , 30, 2008",Completed
1,null,Meniere disease,null,Phase 3 Clinical,C3,"dexamethasone (sustained release/intratympanic injection, ear disorders), Otonomy",65289,189,OTO-104,189,null,A 6-Month Extension Study of OTO-104 in Meniere's Disease,104-201509; NCT02706730,Otonomy Inc,255564,"FEBRUARY , 29, 2016",Terminated
3,Intraocular pressure; Visual acuity,Wet age related macular degeneration,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,30,Azmacort; photodynamic therapy (PDT),30,null,Triamcinolone Acetonide Plus Laser Therapy to Treat Age-Related Macular Degeneration,05-EI-0064; 050064; NCT00100009,National Eye Institute,95955,"DECEMBER , 09, 2004",Completed
2,Heart rate,Chronic obstructive pulmonary disease,null,Phase 2a Clinical,C2A,"batefenterol succinate + fluticasone furoate (COPD), GlaxoSmithKline",78547,63,"batefenterol succinate + fluticasone furoate (COPD), GlaxoSmithKline",63,null,Batefenterol/Fluticasone Furoate in Treatment of Chronic Obstructive Pulmonary Disease,201546; NCT02573870,GlaxoSmithKline plc,243854,"DECEMBER , 31, 2015",Completed
2,null,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,30,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline; fluticasone furoate + vilanterol (oral inhalant, asthma/COPD), GlaxoSmithKline",30,null,Bioequivalence Study to Compare Fluticasone Furoate (FF) Single-strip Inhaler With FF Two-strip Inhaler and With FF/Vilanterol Combination,115440; NCT01485445,GlaxoSmithKline plc,82997,"DECEMBER , 21, 2011",Completed
1,null,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,30,"99mTc; beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",30,null,"Lung Deposition of Beclometasone Dipropionate/Formoterol Fumarate/Glycopyrronium Bromide Administered Via pMDI in Healthy, Asthmatic and COPD Patients",2016-001088-35; CCD-05993AA1-15; NCT02975843,Chiesi Farmaceutici SpA,280709,"NOVEMBER , 30, 2016",Completed
1,null,Duchenne dystrophy,null,Phase 3 Clinical,C3,"deflazacort (oral tablet/suspension, Duchenne muscular dystrophy), PCT Therapeutics",86985,29,Emflaza,29,null,"A phase III, multicenter, double-blind, randomized, parallel-group, placebo-controlled study of deflazacort for the treatment of patients with Duchenne muscular dystrophy (DMD)",MP-104-NM-002,Marathon Pharmaceuticals LLC,332308,null,Status not specified
1,null,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,AZD-5423,64294,27,AZD-5423,27,null,AZD-5423 Multiple Ascending Dose Study,D2340C00002; EudraCT No: 2009-016611-38; NCT01037504,AstraZeneca plc,63153,"JANUARY  , 31, 2010",Completed
2,Anterior chamber,Inflammatory disease,null,Phase 2b Clinical,C2B,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,101,EyeGate; dexamethasone,101,null,Iontophoretic Delivery of EGP-437 in Patients Who Have Undergone Cataract Surgery,EGP-437-009; NCT03180255,Eyegate Pharmaceuticals Inc,301426,"JULY     , 26, 2017",Completed
4,null,Asthma,Seretide; Seretide; charcoal,Phase 1 Clinical,C1,"fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",81111,64,charcoal; fluticasone propionate + salmeterol xinafoate; fluticasone propionate + salmeterol xinafoate,64,null,Pharmacokinetic Study Comparing Salmeterol/Fluticasone Easyhaler and Seretide Diskus,3106010; NCT03060044,Orion Corp,289048,"JULY     , 31, 2016",Completed
1,FEV / FVC ratio; Forced expiratory flow ; Forced expiratory volume,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,30,Trimbow,30,STORM,"Lung Deposition of TRIMBOW pMDI in Healthy Volunteers, Asthmatic and COPD Patients",2017-005030-29; CLI-05993AA1-20; NCT03795350; STORM,Chiesi Farmaceutici SpA,365704,"JANUARY  , 14, 2019",Recruiting
3,null,Osteoarthritis,Monovisc; triamcinolone hexacetonide,Phase 3 Clinical,C3,CINGAL,103224,576,CINGAL,576,null,Study of Cingal for the Relief of Knee Osteoarthritis Compared to Triamcinolone Hexacetonide,2017-000355-46; CINGAL 16-02; NCT03191903,Anika Therapeutics Inc,301892,"MAY      , 25, 2017",Completed
2,null,Asthma,Seretide Diskus,Phase 1 Clinical,C1,"fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",81111,64,fluticasone propionate + salmeterol xinafoate,64,SAIMI,Comparing Salmeterol/Fluticasone Easyhaler and Seretide Diskus,3106012; NCT03238482; SAIMI,Orion Corp,307440,"AUGUST   , 16, 2017",Completed
1,Body height; Bone mineral density; Total body mass,Duchenne dystrophy,null,Phase 3b Clinical,C3B,"deflazacort (oral tablet/suspension, Duchenne muscular dystrophy), PCT Therapeutics",86985,null,Emflaza,null,PTCEMF,A Phase III Study of Emflaza (Deflazacort) in Patients With Duchenne Muscular Dystrophy,NCT03642145; PTCEMF; PTCEMF-GD-003,PTC Therapeutics Inc,351212,"OCTOBER  , 31, 2018",Terminated
3,null,Asthma,null,Phase 4 Clinical,C4,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,17,Arnuity; Breo; Ellipta,17,null,Effect of Vilanterol on Methacholine Challenge Results,NCT03315000; VIL-2017,University of Saskatchewan,316341,"OCTOBER  , 13, 2017",Completed
3,null,Asthma,null,Phase 4 Clinical,C4,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,17,Arnuity; Breo; Ellipta,17,null,Effect of Vilanterol on Methacholine Challenge Results,NCT03315000; VIL-2017,University of Saskatchewan,316341,"OCTOBER  , 13, 2017",Completed
1,null,Asthma,null,Phase 1 Clinical,C1,AZD-5423,64294,12,AZD-5423,12,null,A Study in Healthy Subjects and Mild Asthmatics to Investigate Pharmacokinetics of AZD-5423 When Administered in Different Ways,D2340C00008; NCT01310322,AstraZeneca plc,75917,"APRIL    , 30, 2011",Completed
1,null,Atopic dermatitis,null,Phase 2 Clinical,C2,mapracorat,46177,197,mapracorat,197,null,Efficacy and Safety of Different Concentrations of Mapracorat Ointment Over 4 Weeks in Atopic Dermatitis (AD),1403440; 15616; 2010-024279-14; NCT01359787,Bayer AG,77700,"MAY      , 31, 2011",Completed
3,null,Ulcerative proctitis,mesalazine,Phase 2 Clinical,C2,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,320,Rectabul; Rectabul; mesalazine,320,null,Budesonide versus Mesalazine versus Budesonide/Mesalazine Suppository Combination Therapy in Acute Ulcerative Proctitis,2012-003362-41; BUS-2/UCA; NCT01966783,Dr Falk Pharma GmbH,238809,"SEPTEMBER, 30, 2013",Completed
1,null,Blepharitis,null,Phase 2 Clinical,C2,"fluticasone (ocular inflammation, pain), Nicox Ophthalmics",91859,40,NCX-4251,40,null,Study Evaluating the Safety and Tolerability of NCX-4251 for the Treatment of Acute Exacerbations of Blepharitis,NCT03926026; NCX-4251-01,"NicOx SA, Nicox Ophthalmics Inc",318225,"MARCH    , 18, 2019",Recruiting
1,Body height; Total body mass,Esophageal disease,null,Phase 2 Clinical,C2,"budesonide (oral, eosinophilic esophagitis), Shire",60523,60,budesonide,60,OVB in EA,Oral Viscous Budesonide in Anastomotic Stricture After Esophageal Atresia Repair,NCT03999008; OVB IN EA; OVB in EA,CHU de Quebec-Universite Laval,386068,"JUNE     , 01, 2020",Not yet recruiting
1,null,null,null,Phase 1 Clinical,C1,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,5,fluticasone furoate,5,null,"A non-randomized, open-label, two period crossover study in healthy adult male subjects to determine the excretion balance and pharmacokinetics of [14C]-GW-685698, administered as single doses of oral and intravenous infusion",FFR10008,GlaxoSmithKline plc,202329,"NOVEMBER , 17, 2004",Completed
3,null,null,PT-007; PT-008,Phase 1 Clinical,C1,"budesonide (aerosol inhalant/MDI, asthma), Pearl Therapeutics",90863,91,PT-027,91,LOGAN,A Study to Compare the Pharmacokinetics of Budesonide and Albuterol Delivered by PT027 Compared With PT-007 and PT-008 Administered Separately,D6930C00003; LOGAN; NCT03772223,AstraZeneca plc,363124,"JANUARY  , 21, 2019",Completed
1,null,null,null,Phase 1 Clinical,C1,"deflazacort (oral tablet/suspension, Duchenne muscular dystrophy), PCT Therapeutics",86985,45,deflazacort,45,null,Food Effect and Bioavailability of Deflazacort Formulations in Healthy Volunteers,MP-104-CL-026; NCT02485431,PTC Therapeutics Inc,233499,"JUNE     , 30, 2015",Completed
1,null,Ocular inflammation,null,Phase 3 Clinical,C3,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,219,difluprednate,438,null,Study of Difluprednate in the Treatment of Inflammation Following Ocular Surgery,NCT00429923; ST-601A-002a,Sirion Therapeutics Inc,21683,"JANUARY  , 31, 2007",Completed
3+,Intraocular pressure; Macula retinae; Retina; Visual acuity,Macular edema,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,1127,Azmacort; bevacizumab; bromfenac; bromfenac; dexamethasone; dexamethasone,1127,PREMED,Prevention of Macular Edema After Cataract Surgery,2012-004873-14; NCT01774474; NL42463.068.12; NL_42463; PREMED,"Maastricht University Medical Center, University Eye Clinic Maastricht",105848,"JULY     , 10, 2013",Completed
1,Ear pressure,Rhinitis,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,91,Azmacort,91,null,Short-Term Relief of Eustachian Tube Dysfunction and Serous Otitis Media Using Intranasal Steroid Sprays,103-04; IST4008; NCT00279916; XRG5029C/4008,Mayo Clinic Foundation,11760,"SEPTEMBER, 01, 2005",Completed
2,FEV1 (forced expiratory volume in 1 s); PEF (peak expiratory flow),Asthma,Flixotide,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,700,GW-685698X,700,null,"A Randomized, Double-Blind, Placebo-Controlled, Parallel-Group, Multicenter Study to Evaluate the Efficacy and Safety of GW-685698X Inhalation Powder 100, 200, 300 and 400 microg Administered qd in the Morning and Fluticasone Propionate 250 microg bid via Diskus Inhalation Powder Compared with Placebo for 8 Weeks in Adolescent and Adult Subjects (= 12 years old) with Persistent Asthma Symptomatic on Low-Dose ICS Therapy",2005-001124-36; FFA20002; FFA20003,GlaxoSmithKline plc,117759,"SEPTEMBER, 19, 2005",Terminated
1,null,Xerophthalmia,null,Phase 3 Clinical,C3,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,198,EGP-437,198,null,Safety and Efficacy Study of EGP-437 (Dexamethasone Phosphate Formulated for Ocular Iontophoresis) to Treat Dry Eye,EGP-437-003; NCT01129856,Eyegate Pharmaceuticals Inc,66663,"JUNE     , 30, 2010",Completed
2,null,Ocular inflammation,prednisolone acetate,Phase 3 Clinical,C3,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,80,difluprednate,80,null,Difluprednate Pediatric Study for the Treatment of Inflammation Post-Cataract Surgery,C-10-004; NCT01124045,Alcon Research Ltd,66419,"AUGUST   , 31, 2010",Completed
1+,Body height,Asthma,null,Phase 4 Clinical,C4,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,450,fluticasone furoate; montelukast; salbutamol,450,null,"Effects of a Orally Inhaled Fluticasone Furoate on Growth Velocity in Prepubertal, Pediatric Subjects With Asthma Over a Year",114971; 2016-002551-22; HZA114971; NCT02889809; P/276/2016,GlaxoSmithKline plc,271148,"OCTOBER  , 20, 2016",Recruiting
1+,Cortisol; Creatinine; Forced expiratory volume in 1 s (FEV1),Asthma,null,Phase 4 Clinical,C4,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,20,"ciclesonide (metered dose inhaler), Nycomed; fluticasone propionate; salmeterol",20,null,An Open-label Study to Compare Systemic Side Effects of High Dose Fluticasone/Salmeterol with that of High Dose Ciclesonide/Salmeterol in Symptomatic Asthmatics,AcadMed CTU03/05; EudraCT 2006-002450-30,Hull and East Yorkshire Hospitals NHS Trust,116685,"JULY     , 12, 2006",Recruiting
1,null,Diabetic macular edema,null,Phase 3 Clinical,C3,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,37,fluocinolone acetonide,37,FAME,Pharmacokinetic and Efficacy Study of Fluocinolone Acetonide Inserts in Patients With Diabetic Macular Edema,C-01-06-002; FAME; NCT00490815,Alimera Sciences Inc,4360,"AUGUST   , 31, 2007",Completed
1,null,Allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,20,fluticasone furoate,20,null,Intranasal Steroids and the Nasal Ocular Response,15061B; NCT00473915,University of Chicago,11749,"APRIL    , 30, 2007",Completed
3,cortisol,Asthma,null,Phase 2 Clinical,C2,"budesonide + salmeterol  (inhalation powder, respiratory diseases), Laboratoires SMB",78537,40,"budesonide (inhaled formulations), AstraZeneca; budesonide + salmeterol  (inhalation powder, respiratory diseases), Laboratoires SMB; salmeterol",40,null,"A Phase II, Randomized, Partially-blinded, Crossover Study to Evaluate the Systemic Effect of Two Doses of the SMB Budesonide-salmeterol DPI Fixed-dose Combination Capsule (300/25 microg bid and 150/25 microg bid) Delivered by the Axahaler Versus Pulmicort Turbohaler 400 microg bid and Serevent Diskus 50 microg bid Versus Placebo in Mild Persistent Asthmatic Patients",BUSAL-II-10-2; EudraCT 2010-020794-16,Laboratoires SMB SA,118182,"OCTOBER  , 15, 2010",Completed
2,null,Asthma,null,Phase 1 Clinical,C1,"fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",81111,48,"fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline; fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",48,null,Comparison of Salmeterol and Fluticasone Propionate Absorption From Salmeterol/Fluticasone Easyhaler With Seretide Diskus,3106008; EUDRACT 2012-003782-18; NCT01856621,Orion Corp,132070,"MAY      , 31, 2013",Completed
1,null,Choroidal neovascularization,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,80,triamcinolone acetonide; verteporfin,80,null,"A Pilot Study to Examine the Safety and Efficacy of Posterior Juxtascleral Triamcinolone Acetonide Administration, in Addition to Visudyne Photoynamic Therapy for Predominantly Classic Choroidal Neovascularization Secondary to Age Related Macular Degeneration: An Open-Label, Randomized, Active-Controlled Trial",EudraCT 2005-002466-11; version125/05/05,Kings College Hospital NHS Trust,142831,"JANUARY  , 03, 2006",Terminated
1,null,Esophagus tumor,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,32,triamcinolone acetonide,32,null,A RCT of Local Steroid Injection for Prevention of Post-ESD Esophageal Stenosis,JPRN-UMIN000006327,Keiyukai Sapporo Hospital,122329,"FEBRUARY , 01, 2010",Completed
1,intraoccular pressure,Cataract,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,110,5-fluorouracil; triamcinolone acetonide,110,null,Prospective Study into the Effect of an Intraocular Injection of a Steroid in the Prevention of Glaucoma Drainage Surgery Failure After Cataract Surgery,ACTRN12611000336987; U1111-1120-4139,Royal Victorian Eye and Ear Hospital,123904,"MAY      , 31, 2011",Not yet recruiting
3,Central cornea; Intraocular pressure; Macula retinae,Ocular disease,null,Phase 4 Clinical,C4,"triamcinolone acetonide + moxifloxicin hydrochloride + vancomycin (ocular disease), Harrow Health",95157,25,"Imprimis Less Drops; PredKeterolac; triamcinolone acetonide + moxifloxicin hydrochloride + vancomycin (ocular disease), Imprimis",25,null,Dropless Versus Less Drops Pharmaceutical Regimens After Cataract Surgery,BF-2015-011; NCT02819908,Eye Center of North Florida,264759,"SEPTEMBER, 30, 2015",Completed
3+,null,Uveitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,7,methotrexate; methylprednisolone; prednisone; prednisone; triamcinolone acetonide,7,UVEXATE,Efficacy Study of Methotrexate to Treat Sarcoid-associated Uveitis,NCT00918554; P070140; UVEXATE,Assistance Publique Hopitaux de Paris,169537,"SEPTEMBER, 30, 2009",Terminated
2,Arm circumference,Lymphedema,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,66,"bupivacaine, AstraZeneca; triamcinolone acetonide",66,null,Comparative Effectiveness of Corticosteroid Preparation in Sympathetic Ganglion Block on Lymphedema,2010-0206; KCT0000300,Seoul National University Hospital,127593,"APRIL    , 30, 2010",Recruiting
1,null,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,261,"fluticasone furoate (nasal, allergic rhinitis), GSK",261,null,"Study FFR116364, a Placebo-Controlled Study of GW-685698X in Pediatric Subjects With Perennial Allergic Rhinitis",116364; FFR116364; JapicCTI-121888; NCT01630135,GlaxoSmithKline plc,88789,"JUNE     , 30, 2012",Completed
1,Diastolic blood pressure; Heart rate; Peak expiratory flow rate; QRS complex; QT interval; Systolic blood pressure,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,36,GW-685698X,36,null,"Repeat Dose GW-685698X With Magnesium Stearate, Excipient Bridging Study, In Healthy Subjects",HZA102928; NCT00522678,GlaxoSmithKline plc,23655,"FEBRUARY , 15, 2007",Completed
3,Blood pressure; Heart rate; Hydrocortisone; Peak expiratory flow rate; Potassium,Chronic obstructive pulmonary disease,Avamys; Relovair,Phase 1 Clinical,C1,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,16,vilanterol,16,null,Comparing Two Respiratory Drugs in Combination and Separately From a Novel Inhaler Device in Healthy Japanese Subjects,HZA102940; NCT00625196,GlaxoSmithKline plc,23384,"FEBRUARY , 27, 2008",Completed
2,Intraocular pressure,Diabetic macular edema,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,40,Panretinal photocoagulation; triamcinolone acetonide,40,null,"A Randomized, Controlled Trial on Therapeutic Effects of Sub-Tenons Capsule Injection of Triamcinolone Acetonide in Prevention of Occurrence and Inhibition of Progression of Diabetic Macular Edema Caused by Panretinal Photocoagulation",JPRN-C000000455,Kyoto University,136114,"JULY     , 31, 2006",Completed
2,null,Respiratory disorder,"beclometasone (inhaled, CFC-free), Teva",Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,1568,"ciclesonide (metered dose inhaler), Nycomed",1568,null,Effects of ciclesonide and beclomethasone on lens opacification in adult subjects with moderate to severe persistent asthma,NCT00254956; SFY6160; XRP1526B/3027,Sanofi SA,22103,"JANUARY  , 31, 2004",Completed
1,null,Ocular inflammation,null,Phase 3 Clinical,C3,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,200,difluprednate,200,null,Study of Difluprednate Ophthalmic Emulsion in Postoperative Inflammation,NCT00406341; SJE2079/3-03,Sirion Therapeutics Inc,21568,"APRIL    , 30, 2004",Completed
1,null,Ocular inflammation,null,Phase 2 Clinical,C2,"dexamethasone intraocular injection (controlled/sustained release/Verisome), EyePoint",65274,172,IBI-10090,172,null,Efficacy and Safety of IBI-10090 in Ocular Surgery Patients,C11-01; NCT01606735,Icon Bioscience Inc,87882,"APRIL    , 30, 2012",Completed
2,null,Seasonal allergic rhinitis,triamcinolone acetonide,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,481,fluticasone,451,null,"A phase IV, randomized, double-blind, double-dummy, placebo-controlled, parallel-group study to compare the safety and efficacy of fluticasone propionate aqueous spray and triamcinolone acetonide  aqueous nasal spray in patients with seasonal allergic rhinitis",FLTA4007,GlaxoSmithKline plc,87544,"AUGUST   , 11, 1997",Completed
1,null,Asthma,null,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,415,"beclometasone (inhaled, CFC-free), Teva",415,null,Evaluation of Two Doses of Qvar versus Placebo by Breath Operated and Metered Dose Inhalers in Moderate Asthmatic Adolescents and Adults on a Stable Regimen of Inhaled Corticosteroids,IXR-301-4-197; NCT00109668,Teva Pharmaceutical Industries Ltd,22589,"JULY     , 31, 2004",Completed
4,Forced Vital Capacity; Forced expiratory flow ; Forced expiratory volume,Asthma,PARI BOY inhalation system; budesonide,Phase 3 Clinical,C3,"budesonide (controlled release/inhaled/AKITA, adult asthma), Vectura",83838,702,VR-475 inhalation system; budesonide,702,null,"A randomized, double-blind, placebo-controlled, parallel-group study to evaluate the efficacy and safety of two doses of nebulised budesonide delivered by the VR475 Inhalation System, with an open-label comparison to conventionally nebulized budesonide, in patients with uncontrolled asthma despite treatment with high dose inhaled corticosteroid and at least a second controller (GINA Step 4) and those receiving oral corticosteroid (GINA Step 5)",2015-000353-20; 2015-CT0310; PHRR160330-001192; VR475/3/001,"Syneos Health Inc, Vectura Group plc",253447,"OCTOBER  , 01, 2015",Completed
2,null,Carpal tunnel syndrome,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,70,triamcinolone acetonide; wrist splint,70,null,Efficacy of steroid injection and wrist splint in carpal tunnel syndrome,6/10/12/90/پ; IRCT2012110210799N3,Yasouj University of Medical Sciences and Health Services,139713,"NOVEMBER , 30, 2012",No longer recruiting
1,null,Diabetic macular edema,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,162,triamcinolone acetonide,162,null,"A Multicenter, randomized controlled Clinical Trial of Early Vitrectomy for Diffuse Diabetic Macular Edema",JPRN-UMIN000008957,Kagoshima University,138006,"OCTOBER  , 01, 2012",Not yet recruiting
1,Albumin; Alkaline phosphatase; Aspartate aminotransferase; Bilirubin; Bone mineral density; Prothrombin time,Autoimmune hepatitis,null,Phase Not Applicable,PNA,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,null,Entocort,null,null,Oral Budesonide in the Treatment of Patients With Primary Biliary Cirrhosis and Overlap Features of Autoimmune Hepatitis,07-003586; BUDESONIDE; NCT00587119,Mayo Clinic Foundation,201346,"DECEMBER , 31, 2007",Terminated
2,Fovea centralis; Macula retinae; Visual acuity,Diabetic macular edema,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,20,pars plana vitrectomy; triamcinolone acetonide,20,null,A Randomized Controlled Trial of Triamcinolone Intravitreal Injection Versus Vitrectomy for Diabetic Macular Edema,JPRN-C000000432,Kagoshima University,142064,"JUNE     , 01, 2006",Recruiting
1,Blood pressure; Diastolic blood pressure; Heart rate; Systolic blood pressure,Allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,56,GW-685698X,56,null,Safety Study To Assess Growth In Children With Seasonal Allergic And/Or Perennial Allergic Rhinitis Treated With GW-685698X Aqueous Nasal Spray Or Placebo Nasal Spray,FFR101747; NCT00109486,GlaxoSmithKline Inc,14025,"APRIL    , 30, 2005",Completed
1,Glucose; High-density lipoprotein cholesterol,Adrenal gland hypofunction,null,Phase 3b Clinical,C3B,"dual-release hydrocortisone (oral, adrenal insufficiency), ViroPharma",58174,86,hydrocortisone,80,null,"An open, multicenter, phase IIIb, long-term follow-up study to assess the safety, tolerability and efficacy of once-daily oral modified-release hydrocortisone in patients with adrenal insufficiency",2008-003990-42; DC08/01,DuoCort Pharma AB,142192,"JULY     , 28, 2008",Completed
1,Blood flow; Cephalic vein; Radial artery,Kidney dialysis,null,Phase 2 Clinical,C2,"prednisolone (injectable liposome formulation, rheumatoid arthritis/ulcerative colitis), Enceladus",59891,30,Nanocort,30,LIPMAT,Liposomal Prednisolone to Improve Hemodialysis Fistula Maturation,2015-002488-40; LIPMAT; LIPMAT; NCT02495662,Leiden University Medical Center,234690,"NOVEMBER , 30, 2015",Terminated
3+,null,Age related macular degeneration,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,108,PPA-904; Photodynamic therapy; bevacizumab; bevacizumab; triamcinolone acetonide,108,null,"Phase III, Clinical Trial Multicenter, Randomized for the Evaluation of the Safety and Efficacy of the Combined Treatment of Intravitreal Triamcinolone and Photodynamic Therapy Versus Intravitreal Bevacizumab and Photodynamic Therapy Versus Intravitreal Bevacizumab for the Treatment of Neo-Vascular Maculopathy Type Retinal Angiomatous Prolipheration (RAP)",EudraCT 2008-001468-34; HLS01/2008,"Ospedale Luigi Sacco Azienda Ospedaliera Polo Universitario, Polo Universitario",142760,"NOVEMBER , 20, 2008",Recruiting
1,null,Arthralgia,null,Phase 4 Clinical,C4,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,94,triamcinolone acetonide,94,null,"Blind intra-articular injection with low- and high-dose corticosteroid in adhesive capsulitis: a randomized, double-blind, controlled trial",AJIRB-MED-CT4-15-005; KCT0001451,Ajou University Hospital,227263,"APRIL    , 20, 2015",Recruiting
1+,Calprotectin; Insulin-like Growth Factor 1,Crohns disease,null,Phase 2 Clinical,C2,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,22,Entocort; Nutropin AQ; prednisone,20,null,Trial of Growth Hormone Therapy in Pediatric Crohn's Disease,"CCHMC IRB #: 04-12-06; IND # 71,344; NCT00109473",Cincinnati Children's Hospital Medical Center,157135,"APRIL    , 30, 2005",Completed
1,null,Psoriasis,null,Phase 2 Clinical,C2,"mometasone + nortriptyline (topical cream, psoriasis), CombinatoRx",56234,20,CRx-191,20,null,Study of CRx-191 to assess activity in plaque psoriasis,CRx-191-001; Eudra CT #: 2006-005848-87; NCT00557739,Zalicus Inc,36819,"NOVEMBER , 30, 2007",Completed
1,null,Atopic dermatitis,null,Phase 2 Clinical,C2,mapracorat,46177,12,mapracorat,12,null,HPA Axis Study in Japanese Adults,1403460; 15519; NCT01407510,Bayer AG,79701,"MAY      , 31, 2011",Completed
2,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Calcium; Chlorides; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; FEV1; Glucose; Heart rate; Hematocrit; Hemoglobin; Lactate dehydrogenase; Leukocyte count; Lymphocytes; Monocytes; Neutrophils; PEF; Phosphorus; Potassium; Sodium; Systolic blood pressure; Total cholesterol; Total protein; Urea nitrogen; Uric acid; cortisol; gamma-Glutamyltransferase,Asthma,null,Phase 2b Clinical,C2B,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,622,fluticasone; fluticasone furoate,207,null,A Randomized Study To Evaluate The Efficacy And Safety Of An Investigational Drug In Adolescent And Adult Subjects With Asthma Uncontrolled on Low-dose ICS Therapy,2007-004459-13; FFA109685; NCT00603278,GlaxoSmithKline plc,88126,"DECEMBER , 20, 2007",Completed
1,null,Bursitis,null,Phase not specified,NS,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,90,triamcinolone acetonide,90,null,"Treatments for Non - Septic Olecranon Bursitis: Choosing among Observation, Aspiration and Aspiration with Steroid Injection",KCT0001525; MJH-14-086,Myongji Hospital,232350,"FEBRUARY , 17, 2015",Completed
1,Intraocular Pressure; Visual acuity,Uveitis,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,45,triamcinolone acetonide,45,null,Intracameral different dosage triamcinolone acetonide preventing anterior uveitis after uveitic cataract,ChiCTR-TRC-13003466,Beijing Shijitan Hospital,151518,"SEPTEMBER, 01, 2013",Not yet recruiting
1+,null,Asthma,null,Phase 1 Clinical,C1,"beclomethasone dipropionate, (CFC-free), Teva",44414,53,Qvar; darunavir; ritonavir,53,null,Drug Interaction Study Between Inhaled Beclomethasone and Protease Inhibitors in Healthy Volunteers,09-CC-0186; 090186; NCT00936793,National Institutes of Health,58697,"JULY     , 06, 2009",Completed
1,Hydrocortisone,Crohns disease,null,Phase 3 Clinical,C3,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,123,Entocort,108,null,Safety Study of Entocort for Children With Mild to Moderate Crohn's Disease,2011-003743-22; D9422C00001; NCT01444092,Perrigo Co plc,81223,"NOVEMBER , 30, 2011",Completed
2,null,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,127,fluticasone furoate; fluticasone propionate,127,null,Fluticasone Nasal Spray Patient Preference Study,FFU108556; NCT00398476,GlaxoSmithKline plc,13880,"DECEMBER , 01, 2006",Completed
1,Histamine; Tryptase,Seasonal allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,20,Veramyst; olopatadine,20,null,Effect of Veramyst and Olopatadine 0.2% Opthalmic Solution on Allergy Symptoms,09-287-B; NCT01007253,University of Chicago,61731,"NOVEMBER , 30, 2009",Completed
1,null,Ocular inflammation,null,Phase 3 Clinical,C3,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",56108,250,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",250,null,Mapracorat Ophthalmic Suspension for the Treatment of Ocular Inflammation Following Cataract Surgery,663; NCT01230125,Bausch & Lomb Inc,71760,"NOVEMBER , 30, 2010",Completed
1,Forced expiratory flow ; Forced expiratory volume; Hydrocortisone; Peak expiratory flow rate,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,1000,Alvesco,1000,BALLOON,Efficacy and Safety of Ciclesonide in Preschool Children With Asthma (2 to 6 years),2005-001242-17; BALLOON; BY9010/M1-207; NCT00163449,"ALTANA AG, AstraZeneca plc",22042,"NOVEMBER , 30, 2005",Completed
1,null,Ocular inflammation,null,Phase 2/Phase 3 Clinical,C23,"dexamethasone intraocular injection (controlled/sustained release/Verisome), EyePoint",65274,42,IBI-10090,42,null,Efficacy and Safety Study of IBI-10090 in Cataract Surgery Patients,C10-01; NCT01214174,Icon Bioscience Inc,70911,"OCTOBER  , 31, 2010",Terminated
1,null,Ocular inflammation,null,Phase 3 Clinical,C3,"dexamethasone intraocular injection (controlled/sustained release/Verisome), EyePoint",65274,394,Dexycu,394,null,The Efficacy and Safety of IBI-10090 for the Treatment of Inflammation Associated With Cataract Surgery,C13-04; NCT02006888,Icon Bioscience Inc,163346,"JANUARY  , 31, 2014",Completed
3,null,Asthma,null,Phase 1 Clinical,C1,"budesonide + formoterol (inhalant aerosol, chronic obstructive pulmonary disease), Pearl Therapeutics",70143,59,PT-009; PT-010; Symbicort Turbohaler,72,null,Pharmacokinetics and Safety Study of PT-010 in Healthy Subjects,NCT02189304; PT010002-00,Pearl Therapeutics Inc,204168,"JUNE     , 01, 2014",Completed
1,null,Ear disease,null,Phase 3 Clinical,C3,"dexamethasone + povidone iodine (otitis), Foresight Biotherapeutics",64095,6,FST-201,6,null,FST-201 In The Treatment of Acute Fungal Otitis Externa,FST201-AFOE-02; NCT00945646,Shire plc,59122,"JULY     , 31, 2009",Terminated
2,Glucose,Non-insulin dependent diabetes,triamcinolone acetonide injectable suspension (Kenalog),Phase 2 Clinical,C2,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,33,Zilretta,33,null,Study to Assess the Effects of FX-006 on Blood Glucose in Patients With OA of the Knee and Type 2 Diabetes,FX006-2015-010; NCT02762370,Flexion Therapeutics Inc,260068,"APRIL    , 30, 2016",Completed
1,Blood pressure; Heart rate,Lateral epicondylitis,null,Phase 3 Clinical,C3,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique",78444,200,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique",200,null,"Multicenter, prospective, double-blind, in parallel-groups, randomized, placebo-controlled clinical trial to evaluate the short-term efficacy and safety of betamethasone valerate 2.25 mg medicated plaster in patients with chronic lateral epicondylitis (tennis elbow)",14I-BMT09; 2014-004119-35,Institut Biochimique SA,269724,"MARCH    , 03, 2015",Completed
1,null,Psoriasis,null,Phase 4 Clinical,C4,"halobetasol propionate (0.05% topical foam, plaque psoriasis), Mayne Pharma",114745,25,halobetasol propionate,25,null,Adrenal Suppression and Absorption Study of Halobetasol Propionate Foam in Subjects 12 to 17 With Plaque Psoriasis,122-0551-209; NCT03992261,Mayne Pharma Group Ltd,385266,"JUNE     , 14, 2019",Recruiting
2,Knee stiffness,Pain,triamcinolone acetonide injectable suspension,Phase 3 Clinical,C3,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,484,Zilretta,484,null,Study of FX-006 for the Treatment of Pain in Patients With Osteoarthritis of the Knee,2014-005329-11; FX006-2014-008; NCT02357459,Flexion Therapeutics Inc,221476,"JANUARY  , 31, 2015",Completed
3+,Central cornea; Intraocular pressure; Macula retinae,Ocular inflammation,Moxeza; nepafenac; prednisolone acetate,Phase 4 Clinical,C4,"triamcinolone acetonide + moxifloxicin hydrochloride + vancomycin (ocular disease), Harrow Health",95157,59,TriMoxiVanc; TriMoxiVanc; nepafenac,66,null,Dropless Versus Standard Drops Contralateral Eye Study,CEP 14-002; NCT02515045,"Carolina Eyecare Physicians, LLC",236566,"JANUARY  , 31, 2015",Completed
2,hsCRP,Gout,triamcinolone acetonide,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,136,canakinumab,136,null,"Safety and Efficacy of Canakinumab (ACZ-885) in Patients With Frequent Flares for Whom Non-steroidal Anti-Inflammatory Drug (NSAIDs) and/or Colchicine Are Contraindicated, Not Tolerated or Ineffective",2010-024172-26; CACZ885H2358; NCT01362608,Novartis AG,77770,"JUNE     , 20, 2011",Terminated
1,GTPase KRas,Adenocarcinoma,null,Phase 2 Clinical,C2,"clobetasol propionate foam, Connetics",18168,123,clobetasol; regorafenib,123,ReDOS,Lower or Standard Dose Regorafenib in Treating Patients With Refractory Metastatic Colorectal Cancer,NCI-2015-00011; NCT02368886; P30CA015083; RU021407I; ReDOS,Academic and Community Cancer Research United,222641,"MARCH    , 27, 2015",No longer recruiting
1,Forced expiratory volume; Peak expiratory flow rate,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,1080,"ciclesonide (metered dose inhaler), Nycomed",1050,RAINBOW,A Comparative Study of Inhaled Ciclesonide Versus Placebo in Children (6 to 11 years) With Asthma,BY9010/M1-209; NCT00384189; RAINBOW; U1111-1172-2297,Takeda GmbH,22308,"SEPTEMBER, 30, 2006",Completed
3,Interleukin-13; Interleukin-17D; Protein S100-A1,Atopic dermatitis,null,Phase 1 Clinical,C1,"clobetasol propionate foam, Connetics",18168,30,"betamethasone; clobetasol propionate foam, Connetics; pimecrolimus",30,null,A Clinical Trial to Compare Topical Agents in Adults With Mild to Moderate Atopic Dermatitis (AD),EXP-1184; NCT02376049,LEO Pharma A/S,223294,"FEBRUARY , 28, 2015",Completed
2,null,Uveitis,null,Phase 3 Clinical,C3,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,193,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate; prednisolone (oral suspension, inflammation), Taro Pharmaceuticals",193,null,Safety and Efficacy Study of Iontophoretic Dexamethasone Phosphate Ophthalmic Solution to Treat Non-Infectious Anterior Segment Uveitis,EGP-437-004; NCT01505088,Eyegate Pharmaceuticals Inc,83808,"DECEMBER , 31, 2011",Completed
2+,Fovea centralis; Visual acuity,Retinal venous occlusion,Lucentis,Phase 3 Clinical,C3,"suprachoroidal triamcinolone acetonide + intravitreal aflibercept (diabetic macular edema), Clearside Biomedical",92483,460,Avastin; Lucentis; triamcinolone acetonide,460,TOPAZ,Suprachoroidal Injection of Triamcinolone Acetonide With IVT Anti-VEGF in Subjects With Macular Edema Following RVO,2017-002089-37; CLS1003-302; CTRI/2018/05/014044; NCT03203447; TOPAZ,Clearside Biomedical Inc,303712,"MARCH    , 05, 2018",Terminated
2,Forced expiratory volume,Asthma,null,Phase 2b Clinical,C2B,"beclomethasone dipropionate, (CFC-free), Teva",44414,98,"Qvar; glycopyrronium bromide (inhaled, COPD), Chiesi",98,ELITRA,Efficacy of LAMA Added to ICS in Treatment of Asthma,2014-001442-16; CCD-05993AB1-02; CCD-5993AB1-02; ELITRA; NCT02296411,Chiesi Farmaceutici SpA,216299,"NOVEMBER , 30, 2014",Completed
2+,null,Psoriasis,null,Phase 3b Clinical,C3B,"clobetasol propionate foam, Connetics",18168,592,Enbrel; Enbrel; Enbrel + Primolux; Primolux,592,null,Evaluate Efficacy and Safety of Topical Therapy and Etanercept in Subjects With Moderate to Severe Plaque Psoriasis,20080470; NCT01235442,Amgen Inc,71945,"SEPTEMBER, 30, 2010",Completed
4,null,Asthma,inhaled corticosteroids therapy; long acting beta 2-agonist therapy; long acting bronchodilator therapy,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,4233,Relvar Ellipta,4233,Salford Lung Study 2,"An Effectiveness Study Comparing Fluticasone Furoate (FF, GW-685698)/Vilanterol (VI, GW-642444) With Standard Treatment in Asthma",115150; 2011-005553-31; HZA115150; NCT01706198; Salford Lung Study 2,"Glaxo Group Research Ltd, GlaxoSmithKline Research & Development Ltd, GlaxoSmithKline plc",94845,"NOVEMBER , 01, 2012",Completed
1,null,Graft versus host disease,null,Phase 3 Clinical,C3,"budesonide (gastroresistant capsule, Crohn's disease/ulcerative colitis), Dr Falk Pharma/Salix",59671,242,Budenofalk,94,null,Budesonide for Prevention of Acute Gastrointestinal GVHD Following Allogenic Stem Cell Transplantation,NCT00180089; PROGAST,Dresden University of Technology,77387,"JANUARY  , 31, 2004",Completed
2,null,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"beclomethasone dipropionate  (waterless nasal spray, allergic rhinitis), Teva",76229,107,Qnaze,25,null,Hypothalamic-Pituitary-Adrenal (HPA) Axis Study in Adult and Adolescent Subjects With Perennial Allergic Rhinitis (PAR),BDP-AR-304; NCT01133626,Teva Pharmaceutical Industries Ltd,66887,"JUNE     , 30, 2010",Completed
1,null,Asthma,null,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,25,"beclomethasone dipropionate, (CFC-free), Teva",25,PVSD-ICS,The predictive value of the acute effect of beclomethasone-dipropionate on a mannitol challenge test for the outcome of longterm treatment with beclomethasone-dipropionate in childhood asthma,2016-002276-27; PVSD-ICS; PVSD-ICS,Medisch Spectrum Twente Enschede,267741,null,Recruiting
3,null,Allergic rhinitis,null,Phase 1 Clinical,C1,"fluticasone furoate + levocabastine (intranasal spray, perennial and seasonal allergic rhinitis), GlaxoSmithKline",89013,30,"fluticasone furoate (nasal, allergic rhinitis), GSK; fluticasone furoate + levocabastine; levocabastine hydrochloride",30,null,A Relative Bioavailability Study of Fluticasone Furoate and Levocabastine,200284; NCT01962467,GlaxoSmithKline plc,157921,"OCTOBER  , 31, 2013",Completed
1,Cortisol; FEV1; PEF,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,669,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",575,null,A Study of GW-685698X 100 microg Administered Once-Daily Either in the Morning or the Evening and GW-685698X 250 microg Administered Once-Daily in the Evening Via Diskhaler for 28 Days in Subjects With Persistent Bronchial Asthma,FFA20001; NCT01499446,GlaxoSmithKline plc,83590,"SEPTEMBER, 30, 2003",Completed
3,FEV1; cortisol,Asthma,fluticasone propionate,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,750,ciclesonide,744,null,Efficacy of Ciclesonide Inhaled Once Daily Versus Fluticasone Propionate Inhaled Twice Daily in Children With Asthma (6 to 11 years),2004-000825-31; BY9010/M1-206; NCT00163462,"AstraZeneca plc, Takeda Pharmaceutical Co Ltd",22091,"OCTOBER  , 31, 2004",Completed
1,Alanine transaminase; Albumin; Alkaline phosphatase; Bilirubin; Blood platelets; Calcium; Creatine kinase; Creatinine; Gamma-glutamyltranspeptidase 1; Glucose; Leukocyte count; Phosphorus; Potassium; Sodium; Total cholesterol,Multiple myeloma,null,Phase 1/Phase 2 Clinical,C12,"dexamethasone (liposome formulation, castration resistant prostate carcinoma/multiple myeloma), Enceladus",77410,35,dexamethasone,35,AMETHYST,An Evaluation of the Safety of Oncocort IV Pegylated Liposomal Dexamethasone Phosphate in Patients With Progressive Multiple Myeloma,14-097; 2014-005137-32; AMETHYST; NCT03033316,Enceladus Pharmaceuticals,294570,"JANUARY  , 31, 2017",Recruiting
2,Forced expiratory volume in 1 s (FEV1),Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,32,"Ellipta dry powder inhaler; fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",32,null,A Study to Assess the Bronchodilator Effect of a Single-Dose of Fluticasone Furoate (FF)/Vilanterol (VI) 100/25 microg Combination When Administered in Adult Patients With Asthma,116592; NCT01837316,GlaxoSmithKline plc,123588,"OCTOBER  , 21, 2013",Completed
1,Hydrocortisone,Rectosigmoiditis,null,Phase 3 Clinical,C3,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,265,Rectabul,265,null,Efficacy and Safety of Budesonide Foam for Patients With Active Mild to Moderate Ulcerative Proctitis or Proctosigmoiditis,BUCF3001; NCT01008410,Bausch Health Companies Inc,62013,"NOVEMBER , 30, 2009",Completed
4,Intraocular pressure; Visual acuity,Ocular inflammation,Netildex eye drops solution; bromfenac,Phase 3 Clinical,C3,"dexamethasone + netilmicin (ophthalmic), SIFI",56575,180,Netildex; XanterGel; bromfenac,180,null,Clinical Study to Evaluate the Efficacy and Tolerability of an Anti-Inflammatory/Antibiotic Treatment Following Ocular Cataract Extraction,044-SI; 2016-002138-63; NCT02973880,SIFI Societa Industria Farmaceutica Italiana SpA,280555,"OCTOBER  , 15, 2017",Completed
1,null,Inflammatory disease,null,Phase 2 Clinical,C2,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",56108,415,BOL-303242X,415,null,Evaluation of BOL-303242X Versus Vehicle for the Treatment of Inflammation Following Cataract Surgery,2009-011913-26; 588; NCT00905450,Bausch & Lomb Inc,55690,"JUNE     , 30, 2009",Completed
1,null,Inflammatory disease,null,Phase 3 Clinical,C3,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,120,difluprednate,120,null,Study of Difluprednate in the Treatment of Inflammation Following Ocular Surgery (ST-601-004),NCT00616993; ST-601-004,Sirion Therapeutics Inc,22504,"JANUARY  , 31, 2008",Completed
2,FEV1,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,52,fluticasone furoate; fluticasone furoate + vilanterol,52,null,Randomized Study Comparing the Effects of Inhaled Fluticasone Furoate (FF)/Vilanterol (VI; GW-642444M) Combination and FF on an Allergen Induced Asthmatic Response,113090; NCT01128569,GlaxoSmithKline plc,66839,"JANUARY  , 31, 2010",Completed
2,Adenosine Monophosphate; Forced expiratory volume; Slow vital capacity,Asthma,Ventolin; fluticasone,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,37,Ventolin; ciclesonide,37,null,Responsiveness of Lower Airways in Adult Patients (18 to 60 Years) With Stable Asthma After Treatment With Ciclesonide and Fluticasone Propionate,BY9010/NL-101; ISRCTN37115189; NCT00306163; NTR711,"AstraZeneca plc, Byk Nederland BV",22406,"MAY      , 31, 2006",Completed
2,null,Staphylococcus aureus infection,"clobetasol propionate foam, Connetics",Phase 2 Clinical,C2,"clobetasol propionate foam, Connetics",18168,60,"Altabax; clobetasol propionate foam, Connetics",60,null,Treatment of Staphylococcus Aureus Colonization in Hand Eczema,GCO 11-0038; NCT01591785,Mount Sinai School of Medicine,87172,"JANUARY  , 31, 2012",Completed
2,null,Osteoarthritis,triamcinolone acetonide (Kenalog-40),Phase 2b Clinical,C2B,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,229,Zilretta,229,null,Study of FX-006 in Patients With Osteoarthritis of the Knee,FX006-2011-001; NCT01487161,Flexion Therapeutics Inc,83071,"JUNE     , 30, 2012",Completed
1,null,Seasonal allergic rhinitis,null,Phase 2 Clinical,C2,"beclomethasone dipropionate  (waterless nasal spray, allergic rhinitis), Teva",76229,487,Qnaze,487,null,Study to Assess the Efficacy and Safety of BDP HFA Nasal Aerosol in Patients 12 Years and Older With SAR,BDP-AR-201; NCT00854360,Teva Pharmaceutical Industries Ltd,47773,"MARCH    , 31, 2009",Completed
2,Forced expiratory volume,Chronic obstructive pulmonary disease,Fostair,Phase 2 Clinical,C2,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,366,Trimbow,366,TRI-D,Efficacy of Fixed Combination of Beclomethasone Dipropionate (BDP) + Formoterol Fumarate (FF) + Glycopyrronium Bromide (GB) Administered Via Dry Powder Inhaler (DPI) in Chronic Obstructive Pulmonary Disease (COPD),2017-004405-41; CLI-05993BA1-02; NCT03590379; TRI-D,Chiesi Farmaceutici SpA,346870,"JUNE     , 15, 2018",Completed
1,null,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,24,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline; vilanterol",24,null,Dose Proportionality Study: Blood Levels of Fluticasone Furoate (FF) and Vilanterol (VI) Following Different Doses of FF/VI Via an Inhaler,102932; NCT01213849,GlaxoSmithKline plc,71284,"OCTOBER  , 04, 2010",Completed
2,C5a anaphylatoxin chemotactic receptor; Complement receptor type 1; Cytokines; Forced expiratory volume; Integrin alpha-IIb; Integrin alpha-M; Interleukin-1 beta; Interleukin-13; Interleukin-17A; Interleukin-8; Leukocyte elastase; Neutrophil extracellular trap; Neutrophils; Resistin,Chronic obstructive pulmonary disease,Relvar Ellipta,Phase 4 Clinical,C4,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,80,Spiolto Respimat,80,INCOGNITO,"Investigating COPD Outcomes, Genomics and Neutrophilic Inflammation With Tiotropium and Olodaterol",2016-004473-41; 2016RC22; INCOGNITO; NCT03152149,University of Dundee,299300,"JUNE     , 01, 2017",Recruiting
1,null,Asthma,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,30,"99mTc; beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",30,null,"Lung Deposition of Beclometasone Dipropionate/Formoterol Fumarate/Glycopyrronium Bromide Administered Via pMDI in Healthy, Asthmatic and COPD Patients",2016-001088-35; CCD-05993AA1-15; NCT02975843,Chiesi Farmaceutici SpA,280709,"NOVEMBER , 30, 2016",Completed
2+,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Body temperature; Calcium; Chlorides; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; Globulins; Glucose; Hematocrit; Hemoglobin; Ketones; Leukocyte count; Lymphocytes; Mean corpuscular hemoglobin; Mean corpuscular volume; Monocytes; Neutrophils; Nitrite; PR interval; Phosphate; Potassium; QRS complex; QT interval; Respiratory frequency; Sodium; Systolic blood pressure; Total cholesterol; Total protein; Triglycerides; Urea; Uric acid; Urinary specific gravity; Urobilinogen; gamma-Glutamyltransferase,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,48,batefenterol succinate; batefenterol succinate + fluticasone furoate; fluticasone furoate; fluticasone furoate + vilanterol trifenatate; fluticasone furoate + vilanterol trifenatate,48,null,"GSK-961081 Alone and With Fluticasone Furoate (FF), Phase I (PhI), Single-Dose Regimen (SD), Repeat-Dose Regimen (RD), Pharmacokinetic (PK) Study in Healthy Volunteer (HV)",201958; NCT02666287,GlaxoSmithKline plc,251911,"JANUARY  , 27, 2016",Completed
3+,Diastolic blood pressure; Forced expiratory flow ; Forced expiratory volume; Heart rate; Systolic blood pressure,Asthma,fluticasone furoate; salbutamol,Phase 2b Clinical,C2B,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,425,ELLIPTA dry powder inhaler; fluticasone furoate; salbutamol; umeclidinium bromide,425,null,Phase IIb Study of Umeclidinium (UMEC) Bromide Versus Placebo in Subjects With Asthma,2016-002843-40; 205832; NCT03012061,GlaxoSmithKline plc,284379,"JANUARY  , 25, 2017",Completed
2,null,Crohns disease,mesalazine,Phase 3 Clinical,C3,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,123,budesonide,123,null,Phase III Study of D-9421-C 9 mg in Patients With Active Crohn's Disease in Japan,2014-004132-20; D9423C00001; JapicCTI-121765; NCT01514240,AstraZeneca plc,84227,"FEBRUARY , 29, 2012",Completed
1,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Body temperature; Calcium; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; Glucose; Heart rate; Hematocrit; Hemoglobin; Leukocyte count; Lymphocytes; Mean corpuscular hemoglobin; Mean corpuscular volume; Monocytes; Neutrophils; Potassium; Respiratory frequency; Sodium; Systolic blood pressure; Total protein; Urea nitrogen; Urinary specific gravity,Allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,358,fluticasone furoate,358,null,A Study to Compare the Efficacy and Safety of Fluticasone Furoate Nasal Sprays (FFNS) 55 and 110 microg in Chinese Pediatric Subjects With Allergic Rhinitis (AR),201492; NCT02424539,GlaxoSmithKline plc,227683,"SEPTEMBER, 30, 2015",Completed
1,Eosinophils; Peak nasal inspiratory flow,Asthma,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,20,Nasacort AQ,20,NACHO,Nasal Allergen Challenge-Reproducibility of Biomarkers and Effect of Topical Steroid Treatment,DC002544/HIREB3820; NACHO; NCT03431961,Hamilton Health Sciences Corp,329091,"MARCH    , 07, 2018",Recruiting
1,null,Eosinophilic esophagitis,null,Phase 2/Phase 3 Clinical,C23,"budesonide (orodispersible tablet, eosinophilic esophagitis), Dr Falk Pharma/Salix",106967,75,Jorveza,75,null,"Double-blind (neither physician nor patient knows of the actual treatment which can be with or without active substance), randomized (patient will be allocated to a certain treatment group by chance), placebo-controlled (one of the treatment groups receives medication without active substance), phase II/III study on the efficacy and tolerability of oral budesonide suspension in comparison with placebo in children and adolescents with eosinophilic esophagitis",2017-003737-29; BUU-5/EEA; PEDEOS-1,Dr Falk Pharma GmbH,374819,null,Status not specified
1,null,Chronic obstructive pulmonary disease,null,Phase not specified,NS,"beclomethasone dipropionate, (CFC-free), Teva",44414,20,Qvar,20,null,The Effect of QVAR on Lung Functioning in Chronic Obstructive Pulmonary Disease,HS-1277; NCT00238082,National Jewish Health,3697,"NOVEMBER , 30, 1999",Terminated
3,null,Pemphigus,Dermovate; orabase,Phase 1 Clinical,C1,"clobetasol propionate foam, Connetics",18168,20,orabase; platelet rich fibrin gel,20,null,PRF in Management of Chronic Multiple Oral Ulcers,00UAD; NCT03878771,Beni-Suef University,373754,"MARCH    , 13, 2019",Not yet recruiting
3,Forced expiratory volume,Asthma,PT-008; PT007,Phase 3 Clinical,C3,"budesonide (aerosol inhalant/MDI, asthma), Pearl Therapeutics",90863,600,PT-027,600,DENALI,A Study to Assess the Efficacy and Safety of Budesonide/Albuterol Metered-dose Inhaler (BDA MDI/PT-027) Used Four Times Daily in Adults and Children 4 Years of Age or Older With Asthma,2018-003674-27; AV004; DENALI; NCT03847896,Avillion LLP,370792,"APRIL    , 10, 2019",Recruiting
4,null,Chronic obstructive pulmonary disease,Symbicort,Phase 3 Clinical,C3,"budesonide + formoterol (inhalant aerosol, chronic obstructive pulmonary disease), Pearl Therapeutics",70143,324,PT-003; PT-009; PT-010,324,null,"Study to Assess the Safety and Efficacy of PT-010, PT-003, and PT-009 in Japanese Subjects With COPD Compared With Symbicort Turbohaler",JapicCTI-184080; NCT03262012; PT010007,Pearl Therapeutics Inc,310434,"AUGUST   , 09, 2016",Completed
1,null,Macular edema,null,Phase 2 Clinical,C2,"dexamethasone (ophthalmic implant, DME), Aerie Pharmaceuticals/ Envisia",101388,40,AR-1105,40,null,Study Assessing AR-1105 in Subjects With Macular Edema Due to Retinal Vein Occlusion (RVO),AR-1105-CS201; NCT03739593,Aerie Pharmaceuticals Inc,360004,"MARCH    , 13, 2019",Recruiting
3,null,null,null,Phase 1 Clinical,C1,"dexamethasone sodium phosphate (erythrocyte encapsulated), Urbino University/EryDel",70257,18,"dexamethasone sodium phosphate (erythrocyte encapsulated), Urbino University/EryDel; dexamethasone sodium phosphate (erythrocyte encapsulated), Urbino University/EryDel (group 1B); dexamethasone sodium phosphate (erythrocyte encapsulated), Urbino University/EryDel (group 2B)",18,null,EryDex Pharmacokinetics in Healthy Volunteers,IED-PK01-2013; NCT01925859,EryDel SPA,151307,"JUNE     , 30, 2013",Completed
1,null,null,null,Phase 1 Clinical,C1,vamorolone,70712,86,vamorolone,86,null,"A Phase I, Single-Ascending Dose and Multiple-Ascending Dose Study to Evaluate the Safety, Tolerability, and Pharmacokinetics of VBP-15 in Healthy Adult Subjects",NCT02415439; VBP15-001,ReveraGen BioPharma Inc,226791,"JANUARY  , 31, 2015",Completed
1,null,null,null,Phase 1 Clinical,C1,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",56108,61,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",61,null,"Corneal Endothelial Cell Density Changes, When Mapracorat Ophthalmic Suspension 3%, is Administered for 14 Days",794; NCT01736462,Bausch & Lomb Inc,99986,"FEBRUARY , 28, 2013",Completed
2,null,null,Pulmicort Flexhaler,Phase 1 Clinical,C1,"budesonide + salbutamol (asthma), Pearl/ Avillion",109733,66,PT-027,66,ELBRUS,A Study to Compare the Pharmacokinetics of Budesonide Delivered by PT-027 Compared With Pulmicort Flexhaler,D6930C00011; ELBRUS; NCT03934333,AstraZeneca plc,379001,"MAY      , 16, 2019",Recruiting
2,null,null,Rectabul,Phase 1 Clinical,C1,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,null,budesonide,null,null,Bioequivalence Study of Budesonide Rectal Aerosol Foam and Uceris Rectal Aerosol Foam,NCT02800824; PRG-NY-16-007,Perrigo Co Ltd,263269,null,Completed
3,null,Allergic rhinitis,null,Phase 2 Clinical,C2,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,71,"fluticasone furoate (nasal, allergic rhinitis), GSK; fluticasone furoate + levocabastine (intranasal spray, perennial and seasonal allergic rhinitis); levocabastine hydrochloride",71,null,A Proof of Concept Study to Assess Effect of Fluticasone Furoate (FF)/Levocabastine Fixed Dose Combination (FDC) Compared With Levocabastine and FF Alone in Subjects With Allergic Rhinitis (AR),200286; NCT01957202,GlaxoSmithKline plc,157076,"OCTOBER  , 31, 2013",Completed
2,Forced expiratory volume; Peak expiratory flow rate,Asthma,null,Phase 3 Clinical,C3,"salmeterol xinafoate + fluticasone propionate (inhaled/Spiromax, asthma), Teva",95991,882,"fluticasone propionate; salmeterol xinafoate + fluticasone propionate (inhaled/Spiromax, asthma), Teva",1661,null,Efficacy and Safety Study of FP MDPI Compared With FS MDPI in Adolescent and Adult Patients With Persistent Asthma,2014-000923-25; FSS-AS-30017; NCT02141854,Teva Pharmaceutical Industries Ltd,189017,"MAY      , 31, 2014",Completed
3,FEF25; FEF25-75; FEF50; FEF75; FEV1; FEV1/FVC; FVC/SVC; PEF,Asthma,Clenil (Chiesi); Flixotide,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,40,QVAR,43,OLiVIA,Effects of QVAR in Smokers With Asthma,2012-005350-39; 20122011; NCT01741285; OLiVIA,University Medical Center Groningen,100542,"APRIL    , 30, 2013",Completed
1,null,Macular edema,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,60,triamcinolone acetonide,60,null,PST/Laser versus Laser Alone for CSME,NCT00229918; PST/CSME,Edward Hines Jr. VA Hospital,100166,"SEPTEMBER, 30, 2005",Recruiting
3,null,Blepharoconjunctivitis,AzaSite; dexamethasone,Phase 3 Clinical,C3,"azithromycin + dexamethasone (sustained release, DuraSite), InSite",55854,417,AzaSite Plus,417,null,Comparative Study of AzaSite Plus Compared to AzaSite Alone and Dexamethasone Alone to Treat Subjects With Blepharoconjunctivitis,C-07-502-002; NCT00578955,InSite Vision Inc,10106,"DECEMBER , 31, 2007",Completed
2,null,Retinal venous occlusion,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,null,bevacizumab; triamcinolone acetonide,null,null,Intravitreal Bevacizumab versus Intravitreal Triamcinolone in Central Retinal Vein Occlusion (CRVO),8886; NCT01178697,Shaheed Beheshti Medical University,69043,"JANUARY  , 31, 2010",Recruiting
2,cortisol,Asthma,null,Phase not specified,NS,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,896,ciclesonide,680,ACE,"A randomized, double-blind, two-arm, parallel-group study to compare the efficacy and safety of ciclesonide 320 mg versus ciclesonide 160 mg in patients with severe persistent asthma",ACE; BY9010/M1-140,Takeda GmbH,76906,"MAY      , 07, 2007",Status not specified
1,null,Proctitis,null,Phase 2 Clinical,C2,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,17,Rectabul,17,null,Budesonide Foam Versus Placebo for Prevention of Acute Radiation Proctitis,BUF-17/RAP; EUDRACT NO.: 2007-002082-13; NCT00828230,Dr Falk Pharma GmbH,129552,"SEPTEMBER, 30, 2008",Terminated
1+,null,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,48,GSK-2834425; Relovair; Zephyr,44,null,"Pharmacokinetic Study in Healthy Volunteers to Characterize the Exposure of Fluticasone Furoate (FF), Vilanterol (VI) and Umeclidinium (UMEC) at Two Different Doses",200587; NCT01894386,GlaxoSmithKline plc,145910,"JULY     , 15, 2013",Completed
1,null,Scar tissue,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,176,triamcinolone acetonide,176,Keloid,"Surgical and Aesthetic Outcome, Quality Of Life, and Cost-Effectiveness of Keloid Treatment",2012-002675-34; Keloid; NL40235.078.12,null,116826,null,Recruiting
2,Diastolic blood pressure; Glucose; Heart rate; Potassium; Pulse rate; Systolic blood pressure; Urine cortisol,Asthma,fluticasone propionate,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,503,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",503,null,Fluticasone Furoate/GW-642444 Inhalation Powder Long-term Safety Study,106839; HZA106839; NCT01018186,GlaxoSmithKline plc,62136,"OCTOBER  , 31, 2009",Completed
3+,FEV1; PEF,Asthma,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,350,fluticasone propionate; fluticasone propionate; fluticasone propionate + salmeterol xinafoate; salmeterol xinafoate; triamcinolone acetonide,350,null,"A phase IV, randomized, double-blind, triple-dummy, parallel group study to compare the safety and efficacy of fluticasone propionate, triamcinolone acetonide, and fluticasone propionate in combination with salmeterol xinafoate, each delivered via a metered-dose inhaler, in subjects with asthma who remain symptomatic despite receiving inhaler corticosteroids",FLTA4021,GlaxoSmithKline plc,115129,"NOVEMBER , 01, 1996",Status not specified
1,null,Ocular inflammation,null,Phase 2a Clinical,C2A,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,24,difluprednate,24,null,Study of Difluprednate Ophthalmic Emulsion in the Treatment of Postoperative Inflammation,NCT00406497; SJE2079/2-03-PC,Sirion Therapeutics Inc,21563,"APRIL    , 30, 2003",Completed
2,null,Adhesive capsulitis,lidocaine; triamcinolone acetonide,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,58,Allogenic Platelet Rich Plasma (PRP),58,null,Intra-articular Injection of Allogeneic Platelet Rich Plasma (PRP) for Adhesive Capsulitis,BRM-11-02; NCT01458691,Seoul National University Hospital,115577,"SEPTEMBER, 30, 2013",Completed
1,Forced expiratory volume in 1 s (FEV1),Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,550,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",550,null,"A Randomized, Double-Blind, Placebo-Controlled, Parallel-Group, Multicenter Study to Evaluate the Efficacy and Safety of GW-685698X Inhalation Powder 200 microg bid, qd and 400 microg qd in the Morning Compared with Placebo for 8 Weeks in Adolescent and Adult Subjects (12 Years of Age and Older) with Persistent Asthma Symptomatic on Low-Dose ICS Therapy",2005-001841-40; EudraCT 2005-001841-40; FFA102714,GlaxoSmithKline plc,117746,"OCTOBER  , 05, 2005",Recruiting
3,null,Psoriasis,Daivobet; Dermoval,Phase 2 Clinical,C2,"calcitriol + clobetasol propionate (spray, psoriasis vulgaris), Galderma",87535,32,calcitriol + clobetasol propionate,32,null,"Clinical Efficacy Evaluation of a Fixed Combination of Calcitriol 3 microg/g With Three Concentrations (100, 250, 500 microg/g) of Clobetasol Propionate as Spray Formulation Using the Modified Dumas-Scholtz Psoriasis Mini Plaque Test Under Non-Occlusive Conditions",EudraCT 2006-006487-32; RD.03.SPR. 40041,Galderma SA,117900,"FEBRUARY , 27, 2007",Recruiting
3,null,Asthma,Seretide Diskus,Phase 3 Clinical,C3,"budesonide + salmeterol  (inhalation powder, respiratory diseases), Laboratoires SMB",78537,500,Axahaler; Busal,500,null,"A Phase III, Randomized, Parallel-Group Study to Compare the Therapeutic Efficacy of SMB Budesonide-Salmeterol DPI Capsule 300/25 microg bid Delivered By The Axahaler Versus Seretide Diskus 500/50 microg (Fluticasonepropionate 500 microg/Salmeterol 50 microg) bid Over 12 Weeks and to Evaluate the Safety of SMB Budesonide-Salmeterol 300/25 microg Over an Additional Period of 12 Weeks in Moderate to Severe Persistent Asthmatic Patients",BUSAL-III-05-1; EudraCT 2006-001514-33,Laboratoires SMB SA,117985,"JUNE     , 05, 2006",Completed
2,Blood pressure; Body temperature; Heart rate,Inflammatory disease,prednisolone,Phase 1 Clinical,C1,BI-653048,56124,56,BI-653048,56,null,"Safety, Tolerability, Pharmacodynamics and Pharmacokinetics of BI-653048 BS H3PO4 Capsule Assessing Endotoxin-induced Inflammatory Response in Healthy Male Subjects",1262.9; NCT02224105,Boehringer Ingelheim International GmbH,208883,"MARCH    , 31, 2010",Completed
2,C-peptide; glucose; insulin,Rheumatoid arthritis,prednisone,Phase 1 Clinical,C1,fosdagrocorat,59618,18,PF-04171327,18,null,Single-Dose Study Of PF-04171327 And Prednisone On Carbohydrate Metabolism,A9391006; NCT01199900,Pfizer Inc,70377,"AUGUST   , 31, 2010",Completed
1,null,Graft versus host disease,null,Phase 2 Clinical,C2,"beclomethasone dipropionate (oral, radiation enteritis), Soligenix",49161,2,orBec,2,null,Study of orBec as Monotherapy in the Treatment of Patients With Upper GI Symptoms Caused by Chronic Graft Versus Host Disease (GVHD),BDP-GVHD-08; NCT01925950,Soligenix Inc,151308,"DECEMBER , 31, 2013",Terminated
2,null,Crohns disease,mesalazine,Phase 3 Clinical,C3,"budesonide (gastroresistant capsule, Crohn's disease/ulcerative colitis), Dr Falk Pharma/Salix",59671,311,budesonide,311,null,Oral Budesonide Versus Oral Mesalazine in Active Crohn's Disease (CD),2004-001213-34; BUC-52/CDA; NCT00300118,Dr Falk Pharma GmbH,16108,"SEPTEMBER, 30, 2004",Completed
1,null,Psoriasis,null,Phase 4 Clinical,C4,"clobetasol propionate foam, Connetics",18168,58,clobetasol,58,null,Evaluation of the Efficacy and Tolerability of Clobetasol Propionate Foam Compared to Vehicle Foam,NCT00842153; OEF0701,Stiefel,193445,"NOVEMBER , 30, 2007",Completed
2,Albumin; C-reactive protein; Creatinine; Extracellular fluid; Lean body mass; Natriuretic peptides B; Phase angle; Sodium; Total body mass; Total body water,Bullous pemphigoid,null,Phase 4 Clinical,C4,"clobetasol propionate foam, Connetics",18168,35,Clarelux; Impedance analysis,35,RECOPB,Evaluation of Fluid Retention Due to Superpotent Topical Corticosteroid,2014-002804-26; 2014/110/HP; NCT02360202; RECOPB,Rouen University Hospital,221587,"APRIL    , 30, 2015",Recruiting
1,null,Dyspnea,null,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,7,Qvar,93,ICSADP,Effectiveness of Inhaled Corticosteroids in Preschool Children With Acute Dyspnea and Wheeze,2009-009579-36; ICSADP; NCT00962299; NL26689.075.09,Isala Klinieken,192333,"MAY      , 31, 2010",Terminated
1,FEV1,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,1116,triamcinolone acetonide,1116,null,Lung Health Study II,207; NCT00000569,National Heart Lung and Blood Institute,3630,"SEPTEMBER, 30, 1993",Completed
3,Blood pressure; Heart rate; Hydrocortisone; Peak expiratory flow rate; Potassium,Asthma,Avamys; Relovair,Phase 1 Clinical,C1,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,16,vilanterol,16,null,Comparing Two Respiratory Drugs in Combination and Separately From a Novel Inhaler Device in Healthy Japanese Subjects,HZA102940; NCT00625196,GlaxoSmithKline plc,23384,"FEBRUARY , 27, 2008",Completed
2,null,Uveitis,betamethasone sodium phosphate,Phase 3 Clinical,C3,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,140,difluprednate,140,null,Study of Difluprednate Ophthalmic Emulsion in the Treatment of Uveitis,NCT00406887; SJE2079/3-01-PC,Sirion Therapeutics Inc,21748,"AUGUST   , 31, 2002",Completed
1,Fovea centralis,Diabetic macular edema,null,Phase 2 Clinical,C2,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,90,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",90,null,Efficacy and Safety of SJE-2079 for Diabetic Macular Edema,UMIN000011873,Senju Pharmaceutical Co Ltd,243944,"SEPTEMBER, 26, 2013",Completed
1,null,Esophageal disease,null,Phase 1 Clinical,C1,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,12,fluticasone; triamcinolone acetonide,12,null,Phase I Study of Combination Therapy with Endoscopic Triamcinolone Injection and Fluticasone Swallowing for The Prevention of Esophageal Stricture After Endoscopic Submucosal Dissection,JPRN-UMIN000010383,Ishikawa Prefectural Central Hospital,137612,"APRIL    , 01, 2013",Not yet recruiting
3,Blood pressure; Heart rate; QT interval,Asthma,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,50,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi; charcoal block; pressurized metered dose inhaler",50,null,Clinical Pharmacology Study to Evaluate the Total Systemic Exposure and Lung Bioavailability of CHF-5993 pMDI Combination in Healthy Volunteers,CCD-05993AB2-01; NCT02359292,Chiesi Farmaceutici SpA,221592,"FEBRUARY , 28, 2015",Completed
2,null,Asthma,"beclometasone (inhaled, CFC-free), Teva",Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,1568,"ciclesonide (metered dose inhaler), Nycomed",1568,null,Effects of ciclesonide and beclomethasone on lens opacification in adult subjects with moderate to severe persistent asthma,NCT00254956; SFY6160; XRP1526B/3027,Sanofi SA,22103,"JANUARY  , 31, 2004",Completed
1,null,Alopecia,null,Phase 4 Clinical,C4,"clobetasol propionate foam, Connetics",18168,30,clobetasol propionate,30,null,Safety and Efficacy of Clobetasol Propionate 0.05% E Foam in Alopecia,NCT01111981; VDC2009O,Callender Center for Clinical Research,66010,"OCTOBER  , 31, 2009",Recruiting
1,Forced expiratory volume,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,21,ciclesonide,21,null,Effect of Inhaled Ciclesonide in Adult Patients With Asthma,BY9010/M1-125; NCT00546520,AstraZeneca plc,22951,"APRIL    , 30, 2002",Completed
1,FEV1,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,528,ciclesonide,528,null,Efficacy and Safety of Ciclesonide (CIC) Administered Twice-Daily in Pediatric Patients With Asthma,EFC6695; EudraCT: 2006-004740-22; NCT00392288; XRP1526,Takeda Pharmaceuticals International GmbH,22410,"SEPTEMBER, 30, 2006",Completed
1,C-reactive protein (CRP); Interleukin-6 (IL-6); Monocyte chemoattractant protein-1 (MCP-1),Chronic obstructive pulmonary disease,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,50,Allermist,50,null,Inhaled Steroid Reduces Systemic Inflammation in COPD,4027; NCT00175565,University of British Columbia,13589,"JANUARY  , 31, 2002",Completed
2,ALP; ALT; AST; Albumin; Basophils; Bilirubin; Blood pressure; Calcium; Chloride; Cholesterol; Cortisol; Creatinine; Diastolic blood pressure; Eosinophils; FEV1; GGT; Heart rate; Hemoglobin; Inorganic phosphorus; LD; Leukocyte count; Lymphocytes; Monocytes; PFE; Platelets; Potassium; Red blood cells; Sodium; Systolic blood pressure; Total neutrophils; Total protein; Uric acid; Urinary specific gravity; White blood cells; glucose,Asthma,fluticasone,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,599,GW-685698X,599,null,A Randomized Study To Evaluate The Efficacy And Safety Of An Investigational Drug In Adolescent And Adult Subjects With Asthma Uncontrolled on Non-steroidal Therapy,2007-004442-32; FFA109687; NCT00603382,GlaxoSmithKline plc,151197,"DECEMBER , 01, 2007",Completed
1,Albumin; Alkaline phosphatase; Aspartate aminotransferase; Bilirubin; Bone mineral density; Prothrombin time,Primary biliary cholangitis,null,Phase Not Applicable,PNA,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,null,Entocort,null,null,Oral Budesonide in the Treatment of Patients With Primary Biliary Cirrhosis and Overlap Features of Autoimmune Hepatitis,07-003586; BUDESONIDE; NCT00587119,Mayo Clinic Foundation,201346,"DECEMBER , 31, 2007",Terminated
1,FEV1; eosinophil,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,26,ciclesonide,26,null,Effect of Ciclesonide on Exercise Induced Bronchoconstriction,BY/M1-121; NCT00525772; OBCIEX,Hamilton Health Sciences Corp,22397,"NOVEMBER , 30, 2001",Completed
4,Forced expiratory volume; Peak expiratory flow rate,Asthma,ciclesonide; formoterol fumarate,Phase 2 Clinical,C2,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,240,Ultrahaler; ciclesonide + formoterol,240,ADVICE,Safety and Tolerability of Ciclesonide and Formoterol Fumarate Inhaled Once Daily in Patients With Asthma (18 to 75 years),2004-004708-19; ADVICE; BY9010/M1-506; NCT00314509,"AstraZeneca plc, Takeda GmbH",21993,"JULY     , 31, 2005",Completed
3,Forced Vital Capacity; Forced expiratory volume; Peak expiratory flow rate; cortisol,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,450,Alvesco; spacer AeroChamber Plus; spacer AeroChamberMAX,468,null,Efficacy and Safety of Ciclesonide Administered With or Without Different Spacers in Patients With Asthma (12 to 75 years),2005-002163-84; BY9010/M1-145; NCT00163436,"AstraZeneca plc, Takeda GmbH",22041,"SEPTEMBER, 30, 2005",Completed
2,Muscle stiffness,Pain,Monovisc,Phase 3 Clinical,C3,CINGAL,103224,368,CINGAL,368,null,CINGAL Study for Knee Osteoarthritis,Cingal 13-01; NCT01891396,Anika Therapeutics Inc,144187,"JUNE     , 30, 2013",Completed
1,null,Macular edema,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,50,bevacizumab; triamcinolone acetonide,50,null,Comparative Study on Triamcinolone and Bevacizumab Efficacy in Macular Edema Treatment and in Retinic or Chorioretinic Neovessels Treatment,08059906; EudraCT 2007-003032-37,IRCCS Policlinico San Matteo,141193,"MAY      , 30, 2007",Completed
2,null,Uveitis,null,Phase 3 Clinical,C3,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,38,MK II inserter; fluocinolone acetonide,38,null,"A Controlled, Multicenter Study of the Utilization and Safety of the MK II Inserter and the Safety of the FAI Insert in Subjects With Non-infectious Uveitis Affecting the Posterior Segment of the Eye",NCT02748512; PSV-FAI-006,EyePoint Pharmaceuticals Inc,259049,"FEBRUARY , 29, 2016",No longer recruiting
2,Alanine transaminase; Aspartate aminotransferase; C-reactive protein; High-density lipoprotein cholesterol; Lipids; Low-density lipoprotein cholesterol; Total cholesterol; Triglycerides,Psoriasis,null,Phase 2 Clinical,C2,"betamethasone valerate (topical emollient foam, psoriasis/dermatitis), Foamix",53978,28,Atorvastatin; betamethasone valerate,28,null,Efficacy of Atorvastatin as Adjunctive Treatment for Chronic Plaque Type Psoriasis,NCT02432040; PDS_PGH_2013_002,Philippine dermatological society,228274,"FEBRUARY , 28, 2013",Completed
1,Intraocular pressure; Retina; Visual acuity,Diabetic macular edema,null,Phase 4 Clinical,C4,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,12,Iluvien,11,RESPOND,A Pilot Study on the Effect and Safety of Iluvien in Chronic Diabetic Macular Edema Patients,2014-003491-23; 4C-2014-06; NCT02359526; RESPOND,Association for Innovation and Biomedical Research on Light and Image,221579,"OCTOBER  , 31, 2014",Completed
2,null,Pain,triamcinolone acetonide,Phase 0 Clinical,C0,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,50,Platelet Rich Plasma,50,null,Efficacy of Platelet Rich Plasma versus Corticosteroid Injections for Treating Greater Trochanteric Pain Syndrome,GTPS PRP VS STEROID; NCT02031367,Carl R Darnall Army Medical Center,166920,"MARCH    , 31, 2014",Not yet recruiting
1,null,Herpes simplex virus infection,null,Phase 3 Clinical,C3,"aciclovir + hydrocortisone (dermatological), Medivir",17335,254,"aciclovir + hydrocortisone (dermatological), Medivir",134,null,Safety Study Of ME-609 For Treatment Of Herpes Simplex Labialis In Adolescents,609-07; EudraCT: 2006-002828-42; NCT00375570,Medivir AB,11579,"OCTOBER  , 31, 2006",Completed
1,null,Eosinophilic esophagitis,null,Phase 3 Clinical,C3,"budesonide (orodispersible tablet, eosinophilic esophagitis), Dr Falk Pharma/Salix",106967,204,Jorveza,204,EOS-2,Maintenance of Remission With Budesonide Orodispersible Tablets versus Placebo in Eosinophilic Esophagitis,2014-001485-99; BUL-2/EER; EOS-2; NCT02493335,Dr Falk Pharma GmbH,234441,"JANUARY  , 15, 2016",No longer recruiting
1+,null,Acquired immune deficiency syndrome,null,Phase 1 Clinical,C1,"beclomethasone dipropionate, (CFC-free), Teva",44414,53,Qvar; darunavir; ritonavir,53,null,Drug Interaction Study Between Inhaled Beclomethasone and Protease Inhibitors in Healthy Volunteers,09-CC-0186; 090186; NCT00936793,National Institutes of Health,58697,"JULY     , 06, 2009",Completed
2,C-reactive protein; Erythrocyte sedimentation rate; Interleukin-6,Polymyalgia rheumatica,prednisone IR,Phase 3 Clinical,C3,"prednisone (oral, delayed release), Vectura/Mundipharma/Merck KGaA",54733,62,"prednisone (oral, delayed release), Horizon/SkyePharma/Merck KGaA",62,null,A Study Assessing the Efficacy and Safety of Lodotra Compared to Prednisone IR in Subjects Suffering From PMR,2011-002353-57; LOD3501; NCT01821040,Mundipharma Research Limited,118246,"MARCH    , 31, 2013",Terminated
3,null,Asthma,null,Phase 4 Clinical,C4,"batefenterol succinate + fluticasone furoate (COPD), GlaxoSmithKline",78547,229,"GSK-961081 + fluticasone propionate (COPD), GlaxoSmithKline; fluticasone propionate; fluticasone propionate; montelukast",38,MASCOT,Management of Asthma in School-Age Children on Therapy,HTA 05/503/04; ISRCTN03556343; MASCOT; NCT01526161,The University Hospital Of North Staffordshire NHS Trust,84740,"APRIL    , 30, 2009",Terminated
1,Adrenocorticotropic hormone; Blood pressure; Body temperature; Dehydroepiandrosterone sulfate; Heart rate; Hydrocortisone; Osteocalcin; Urine cortisol,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,AZD-5423,64294,96,AZD-5423,96,null,"Safety, Pharmacokinetics and Pharmacodynamics After Single- and Multiple-Dosing of AZD-5423 in Japanese Healthy Male Subjects",D2340C00003; NCT01338350,AstraZeneca plc,76864,"JUNE     , 30, 2011",Completed
1,FEV; NO,Asthma,null,Phase not specified,NS,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,14,"fluticasone furoate (nasal, allergic rhinitis), GSK",14,null,Effect of Intranasal Corticosteroids on Pulmonary Symptoms in Asthmatics With Nasal Congestion,2009/158; NCT01562093,St Olavs Hospital,85945,"JANUARY  , 31, 2012",Terminated
2,FEV1,Asthma,"salbutamol MDI, IVAX Corp",Phase 2 Clinical,C2,"salmeterol xinafoate + fluticasone propionate (inhaled/Spiromax, asthma), Teva",95991,72,"fluticasone + salmeterol (inhaled/Spiromax, asthma), Teva",72,null,A Dose-ranging Study to Evaluate Albuterol and Hydrofluoroalkane in Subjects Ages >/= 12 With Persistent Asthma,ABS-AS-201; NCT01058863,Teva Pharmaceutical Industries Ltd,116989,"FEBRUARY , 28, 2010",Completed
2,Forced expiratory volume,Chronic obstructive pulmonary disease,vilanterol,Phase 3a Clinical,C3A,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,1621,Relvar,1620,null,Study Evaluating the Efficacy and Safety of Fluticasone Furoate/Vilanterol Inhalation Powder (FF/VI) Compared With Vilanterol Inhalation Powder (VI) in Subjects With Chronic Obstructive Pulmonary Disease (COPD),200820; 2013-004548-44; JapicCTI-142506; NCT02105974,GlaxoSmithKline plc,180892,"APRIL    , 07, 2014",Completed
1,Anterior chamber; Intraocular pressure,Ocular pain,null,Phase 3b Clinical,C3B,"dexamethasone (punctum plug, ocular inflammation), Ocular Therapeutix",80269,240,dexamethasone,241,null,"Second, Phase III Study Evaluating Safety and Efficacy of OTX-DP for Treatment of Ocular Inflammation and Pain After Cataract Surgery",NCT02089113; OTX-14-003,Ocular Therapeutix Inc,178013,"APRIL    , 30, 2014",Completed
2+,FEV1,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,619,"fluticasone furoate + vilanterol trifenatate (oral inhalant, asthma/COPD), GlaxoSmithKline; fluticasone furoate + vilanterol trifenatate (oral inhalant, asthma/COPD), GlaxoSmithKline; placebo + fluticasone furoate + vilanterol; umeclidinium; umeclidinium (125 microg) + fluticasone furoate + vilanterol; umeclidinium (62.5 microg) + fluticasone furoate + vilanterol",1238,null,"Study to Compare the Addition of Umeclidinium Bromide (UMEC) to Fluticasone Furoate (FF)/Vilanterol (VI), With Placebo Plus FF/VI in Subjects With Chronic Obstructive Pulmonary Disease (COPD)",200109; NCT01957163,GlaxoSmithKline plc,157082,"OCTOBER  , 01, 2013",Completed
2,Body Mass Index; Diastolic blood pressure; FEV1; Heart rate; PR interval; QRS complex; QT interval; Systolic blood pressure,Chronic obstructive pulmonary disease,Foster,Phase 3 Clinical,C3,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,1368,Trimbow,1368,Trilogy,Efficacy of Fixed Combination of Beclometasone + Formoterol + Glycopyrrolate Versus Foster in COPD,2013-001057-27; CCD-1207-PR-0091; NCT01917331; Trilogy,Chiesi Farmaceutici SpA,149179,"MARCH    , 31, 2014",Completed
2,Fovea centralis; Intraocular pressure; Retina; Visual acuity,Diabetic macular edema,null,Phase 1/Phase 2 Clinical,C12,"triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical",75376,20,"CLS-1003; triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical; triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical",20,HULK,Suprachoroidal Injection of CLS-TA Alone or With Aflibercept in Subjects With Diabetic Macular Edema,CLS1004-101; HULK; NCT02944240; NCT02949024,Clearside Biomedical Inc,277937,"NOVEMBER , 30, 2016",Completed
2,null,Adrenal gland hypofunction,Cortef,Phase 1 Clinical,C1,"hydrocortisone (oral granules, adrenal insufficiency), Diurnal/Emerge Health/Medison Pharma",79146,51,Infacort,51,null,A Study of Infacort Versus Cortef in Healthy Adult Male and Female Subjects,INFACORT 007; NCT03311932,Diurnal Ltd,316172,"APRIL    , 16, 2018",Completed
1,null,Uveitis,null,Phase 2 Clinical,C2,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,40,EGP-437,40,null,Safety and Efficacy Study of Iontophoresis and Dexamethasone Phosphate to Treat Anterior Uveitis,EGP-437-001; NCT00694135,Eyegate Pharmaceuticals Inc,18517,"JUNE     , 30, 2008",Completed
2,null,Age related macular degeneration,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,null,bevacizumab; bevacizumab; triamcinolone acetonide,null,null,Intravitreal Bevacizumab Versus Bevacizumab Combined With Triamcinolone for Neovascular AMD,8533; NCT00370370,Shaheed Beheshti Medical University,5282,"NOVEMBER , 30, 2005",No longer recruiting
2,null,Psoriasis,betamethasone,Phase 3 Clinical,C3,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique",78444,231,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique",281,null,Efficacy and safety of Institut Biochimique SA (IBSA) 0.1% Betamethasone Valerate (BMV) Medicated Plaster Versus Reference Marketed Product for the Treatment of Chronic Plaque Psoriasis,04EU/BMT06; EudraCT: 2005-003050-96; ISRCTN68864186,null,153953,"APRIL    , 11, 2006",Completed
1,Forced expiratory volume in 1 sec (FEV1),Asthma,null,Phase 1/Phase 2 Clinical,C12,"SUN-0597 (nasal, inflammatory disorders), Sun Pharma",71455,64,"SUN-0597 (nasal, inflammatory disorders), Sun Pharma",64,null,"Safety, Tolerability, Pharmacokinetics and Pharmacodynamics of SPARC-1316",NCT02041221; SPARC_LTD_ CLR_13_16,Sun Pharmaceutical Advanced Research Co Ltd,168932,"JANUARY  , 31, 2014",Completed
1,GTPase KRas,Metastatic colorectal cancer,null,Phase 2 Clinical,C2,"clobetasol propionate foam, Connetics",18168,123,clobetasol; regorafenib,123,ReDOS,Lower or Standard Dose Regorafenib in Treating Patients With Refractory Metastatic Colorectal Cancer,NCI-2015-00011; NCT02368886; P30CA015083; RU021407I; ReDOS,Academic and Community Cancer Research United,222641,"MARCH    , 27, 2015",No longer recruiting
2,Forced Vital Capacity; Forced expiratory volume,Chronic obstructive pulmonary disease,Relovair; Spiriva,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,1479,CHF-5993,1479,Tristar,Non-Inferiority of Fixed Combination of Beclomethasone Dipropionate (BDP) + Formoterol Fumarate (FF) + Glycopyrronium Bromide (GB) Versus Combination of Fluticasone Furoate (FlF)/Vilanterol (VI) + Tiotropium Bromide in Chronic Obstructive Pulmonary Disease (COPD),2014-001487-35; CCD-05993AA1-07; NCT02467452; Tristar,Chiesi Farmaceutici SpA,231716,"MAY      , 31, 2015",Completed
1,17-alpha-hydroxyprogesterone; Adrenocorticotropic hormone; Body Mass Index; C-terminal telopeptide of collagen type I; Corticosterone; Cortodoxone; Glucose; Hydrocortisone; Insulin; Muscle strength; Osteocalcin; Procollagen Type I N-terminal peptide; Six-minute walk distance; Testosterone,Duchenne dystrophy,null,Phase 2 Clinical,C2,vamorolone,70712,48,vamorolone,48,VISION-DMD,An Extension Study to Assess Vamorolone in Boys With Duchenne Muscular Dystrophy (DMD),1R44NS095423-01; 1U34AR068616-01; 2016-004263-38; NCT02760277; VBP15-003; VISION-DMD,ReveraGen BioPharma Inc,260111,"AUGUST   , 31, 2016",Completed
2,null,Colitis,null,Phase 3 Clinical,C3,"budesonide (gastroresistant capsule, Crohn's disease/ulcerative colitis), Dr Falk Pharma/Salix",59671,57,Salofalk Granu-Stix; budesonide,57,null,Budesonide Versus Mesalazine Versus Placebo in Lymphocytic Colitis,2008-005994-36; BUG-1/LMC; NCT01209208,Dr Falk Pharma GmbH,70722,"MAY      , 31, 2010",Completed
1,null,Macular edema,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,170,triamcinolone acetonide,170,null,Sub-Tenon Triamcinolone in the Prevention of Radiation-Induced Macular Edema,NCT00441662; Wills Eye Sub-Tenon Kenalog,Wills Eye Institute,95811,"NOVEMBER , 30, 2004",Completed
4,ACR 20; ACR 50; ACR 70; C-reactive protein,Rheumatoid arthritis,dipyridamole; prednisolone; prednisone,Phase 2b Clinical,C2B,"prednisolone + dipyridamole (osteoarthritis, inflammation), Zalicus",50159,294,"prednisolone + dipyridamole (osteoarthritis, inflammation), Zalicus",294,Synergy,A Phase II Trial Comparing Z-102 With Placebo In Patients With Moderate To Severe Rheumatoid Arthritis,NCT01369745; Synergy; Z102-008,Zalicus Inc,78033,"JUNE     , 30, 2011",Completed
1,null,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"beclomethasone dipropionate  (waterless nasal spray, allergic rhinitis), Teva",76229,529,Qnaze,529,null,"Long-term, Safety and Efficacy Trial of Beclomethasone Dipropionate - Hydrofluoroalkane (BDP-HFA) 320 Microg in Allergic Rhinitis",BDP-AR-303; NCT00988247,Teva Pharmaceutical Industries Ltd,88339,"OCTOBER  , 31, 2009",Completed
5,Forced expiratory volume; Peak expiratory flow rate,Chronic obstructive pulmonary disease,null,Phase 2 Clinical,C2,"fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",90982,338,"Arnuity; GSK-2834425; Relvar Ellipta; Seretide; fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",338,null,Evaluation of Umeclidinium Bromide in Combination With Fluticasone Furoate in COPD Subjects With an Asthmatic Component,2014-000883-16; GSK: 200699; NCT02164539,GlaxoSmithKline plc,197089,"JULY     , 01, 2014",Completed
5,Forced expiratory volume; Peak expiratory flow rate,Chronic obstructive pulmonary disease,null,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,338,"Arnuity; GSK-2834425; Relvar Ellipta; Seretide; fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",338,null,Evaluation of Umeclidinium Bromide in Combination With Fluticasone Furoate in COPD Subjects With an Asthmatic Component,2014-000883-16; GSK: 200699; NCT02164539,GlaxoSmithKline plc,197089,"JULY     , 01, 2014",Completed
5,Forced expiratory volume; Peak expiratory flow rate,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,338,"Arnuity; GSK-2834425; Relvar Ellipta; Seretide; fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",338,null,Evaluation of Umeclidinium Bromide in Combination With Fluticasone Furoate in COPD Subjects With an Asthmatic Component,2014-000883-16; GSK: 200699; NCT02164539,GlaxoSmithKline plc,197089,"JULY     , 01, 2014",Completed
2,FEV1,Chronic obstructive pulmonary disease,Seretide,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,528,Relvar,528,null,A Study to Evaluate the 24 h Spirometric Effect (FEV1) of Fluticasone Furoate/Vilanterol Inhalation Powder (100 microg Fluticasone Furoate [FF]/25 microg Vilanterol [VI]) Compared With Salmeterol/Fluticasone Propionate Inhalation Powder (50 microg Salmeterol/500 microg Fluticasone Propionate [FP]),113107; NCT01342913,GlaxoSmithKline plc,76887,"FEBRUARY , 01, 2011",Completed
1,null,Ocular inflammation,null,Phase 3 Clinical,C3,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",56108,363,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",363,null,"Mapracorat Ophthalmic Suspension, 3% for the Treatment of Ocular Inflammation and Pain Following Cataract Surgery",793; NCT01591655,Bausch & Lomb Inc,87162,"JULY     , 31, 2012",Completed
1,Intraocular pressure (IOP); Visual acuity,Age related macular degeneration,null,Phase 2b Clinical,C2B,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,6,Medidur,6,MAP,The MAP Study: Fluocinolone Acetonide (FA)/Medidur (TM) for Age Related Macular Degeneration (AMD) Pilot,MAP; NA 00012714; NCT00605423,Johns Hopkins University,33513,"JANUARY  , 31, 2008",Completed
1,Visual acuity,Macular edema,null,Phase 2 Clinical,C2,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,20,fluocinolone acetonide,20,FAVOR,Fluocinolone Acetonide Intravitreal Inserts for Vein Occlusion in Retina,C-01-08-006; FAVOR; NCT00770770,Alimera Sciences Inc,30143,"MAY      , 31, 2009",Terminated
3,FEV1; PEF; Urinary cortisol,Asthma,fluticasone furoate; fluticasone propionate,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,587,fluticasone furoate + vilanterol,586,null,Study HZA106829: Efficacy/Safety Study of Fluticasone Furoate/Vilanterol (GW-642444) in Adult and Adolescent Asthmatics,106829; EudraCT: 2010-019594-14; HZA106829; JapicCTI-101197; NCT01134042,GlaxoSmithKline plc,66853,"JUNE     , 30, 2010",Completed
1,Diastolic blood pressure; Heart rate; QRS complex; Systolic blood pressure,Asthma,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,42,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",49,TRIPLE10,"A Study to Investigate the Pharmacokinetics, Safety and Tolerability of CHF-5993 pMDI in Subjects With Renal Impairment",2013-002140-91; CCD-05993AA1-10; NCT02040597; TRIPLE10,Chiesi Farmaceutici SpA,168962,"JANUARY  , 31, 2014",Completed
1,null,Cardiovascular inflammation,null,Phase 1/Phase 2 Clinical,C12,"prednisolone (injectable liposome formulation, rheumatoid arthritis/ulcerative colitis), Enceladus",59891,30,"prednisolone (injectable liposome formulation, rheumatoid arthritis), Galapagos",30,SILENCE,Silencing Inflammatory Activity by Injecting Nanocort in Patients at Risk for Atherosclerotic Disease,2011-002686-37; 2011-002686-37 AMC; NCT01601106; NL37190.018.11; NTR2936; SILENCE,"Academic Medical Center, University of Amsterdam",87549,"SEPTEMBER, 30, 2011",Recruiting
5,null,Contact dermatitis,vehicle ointment (paraffin oil/soft white paraffin),Phase 4 Clinical,C4,"clobetasol propionate foam, Connetics",18168,36,Clarelux; Durhalieve; Protopic; glycerol,36,null,"Efficacy of glycerol, two topical steroids, and a topical immune modulator against skin irritation",2008-001678-34; NCT00779792; WA+TR_1,Odense University Hospital,31700,"SEPTEMBER, 30, 2008",No longer recruiting
1,null,Dermatitis,null,Phase 3 Clinical,C3,"clobetasol propionate shampoo (psoriasis), Galderma/Maruho",96680,50,GK-664-S,50,null,"A Open-Label, Phase III, Multicenter, Parallel Group Study to Evaluate Efficacy and Safety Study of GK-664-S in Subjects With Moderate-to-Severe Scalp Eczema Dermatitis Except for Seborrheic Dermatitis",JapicCTI-184247,Maruho Co Ltd,366908,"DECEMBER , 01, 2018",Not yet recruiting
4,null,Chronic obstructive pulmonary disease,inhaled corticosteroids (ICS) therapy; long acting bronchodilator therapy; triple maintenance therapy,Phase 3b Clinical,C3B,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,2802,Relovair,2802,Salford Lung Study 1,"A Randomized Effectiveness Study Comparing Fluticasone Furoate (FF, GW-685698)/Vilanterol (VI, GW-642444) With Standard Treatment in Chronic Obstructive Pulmonary Disease (COPD)",115151; 2011-002452-13; HZC115151; NCT01551758; Salford Lung Study 1,"Glaxo Group Research Ltd, GlaxoSmithKline plc",85621,"MARCH    , 13, 2012",Completed
1,null,Musculoskeletal pain,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,122,lidocaine; triamcinolone acetonide,120,null,Rotator Interval and Intra-articular Corticosteroid Injection for Frozen Shoulder,IT-avdelingen; Interne tjenester; NCT00840229; REK; Rikshospitalet HF; S-08546,Rikshospitalet University Hospital,44888,"FEBRUARY , 28, 2009",Completed
1,Intraocular pressure; Macula retinae; Retina; Visual acuity,Diabetic macular edema,null,Phase 4 Clinical,C4,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,null,Iluvien,null,null,Fluocinolone Acetonide Insert (Iluvien) for Diabetic Macular Edema (FAD) Study,IRB00082826; NCT02902744,Johns Hopkins University,271751,"MARCH    , 01, 2017",Terminated
2,Blood pressure; Hydrocortisone,Adrenal gland hypofunction,hydrocortisone,Phase 4 Clinical,C4,"dual-release hydrocortisone (oral, adrenal insufficiency), ViroPharma",58174,30,Plenadren,30,PlenadrEMA,Modified-release Compared to Conventional Hydrocortisone on Diurnal Fatigue in Secondary Hypoadrenalism,2014-002039-32; H-1-2014-073; NCT02282150; PLEN-EMA-HYPO; PlenadrEMA; PlenadrEMA/1.1/2014,"H:S Rigshospitalet, Rigshospitalet, Denmark",214973,"OCTOBER  , 31, 2016",Recruiting
1,Secreted frizzled-related protein 1; sFRP1,Ulcerative colitis,null,Phase 4 Clinical,C4,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,50,Uceris,50,null,The Use of Corticosteroids (Budenofalk) as a Chemopreventative Agent in Ulcerative Colitis Associated Neoplasia,EudraCT 2009-015077-12; rrk3681,University Hospital Birmingham NHS Foundation Trust,140176,"NOVEMBER , 23, 2009",Completed
2,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Bilirubin; Blood platelets; Calcium; Diastolic blood pressure; Glucose; Heart rate; Hematocrit; Hemoglobin; Leukocyte count; Lymphocytes; Neutrophils; PR interval; Potassium; QRS complex; QT interval; Skin; Sodium; Systolic blood pressure,Atopic dermatitis,fluticasone,Phase 2 Clinical,C2,"870086 (topical, atopic dermatitis), GlaxoSmithKline",70428,25,"870086 (topical, atopic dermatitis), GlaxoSmithKline",25,null,A Study to Test the Effect of Two Different Doses of Topical GW-870086X on Atopic Dermatitis Also Including a Postive Control and a Placebo,113434; 2010-022280-35; NCT01299610,GlaxoSmithKline plc,74969,"DECEMBER , 01, 2010",Completed
2,null,Adhesive capsulitis,"bupivacaine, AstraZeneca",Phase 4 Clinical,C4,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,46,"bupivacaine, AstraZeneca; triamcinolone acetonide (sustained-release, pain), Flexion",46,null,Effectiveness of triamcinolone in suprascapular nerve block for adhesive capsulitis,AJIRB-MED-CT4-17-414; KCT0002926,Ajou University Hospital,343336,"JUNE     , 29, 2018",Not yet recruiting
7+,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Blood pressure; Calcium; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; Forced expiratory volume; Glucose; Heart rate; Hematocrit; Hemoglobin; Immunoglobulin E; Leukocyte count; Lymphocytes; Mean corpuscular hemoglobin; Mean corpuscular volume; Monocytes; Neutrophils; Potassium; Sodium; Systolic blood pressure; Total protein; Urea nitrogen,Asthma,Albuterol + salbutamol; DISKUS DPI; ELLIPTA DPI; Foxair; Metered-dose inhaler; Relvar Ellipta,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,2544,Albuterol + salbutamol; DISKUS DPI; ELLIPTA DPI; Foxair; GSK-2834425; Metered-dose inhaler,2544,CAPTAIN,"A Phase III, Parallel-Group Study, Comparing the Efficacy, Safety and Tolerability of the Fixed Dose Combination (FDC) of Fluticasone Furoate + Umeclidinium Bromide + Vilanterol (FF/UMEC/VI) With the FDC of FF/VI in Subjects With Inadequately Controlled Asthma",2016-001304-37; 205715; CAPTAIN; JapicCTI-173792; NCT02924688,"GlaxoSmithKline Research & Development Ltd, GlaxoSmithKline SA/Spain, GlaxoSmithKline plc, Innoviva Inc",274454,"OCTOBER  , 13, 2016",Completed
3,Blood pressure; Diastolic blood pressure; Heart rate; Systolic blood pressure,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",90982,18,"fluticasone furoate; fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline; umeclidinium",18,null,To Investigate the Pharmacokinetics and Safety of Fluticasone Furoate (FF/Umeclidinium (UMEC) Combination Compared With FF and UMEC Monotherapies in Adult Healthy Volunteers Using a Dry Powder Inhaler (DPI),116524; NCT01725685,GlaxoSmithKline plc,97979,"NOVEMBER , 08, 2012",Completed
1,null,Psoriasis,null,Phase 2 Clinical,C2,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique",78444,30,Betesil,30,null,"A single-center, prospective, randomized, double-blind, intra-patient (left-to-right) placebo-controlled, pilot study to assess the efficacy and safety of a betamethasone valerate 0.1% medicated plaster in the treatment of finger nail psoriasis",14I-BMT01; 2014-000291-25,Institut Biochimique SA,329808,"SEPTEMBER, 10, 2014",Terminated
1,null,Macular disease,null,Phase 1/Phase 2 Clinical,C12,"beclomethasone dipropionate (intravitreal injection), Allergan",65121,121,AGN-208397,121,null,Safety and Efficacy of AGN-208397 in the Treatment of Macular Edema Associated With Retinal Vein Occlusion (RVO),208397-001; NCT01027650,Allergan Inc,62499,"MARCH    , 31, 2010",Completed
2,null,Allergic conjunctivitis,null,Phase 2 Clinical,C2,"ciclosporin + prednisolone (allergic conjunctivitis), CombinatoRx/Fovea",56186,155,FOV-1101-00; Pred Forte; Pred Mild,155,null,Evaluation of Efficacy of Coadministration of FOV-1101-00 and Prednisolone Acetate in Patients With Mild Ongoing Ocular Allergic Inflammation,08-003-27; NCT00833495,Fovea Pharmaceuticals SA,54107,"JANUARY  , 31, 2009",Completed
1,Retina; Visual acuity,Retinal venous occlusion,null,Phase 2 Clinical,C2,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,60,MaQaid,60,null,Treatment of macular edema following BRVO with STTA,UMIN000031215,"Aichi Medical University, Kamiiida daiichi General Hospital",330917,"FEBRUARY , 28, 2018",Terminated
2,Hydrocortisone,Osteoarthritis,Kenalog-40,Phase 2 Clinical,C2,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,24,Zilretta,24,null,Study to Compare Exposure of TA Following Administration of Either FX-006 or TAcs in Patients With Bilateral Knee OA,FX-006-2017-012; NCT03378076,Flexion Therapeutics Inc,323314,"DECEMBER , 06, 2017",Completed
2,null,Perennial allergic rhinitis,mometasone (nasal/ dermatological),Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,125,GW-685698X,125,null,Long Term Safety Of GW-685698X Via Nasal Biopsy,FFR104503; NCT00224523,GlaxoSmithKline plc,12096,"SEPTEMBER, 30, 2005",Completed
1,null,Meniere disease,null,Phase 2b Clinical,C2B,"dexamethasone (sustained release/intratympanic injection, ear disorders), Otonomy",65289,154,"dexamethasone (sustained release, intratympanic injection, ear disorders), Otonomy",154,null,OTO-104 for the Treatment of Meniere's Disease,104-201102; NCT01412177,Otonomy Inc,79896,"NOVEMBER , 30, 2013",Completed
1,FEV / FVC ratio; Forced expiratory flow ; Forced expiratory volume,Asthma,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,30,Trimbow,30,STORM,"Lung Deposition of TRIMBOW pMDI in Healthy Volunteers, Asthmatic and COPD Patients",2017-005030-29; CLI-05993AA1-20; NCT03795350; STORM,Chiesi Farmaceutici SpA,365704,"JANUARY  , 14, 2019",Recruiting
2,null,Perennial allergic rhinitis,Flixonase,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,260,Nasacort AQ,260,NASANIF,A Study to Assess Efficacy and Safety of Nasacort Nasal Spray in Comparison With Flixonase Nasal Spray in Adults Suffering From Perennial Allergic Rhinitis (PAR),NASANIF; NCT03317015; TRICAL07830; U1111-1178-4882,Sanofi SA,316886,"NOVEMBER , 30, 2016",Completed
1,Adrenocorticotropic hormone; Bone mineral density,Eosinophilic esophagitis,null,Phase 3 Clinical,C3,"budesonide (oral, eosinophilic esophagitis), Shire",60523,100,budesonide,100,null,Continuation Study With Budesonide Oral Suspension (BOS) for Adolescent and Adult Subjects With Eosinophilic Esophagitis (EoE),NCT03245840; SHP621-303,Shire plc,308369,"OCTOBER  , 05, 2017",Recruiting
1,Eosinophils,Eosinophilic esophagitis,null,Phase 3 Clinical,C3,"budesonide (oral, eosinophilic esophagitis), Shire",60523,420,budesonide,420,null,A Study in Adolescents and Adults With Eosinophilic Esophagitis (EoE) Measuring Histological Response and Determine if Reduction in Dysphagia is Achieved,NCT02605837; SHP621-301; SHP621-301 induction study,Shire plc,246014,"OCTOBER  , 01, 2015",Completed
1,Tryptase,Allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,15,fluticasone furoate,15,null,Effect of Veramyst on the Nasal and Ocular Symptoms of the Early Reaction to Nasal Challenge With Allergen,16367B (OC 3); NCT00791973,University of Chicago,36009,"NOVEMBER , 30, 2008",Completed
1,blood pressure; heart rate,Asthma,null,Phase 1 Clinical,C1,AZD-5423,64294,18,AZD-5423,18,null,A Study in Healthy Subjects to Investigate Pharmacokinetics of AZD-5423 When Administered in Different Ways,D2340C00012; Eudract 2012-002307-17; NCT01635985,AstraZeneca plc,96548,"AUGUST   , 31, 2012",Completed
15+,Forced Vital Capacity; Forced expiratory volume,Chronic obstructive pulmonary disease,Bretaris Genuair; Duaklir Genuair; Incruse; Laventair; Onbrez Breezhaler; Serevent; Spiolto Respimat; Spiriva Respimat; Striverdi Respimat; Tovanor Breezhaler; Ultibro Breezhaler; formoterol; usual care for comorbidity,Phase 4 Clinical,C4,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,1032,Alabaster; Aliflus Diskus; Fobuler; Revinty Ellipta; usual care for comorbidity,1032,ICS-Life,Inhaled Long-acting Bronchodilators With or Without Inhaled Glucocorticosteroids for Preventing Hospitalizations and Death in Elderly Patients With Chronic Obstructive Pulmonary Disease,AIFA-ICSLIFE-001; ICS-Life; NCT03662711,University of Ferrara,352724,"NOVEMBER , 11, 2018",Recruiting
1,Estimated glomerular filtration rate; Synovial membrane,Osteoarthritis,null,Phase 3 Clinical,C3,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,100,FX-006,100,null,Study to Evaluate the Effect of FX-006 on Synovial Inflammation in Patients With osteoarthritis (OA) of the Knee,FX006-2017-014; NCT03529942,Flexion Therapeutics Inc,340019,"APRIL    , 24, 2018",Recruiting
1,Glucose; Hydrocortisone; Leukocyte count,Sciatica,null,Phase 2 Clinical,C2,"dexamethasone sodium phosphate (epidural steroid injectable gel, sciatia), Scilex Holding",106609,19,SP-102,15,null,A Research Study to Characterize the Pharmacodynamics and Safety of Repeat-dose SP-102,NCT03613662; SP-102-03,Semnur Pharmaceuticals Inc,348693,"JULY     , 13, 2018",Completed
2,null,Asthma,PT-007,Phase 3 Clinical,C3,"budesonide + salbutamol (asthma), Pearl/ Avillion",109733,3100,PT-027,3100,MANDALA,A Study to Assess the Efficacy and Safety of Budesonide/Albuterol Metered-dose Inhaler (BDA MDI/PT-027) in Adults and Children 4 Years of Age or Older With Asthma,2018-003673-10; AV003; MANDALA; NCT03769090,Avillion LLP,365206,"DECEMBER , 27, 2018",Recruiting
5,cortisol,Asthma,Qvar; montelukast,Phase 2 Clinical,C2,"beclomethasone dipropionate, (CFC-free), Teva",44414,null,ZENHALE; albuterol; prednisolone,null,MF/F Pediatric Asthma HPA Axis Study,"Study of the Effect of Mometasone Furoate/Formoterol (MF/F), Montelukast and Beclomethasone Dipropionate (BDP) on Plasma Cortisol Levels of Children 5 to 11 Years Old With Persistent Asthma",2009-010108-27; MF/F Pediatric Asthma HPA Axis Study; NCT01615874; P05574; PN158,Merck & Co Inc,88259,"OCTOBER  , 26, 2012",Terminated
1,"2,3-Diphosphoglycerate; Adenosine Triphosphate; Body temperature; Diastolic blood pressure; Erythrocytes; Glucose; Heart rate; Hematocrit; Hemoglobin; Lactic Acid; Potassium; Systolic blood pressure",null,null,Phase 1 Clinical,C1,"dexamethasone sodium phosphate (erythrocyte encapsulated), Urbino University/EryDel",70257,10,"dexamethasone sodium phosphate (erythrocyte encapsulated), Urbino University/EryDel",10,null,Recovery and Survival of EryDex in Non-patient Volunteers,ERY51CR-01-2014; NCT02380924,EryDel SPA,223659,"JANUARY  , 31, 2015",Completed
1,null,null,null,Phase 1 Clinical,C1,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,4,Entocord,4,null,Study to Detect Oral Administration of Budesonide in Women,2017-004839-37; IMIMFTCL/DACORSIN/3; NCT03537326,Parc de Salut Mar,340871,"MAY      , 22, 2018",Completed
1,null,Ocular inflammation,null,Phase 3 Clinical,C3,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",56108,142,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",142,null,"Mapracorat Ophthalmic Suspension, 3% for the Treatment of Ocular Inflammation Following Cataract Surgery",664; NCT01298752,Bausch & Lomb Inc,74849,"FEBRUARY , 28, 2011",Terminated
2,Anterior chamber; Intraocular pressure; Visual acuity,Cataract,null,Phase 1/Phase 2 Clinical,C12,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,80,EyeGate II drug delivery system; dexamethasone,79,null,"Open-Label, Multicenter, Phase Ib/IIa Clinical Trial Designed To Evaluate The Safety And Efficacy Of Iontophoretic Dexamethasone Phosphate Ophthalmic Solution In Patients Having Undergone Cataract Surgery With Implantation Of A Posterior Chamber Intraocular Lens (IOL)",EGP-437-008; NCT02571556,Eyegate Pharmaceuticals Inc,242633,"NOVEMBER , 30, 2015",Completed
2,"Blood cell count; Bone mineral density; Calcium; Collagen type I trimeric cross-linked peptide; Epicardial adipose tissue; Erythrocyte sedimentation rate; Fibrinogen; Hemoglobin A, glycosylated; High-density lipoprotein cholesterol; Immunoglobulins; Low-density lipoprotein cholesterol; Osteocalcin; Parathyroid hormone; Phosphate; Total cholesterol; Triglycerides; Vitamin D",Adrenal gland hypofunction,cortisone acetate; hydrocortisone,Phase 4 Clinical,C4,"dual-release hydrocortisone (oral, adrenal insufficiency), ViroPharma",58174,89,Plenadren,89,DREAM,Dual Release Hydrocortisone Versus Conventional Glucocorticoid Replacement Therapy in Hypocortisolism,DREAM; HYPOSURRENALISM_1; NCT02277587,Universita degli Studi di Roma La Sapienza,214912,"MARCH    , 31, 2014",Completed
1,null,Lower back pain,null,Phase 0 Clinical,C0,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,28,triamcinolone acetonide,28,null,Intraarticular Lumbar Joint Corticosteroid Injection(s) as a Treatment of Chronic Low Back Pain in a Selected Population,319-2010; NCT01382771,University of Florida,103767,"OCTOBER  , 31, 2010",Completed
3,Forced expiratory volume,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,15,Flutiform; Relvar Ellipta; Symbicort Turbohaler,15,null,Rapid effect of Flutiform on pulmonary function compared with Relvar and Symbicort,UMIN000029379,Tohno Chuo Clinic,314707,"OCTOBER  , 02, 2017",Completed
1,Visual acuity,Allergic conjunctivitis,null,Phase 3 Clinical,C3,"dexamethasone (punctum plug, ocular inflammation), Ocular Therapeutix",80269,73,OTX-DP,73,null,A Phase III Study Evaluating the Safety and Efficacy of OTX-DP for the Treatment of Chronic Allergic Conjunctivitis,NCT02445326; OTX-14-007,Ocular Therapeutix Inc,229470,"APRIL    , 30, 2015",Completed
2,Shoulder motion,Tendon disease,Azmacort,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,null,ketorolac,32,null,Subacromial Injection With Corticosteroid Versus Nonsteroidal Anti-inflammatory Drugs (NSAID) in Shoulder Impingement Syndrome,IMPINGEMENT; NCT01449448,Madigan Army Medical Center,147302,"SEPTEMBER, 30, 2000",Terminated
1,Intraocular pressure,Cataract,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,10,triamcinolone acetonide,10,null,Triamcinolone Assisted Anterior Vitrectomy,NCT01051648; TRIAM1,Cairo University,116449,"DECEMBER , 31, 2007",Completed
2,FEV 25 to 75; FEV1; FVC; blood pressure; cortisol; creatinine; heart rate; nitric oxide; peak expiratory flow rate,Asthma,"budesonide (Captisol-enabled inhalation solution/eFlow, asthma), Verus Pharmaceuticals",Phase not specified,NS,"budesonide (Captisol-enabled inhalation solution/eFlow, asthma), Verus Pharmaceuticals",93782,20,"budesonide (inhaled formulations), AstraZeneca",20,null,"A Randomized, Open-Label, Active-Controlled, Two-Period Crossover Study to Evaluate Relative Efficacy and Safety of Investigational Captisol-Enabled Budesonide Inhalation Solution (CBIS) Delivered via eFlow Nebulizer and Conventional Budesonide Inhalation Suspension (Pulmicort Respules) Delivered via LC Plus Jet Nebulizer in Children with Mild-to-Moderate Persistent Asthma",EudraCT 2006-003801-21; VPI-102-04,Verus Pharmaceuticals Inc,116845,"NOVEMBER , 14, 2006",Recruiting
1,null,Perennial allergic rhinitis,null,Phase 1 Clinical,C1,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,30,triamcinolone acetonide,30,null,"A phase I, open-label, repeat-dose, multicenter study to compare the safety and pharmacokinetics of Nasacort in pediatric patients with that of adult patients with perennial allergic rhinitis",XRG 5029C/1000,Sanofi SA,89198,"APRIL    , 30, 2003",No longer recruiting
2,null,Rheumatoid arthritis,prednisolone,Phase 1 Clinical,C1,fosdagrocorat,59618,78,PF-04171327,78,null,"A Phase I, Multiple-Dose Escalation and Single Dose (Tablet) Study of PF-04171327 in Healthy Volunteers",A9391002; NCT00812825,Pfizer Inc,56932,"JANUARY  , 31, 2009",Completed
2,6-beta hydroxycortisol; Cortisol,Allergic rhinitis,prednisone,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,90,"fluticasone furoate (nasal, allergic rhinitis), GSK",112,null,A Study of GW-685698X for the Treatment Of Perennial Allergic Rhinitis in Adolescents and Adults,FFR20002; NCT00116818,GlaxoSmithKline plc,11789,"JANUARY  , 31, 2005",Completed
2,Intraocular pressure; Visual acuity,Diabetic macular edema,null,Phase 2 Clinical,C2,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,11,laser; triamcinolone acetonide,11,IVTA,Triamcinolone versus Laser for Diabetic Macular Edema,2746; IVTA; IVTA - DME; NCT00229931,University of Oklahoma,180232,"NOVEMBER , 30, 2005",Completed
1,null,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,null,BTR-15,null,null,"Phase III, unblinded, continued long-term administration study of BTR-15 targeting pediatric asthma patients",JapicCTI-090806,Teijin Pharma Ltd,122481,"JULY     , 23, 2009",Completed
1,Birth weight; FOXP3; IL-10; TGF-alpha,Sleep apnea,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,24,"fluticasone furoate (nasal, allergic rhinitis), GSK",24,null,Mechanism of Action of Fluticasone Furoate in Childhood Obstructive Sleep Apnea Syndrome,15868B; 15868B; NCT00603044,University of Chicago,23198,"JANUARY  , 31, 2008",Completed
1,FEV1; FeNO,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,91,"fluticasone furoate (nasal, allergic rhinitis), GSK",91,YSCO,The Protective Effect of a Nasal Corticosteroid (Avamys) On Exercise Induced Airway Obstruction in Cold Air in Children,EudraCT: 2009-010563-17; FF1; ISRCTN90761040; NL26953.044.09; YSCO,Stichting Pediatrisch Onderzoek Enschede,118794,"MARCH    , 05, 2009",Completed
3,null,Lateral epicondylitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,50,Cryotherapy; casting; indomethacin; triamcinolone acetonide,50,null,Comparison of Two Combined Therapeutic Methods for Treatment of Lateral Epicondylitis,NCT00554476; RCT-246910-06,Islamic Azad University of Tehran-Medical Sciences,168727,"JANUARY  , 31, 2003",Terminated
1,null,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,365,fluticasone furoate,365,null,Study to Evaluate the Efficacy and Safety of Fluticasone Furoate Nasal Spray in Chinese Adult and Adolescents with Seasonal Allergies,2015-004889-28; FFR113342,GlaxoSmithKline plc,283339,"DECEMBER , 21, 2016",Status not specified
1,null,Macular edema,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,87,triamcinolone acetonide,87,null,Intravitreal Injection of Triamcinolone Acetonide in Retinitis,IRCT201104266293N1,Tehran University of Medical Sciences,122471,"SEPTEMBER, 23, 2007",No longer recruiting
2,null,Asthma,beclomethasone dipropionate,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,null,BTR-15,null,null,"A phase III, randomized, comparative, dose-confirmation study of BTR-15 to target pediatric asthma patients",JapicCTI-090805,Teijin Pharma Ltd,122480,"JULY     , 23, 2009",Completed
1,Anterior chamber; Intraocular pressure; Retina; Visual acuity,Macular edema,null,Phase 2 Clinical,C2,"triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical",75376,22,Zuprata,22,DOGWOOD,Suprachoroidal Injection of Triamcinolone Acetonide in Subjects With Macular Edema Following Non-Infectious Uveitis,CLS1001-201; DOGWOOD; NCT02255032,Clearside Biomedical Inc,212568,"OCTOBER  , 31, 2014",Completed
1,null,Liver disease,null,Phase 1 Clinical,C1,"deflazacort (oral tablet/suspension, Duchenne muscular dystrophy), PCT Therapeutics",86985,16,deflazacort,16,null,A Single-Dose Evaluation of the Effects of Moderate Hepatic Impairment on Deflazacort Pharmacokinetics,MP-104-CL-023; NCT02286609,PTC Therapeutics Inc,215409,"DECEMBER , 31, 2014",Completed
1,FEV1; Peak expiratory flow (PEF),Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,240,ciclesonide,240,POPCICLE,Efficacy of Ciclesonide Inhaled Once-Daily Versus Other Corticosteroids Used for Treatment of Mild Asthma in Children (4 to 11 years) (BY9010/CA-101),BY9010/CA-101; EudraCT: 2007-003736-34; NCT00163293; POPCICLE; U1111-1189-7814,Takeda GmbH,22004,"JANUARY  , 01, 2005",Completed
1,Body height; CD11a; CD11b; Forced expiratory volume in one second (FEV1); Forced vital capacity (FVC); Intercellular adhesion molecule-1; Interleukin 8; Lean body mass; Lung; MoPhabs A17; MoPhabs A27; Soluble intercellular adhesion molecule 1 (sICAM1); Total body mass; Tumor necrosis factor; sE-Selectin; umour necrotising factor alpha (TNFa),Cystic fibrosis,null,Phase not specified,NS,"beclomethasone dipropionate, (CFC-free), Teva",44414,60,"beclometasone (inhaled, CFC-free), Teva",60,null,Cystic Fibrosis; a Hereditary Inflammatory Process,ISRCTN03484127; NTR91,Universitair Medisch Centrum Utrecht ,124286,"JANUARY  , 01, 2002",Completed
1,null,Age related macular degeneration,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,25,bevacizumab; triamcinolone acetonide,25,HAS-EU-2010,A Retrospective Trial of Suprachoroidal Drug Therapy for Advanced Exudative Age-Related Macular Degeneration,011/1231; DRKS00000609; HAS-EU-2010,Iscience Corp,127743,"APRIL    , 12, 2011",Completed
3,Eosinophils; Forced expiratory volume,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,10355,Relovair; Trelegy Ellipta; Zephyr,10355,IMPACT,"A Study Comparing the Efficacy, Safety and Tolerability of Fixed-Dose Combination (FDC) of FF/UMEC/VI With the FDC of FF/VI and UMEC/VI; Administered Once-daily Via a Dry Powder Inhaler (DPI) in Subjects With Chronic Obstructive Pulmonary Disease (COPD)",1.137.774; 100603; 116855; 2013-003075-35; 38506514.7.1001.0070; 883.250; ANZstudy; CTT116855; HKUCTR-1885; IMPACT; JapicCTI-142653; NCT02164513; RBR-4sxpff; U1111-1160-5241; UW 14-364,"GlaxoSmithKline BR, GlaxoSmithKline plc",196961,"JUNE     , 30, 2014",Completed
1,Calprotectin,Ulcerative colitis,null,Phase 2a Clinical,C2A,"budesonide (gastroresistant capsule, Crohn's disease/ulcerative colitis), Dr Falk Pharma/Salix",59671,60,budesonide,61,TOPICAL-1,Budesonide 9 mg Capsules in Active UC,2014-005635-14; BUX-3/UCA; NCT02550418; TOPICAL-1,Dr Falk Pharma GmbH,241407,"OCTOBER  , 31, 2015",Completed
2,null,Uveitis,Rinderon,Phase 2 Clinical,C2,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,24,difluprednate,24,null,Study of Difluprednate Ophthalmic Emulsion in the Treatment of Uveitis,NCT00405496; SJE2079/2-02-PC,Sirion Therapeutics Inc,21747,"MARCH    , 31, 2000",Completed
1,null,Adhesive capsulitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,53,triamcinolone acetonide,53,null,To determine whether ultrasound-guided intraarticular injection with high dose corticosteroid in patients with adhesive capsulitis is better than low dose or placebo in improving pain and function,AJIRB-MED-CT4-10-072; KCT0000103,Ajou University Hospital,128627,"AUGUST   , 31, 2010",Recruiting
1,Hydrocortisone,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,20,fluticasone furoate,20,null,Investigating The Pharmacokinetics Of An Inhaled Dose Of A New Corticosteroid In Patients With Impaired Liver Function,FFA10013; NCT00419237,GlaxoSmithKline plc,22672,"JANUARY  , 13, 2005",Completed
2,Eosinophils; FEV1; Forced Vital Capacity; Peak expiratory flow rate,Asthma,null,Phase 3b Clinical,C3B,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,1432,"ciclesonide (metered dose inhaler), Nycomed; fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline",657,null,Efficacy of Ciclesonide Versus Fixed Combination of Fluticasone Propionate/Salmeterol Versus Placebo in Patients With Mild Persistent Asthma (12 to 75 years),BY9010/M1-132; NCT00163358,AstraZeneca plc,22090,"SEPTEMBER, 30, 2003",Completed
1,null,Allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,38,"fluticasone furoate (nasal, allergic rhinitis), GSK",38,null,Study of GW-685698X In Patients With Seasonal Allergic Rhinitis,FFR100652; NCT00363740,GlaxoSmithKline plc,13132,"FEBRUARY , 28, 2005",Completed
2,Forced expiratory volume in 1 s (FEV1); Peak expiratory flow (PEF),Asthma,null,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,612,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline; fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",609,null,Efficacy/Safety Study of Fluticasone Furoate/Vilanterol (GW-642444) in Adult and Adolescent Asthmatics,106827; 2010-019590-15; HZA106827; NCT01165138; P/119/2011,GlaxoSmithKline plc,68324,"AUGUST   , 20, 2010",Completed
3,E-selectin; ICAM-1; cortisol; creatinine,Asthma,null,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,15,"Qvar; fluticasone; fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline; prednisolone",17,PAW01,Additive Effects of QVAR to (Seretide) on Surrogate Markers of Airway Inflammation in Refractory Asthma,Eudract no: 2008-001811-40; NCT00829257; PAW01; PAW01,University of Dundee,42844,"JANUARY  , 31, 2009",Completed
1,null,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,450,ciclesonide,450,null,Effects of Ciclesonide MDI 50 mg/Day and 200 mg/Day (Ex-Valve) Once-Daily on Growth in Children With Mild Persistent Asthma,LTS6159; NCT00270348; XRP1526B - 343,Sanofi SA,22281,"DECEMBER , 31, 2000",Completed
1,Serum cortisol,Asthma,null,Phase 2a Clinical,C2A,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,27,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",27,null,Pharmacokinetics and Pharmacodynamics of GW-685698 in Pediatric Asthmatic Patients,102942; HZA102942; NCT01332292,GlaxoSmithKline plc,76319,"MAY      , 31, 2010",Completed
3,null,Seasonal allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,576,GW685698X; GW685698X 110 microg; GW685698X 55 microg,554,null,Seasonal Allergic Rhinitis In Pediatric Subjects,FFR100010; NCT00107757,GlaxoSmithKline Inc,13567,"MARCH    , 31, 2005",Completed
2,Fovea centralis; Retina; Visual acuity,Retinal venous occlusion,Eylea,Phase 3 Clinical,C3,"suprachoroidal triamcinolone acetonide + intravitreal aflibercept (diabetic macular edema), Clearside Biomedical",92483,460,CLS-1003,460,SAPPHIRE,Suprachoroidal Injection of Triamcinolone Acetonide With intravitreal Aflibercept in Subjects With Macular Edema Following RVO,2016-004648-12; 2017-CT0411; CLS1003-301; CLS1003-301 Amendment 1; CTRI/2017/11/010451; NCT02980874; PHRR170812-001654; SAPPHIRE,"Clearside Biomedical Inc, Syneos Health Inc",281144,"JANUARY  , 31, 2017",Terminated
2,null,Wet age related macular degeneration,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,40,Photodynamic therapy; triamcinolone acetonide; verteporfin,40,null,"A Non-Randomized, Single-Center, Open-Label, Case Series Study of Intravitreal Triamcinolone Acetate Injections (IVTA) Used as Adjunctive to Verteporfin Photodynamic Therapy (PDT) in the Treatment Predominantly Classic CNV Lesions Associated With Age-Related Macular Degeneration (AMD)",EudraCT 2005-005290-30; TCA-05-01,Semmelweis University,142748,"OCTOBER  , 18, 2006",Recruiting
4+,Body surface area,Atopic dermatitis,Azmacort; clobetasone butyrate; fluocinolone acetonide,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,367,Azmacort; clobetasone butyrate; dupilumab; fluocinolone acetonide,367,null,Study to Investigate the Efficacy and Safety of Dupilumab Administered With Topical Corticosteroids (TCS) in Participants >/= 6 to < 12 Years With Severe Atopic Dermatitis (AD),2016-004997-16; IND Number-107969; NCT03345914; P/069/2017; P/219/2016; R668-AD-1652,Regeneron Pharmaceuticals Inc,319940,"NOVEMBER , 17, 2017",No longer recruiting
1,null,Asthma,null,Phase 1 Clinical,C1,"beclomethasone dipropionate, (CFC-free), Teva",44414,72,beclomethasone dipropionate,72,null,A Study to Investigate the Pharmacokinetics and Safety of Beclomethasone Dipropionate Administered by Breath-Actuated Inhaler and Metered-Dose Inhaler in Healthy Adults,BDB-AS-101; NCT02030457,Teva Pharmaceutical Industries Ltd,166763,"DECEMBER , 31, 2013",Completed
2,Forced expiratory volume,Asthma,null,Phase 4 Clinical,C4,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,75,Relvar; fluticasone,75,null,Crossover Study Comparing Fluticasone Furoate (FF)/Vilanterol (VI) Once-Daily Versus Fluticasone Propionate (FP) Twice-Daily in Subjects With Asthma and Exercise-Induced Bronchoconstriction (EIB),2017-001516-11; 201832; NCT02730351,"GlaxoSmithKline Research & Development Ltd, GlaxoSmithKline plc",257624,"MAY      , 01, 2016",Completed
1,null,Esophagus tumor,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,30,triamcinolone acetonide,30,null,The Evaluation of Prophylactic Effect of Intralesional Steroid Injection to Prevent Esophageal Stricture After ESD (Endoscopic Submucosal Dissection) of Superficial Esophageal Cancers,JPRN-UMIN000005649,Kobe University,149189,"SEPTEMBER, 16, 2010",Recruiting
3,Cortisol; FEV1,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,1031,GW-642444; Relovair; fluticasone furoate,1030,null,A 6-Month Study to Evaluate the Efficacy and Safety of Fluticasone Furoate(FF)/GW-642444 Inhalation Powder in Subjects With Chronic Obstructive Pulmonary Disease (COPD),112206; HZC112206; JapicCTI-101096; NCT01053988,GlaxoSmithKline plc,63573,"OCTOBER  , 05, 2009",Completed
3,Forced expiratory volume; Peak expiratory flow rate,Asthma,Advair; fluticasone,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,1526,Ellipta,1526,null,"An Efficacy and Safety Study of Fluticasone Furoate/Vilanterol 100/25 microg Inhalation Powder, Fluticasone Propionate/Salmeterol 250/50 microg Inhalation Powder, and Fluticasone Propionate 250 microg Inhalation Powder in Adults and Adolescents With Persistent Asthma",1209850; 201378; 2014-002253-19; 40739015.4.1001.5336; 86/2015; 942328; NCT02301975; RBR-4f9tcc; U1111-1172-1687,GlaxoSmithKline plc,216821,"MARCH    , 01, 2015",Completed
2,null,Asthma,null,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,342,beclomethasone dipropionate,342,BASALT,Asthma Clinical Research Network (ACRN) Trial - Best Adjustment Strategy for Asthma in Long Term,494; BASALT; NCT00495157; U10 HL074073; U10 HL074204; U10 HL074206; U10 HL074208; U10 HL074212; U10 HL074218; U10 HL074225; U10 HL074227; U10 HL074231,National Heart Lung and Blood Institute,22479,"JUNE     , 30, 2007",Completed
2,Choroid; Fovea centralis; Intraocular pressure; Retina; Visual acuity,Macular edema,aflibercept,Phase 2 Clinical,C2,"triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical",75376,46,CLS-TA; aflibercept,46,TANZANITE,Suprachoroidal Injection of Triamcinolone Acetonide With IVT Aflibercept in Subjects With Macular Edema Following RVO,CLS1003-201; NCT02303184; TANZANITE,Clearside Biomedical Inc,216985,"JANUARY  , 31, 2015",Completed
1,Bronchial wall; Lung; Specific airway resistance; Specific airway volume,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,20,CHF-5993,20,null,Functional Respiratory Imaging Study (FRI),2017-000438-79; CCD-05993AA1-16; NCT03268226,Chiesi Farmaceutici SpA,311029,"NOVEMBER , 20, 2017",Completed
1,Adrenocorticotropic hormone; Blood pressure; Body temperature; Dehydroepiandrosterone sulfate; Heart rate; Hydrocortisone; Osteocalcin; Urine cortisol,Asthma,null,Phase 1 Clinical,C1,AZD-5423,64294,96,AZD-5423,96,null,"Safety, Pharmacokinetics and Pharmacodynamics After Single- and Multiple-Dosing of AZD-5423 in Japanese Healthy Male Subjects",D2340C00003; NCT01338350,AstraZeneca plc,76864,"JUNE     , 30, 2011",Completed
1,Macrophages,Chronic obstructive pulmonary disease,null,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,24,"beclomethasone dipropionate, CFC-free), Teva",24,null,Effect of Inhaled Steroids on Gene Expression in the Lungs-2,0809009975; NCT00826748,Weill Medical College of Cornell University,42589,"NOVEMBER , 30, 2010",Terminated
2,Glucose,Osteoarthritis,triamcinolone acetonide injectable suspension (Kenalog),Phase 2 Clinical,C2,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,33,Zilretta,33,null,Study to Assess the Effects of FX-006 on Blood Glucose in Patients With OA of the Knee and Type 2 Diabetes,FX006-2015-010; NCT02762370,Flexion Therapeutics Inc,260068,"APRIL    , 30, 2016",Completed
2,null,Pain,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,111,"bupivacaine, AstraZeneca; bupivacaine, AstraZeneca; triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",111,null,"The Efficacy of Topical Bupivacaine and Triamcinolone Acetonide Injection in the Relief of Pain After Endoscopic Submucosal Dissection for Gastric Neoplasia: A Randomized, Double-blind, Placebo-controlled Trial",4-2012-0147; NCT01961752,Yonsei University,157615,"JULY     , 31, 2012",Completed
2,Blood pressure; Body height; Forced expiratory volume; Heart rate; Total body mass; cortisol,Asthma,fluticasone,Phase 3a Clinical,C3A,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,28,ciclesonide,28,null,Effects of Inhaled Ciclesonide Versus Fluticasone Propionate Versus Placebo on Lower Leg Growth in Prepubertal Children With Mild Persistent Asthma (6 to 12 years),2005-001386-34; BY9010/M1-208; NCT00163371,"AstraZeneca plc, Takeda GmbH",22089,"SEPTEMBER, 30, 2005",Completed
3,Forced expiratory volume; Fractional concentration of exhaled nitric oxide; Nitric oxide; Peak expiratory flow rate,Chronic obstructive pulmonary disease,null,Phase 2 Clinical,C2,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,20,"budesonide/formoterol; fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline; fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline",32,null,Effect of Relvar on ACOS,UMIN000014191,Toyama City Hospital,196622,"JUNE     , 14, 2014",Completed
3,Forced expiratory volume; Fractional concentration of exhaled nitric oxide; Nitric oxide; Peak expiratory flow rate,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,20,"budesonide/formoterol; fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline; fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline",32,null,Effect of Relvar on ACOS,UMIN000014191,Toyama City Hospital,196622,"JUNE     , 14, 2014",Completed
1,Fovea centralis; Intraocular pressure; Macula retinae; Visual acuity,Macular edema,null,Phase 3 Clinical,C3,"triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical",75376,160,Zuprata,160,PEACHTREE,Suprachoroidal Injection of CLS-TA in Subjects With Macular Edema Associated With Non-infectious Uveitis,CLS1001-301; CLS1001-301 Version 3.2; CTRI/2016/09/007269; NCT02595398; PEACHTREE,Clearside Biomedical Inc,244835,"NOVEMBER , 17, 2015",Completed
2,null,Contact dermatitis,null,Phase 3 Clinical,C3,"betamethasone valerate (topical emollient foam, psoriasis/dermatitis), Foamix",53978,170,"Prednisolone acetate cream; betamethasone valerate (topical emollient foam, psoriasis/dermatitis), Foamix",170,null,Efficacy and Tolerability of Prednisolone Acetate 0.5% Cream Versus Betamethasone Valerate 0.1% Cream in Cortisosensitive Dermatosis,NCT01011621; PRE/P/08-1,Mantecorp Industria Quimica e Farmaceutica Ltd,180987,"FEBRUARY , 28, 2010",Not yet recruiting
4+,Bronchial epithelial cells; Eosinophils; Epithelial cells; Exhaled breath pH; Exhaled nitric oxide; FEF; FEV1; FVC; Histone deacetylase; Lymphocytes; Macrophages; Neutrophils,Asthma,null,Phase 1 Clinical,C1,"beclomethasone dipropionate, (CFC-free), Teva",44414,79,"beclometasone (inhaled, CFC-free), Teva; beclometasone (inhaled, CFC-free), Teva; beclometasone (inhaled, CFC-free), Teva + theophylline; rosiglitazone; theophylline; theophylline",91,null,Rosiglitazone Versus Theophylline in Asthmatic Smokers,2004-004247-22 EUDRACT; NCT00119496; RES104033,University of Glasgow,21855,"JULY     , 31, 2005",Completed
2,null,Cataract,Pred Forte,Phase 2 Clinical,C2,"tobramycin + prednisolone acetate (ophthalmic), ISTA",53134,56,"tobramycin + prednisolone acetate (ophthalmic), ISTA",56,null,Study of T-Pred compared to Pred-Forte,CL-PKT-0312081-P; NCT00699803,Bausch & Lomb Inc,31880,"MAY      , 31, 2008",Completed
1,null,Uveitis,null,Phase 3 Clinical,C3,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,null,WP-0508ST,null,null,WP-0508ST (uveitis) Phase III trial,JapicCTI-142695,Wakamoto Pharmaceutical Co Ltd,215369,"OCTOBER  , 31, 2014",Recruiting
2,ACR 20; Erythrocyte sedimentation rate; Hydrocortisone; Interleukin-6; Joint stiffness; Joint swelling; Painful joint count,Rheumatoid arthritis,immediate-release prednisone,Phase 3 Clinical,C3,"prednisone (oral, delayed release), Vectura/Mundipharma/Merck KGaA",54733,288,prednisone,288,CAPRA-1,Prednisone Timed-Release Tablet (TRT) Study: Modified-Release (MR) Formulation of Prednisone Compared to Standard Immediate-Release (IR) Prednisone in Participants With Rheumatoid Arthritis,CAPRA-1; EMR 62215-003; NCT00146640,Merck KGaA,2351,"AUGUST   , 31, 2004",Completed
1,Blood pressure; Hydrocortisone; T-cell surface glycoprotein CD4,Ataxia telangiectasia,null,Phase 2 Clinical,C2,"dexamethasone sodium phosphate (erythrocyte encapsulated), Urbino University/EryDel",70257,22,EryDex,22,null,Intra-Erythrocyte Dexamethasone Sodium Phosphate in Ataxia Teleangiectasia Patients,2010-022315-19; IEDAT 01; NCT01255358,EryDel SPA,75227,"FEBRUARY , 28, 2011",Completed
2+,Fovea centralis; Visual acuity,Macular edema,Lucentis,Phase 3 Clinical,C3,"suprachoroidal triamcinolone acetonide + intravitreal aflibercept (diabetic macular edema), Clearside Biomedical",92483,460,Avastin; Lucentis; triamcinolone acetonide,460,TOPAZ,Suprachoroidal Injection of Triamcinolone Acetonide With IVT Anti-VEGF in Subjects With Macular Edema Following RVO,2017-002089-37; CLS1003-302; CTRI/2018/05/014044; NCT03203447; TOPAZ,Clearside Biomedical Inc,303712,"MARCH    , 05, 2018",Terminated
3+,null,Throat disease,chlorhexidine gluconate,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,150,triamcinolone acetonide; triamcinolone acetonide + chlorhexidine gluconate,143,null,Triamcinolone Paste to Reduce the Incidence of Postoperative Sore Throat,NCT00908817; ST,Soonchunhyang University Hospital,56389,"MAY      , 31, 2008",Completed
1,FEV1; Peak expiratory flow rate,Asthma,null,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,238,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",238,null,Evaluating the Efficacy and Safety of Fluticasone Furoate in the Treatment of Asthma in Adults and Adolescents,114496; FFA114496; NCT01431950,GlaxoSmithKline plc,80716,"SEPTEMBER, 30, 2011",Completed
5,Forced expiratory volume; Peak expiratory flow rate,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,338,"Arnuity; GSK-2834425; Relvar Ellipta; Seretide; fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",338,null,Evaluation of Umeclidinium Bromide in Combination With Fluticasone Furoate in COPD Subjects With an Asthmatic Component,2014-000883-16; GSK: 200699; NCT02164539,GlaxoSmithKline plc,197089,"JULY     , 01, 2014",Completed
2,Cortisol; FEV1; hsCRP,Chronic obstructive pulmonary disease,budesonide,Phase 2 Clinical,C2,AZD-5423,64294,353,AZD-5423,353,AZD5423 COPD study,Multicenter Study to Assess the Efficacy and Safety of AZD-5423 in COPD Patients on a Background Therapy of Formoterol,2011-005389-39; AZD5423 COPD study; D2340C00011; NCT01555099,AstraZeneca plc,85693,"APRIL    , 30, 2012",Completed
1,null,Osteoarthritis,null,Phase 3 Clinical,C3,CINGAL,103224,242,CINGAL,242,null,Repeat Injection of Cingal for Osteoarthritis of the Knee,Cingal 13-02; NCT02381652,Anika Therapeutics Inc,223638,"FEBRUARY , 28, 2015",Completed
1,null,Seasonal allergic rhinitis,null,Phase 3 Clinical,C3,"beclomethasone dipropionate  (waterless nasal spray, allergic rhinitis), Teva",76229,715,Qnaze,713,null,Study of an Investigational Nasal Aerosol or Placebo Nasal Aerosol in Children (Ages 6 to 11 Years) With Seasonal Allergies,BDP-AR-305; NCT01307319,Teva Pharmaceutical Industries Ltd,75462,"MARCH    , 31, 2011",Completed
1,null,Ocular pain,null,Phase 3 Clinical,C3,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",56108,363,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",363,null,"Mapracorat Ophthalmic Suspension, 3% for the Treatment of Ocular Inflammation and Pain Following Cataract Surgery",793; NCT01591655,Bausch & Lomb Inc,87162,"JULY     , 31, 2012",Completed
2,null,Asthma,"budesonide + formoterol fumarate, AstraZeneca",Phase 4 Clinical,C4,"salmeterol xinafoate + fluticasone propionate (inhaled/Spiromax, asthma), Teva",95991,400,"fluticasone + salmeterol (inhaled/Spiromax, asthma), Teva",400,ELIOT,Study to Evaluate the Mastery of Inhaler Technique for Budesonide Formoterol (BF) Spiromax as Compared to Symbicort Turbohaler as Treatment for Adult Patients With Asthma,2013-004630-14; BFS-AS-40035; ELIOT; NCT02062463,Teva Pharmaceutical Industries Ltd,206087,"JUNE     , 30, 2014",Completed
1,Intraocular pressure; Visual acuity,Uveitis,null,Phase 3 Clinical,C3,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,129,Iluvien,129,null,Safety and Efficacy of an Injectable Fluocinolone Acetonide Intravitreal Insert,2013-001810-14; NCT01694186; PSV-FAI-001,EyePoint Pharmaceuticals Inc,92797,"JUNE     , 30, 2013",No longer recruiting
1,null,Asthma,null,Phase 4 Clinical,C4,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,64,ciclesonide,64,MACS,Ciclesonide for the Treatment of Airway Hyperresponsiveness,BY9010/CH-101; MACS; NCT00826969; U1111-1137-3949,AstraZeneca plc,42845,"SEPTEMBER, 30, 2008",Completed
1,null,Atherosclerosis,null,Phase 1/Phase 2 Clinical,C12,"prednisolone (injectable liposome formulation, rheumatoid arthritis/ulcerative colitis), Enceladus",59891,30,"prednisolone (injectable liposome formulation, rheumatoid arthritis), Galapagos",30,SILENCE,Silencing Inflammatory Activity by Injecting Nanocort in Patients at Risk for Atherosclerotic Disease,2011-002686-37; 2011-002686-37 AMC; NCT01601106; NL37190.018.11; NTR2936; SILENCE,"Academic Medical Center, University of Amsterdam",87549,"SEPTEMBER, 30, 2011",Recruiting
1,Blood pressure; Heart rate; Heart rate; Serum cortisol; Serum potassium,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,18,Relovair,18,null,A Study to Assess the Effects of Repeat Doses of Fluticasone Furoate and GW-642444-M Combination in Healthy Subjects and in Subjects With Severe Impairment,113970; NCT01266980,GlaxoSmithKline plc,73501,"NOVEMBER , 18, 2010",Completed
1,null,Allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,40,fluticasone furoate,40,null,Fluticasone Furoate Treatment of Daytime Somnolence and Cognitive Performance in Seasonal Allergic Rhinitis,2008-4; NCT00997620,Western Sky Medical Research,61214,"MARCH    , 31, 2010",Completed
1,null,Allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,365,fluticasone furoate,365,null,"A Randomized, Double-Blind, Placebo-Controlled Study to Evaluate the Efficacy and Safety of Fluticasone Furoate Nasal Spray for 2 Weeks in Chinese Adult and Adolescent Subjects with Allergic Rhinitis",113342; NCT01231464,GlaxoSmithKline plc,71819,"SEPTEMBER, 30, 2009",Completed
1+,null,Chronic obstructive pulmonary disease,null,Phase 4 Clinical,C4,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,160,Diskus; Ellipta; Spiriva HandiHaler; Turbuhaler,160,null,"A Clinical Study Assessing Critical Errors, Training/Teaching Time, And Preference Attributes Of The Ellipta Dry Powder Inhaler, In Comparison To Combinations Of Dry Powder Inhalers Used To Provide Triple Therapy, In Patients With Chronic Obstructive Pulmonary Disease",206215; NCT02982187,GlaxoSmithKline plc,281232,"DECEMBER , 30, 2016",Completed
4+,Forced expiratory volume,Asthma,ELLIPTA dry powder inhaler; fluticasone furoate; salbutamol,Phase 4 Clinical,C4,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,null,ELLIPTA dry powder inhaler; fluticasone furoate; salbutamol; vilanterol,null,null,The Efficacy of Fluticasone Furoate/Vilanterol Versus Fluticasone Furoate on Asthma,206962; NCT03363191,GlaxoSmithKline plc,321810,"MARCH    , 07, 2018",Terminated
2,ACTH; Blood cortisol; Urinary cortisol,Tendinitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,44,methylprednisolone (Pfizer); triamcinolone acetonide,44,TPESP2011-12,Evaluation of Efficacy and Hypothalamus-Pituitary-Adrenal Axis Suppression Due to Corticosteroids Intrabursal Injection,2012-000866-40; NCT01652495; TPESP2011-12; TPESP2011-12,Istituti Ortopedici Rizzoli,89690,"MARCH    , 31, 2012",Completed
1,null,Hearing loss,null,Phase 2 Clinical,C2,"dexamethasone (sustained release/intratympanic injection, ear disorders), Otonomy",65289,12,OTO-104,12,null,Study of OTO-104 in Subjects at Risk From Cisplatin-Induced Hearing Loss,104-201607; NCT02997189,Otonomy Inc,282838,"NOVEMBER , 30, 2016",Terminated
1+,Blood glucose; Diastolic blood pressure; Heart rate; Heart rate; Serum potassium; Systolic blood pressure,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,44,fluticasone furoate; umeclidinium; vilanterol,44,null,"A Study to Assess the Systemic Exposure, Systemic Pharmacodynamics and Safety and Tolerability of Fluticasone Furoate, Umeclidinium and Vilanterol in Healthy Subjects",116415; 873; CTT116415; IND IDE Number 114; NCT01691547,GlaxoSmithKline plc,92256,"DECEMBER , 17, 2012",Completed
3,FEV1; Peak Expiratory Flow (PEF),Asthma,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline; fluticasone furoate + vilanterol (oral inhalant, asthma/COPD), GlaxoSmithKline",Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,421,"fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline",421,ILA115938,"Evaluate the Safety, Efficacy and Dose Response of GSK-573719 in Combination With Fluticasone Furoate in Subjects With Asthma",115938; ILA115938; ILA115938; NCT01573624,GlaxoSmithKline plc,86335,"APRIL    , 03, 2012",Completed
3+,FEV1; PEF (peak expiratory flow); Peak expiratory flow rate,Asthma,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,1040,"fluticasone furoate; fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline; fluticasone furoate + vilanterol trifenatate (100/25 microg); fluticasone furoate + vilanterol trifenatate (200/25 microg); vilanterol trifenatate",1039,null,"An Efficacy and Safety Study of Fluticasone Furoate/Vilanterol (FF/VI) 200/25 Microg (mcg), FF/VI 100/25 Microg (mcg), and FF 100 Microg (mcg) in Adults and Adolescents With Persistent Asthma",116863; 2012-002797-32; HZA116863; NCT01686633,GlaxoSmithKline plc,91744,"SEPTEMBER, 20, 2012",Completed
2,Interleukin-6,Polymyalgia rheumatica,prednisone (immediate release),Phase 2 Clinical,C2,"prednisone (oral, delayed release), Vectura/Mundipharma/Merck KGaA",54733,8,Rayos,8,null,Delayed-Release Prednisone in PMR,HZNP-PRE-IIS02; NCT02702778,"Dinora, Inc",255348,"FEBRUARY , 29, 2016",Terminated
1+,B-lymphocyte antigen CD20,Diffuse large B-cell lymphoma,null,Phase 1/Phase 2 Clinical,C12,"valproic acid + prednisone (oral, diffuse large B-cell lymphoma), Valcuria/Respiratorius",81677,50,"VAL-001, Valcuria; cyclophosphamide; doxorubicin; prednisone; rituximab; vincristine",32,VALFRID,Valproate as First Line Therapy in Combination With Rituximab and CHOP in Diffuse Large B-cell Lymphoma,NCT01622439; VALFRID; Version1.1,Skåne University Hospital,97190,"JUNE     , 30, 2012",Completed
3,null,Allergic conjunctivitis,Ora-CAC model,Phase 3 Clinical,C3,"dexamethasone (punctum plug, ocular inflammation), Ocular Therapeutix",80269,86,OTX-DP; Ora-CAC model,86,null,A Phase III Study Evaluating the Safety and Efficacy of OTX-DP for the Treatment of Chronic Allergic Conjunctivitis,NCT02988882; OTX-15-002,Ocular Therapeutix Inc,281747,"JUNE     , 30, 2015",Completed
1,Retina; Visual acuity,Macular edema,null,Phase 2 Clinical,C2,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,60,MaQaid,60,null,Treatment of macular edema following BRVO with STTA,UMIN000031215,"Aichi Medical University, Kamiiida daiichi General Hospital",330917,"FEBRUARY , 28, 2018",Terminated
2,Blood pressure; Cortisol; Glucose; Heart rate; Peak expiratory flow rate; Potassium,Asthma,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,26,"fluticasone furoate + vilanterol (oral inhalant, asthma/COPD), GlaxoSmithKline",26,null,"Inhaled Fluticasone Furoate/Vilanterol Safety and Tolerability, PK and PD Study",112777; NCT01453023,GlaxoSmithKline plc,81600,"OCTOBER  , 31, 2011",Completed
2,Anterior chamber,Cataract,null,Phase 2b Clinical,C2B,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,101,EyeGate; dexamethasone,101,null,Iontophoretic Delivery of EGP-437 in Patients Who Have Undergone Cataract Surgery,EGP-437-009; NCT03180255,Eyegate Pharmaceuticals Inc,301426,"JULY     , 26, 2017",Completed
2,Diastolic blood pressure; Forced Vital Capacity; Forced expiratory volume; Glucose; Heart rate; Heart rate; PR interval; Potassium; QRS complex; QT interval; Systolic blood pressure,Chronic obstructive pulmonary disease,CHF-1535,Phase 2 Clinical,C2,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,191,Trimbow,191,CARSAF,Phase II Study to Evaluate the Cardiac Safety of two Doses of CHF-5993 Both Combined With CHF-1535 Twice-Daily Versus CHF-1535 Twice-Daily in Patients With Moderate to Severe COPD,2011-004759-37; CARSAF; CCD-1107-PR-0067; NCT01584505,Chiesi Farmaceutici SpA,86885,"APRIL    , 30, 2012",Completed
1,Retina; Visual acuity,Diabetic macular edema,null,Phase 4 Clinical,C4,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,40,Iluvien,40,REACT,Evaluation of Iluvien for the treatment of DME,2016-001680-37; REACT; REACT,Alimera Sciences Inc,330740,"OCTOBER  , 22, 2016",No longer recruiting
2,Intraocular pressure; Macula retinae; Visual acuity,Diabetic macular edema,Eylea,Phase 2 Clinical,C2,"suprachoroidal triamcinolone acetonide + intravitreal aflibercept (diabetic macular edema), Clearside Biomedical",92483,71,Eylea; triamcinolone acetonide,71,TYBEE,Suprachoroidal CLS-TA With Intravitreal Aflibercept Versus Aflibercept Alone in Subject With Diabetic Macular Edema,CLS1004-201; NCT03126786; TYBEE,Clearside Biomedical Inc,295885,"JULY     , 11, 2017",Completed
1,Creatinine; Diastolic blood pressure; Glucose; Heart rate; Hydrocortisone; Potassium; Systolic blood pressure,Asthma,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,32,CHF-5993,32,null,PK of BDP/FF/GB Single-inhaler Triple Therapy in Japanese versus Caucasians,CLI-05993AB4-01; NCT03859414,Chiesi Farmaceutici SpA,371937,"MARCH    , 18, 2019",Recruiting
1,C-C motif chemokine 2; C-X-C motif chemokine 10; Intercellular adhesion molecule-1; Interleukin-1 beta; Interleukin-6; Interleukin-8; Pigment epithelium-derived factor; Placenta growth factor; Platelet-derived growth factor; Vascular endothelial growth factors,Diabetic macular edema,null,Phase 4 Clinical,C4,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,12,Iluvien,12,Iluvit,Investigation of the influence of the corticosteroid agent Iluvien on inflammation and growth factors in the eye of patients suffering from diabetic-related retina damage with swelling of the center of the retina,2016-004488-38; 347/17; DRKS00014915; ILV-001; Iluvit,Johann Wolfgang Goethe-Universitat Frankfurt am Main,337288,"DECEMBER , 28, 2017",No longer recruiting
3,null,Stevens Johnson syndrome,Dermovate; orabase,Phase 1 Clinical,C1,"clobetasol propionate foam, Connetics",18168,20,orabase; platelet rich fibrin gel,20,null,PRF in Management of Chronic Multiple Oral Ulcers,00UAD; NCT03878771,Beni-Suef University,373754,"MARCH    , 13, 2019",Not yet recruiting
3,Forced expiratory volume,Asthma,PT-008; PT007,Phase 3 Clinical,C3,"budesonide + salbutamol (asthma), Pearl/ Avillion",109733,600,PT-027,600,DENALI,A Study to Assess the Efficacy and Safety of Budesonide/Albuterol Metered-dose Inhaler (BDA MDI/PT-027) Used Four Times Daily in Adults and Children 4 Years of Age or Older With Asthma,2018-003674-27; AV004; DENALI; NCT03847896,Avillion LLP,370792,"APRIL    , 10, 2019",Recruiting
2,null,Ulcerative colitis,Budesonide MMX,Phase 3 Clinical,C3,"budesonide (gastroresistant capsule, Crohn's disease/ulcerative colitis), Dr Falk Pharma/Salix",59671,777,"budesonide (gastroresistant capsule, Crohn's disease/ulcerative colitis), Dr Falk Pharma/Salix",777,TOPICAL-2,Novel budesonide capsules versus budesonide tables in patients with ulcerative colitis refractory to standard treatment with mesalazine,2017-004576-57; BUX-4/UCA; TOPICAL-2,Dr Falk Pharma GmbH,379131,"APRIL    , 26, 2019",Recruiting
2,null,Asthma,null,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,32,Flovent Diskus; Pulmicort Flexhaler; Qvar,32,null,Effect of Flovent Diskus versus Qvar versus Pulmicort Flexhaler on Short Term Growth,NCT01520688; RC#5255,West Penn Allegheny Health System Inc,84529,"FEBRUARY , 29, 2012",Completed
3+,null,Asthma,null,Phase 1 Clinical,C1,"fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",81111,50,"Charcoal; Seretide Diskus; Seretide Diskus; fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion; fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",50,null,Comparison of Salmeterol and Fluticasone Propionate Absorption From Salmeterol/Fluticasone Easyhaler and Seretide Diskus,3106007; EudraCT 2012-00378-41; NCT01766843,Orion Corp,104633,"JANUARY  , 31, 2013",Completed
1,Ear pressure,Otitis media,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,91,Azmacort,91,null,Short-Term Relief of Eustachian Tube Dysfunction and Serous Otitis Media Using Intranasal Steroid Sprays,103-04; IST4008; NCT00279916; XRG5029C/4008,Mayo Clinic Foundation,11760,"SEPTEMBER, 01, 2005",Completed
2,Blood pressure; Cortisol; Creatinine; Forced expiratory volume in 1 second (FEV1); Forced expriatory flow; Forced vital capacity (FVC); Heart rate; Histamine provocative; Nitric oxide,Asthma,null,Phase 2 Clinical,C2,"beclomethasone dipropionate, (CFC-free), Teva",44414,16,Qvar; propranolol,16,ANDA1,Beta Blocker Therapy in Mild to Moderate Asthmatics,2011-002512-89; 2011RC16; ANDA1; NCT01544634,University of Dundee,173490,"MARCH    , 31, 2012",Completed
1+,null,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,48,GSK-2834425; Relovair; Zephyr,44,null,"Pharmacokinetic Study in Healthy Volunteers to Characterize the Exposure of Fluticasone Furoate (FF), Vilanterol (VI) and Umeclidinium (UMEC) at Two Different Doses",200587; NCT01894386,GlaxoSmithKline plc,145910,"JULY     , 15, 2013",Completed
2,Forced Vital Capacity; Forced expiratory volume; Peak expiratory flow rate,Asthma,Ventolin,Phase 2 Clinical,C2,"budesonide + procaterol hydrochloride (MDI formulation, asthma), Intech Biopharm",91606,40,Synbitide HFA MDI,40,null,Efficacy Study of Synbitide HFA MDI in Asthma Patients,INTB012; INTB012; NCT02162784,Intech Biopharm Ltd,196587,"FEBRUARY , 28, 2013",Recruiting
1,null,Seasonal allergic rhinitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,651,triamcinolone acetonide,651,null,"A phase IV, open-label study to assess the safety and efficacy of Nasacort in patients with seasonal and perennial allergic rhinitis",XRG5029C/4005,Sanofi SA,89194,"MARCH    , 22, 2002",No longer recruiting
2,null,Asthma,fluticasone,Phase 2 Clinical,C2,799943,47921,650,GW-799943X,650,null,"A Randomized, Double-Blind, Placebo-Controlled, Parallel-Group Study to Evaluate the Efficacy and Safety of 500 microg of GW-799943X Administered qd in the Morning, 500 microg of GW-799943X Administered qd in the Evening, and 1000 microg GW-799943X Administered qd in the Morning Compared With Placebo and Fluticasone Propionate 250 microg bid, All Delivered by Rotadisk/Diskhaler for 28 Days in Subjects With Persistent Bronchial Asthma Symptomatic on Low-Dose ICS",EudraCT 2004-005058-30; ODS100207,GlaxoSmithKline plc,117524,"JUNE     , 29, 2005",Completed
1+,null,Osteoarthritis,adrenaline; lidocaine; triamcinolone acetonide,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,100,adrenaline; hylan G-F 20; lidocaine,100,null,Intra-articular Corticosteroid Injection Compared With Single-Shot Hyaluronic Acid for Treatment of Osteoarthritis Knee,NCT01874574; ORTHOTU-01,Thammasat University,139011,"JANUARY  , 31, 2011",Completed
4,null,Psoriasis,Karison® Creme; mometasone furoate; nortriptyline HCl,Phase 1 Clinical,C1,"mometasone + nortriptyline (topical cream, psoriasis), CombinatoRx",56234,20,CRx-191,20,null,Phase I study of topical CRx-191 in normal healthy volunteers,CRx-191-002; EudraCT Number: 2006-005903-33; NCT00544687,Zalicus Inc,23649,"SEPTEMBER, 30, 2007",Completed
2,IOP,Glaucoma,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,20,Glaucoma drainage device; triamcinolone acetonide,20,null,Glaucoma Drainage Device With and Without Adjunctive Intra-Bleb Injection of Triamcinolone Acetonide: A Randomized Controlled Trial,CUHK_CCT00049; ChiCTR-TRC-09000744,Hong Kong Eye Hospital,125878,"MARCH    , 24, 2005",Completed
1,Anterior chamber; Intraocular pressure; Retina; Visual acuity,Uveitis,null,Phase 2 Clinical,C2,"triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical",75376,22,Zuprata,22,DOGWOOD,Suprachoroidal Injection of Triamcinolone Acetonide in Subjects With Macular Edema Following Non-Infectious Uveitis,CLS1001-201; DOGWOOD; NCT02255032,Clearside Biomedical Inc,212568,"OCTOBER  , 31, 2014",Completed
2,null,Seasonal allergic rhinitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,450,fluticasone propionate; triamcinolone acetonide,475,null,"A Phase IV, Double-blind, Double-dummy, Randomized, Placebo-controlled, Parallel-group, Comparison of Fluticasone Propionate Aqueous Nasal Spray and Triamcinolone Acetonide Aqueous Nasal Spray in Subjects With Seasonal Allergic Rhinitis",FLTA4008,GlaxoSmithKline plc,157120,"SEPTEMBER, 30, 1997",Completed
2,null,Glaucoma,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,30,mitomycin; triamcinolone acetonide,30,null,"Phaco-Trabeculectomy With Intra-Bleb Injection of Triamcinolone Acetonide Versus Phaco-Trabeculectomy With Mitomycin C in Patients With Co-Existing Cataract and Glaucoma – a Randomized, Controlled Trial",CUHK_CCT00045; ChiCTR-TRC-09000644,Hong Kong Eye Hospital,124137,"MAY      , 11, 2005",Completed
2,null,Cataract,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,30,mitomycin; triamcinolone acetonide,30,null,"Phaco-Trabeculectomy With Intra-Bleb Injection of Triamcinolone Acetonide Versus Phaco-Trabeculectomy With Mitomycin C in Patients With Co-Existing Cataract and Glaucoma – a Randomized, Controlled Trial",CUHK_CCT00045; ChiCTR-TRC-09000644,Hong Kong Eye Hospital,124137,"MAY      , 11, 2005",Completed
1,Eosinophils; FEV / FVC ratio; Forced Vital Capacity; Forced expiratory volume; Nitric oxide; Peak expiratory flow rate,Respiratory disease,null,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,360,"beclometasone (inhaled, CFC-free), Teva",360,null,The Evaluation of FeNO for Predicting Response to ICS in Subjects With Non-specific Respiratory Symptoms (NSRS),NCT02294279; OR01013,Research in Real-Life Ltd,216230,"MAY      , 31, 2014",Completed
1,Intraocular pressure,Diabetic macular edema,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,40,triamcinolone acetonide,40,null,"It is a Study of Two Modes of Treatment; Which Are Called Laser Photocoagulation Alone And With Drug Triamcinolone, in The Patients Which Are Suffering From Eye Disease Caused by Diabetes Mellitus",CTRI/2012/08/002878,"Government Medical College, Bhavnagar, Sir Takhtsinhji General Hospital",127814,"AUGUST   , 31, 2010",Recruiting
1,Cortisol; Fasting glucose; Osteocalcin,Asthma,null,Phase 1 Clinical,C1,"870086 (inhaled, asthma), GlaxoSmithKline",54598,36,"870086 (inhaled, asthma), GlaxoSmithKline",36,null,"A Randomized Study Evaluating Steroid Hormone Levels, Safety And Tolerability Of GW-870086-X In Healthy Volunteers",NCT00549497; SIG110405,GlaxoSmithKline plc,22368,"SEPTEMBER, 30, 2007",Completed
1,null,Seasonal allergic rhinitis,null,Phase 4 Clinical,C4,"beclomethasone dipropionate  (waterless nasal spray, allergic rhinitis), Teva",76229,16,Qnaze,16,null,Allergic Rhinitis Changes the Sinus Microbiome,IRB 12-1812; NCT01852513,University of Chicago,130194,"JANUARY  , 31, 2013",Completed
2,FEV1; Forced Vital Capacity; cortisol,Asthma,null,Phase 3b Clinical,C3B,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,30,ciclesonide; fluticasone propionate,30,null,Effect of Inhaled Ciclesonide Versus Fluticasone Propionate in Patients With Mild to Moderate Asthma (18 to 65 years),BY9010/M1-129; NCT00163332,AstraZeneca plc,22010,"MARCH    , 31, 2003",Completed
1,Muscle strength,Lateral epicondylitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,132,"lidocaine (endometriosis), Isifer; triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",165,PINTe,Optimizating corticosteroid injection for lateral epicondylalgia with the addition of physiotherapy: A randomized control trial with placebo comparison,2007001703; ACTRN12609000051246; ANZCTR82438; PINTe,"Griffith University, National Health and Medical Research Council, University of Queensland",128680,"AUGUST   , 01, 2008",Recruiting
2,null,Uveitis,Pred Forte,Phase 3 Clinical,C3,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,90,difluprednate,90,null,Study of Difluprednate in the Treatment of Uveitis,NCT00501579; ST-601A-001,Sirion Therapeutics Inc,21754,"JULY     , 13, 2007",Completed
2,null,Respiratory disorder,"beclometasone (inhaled, CFC-free), Teva",Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,1568,"ciclesonide (metered dose inhaler), Nycomed",1568,null,Effects of ciclesonide and beclomethasone on lens opacification in adult subjects with moderate to severe persistent asthma,NCT00254956; SFY6160; XRP1526B/3027,Sanofi SA,22103,"JANUARY  , 31, 2004",Completed
2,null,Asthma,null,Phase 2 Clinical,C2,"prednisone (oral, delayed release), Vectura/Mundipharma/Merck KGaA",54733,12,Lodotra,5,MONA,A New Modified-Release Tablet Formulation of Prednisone (Lodotra) in Patients With Nocturnal Asthma,EudraCT-Number: 2007-007316-29; MONA; NCT00686335; NP01-201,Horizon Pharma GmbH,22273,"JUNE     , 30, 2008",Completed
2,Knee stiffness,Osteoarthritis,Kenalog-40,Phase 2 Clinical,C2,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,6,Zilretta,6,null,Proof of Concept Study Comparing FX-006 to Kenalog-40 in Patients With Post-Traumatic Osteoarthritis of the Knee,FX006-2014-007; NCT02468583,Flexion Therapeutics Inc,231796,"FEBRUARY , 28, 2015",Terminated
2,null,Rheumatoid arthritis,prednisolone,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,58,triamcinolone acetonide,58,null,Is a Single Dose Intramuscular (IM) Triamcinolone Acetonide Injection More Effective in Treating Symptomatic Flare in Established Rheumatoid Arthritis Than Equivalent Dose Of Oral Prednisolone?,EudraCT 2007-006729-28,Trafford Healthcare NHS Trust,133394,"JANUARY  , 25, 2008",Completed
1,null,Diabetic macular edema,null,Phase 2/Phase 3 Clinical,C23,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,null,WP-0508ST,null,null,WP-0508ST phase II/III trial,JapicCTI-132139,Wakamoto Pharmaceutical Co Ltd,139399,"MAY      , 30, 2013",Recruiting
1,Hydrocortisone,Allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,90,GW-685698X,90,null,A Study Of GW-685698X For The Treatment Of Perennial Allergic Rhinitis In Pediatrics,FFR100012; NCT00116883,GlaxoSmithKline Inc,13948,"FEBRUARY , 28, 2005",Completed
4,null,Vitiligo,null,Phase 0 Clinical,C0,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,1000,Lattice laser; Narrow Band Ultra Violet B (NB-UVB) phototherapy; betamethasone; betamethasone; triamcinolone acetonide,289,null,"Dot matrix laser + Betamethason Copound Injection / Triamcinolone Acetonide + NB-UVB versus dipropionate betamethasone cream + NB-UVB for the treatment of the acral type (including the subcarinal parts) of vitiligo: the efficacy and safety of the multicenter, open, randomized, controlled clinical trial",ChiCTR-TRC-12002593,"Science and Technology Education Department of the Ministry of Health, The First Hospital Of China Medical University",102612,"SEPTEMBER, 01, 2014",Status not specified
1,Intraocular pressure,Diabetic macular edema,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,40,triamcinolone acetonide,40,null,Randomised Controlled Trial of Intravitreal Triamcinolone in Patients With Diabetic Macular Edema Refractory to Laser Treatment,EudraCT 2005-000397-45; OY060301,The Queen's Medical Center,141188,"JUNE     , 02, 2005",Recruiting
1,null,Seasonal allergic rhinitis,null,Phase 2 Clinical,C2,"SUN-0597 (nasal, inflammatory disorders), Sun Pharma",71455,222,SUN-0597,222,null,Efficacy and Safety of SPARC-1310 in Seasonal Allergic Rhinitis,CLR_13_10; NCT01940146; SPARC LTD CLR_13_10,Sun Pharmaceutical Advanced Research Co Ltd,154380,"OCTOBER  , 31, 2014",Completed
1,null,Macular edema,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,1260,triamcinolone acetonide,1260,SCORE,Steroid Injections versus Standard Treatment For Macular Edema Due To Retinal Blood Vessel Blockage,05-EI-0101; 050101; NCT00106132; SCORE,National Eye Institute,95382,"MARCH    , 31, 2005",Completed
1,Fovea centralis; Intraocular pressure; Visual acuity,Diabetic macular edema,null,Phase 4 Clinical,C4,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,16,Iluvien,16,null,"A Non-Randomized, Open-Label, Single-Center, Phase IV Study of the Effect and Safety of Iluvien in Chronic Diabetic Macular Edema Patients Considered Insufficiently Responsive to Available Therapies (Laser, Anti-VEGF) With or Without Intravitreal Corticosteroid Therapy",M-01-13-002; NCT02472366,Alimera Sciences Inc,232076,"JANUARY  , 31, 2014",Completed
1,null,Atopic dermatitis,null,Phase 2 Clinical,C2,mapracorat,46177,64,ZK-245186,64,null,Dose-escalation of Different Concentrations of ZK-245186 in Atopic Dermatitis,1402942; 14501; NCT00944632,"Bayer AG, Intendis GmbH",59066,"JULY     , 31, 2009",Completed
2,Diastolic blood pressure; FEV1; Heart rate; Peak expiratory flow rate; Systolic blood pressure,Asthma,"beclometasone (inhaled, CFC-free), Teva",Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,542,"beclometasone dipropionate + formoterol (inhaled, Modulite), Chiesi",542,null,Efficacy and Safety of CHF-1535 200/6 microg in Not Adequately Controlled Asthmatic Patients,2010-020602-14; CCD-1005-PR-0040; NCT01577082,Chiesi Farmaceutici SpA,86498,"APRIL    , 30, 2012",Completed
4,Forced expiratory volume,Chronic obstructive pulmonary disease,Symbicort; budesonide; formoterol,Phase 3 Clinical,C3,"budesonide (aerosol inhalant/MDI, asthma), Pearl Therapeutics",90863,3316,PT-009,2389,TELOS,"Study to Assess Efficacy and Safety of PT-009 Compared to PT-005, PT-008 and Symbicort Turbuhaler on Lung Function Over 24 Weeks in Subjects With Moderate to Very Severe COPD",2016-000154-34; D7820C00001; NCT02766608; PT009002; TELOS,"AstraZeneca AB, Pearl Therapeutics Inc",260435,"MAY      , 31, 2016",Completed
1,null,Rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,352,fluticasone furoate,352,null,Study Of Adults And Adolescents With Vasomotor Rhinitis,2004-004743-22; FFR30006; NCT00117325,GlaxoSmithKline plc,198181,"JULY     , 11, 2005",Completed
1,Hydrocortisone,Crohns disease,null,Phase 3 Clinical,C3,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,55,Entocort,50,null,Safety and Maintenance Study of Entocort for Children With Crohn's Disease,2011-003742-40; D9422C00002; NCT01453946,Perrigo Co plc,81640,"DECEMBER , 31, 2011",Completed
2,Forced expiratory volume; Peak expiratory flow rate; forced expiratory volume 1 s; peak expiratory flow,Asthma,null,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,628,Qvar; albuterol/salbutamol,628,null,A Safety and Efficacy Study of Beclomethasone Dipropionate Delivered Via Breath-Actuated Inhaler (BAI) or Metered-Dose Inhaler (MDI) in Participants Ages 4 to 11 Years Old With Persistent Asthma,2013-004632-30; BDB-AS-302; NCT02040766,Teva Pharmaceutical Industries Ltd,168945,"DECEMBER , 31, 2013",Completed
2+,Fovea centralis; Intraocular pressure; Macula retinae; Visual acuity,Macular edema,null,Phase 4 Clinical,C4,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,108,Durezol; Durezol; Nevanac; prednisolone acetate (Pred Forte),108,MEND,Macular Edema Nepafenac Versus Difluprednate Uveitis Trial,18-24978; CMEND; MEND; MEND; NCT01939691,University of California San Francisco,154306,"SEPTEMBER, 12, 2018",Recruiting
3,Airway resistance; Forced expiratory volume; Nitric oxide,Asthma,null,Phase not specified,NS,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,30,"budesonide + formoterol fumarate, AstraZeneca; fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline; fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline; procaterol",30,null,Budesonide/formoterol maintenance reliever therapy versus fluticasone furoate /vilanterol fixed-dose treatment of asthma on airway inflammation with adult asthma,UMIN000017042,Hiroshima Clinic,226148,"JUNE     , 01, 2014",Recruiting
1,null,Allergic conjunctivitis,null,Phase 2 Clinical,C2,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",56108,251,"mapracorat (ophthalmic, ocular inflammation), Bausch & Lomb",251,null,Mapracorat Ophthalmic Formulation in Subjects With Allergic Conjunctivitis,685; NCT01289431,Bausch & Lomb Inc,74436,"FEBRUARY , 28, 2011",Completed
2,Choroid; Fovea centralis; Intraocular pressure; Retina; Visual acuity,Retinal venous occlusion,aflibercept,Phase 2 Clinical,C2,"triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical",75376,46,CLS-TA; aflibercept,46,TANZANITE,Suprachoroidal Injection of Triamcinolone Acetonide With IVT Aflibercept in Subjects With Macular Edema Following RVO,CLS1003-201; NCT02303184; TANZANITE,Clearside Biomedical Inc,216985,"JANUARY  , 31, 2015",Completed
2,Forced Vital Capacity; Forced expiratory volume; Hydrocortisone; Peak expiratory flow rate; peak expiratory flow,Asthma,null,Phase 3b Clinical,C3B,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,500,ciclesonide; fluticasone,503,null,Efficacy of Ciclesonide and Fluticasone Propionate in Adult Patients With Moderate and Severe Persistent Asthma (18 to 75 years),2004-001681-40; BY9010/IT-101; BY9010/IT-101 incl. amendment 1; NCT00163319,"AstraZeneca plc, Takeda GmbH",22006,"NOVEMBER , 30, 2004",Completed
1,Alkaline phosphatase; Blood pressure; Body temperature; Estradiol; Follicle-stimulating hormone; Glucose; Heart rate; Hydrocortisone; Luteinizing Hormone; Lymphocytes; PR interval; Prostate-specific antigen; QRS complex; QT interval; Sex hormone-binding globulin; Testosterone,Metastatic prostate cancer,null,Phase 1/Phase 2 Clinical,C12,"dexamethasone (liposome formulation, castration resistant prostate carcinoma/multiple myeloma), Enceladus",77410,10,Oncocort,10,null,Study investigating intravenously administrated Oncocort in patients with metastatic prostate cancer,2016-003121-42; CHDR1635,Enceladus Pharmaceuticals,291118,"NOVEMBER , 28, 2016",Recruiting
1,Intraocular pressure,Diabetic macular edema,null,Phase 1/Phase 2 Clinical,C12,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,24,triamcinolone acetonide,24,null,Intravitreal Injection Versus Sub-Tenon's Infusion of Triamcinolone Acetonide for Refractory Diabetic Macular Edema During Cataract Surgery,2995/2007; NCT00801450,University of Sao Paulo,165535,"SEPTEMBER, 30, 2007",No longer recruiting
3,null,Acute sinusitis,null,Phase 2b Clinical,C2B,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,741,fluticasone furoate; fluticasone furoate (bid); fluticasone furoate (qd),737,null,Dose-Finding Study of Fluticasone Furoate Nasal Spray for Uncomplicated Acute Rhinosinusitis,113203; NCT01018030,GlaxoSmithKline plc,62140,"JANUARY  , 06, 2010",Completed
3,FEV1,Asthma,"fluticasone propionate; fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline",Phase 2 Clinical,C2,"salmeterol xinafoate + fluticasone propionate (inhaled/Spiromax, asthma), Teva",95991,72,"fluticasone + salmeterol (inhaled/Spiromax, asthma), Teva",72,null,Dose-Ranging Study of the Salmeterol Component of Fluticasone/Salmeterol Spiromax Compared to Fluticasone Spiromax and Advair Diskus in Asthma Subjects,FSS-AS-201; NCT01772368,Teva Pharmaceutical Industries Ltd,105408,"JANUARY  , 31, 2013",Completed
1,Fovea centralis; IOP; Retina; Visual acuity,Uveitis,null,Phase 1/Phase 2 Clinical,C12,"triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical",75376,11,Zuprata,8,null,Safety Study of Suprachoroidal Triamcinolone Acetonide Via Microneedle to Treat Uveitis,CLS1001-101; NCT01789320,Clearside Biomedical Inc,109683,"FEBRUARY , 28, 2013",Completed
1,Forced expiratory volume,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,408,"ciclesonide (metered dose inhaler), Nycomed; vitamin D3",408,VIDA,Study of the Effect of Vitamin D as an Add-on Therapy to Corticosteroids in Asthma,1U10HL098115; ASTHMANET 001; NCT01248065; VIDA,Milton S. Hershey Medical Center,188785,"APRIL    , 30, 2011",Completed
1,Body surface area,Psoriasis,null,Phase 3 Clinical,C3,"halobetasol propionate (0.01% topical lotion, plaque psoriasis), Ortho Dermatologics",109395,217,Bryhali,217,null,Safety and Efficacy of IDP-122 in the Treatment of Plaque Psoriasis,NCT02514577; V01-122A-301,Bausch Health Companies Inc,239785,"NOVEMBER , 20, 2015",Completed
1,FEV1; Urinary cortisol,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,648,GW-685698X,698,null,A Randomized Study To Evaluate The Efficacy And Safety Of An Investigational Drug In Adolescent And Adult Subjects With Persistent Asthma,2006-005228-18; FFA106783; NCT00398645,GlaxoSmithKline plc,22312,"NOVEMBER , 15, 2006",Completed
2,Blood pressure; Heart rate; O2 saturation; Oxygen saturation,Chronic obstructive pulmonary disease,Entocort EC,Phase 4 Clinical,C4,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,9,Symbicort,9,null,Effects of Symbicort on the Ventilatory Kinematics,AAAI1932; NCT01712854,Columbia University,95866,"MARCH    , 31, 2012",Terminated
2,null,Growth disorder,null,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,60,ELLIPTA; fluticasone furoate; salbutamol,58,null,Effect of Inhaled Fluticasone Furoate on Short-term Growth in Pediatric Subjects With Asthma,107112; NCT02502734,GlaxoSmithKline plc,235316,"SEPTEMBER, 07, 2015",Completed
2,Skin,Psoriasis,Betesil,Phase 2a Clinical,C2A,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique",78444,35,LEO-90100,35,null,A Psoriasis Plaque Test Trial With LEO-90100 Compared to Betesil in Patients With Psoriasis Vulgaris,2015-001798-41; LP0053-1227; NCT02518048,LEO Pharma A/S,236834,"AUGUST   , 31, 2015",Completed
1,null,Retinal venous occlusion,null,Phase 3 Clinical,C3,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,null,WP-0508ST,null,null,WP-0508ST (RVO) Phase III trial,JapicCTI-142694,Wakamoto Pharmaceutical Co Ltd,215368,"OCTOBER  , 31, 2014",Recruiting
1,null,Macular edema,null,Phase 3 Clinical,C3,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,null,WP-0508ST,null,null,WP-0508ST (uveitis) Phase III trial,JapicCTI-142695,Wakamoto Pharmaceutical Co Ltd,215369,"OCTOBER  , 31, 2014",Recruiting
2,Blood sugar; Intraocular pressure (IOP); Macular thickness; Visual acuity,Diabetic macular edema,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,19,dexamethasone + cyclodextrin; triamcinolone acetonide,90,null,Topical Dexamethasone Aqueous Solution for Macular Edema,JPRN-UMIN000001790,Shimane University,152050,"MARCH    , 01, 2009",Recruiting
2,C-reactive protein (CRP); Serum amyloid A (SAA); Serum urate,Gout,triamcinolone acetonide,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,230,canakinumab,228,BETA-RELIEVED,Canakinumab in the Treatment of Acute Gout Flares and Prevention of New Flares in Patients Unable to Use Non-steroidal Anti-inflammatory Drugs (NSAIDs) and/or Colchicine Including a 12 Weeks Extension and an Open-label 48 Weeks Extension Study,2009-015018-23; 2009-017503-29; 2010-019559-23; ACZ885H2356; BETA-RELIEVED; CACZ885H2356; CACZ885H2356E1; CACZ885H2356E2; NCT01029652; NCT01071213; NCT01160016,Novartis AG,62581,"DECEMBER , 31, 2009",Completed
2,null,Adhesive capsulitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,108,"lidocaine; lidocaine; triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",108,null,An RCT in Treatment of Adhesive Capsulitis Arthrographic Joint Distention With Local Anesthetic Alone,NCT02001740; SURG-246-12,Queen's University,163100,"DECEMBER , 31, 2012",Completed
2,Diastolic blood pressure; Forced expiratory volume; Heart rate; Hydrocortisone; Systolic blood pressure,Asthma,null,Phase 2b Clinical,C2B,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,190,Arnuity; fluticasone,190,null,Safety and Efficacy of GW-685698X an Inhaled Corticosteroid Once-Daily and Twice-Daily for the Treatment of Asthma,112202; NCT00766090,GlaxoSmithKline plc,30011,"OCTOBER  , 31, 2008",Completed
4,Forced expiratory volume; Peak expiratory flow rate,Asthma,ProAir,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,713,Breath-Actuated Inhaler (BAI); Metered Dose Inhaler (MDI); ProAir; Qvar,850,null,Study to Assess the Efficacy and Safety of Beclomethasone Dipropionate in Adolescent and Adult Patients 12 Years of Age and Older With Persistent Asthma,2015-002510-80; BDB-AS-30039; NCT02513160,Teva Pharmaceutical Industries Ltd,236335,"SEPTEMBER, 30, 2015",Completed
1,null,Tendon disease,null,Phase 2 Clinical,C2,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique",78444,108,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique",108,null,"Multicenter, Randomized, Double-Blind, Placebo-Controlled Clinical Trial to Evaluate the Short-Term Efficacy and Safety of Two Different Treatment Regimens of Betamethasone Valerate 2.25 Mg Medicated Plaster in Patients With Chronic Tendinopathies of the Upper and Lower Limbs",12I-BMT08; EUCTR2012-005030-11-IT; EudraCT 2012-005030-11,Institut Biochimique SA,151394,"FEBRUARY , 11, 2013",Completed
2,"Adrenocorticotropic Hormone; C-terminal telopeptide of collagen type I; CRP; Collagen type I trimeric cross-linked peptide; Eosinophils; Glucose; Hemoglobin A, glycosylated; Hydrocortisone; Lymphocytes; N-terminal type I collagen telopeptide/Creatinine ratio; Neutrophils; Osteocalcin; P1NP; Parathyroid hormone; UNTx/Ucr; adiponectin",Rheumatoid arthritis,prednisone,Phase 2 Clinical,C2,fosdagrocorat,59618,323,fosdagrocorat,323,null,Study Comparing Doses Of An Experimental Glucocorticoid Compound To Prednisone And Placebo In Rheumatoid Arthritis,2010-023782-22; A9391010; CTRI/2012/07/002810; NCT01393639; NMRR-11-813-9929,Pfizer Inc,79213,"SEPTEMBER, 30, 2011",Completed
1,null,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,558,GW-685698,558,null,Perennial Allergic Rhinitis Study In Pediatric Subjects,2004-004745-18; FFR30008; NCT00108914,GlaxoSmithKline plc,11727,"FEBRUARY , 28, 2005",Completed
2,null,Cataract,null,Phase 3 Clinical,C3,"tobramycin + prednisolone acetate (ophthalmic), ISTA",53134,135,Pred Forte; T-Pred,135,null,Study of T-PRED(TM) Compared to Pred Forte(R) II,CL-PKT-0415083-P; NCT00854061,Bausch & Lomb Inc,47631,"FEBRUARY , 28, 2009",Completed
1,null,Dermatitis,null,Phase 4 Clinical,C4,"clobetasol propionate foam, Connetics",18168,125,"clobetasol propionate foam, Connetics",125,null,Ethanol-Free Clobetasol Propionate Foam 0.05% (Olux-E Foam) versus Vehicle Foam in the Treatment of Chronic Hand Dermatitis,115054; NCT01323673,Stiefel,75815,"NOVEMBER , 30, 2010",Completed
6,null,Asthma,"beclometasone dipropionate + formoterol fumarate (inhaled, Modulite), Chiesi; budesonide + formoterol fumarate, AstraZeneca; fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline",Phase not specified,NS,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,231,"budesonide (inhaled formulations), AstraZeneca; ciclesonide (metered dose inhaler), Nycomed; fluticasone propionate",231,WISDOM,Pragmatic randomized controlled trial for stepping down of asthma controller treatment in patients controlled,2016-0838; KCT0002103; WISDOM,"Ministry of Health & Welfare, Korea",275290,"SEPTEMBER, 26, 2016",Recruiting
2,Glycated hemoglobin; Hydrocortisone,Adrenal gland hypofunction,hydrocortisone,Phase 2/Phase 3 Clinical,C23,"dual-release hydrocortisone (oral, adrenal insufficiency), ViroPharma",58174,64,"dual-release hydrocortisone (oral, adrenal insufficiency), ViroPharma",64,DC 06/02,Once-Daily Oral Modified-Release Hydrocortisone in Patients With Adrenal Insufficiency,104-07; DC 06/02; EudraCT: 2006-0007084-89; NCT00915343,Shire plc,57668,"AUGUST   , 31, 2007",Completed
1,null,Ocular inflammation,null,Phase 2 Clinical,C2,"dexamethasone (punctum plug, ocular inflammation), Ocular Therapeutix",80269,60,OTX-DP,60,null,Phase II Study Evaluating Safety/Efficacy of OTX-DP for Treatment of Ocular Inflammation and Pain After Cataract Surgery,NCT01666210; OTX-12-002,Ocular Therapeutix Inc,90260,"OCTOBER  , 31, 2012",Completed
1+,null,Asthma,null,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,25,Alvesco; Beconase; Omnaris; Qvar,25,null,Sunovion Growth Study Pediatric Subjects With Mild Asthma and Allergic Rhinitis,NCT01550471; RC#5401,West Penn Allegheny Health System Inc,86234,"MARCH    , 31, 2012",Completed
3,null,Seasonal allergic rhinitis,null,Phase 1 Clinical,C1,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,30,"fluticasone furoate (nasal, allergic rhinitis), GSK; fluticasone furoate + levocabastine; levocabastine hydrochloride",30,null,A Relative Bioavailability Study of Fluticasone Furoate and Levocabastine,200284; NCT01962467,GlaxoSmithKline plc,157921,"OCTOBER  , 31, 2013",Completed
1,null,Rectosigmoiditis,null,Phase 3 Clinical,C3,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,281,Rectabul,281,null,Efficacy and Safety of Budesonide Foam for Patients With Active Mild to Moderate Ulcerative Proctitis or Proctosigmoiditis,BUCF3002; NCT01008423,Salix Pharmaceuticals Ltd,61738,"NOVEMBER , 30, 2009",Completed
1,null,Ulcerative proctitis,null,Phase 3 Clinical,C3,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,281,Rectabul,281,null,Efficacy and Safety of Budesonide Foam for Patients With Active Mild to Moderate Ulcerative Proctitis or Proctosigmoiditis,BUCF3002; NCT01008423,Salix Pharmaceuticals Ltd,61738,"NOVEMBER , 30, 2009",Completed
1,null,Ulcerative colitis,null,Phase 2 Clinical,C2,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,null,Rectabul,null,null,Phase II study of AJG-511 in patients with active ulcerative colitis,JapicCTI-132294,EA Pharma Co Ltd,157022,"OCTOBER  , 03, 2013",Completed
2,null,Rheumatoid arthritis,null,Phase 1 Clinical,C1,fosdagrocorat,59618,12,PF-04171327; midazolam,12,null,A Midazolam Drug Interaction Study With PF-04171327,A9391007; NCT00987038,Pfizer Inc,60720,"SEPTEMBER, 30, 2009",Completed
1+,null,Pain,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,250,"bupivacaine, AstraZeneca; mephamesone; triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",250,InfStu,The Value of Short-term Pain Relief for the Prediction of Long-term Outcome After Cervical or Lumbar Nerve Root Infiltration,EKSG 13/061; InfStu; NCT01945554,Kantonsspital St Gallen,155140,"JULY     , 31, 2013",Completed
1,Anterior chamber; Intraocular pressure; Leukocyte count,Ocular pain,null,Phase 3 Clinical,C3,"dexamethasone (punctum plug, ocular inflammation), Ocular Therapeutix",80269,438,OTX-DP,438,null,A Phase III Study Evaluating the Safety and Efficacy of OTX-DP for the Treatment of Ocular Inflammation and Pain After Cataract Surgery,NCT02736175; OTX-15-003,Ocular Therapeutix Inc,258056,"OCTOBER  , 31, 2015",Completed
1,null,Rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,350,GW-685698X,350,null,Once-Daily Investigational Nasal Spray In Adults And Adolescents With Vasomotor Rhinitis,2004-004744-43; FFR30007; NCT00118703,GlaxoSmithKline plc,11077,"JULY     , 01, 2005",Completed
2,null,Multiple sclerosis,Solu-Medrol,Phase 2 Clinical,C2,"prednisolone (injectable liposome formulation, rheumatoid arthritis/ulcerative colitis), Enceladus",59891,15,Nanocort,15,null,Nanocort in Acute Exacerbation of Relapsing-Remitting Multiple Sclerosis (MS),2009-013884-21; GLPG0303-CL-204; NCT01039103,"Enceladus Pharmaceuticals, Galapagos NV",63043,"DECEMBER , 31, 2009",Terminated
1,Intraocular pressure,Choroidal neovascularization,null,Phase 1/Phase 2 Clinical,C12,"triamcinolone acetonide (controlled release/intravitreal injection/Verisome, diabetic macular edema), EyePoint",60951,10,IBI-20089; Lucentis,10,20089/Combo,IBI-20089 + Lucentis Combined Intravitreal Injections for Treatment of Neovascular Age-related Macular Degeneration (AMD),20089/Combo; 2009-1067; NCT01175395,University of Illinois,68844,"SEPTEMBER, 30, 2010",Completed
1,Blood pressure; Body Mass Index; Body temperature; Diastolic blood pressure; Forced expiratory volume; Heart rate; Systolic blood pressure,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,520,"ciclesonide (metered dose inhaler), Nycomed",520,CONTRAST,Effect of High-Dose Ciclesonide on Asthma Control,2011-000683-99; CL-9709-301-RD; CONTRAST; NCT01455194; U1111-1133-6333,Takeda Development Centre Europe Ltd,81694,"NOVEMBER , 30, 2011",Completed
2,null,Asthma,null,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,34,Advair; Qvar; Serevent Diskus,34,null,Non-Invasive Measures of Distal Lung Disease in Asthmatics,IXR-403-4-196; NCT00250341,Teva Pharmaceutical Industries Ltd,22364,"SEPTEMBER, 30, 2005",Completed
2,null,Osteoarthritis,Kenalog,Phase 2 Clinical,C2,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,55,Zilretta,30,SHIP,Study to Compare Exposure of TA Following Administration of FX-006 or TAcs in Patients With OA of the Shoulder or Hip,FX006-2017-013; NCT03382262; SHIP,Flexion Therapeutics Inc,323551,"DECEMBER , 18, 2017",Completed
1,Eosinophils; Forced Vital Capacity; Forced expiratory volume; Nitric oxide,Asthma,null,Phase 4 Clinical,C4,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,30,"ciclesonide (metered dose inhaler), Nycomed",30,SPIRA,Small Particle Steroids in Refractory Asthma,09115; 2010-018249-78; 9890; MREC N: 10/H0408/19; NCT01171365; SPIRA,University of Nottingham,192547,"JANUARY  , 31, 2010",Completed
1,Intraocular pressure; Lens; Optic cup; Optic disc,Perennial allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,550,"fluticasone furoate (nasal, allergic rhinitis), GSK",550,null,A Clinical Study With Fluticasone Furoate Nasal Spray And Vehicle Placebo For The Treatment Of Perennial (Year-Round) Allergic Rhinitis,2015-004891-31; FFR110537; NCT00682643,GlaxoSmithKline Inc,22920,"JUNE     , 30, 2008",Completed
1,null,Age related macular degeneration,null,Phase 2 Clinical,C2,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,17,Medidur FA,17,null,Fluocinolone Acetonide Intravitreal Inserts in Geographic Atrophy,C-01-08-004; NCT00695318,Alimera Sciences Inc,32426,"DECEMBER , 01, 2008",Terminated
2,Arterial stiffness; Blood pressure; Pulse rate; Pulse wave velocity,Chronic obstructive pulmonary disease,Spiriva HandiHaler,Phase 3b Clinical,C3B,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,260,Relovair,260,null,A Study to Compare the Impact of Fulticasone Furoate/Vilanterol versus Tiotropium on Arterial Stiffness in COPD,115247; 2010-024435-16; NCT01395888,GlaxoSmithKline plc,79358,"JUNE     , 30, 2011",Completed
2,C-reactive protein (CRP); Serum amyloid A protein (SAA),Gout,triamcinolone acetonide,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,200,canakinumab,200,H2255,Targeted Dose Finding of Canakinumab (ACZ-885) for Management of Acute Flare in Refractory or Contraindicated Gout Patients,CACZ885H2255; EudraCT 2008-004666-61; H2255; H2255; NCT00798369,Novartis AG,37260,"NOVEMBER , 30, 2008",Completed
2,Blood pressure; Forced expiratory volume; Heart rate; PR interval; QRS complex; QT interval; R-R interval,Asthma,moxifloxacin,Phase 1 Clinical,C1,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,85,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",85,null,Corrected QT (QTc) Study With Flucticasone Furoate and GW-642444,102936; NCT01209026,GlaxoSmithKline plc,70692,"JUNE     , 23, 2010",Completed
1,null,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,36,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",36,null,"A Four-way Crossover, Single- and Repeat-Dose Study to Determine the Dose Proportionality and Absolute Bioavailability of Fluticasone Furoate Inhalation Powder Administered by Novel Dry Powder Inhaler (NDPI)",115441; NCT01669070,GlaxoSmithKline plc,90428,"AUGUST   , 15, 2012",Completed
1,null,Osteoarthritis,null,Phase 3 Clinical,C3,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,70,Zilretta,70,null,Study to Evaluate the Efficacy and Safety of FX-006 in Patients With Hip Osteoarthritis,FX006-2018-015; NCT03793010,Flexion Therapeutics Inc,365500,"DECEMBER , 12, 2018",No longer recruiting
2+,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Body temperature; Calcium; Chlorides; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; Globulins; Glucose; Hematocrit; Hemoglobin; Ketones; Leukocyte count; Lymphocytes; Mean corpuscular hemoglobin; Mean corpuscular volume; Monocytes; Neutrophils; Nitrite; PR interval; Phosphate; Potassium; QRS complex; QT interval; Respiratory frequency; Sodium; Systolic blood pressure; Total cholesterol; Total protein; Triglycerides; Urea; Uric acid; Urinary specific gravity; Urobilinogen; gamma-Glutamyltransferase,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,48,batefenterol succinate; batefenterol succinate + fluticasone furoate; fluticasone furoate; fluticasone furoate + vilanterol trifenatate; fluticasone furoate + vilanterol trifenatate,48,null,"GSK-961081 Alone and With Fluticasone Furoate (FF), Phase I (PhI), Single-Dose Regimen (SD), Repeat-Dose Regimen (RD), Pharmacokinetic (PK) Study in Healthy Volunteer (HV)",201958; NCT02666287,GlaxoSmithKline plc,251911,"JANUARY  , 27, 2016",Completed
2+,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Body temperature; Calcium; Chlorides; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; Globulins; Glucose; Hematocrit; Hemoglobin; Ketones; Leukocyte count; Lymphocytes; Mean corpuscular hemoglobin; Mean corpuscular volume; Monocytes; Neutrophils; Nitrite; PR interval; Phosphate; Potassium; QRS complex; QT interval; Respiratory frequency; Sodium; Systolic blood pressure; Total cholesterol; Total protein; Triglycerides; Urea; Uric acid; Urinary specific gravity; Urobilinogen; gamma-Glutamyltransferase,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"batefenterol succinate + fluticasone furoate (COPD), GlaxoSmithKline",78547,48,batefenterol succinate; batefenterol succinate + fluticasone furoate; fluticasone furoate; fluticasone furoate + vilanterol trifenatate; fluticasone furoate + vilanterol trifenatate,48,null,"GSK-961081 Alone and With Fluticasone Furoate (FF), Phase I (PhI), Single-Dose Regimen (SD), Repeat-Dose Regimen (RD), Pharmacokinetic (PK) Study in Healthy Volunteer (HV)",201958; NCT02666287,GlaxoSmithKline plc,251911,"JANUARY  , 27, 2016",Completed
1,null,Addisons disease,null,Phase 4 Clinical,C4,"dual-release hydrocortisone (oral, adrenal insufficiency), ViroPharma",58174,60,Plenadren,60,null,Optimizing Steroid Replacement in Patients With Adrenal Insufficiency,2016/09/05; NCT03282487,"Adelaide and Meath Hospital, Tallaght Regional Hospital",312737,"SEPTEMBER, 05, 2017",Recruiting
1,Cortisol; Creatinine; Eosinophil; Eosinophil cationic protein; Eosinophilic cationic protein; Mannitol PD15; Nitric Oxide; Peak expiratory flow rate,Asthma,null,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,26,Qvar,26,ANDA3,Targeted Small Airways Therapy in Persistent Asthma,13/ES/0064; 2012-003923-39; 2012RC16; ANDA3; NCT01894048,"Tayside Medical Science Center, University of Dundee",145796,"OCTOBER  , 28, 2013",Completed
1,null,Rhinitis,null,Phase 1 Clinical,C1,"mometasone furoate (sustained release transmucosal formulation, chronic sinusitis), Lyra Therapeutics",103922,20,mometasone,20,null,480 Biomedical Sinus Drug Depot,480MFSDD2016-001; NCT02942186; NCT02967731,Lyra Therapeutics,280158,"JUNE     , 06, 2017",Completed
1,Eosinophils; Peak nasal inspiratory flow,Allergic rhinitis,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,20,Nasacort AQ,20,NACHO,Nasal Allergen Challenge-Reproducibility of Biomarkers and Effect of Topical Steroid Treatment,DC002544/HIREB3820; NACHO; NCT03431961,Hamilton Health Sciences Corp,329091,"MARCH    , 07, 2018",Recruiting
1,Creatinine; Diastolic blood pressure; Glucose; Heart rate; Hydrocortisone; Potassium; Systolic blood pressure,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,32,CHF-5993,32,null,PK of BDP/FF/GB Single-inhaler Triple Therapy in Japanese versus Caucasians,CLI-05993AB4-01; NCT03859414,Chiesi Farmaceutici SpA,371937,"MARCH    , 18, 2019",Recruiting
1,null,Asthma,null,Phase 4 Clinical,C4,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,438,Relvar; salbutamol,438,null,A Clinical Study to Evaluate the Effect of the Connected Inhaler System (CIS) on Adherence to Maintenance Therapy in Poorly Controlled Asthmatic Subjects,2017-002266-45; 207040; NCT03380429,"Glaxo Group Research Ltd, GlaxoSmithKline plc",323386,"JANUARY  , 31, 2018",Completed
1+,null,Juvenile rheumatoid arthritis,null,Phase 3 Clinical,C3,CINGAL,103224,260,CINGAL; etanercept; methotrexate; methylprednisolone acetate,260,STARS,Step-up and Step-down Therapeutic Strategies in Childhood Arthritis,2018-001931-27; NCT03728478; STARS,The Gaslini Institute,358840,"MARCH    , 31, 2019",Not yet recruiting
1,Maximal oxygen uptake,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,26,Relvar Ellipta,26,null,Urine Concentrations of Vilanterol After Inhaled Administration of Vilanterol/Fluticasone Furoate,NCT03739294; WADAVIL2018,Bispebjerg Hospital,359853,"FEBRUARY , 08, 2019",Recruiting
1,null,Sciatica,null,Phase 3 Clinical,C3,"dexamethasone sodium phosphate (epidural steroid injectable gel, sciatia), Scilex Holding",106609,400,SP-102,400,CLEAR,Corticosteroid Lumbar Epidural Analgesia for Radiculopathy,CLEAR; NCT03372161; SP-102-02,Semnur Pharmaceuticals Inc,322493,"DECEMBER , 08, 2017",Recruiting
1,"Bone mineral density; C-reactive protein; Heart rate; Hemoglobin A, glycosylated; PR interval; Q-wave; QRS complex; QT interval; R-wave; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-wave",Ataxia telangiectasia,null,Phase 3 Clinical,C3,"dexamethasone sodium phosphate (erythrocyte encapsulated), Urbino University/EryDel",70257,50,EryDex,50,OLE-IEDAT,"Open-label, Long-term, Extension Treatment Using Intra-Erythrocyte Dexamethasone Sodium Phosphate in Patients With Ataxia Telangiectasia Who Participated in the IEDAT-02-2015 Study",2018-000338-36; CTRI/2019/02/017732; IEDAT-03-2018; NCT03563053; OLE-IEDAT; US IND 115929,"CliniRx Tangent Research India Pvt Ltd, EryDel SPA",344005,"JUNE     , 12, 2018",Recruiting
1+,null,null,null,Phase 1 Clinical,C1,"clobetasol propionate foam, Connetics",18168,35,"LEO-90100; betamethasone dipropionate; calcipotriol + betamethasone dipropionate, LEO; clobetasol propionate foam, Connetics; fluocinolone acetonide (Synalar)",35,null,A Vasoconstriction Study With LEO-90100,LP0053-69; NCT01946386,LEO Pharma A/S,155226,"SEPTEMBER, 30, 2013",Completed
2,null,null,null,Phase 1 Clinical,C1,"beclomethasone dipropionate, (CFC-free), Teva",44414,30,"Qnaze; beclometasone (inhaled, CFC-free), Teva",30,null,Clinical Study to Evaluate the Pharmacokinetics and Safety of BDP HFA Nasal Aerosol,BDP-AR-101; NCT01537692,Teva Pharmaceutical Industries Ltd,85132,"MARCH    , 31, 2009",Completed
2,null,null,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,19,"budesonide (inhaled formulations), AstraZeneca; triamcinolone acetonide",19,null,"A Randomized, Placebo-controlled, Cross-over Study Comparing the Clinical Pharmacokinetics, Pharmacodynamics and Tolerability of Triamcinolone Acetonide Versus Budesonide in Healthy Volunteers",CMS-3104,Aventis Pharmaceuticals Inc,106503,"MAY      , 31, 2000",Status not specified
1,Hydrocortisone,null,null,Phase 1 Clinical,C1,AZD-5423,64294,72,AZD-5423,72,null,AZD-5423 Single Ascending Dose Study,D2340C00001; NCT00963183,AstraZeneca plc,59980,"AUGUST   , 31, 2009",Completed
1,null,null,null,Phase 2 Clinical,C2,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,16,"fluticasone furoate (nasal, allergic rhinitis), GSK",16,null,"A Randomized, Open-Label, Two-Way, Cross-over Study to Assess the Absolute Bioavailability of GW-685698X Administered Intranasally in Healthy Male and Female Subjects",FFR10010,GlaxoSmithKline plc,153600,"MAY      , 16, 2005",Completed
1,Blood pressure; Body temperature; Heart rate; Respiratory frequency,null,null,Phase 1 Clinical,C1,BI-653048,56124,80,"glucocorticoid mimetics (inflammation), Boehringer Ingelheim",80,null,"Safety, Tolerability and Pharmacokinetics of BI-653048 H3PO4 Oral Drinking Solution in Healthy Male Volunteers",1262.1; NCT02217644,Boehringer Ingelheim International GmbH,208311,"NOVEMBER , 30, 2008",Completed
1,C-reactive protein; Erythrocyte,Crohns disease,null,Phase 3 Clinical,C3,"dexamethasone sodium phosphate (erythrocyte encapsulated), Urbino University/EryDel",70257,51,EryDex,51,Crodex,Intra-Erythrocyte Dexamethasone Versus Placebo in Patients With Steroid-Dependent Crohn's Disease,2008-007329-38; Crodex; Crodex01; NCT01277289,EryDel SPA,75025,"APRIL    , 30, 2009",Terminated
2,FEV1; Hydrocortisone; PEF,Asthma,fluticasone,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,350,fluticasone furoate,343,null,Evaluating the Efficacy and Safety of Fluticasone Furoate Inhalation Powder in the Treatment of Asthma in Adults and Adolescents,112059; 2010-020144-34; FFA112059; NCT01159912,GlaxoSmithKline plc,68093,"JUNE     , 30, 2010",Completed
1,Intraocular pressure; Visual acuity,Uveitis,null,Phase 3 Clinical,C3,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,153,Iluvien,153,null,Safety and Efficacy Study of a Fluocinolone Acetonide Intravitreal (FAI) Insert in Subjects With Chronic Non-infectious Posterior Uveitis,CTRI/2014/12/005337; NCT02746991; PSV-FAI-005,EyePoint Pharmaceuticals Inc,258836,"JUNE     , 30, 2015",No longer recruiting
2,null,Asthma,null,Phase not specified,NS,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,60,fluticasone furoate; fluticasone propionate,60,null,"A randomized, double-blind, placebo-controlled, multicenter study was conducted to evaluate the efficacy and safety of powder for inhalation of fluticasone furoate and powder for inhalation of fluticasone propionate in the treatment of asthma in adults and adolescents who are receiving treatment with inhaled corticosteroids",FFA115285,GlaxoSmithKline plc,169280,"OCTOBER  , 18, 2011",Completed
1,null,Perennial allergic rhinitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,34,triamcinolone acetonide,34,SMART,"A phase IV, randomized, double-blind, placebo-controlled, crossover, single-center study to assess the efficacy and efficacy of Nasacort in patients with perennial allergic rhinitis",SMART; XRG5029C/4004,Sanofi SA,88927,"JULY     , 25, 2002",No longer recruiting
2,null,Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,40,Flutiform; Relvar,40,null,Comparison of clinical efficacy between FFC and VFC,UMIN000031039,Kyorin Pharmaceutical Co Ltd,326992,"JANUARY  , 29, 2018",Recruiting
2,Body surface area,Psoriasis,null,Phase 4 Clinical,C4,"clobetasol propionate foam, Connetics",18168,63,"Sorilux; Sorilux; clobetasol propionate foam, Connetics",63,null,Olux-E Foam and Sorilux Foam Combination Therapy for the Maintenance of Treatment Response in Patients With Moderate Plaque Psoriasis,NCT01745133; OLX0112,"Derm Research, PLLC",101105,"JANUARY  , 31, 2013",Completed
2,null,Asthma,null,Phase not specified,NS,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,637,"ciclesonide (metered dose inhaler), Nycomed; fluticasone",474,null,"A 12-week, randomized, open-label, parallel-group study to evaluate the safety and efficacy of ciclesonide versus fluticasone propionate in patients with moderate persistent asthma",BY9010/M1-133,Takeda GmbH,76915,"DECEMBER , 31, 2003",Status not specified
1,Alanine Aminotransferase; Albumin; Alkaline Phosphatase; Aspartate Aminotransferase; Creatinine; Glucose; Hematocrit; Hemoglobin; Platelets; Potassium; Red blood cells; Sodium; Total Bilirubin; Total Protein; Urea Nitrogen; White blood cells,Perennial allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,60,Avamys,56,null,"A Phase IV, Open-label Study to Evaluate Safety/Tolerability of Once-daily AVAMYS Aqueous Nasal Spray 110 microg Among Vietnamese Adult Patients With Established Perennial Allergic Rhinitis",112185; AVY-REG00108VN; NCT01270958,GlaxoSmithKline plc,73628,"AUGUST   , 31, 2009",Completed
2,Cortisol,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,28,GW-685698X; fluticasone propionate,28,null,"A phase I, randomized, multicenter, double-blind, placebo-controlled, balanced incomplete block, multiple-dose, three-period crossover study to determine  the effect of 3 days repeat dosing of GW-685698X and fluticasone propionate (1000 microg) on exhaled nitric oxide in patients with mild to moderate asthma",FFA10028,GlaxoSmithKline plc,87541,"MARCH    , 24, 2003",Status not specified
1,Retina; Visual acuity,Diabetic macular edema,null,Phase 2b Clinical,C2B,"triamcinolone acetonide (intravitreal implant, I-vation, diabetic macular edema), SurModics",55108,2,"triamcinolone acetonide (intravitreal implant, I-vation, diabetic macular edema), SurModics",2,null,A Study of MK-0140 in Diabetic Patients With Macular Edema,0140-001; 2008_521; MK0140-001; NCT00692614,Merck Sharp & Dohme Corp,16677,"JUNE     , 30, 2008",Terminated
1,null,Proctitis,null,Phase 3 Clinical,C3,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,114,Rectabul,114,null,The Safety and Tolerability of Budesonide Foam in Subjects With Active Ulcerative Proctitis or Proctosigmoiditis,BFPS3073; NCT01349673,Salix Pharmaceuticals Ltd,77185,"JUNE     , 30, 2011",Completed
1,FEV1; FeNO,Allergic rhinitis,null,Phase 2 Clinical,C2,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,91,"fluticasone furoate (nasal, allergic rhinitis), GSK",91,YSCO,The Protective Effect of a Nasal Corticosteroid (Avamys) On Exercise Induced Airway Obstruction in Cold Air in Children,EudraCT: 2009-010563-17; FF1; ISRCTN90761040; NL26953.044.09; YSCO,Stichting Pediatrisch Onderzoek Enschede,118794,"MARCH    , 05, 2009",Completed
1,Retinal thickness,Macular edema,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,100,triamcinolone acetonide,100,null,Clinical study about ophthalmic local administrations of triamcinolone acetonide for macular edema and/or retinal periphlebitis,JPRN-UMIN000005778,Yamagata University,121608,"JULY     , 01, 2006",Recruiting
1+,null,Crohns disease,null,Phase not specified,NS,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,130,Budenofalk; Entocort; Flagyl; Medrol; azathioprine; folic acid; infliximab; methotrexate; prednisolone,130,null,"The Ideal Management of Crohn's Disease: Top-Down Versus Step-Up Strategies - A Prospective, Controlled Trial in the Benelux",ISRCTN61510219; NTR379,"Academic Medical Center, University of Amsterdam",120593,"MAY      , 01, 2001",Completed
2,null,Psoriasis,null,Phase 4 Clinical,C4,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique",78444,300,"betamethasone valerate (transdermal patch, skin diseases), Institut Biochimique; calcipotriol + betamethasone dipropionate, LEO",300,null,Comparison of Efficacy and Safety of Betesil Medicated Plaster Versus Daivobet/Dovobet Ointment in the Treatment of Chronic Plaque Psoriasis,09EU_BMT12; EudraCT: 2009-016969-28; ISRCTN34974208,Institut Biochimique SA,120685,"APRIL    , 01, 2010",Completed
1,null,Allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,304,fluticasone furoate,304,null,Study In Adults And Adolescents With Seasonal Allergic Rhinitis,FFR30003; NCT00115622,GlaxoSmithKline plc,12091,"DECEMBER , 31, 2004",Completed
3,Central macular thickness; Visual acuity,Diabetic macular edema,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,105,bevacizumab; grid laser photocoagulation; triamcinolone acetonide,105,null,Efficacy of Macular Laser Photocoagulation With or Without Intravitreal Injection of Bevacizumab (Avastin) or Triamcinolone Acetonide for Diffuse Diabetic Macular Edema,IRCT201205029617N1,Ahvaz Jundishapur University of Medical Sciences,125066,"MAY      , 10, 2011",No longer recruiting
1,null,Allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,380,fluticasone furoate,380,null,Study In Adolescent and Adult Subjects 12 Years of Age and Older With Seasonal Allergic Rhinitis To Assess Onset of Action,FFR101816; NCT00118729,GlaxoSmithKline Inc,12406,"APRIL    , 30, 2005",Completed
1,null,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,61,"fluticasone furoate (nasal, allergic rhinitis), GSK",61,null,"Study FFR116365, an Open-label Study of GW-685698X in Pediatric Subjects With Perennial Allergic Rhinitis",116365; FFR116365; JapicCTI-121890; NCT01622231,GlaxoSmithKline plc,88495,"JUNE     , 30, 2012",Completed
3+,null,Sarcoidosis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,7,methotrexate; methylprednisolone; prednisone; prednisone; triamcinolone acetonide,7,UVEXATE,Efficacy Study of Methotrexate to Treat Sarcoid-associated Uveitis,NCT00918554; P070140; UVEXATE,Assistance Publique Hopitaux de Paris,169537,"SEPTEMBER, 30, 2009",Terminated
2,Adrenocorticotropic Hormone; Fasting blood glucose; Hypothalamic-pituitary-adrenal (HPA) axis hormone; Lymphocyte; Osteocalcin,Multiple sclerosis,methylprednisolone,Phase 1 Clinical,C1,"methylprednisolone (PEGylated liposomal, neuroinflammation), EnhanX Biopharm",64904,47,2B3-201,42,null,"Safety, Pharmacokinetics and Pharmacodynamics Study With 2B3-201 in Healthy Subjects and Multiple Sclerosis (MS) Patients",2013-004077-28; 2B3-201-CR-001; NCT02048358,2-BBB Medicines BV,170415,"NOVEMBER , 30, 2013",Terminated
2,Arm circumference,Anesthesia,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,66,"bupivacaine, AstraZeneca; triamcinolone acetonide",66,null,Comparative Effectiveness of Corticosteroid Preparation in Sympathetic Ganglion Block on Lymphedema,2010-0206; KCT0000300,Seoul National University Hospital,127593,"APRIL    , 30, 2010",Recruiting
1,null,Diabetic macular edema,null,Phase 1 Clinical,C1,"triamcinolone acetonide (intravitreal implant, I-vation, diabetic macular edema), SurModics",55108,31,triamcinolone acetonide,31,STRIDE,Safety and Tolerability Study of the Helical Intravitreal Triamcinolone Implant in Diabetic Macular Edema,NCT00915837; SRDX- 001; STRIDE,SurModics Inc,57663,"JUNE     , 30, 2005",Completed
1,null,Asthma,null,Phase Not Applicable,PNA,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,null,Relovair,null,null,"A randomized, double-blind, placebo-controlled, multicenter, parallel group comparative study of fluticasone furoate inhalation powder and fluticasone furoate / GW642444 formulations that target persistent asthma adolescent patients",108 627; JapicCTI-101294,GlaxoSmithKline plc,131588,"OCTOBER  , 05, 2010",No longer recruiting
1,null,Herpes simplex virus infection,null,Phase 2 Clinical,C2,"aciclovir + hydrocortisone (dermatological), Medivir",17335,417,ME-609,380,null,Efficacy of Acyclovir in Combination With a Glucocorticosteroid on UV-Induced Herpes Labialis,98-609-013; NCT00736437,Medivir AB,23303,"AUGUST   , 31, 1999",Completed
4,null,Asthma,"Carbomix granules; fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline; fluticasone propionate + salmeterol (asthma and COPD), GlaxoSmithKline",Phase 1 Clinical,C1,"fluticasone propionate + salmeterol xinafoate (Easyhaler, asthma/COPD), Orion",81111,129,Carbomix granules; fluticasone propionate + salmeterol xinafoate; fluticasone propionate + salmeterol xinafoate,129,null,Pharmacokinetic Study Comparing Salmeterol/Fluticasone Easyhaler Products and Seretide Diskus,3106009; NCT02162485,Orion Corp,196211,"JUNE     , 30, 2014",Completed
2,null,Diabetic macular edema,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,150,bevacizumab; bevacizumab; triamcinolone acetonide,129,null,Effect of Intravitreal Bevacizumab on Clinically Significant Macular Edema,8411; NCT00370669,Shaheed Beheshti Medical University,4334,"NOVEMBER , 30, 2005",Recruiting
4,"17-alpha-hydroxyprogesterone; Adrenocorticotropic hormone; Blood pressure; Body Mass Index; Body temperature; Bone formation rate; C-terminal telopeptide of collagen type I; Corticosterone; Cortodoxone; Dystrophin; Glucose; Heart rate; Hemoglobin A, glycosylated; High-density lipoprotein cholesterol; Hydrocortisone; Insulin; Low-density lipoprotein cholesterol; Muscle strength; Osteocalcin; Procollagen Type I N-terminal peptide; Respiratory frequency; Six-minute walk distance; Testosterone; Total body mass; Total cholesterol; Triglycerides",Duchenne dystrophy,deflazacort; glucocorticoid therapy; prednisone,Phase 2a Clinical,C2A,vamorolone,70712,48,vamorolone,48,VISION-DMD,A Study to Assess Vamorolone in Boys With Duchenne Muscular Dystrophy (DMD),1R44NS095423-01; 1U34AR068616-01; 2016-004263-38; NCT02760264; VBP15-002; VBP15-003; VISION-DMD,ReveraGen BioPharma Inc,260105,"JUNE     , 30, 2016",Completed
1,null,Diarrhea,null,Phase 2/Phase 3 Clinical,C23,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,16,Entocort EC,16,null,Budesonide Versus Placebo for the Treatment of Lymphocytic Colitis,1132-03; IRUSBUEN0002; NCT00217022; UL1RR024150,Mayo Clinic Foundation,199220,"JUNE     , 30, 2003",Terminated
1,null,Asthma,null,Phase 3 Clinical,C3,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,20,"ciclesonide (metered dose inhaler), Nycomed",16,null,Efficacy of Ciclesonide on Small Airways in Patients With Stable Asthma (18 to 60 years),BY9010/M1-131; NCT00163345,AstraZeneca plc,22011,"SEPTEMBER, 30, 2003",Completed
2,null,Obstructive sleep apnea,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,44,"Thermosmart; triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",44,Thermosmart,Effect of Heated Humidity With Thermosmart Compared to an Intranasal Steroid in Improving Compliance and Nasal Symptoms in Patients Using Continuous Positive Airway Pressure,F & P 07-004; NCT00665977; Thermosmart,Clayton Sleep Insititute,175536,"SEPTEMBER, 30, 2007",Completed
1,null,Asthma,null,Phase not specified,NS,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,12,ciclesonide,12,null,Evaluation of Traditional Paper Symptom Diary Versus the VOCEL Mobile Diary,CICLE-L-01335; NCT00367263,Allergy and Asthma Medical Group and Research Center,22407,"OCTOBER  , 31, 2006",Completed
2,Knee stiffness,Pain,Kenalog-40,Phase 2 Clinical,C2,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,6,Zilretta,6,null,Proof of Concept Study Comparing FX-006 to Kenalog-40 in Patients With Post-Traumatic Osteoarthritis of the Knee,FX006-2014-007; NCT02468583,Flexion Therapeutics Inc,231796,"FEBRUARY , 28, 2015",Terminated
1,Hydrocortisone,Allergic rhinitis,null,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,106,Qvar; ciclesonide,106,null,Investigation of Potential Additive Inhibitory Effects on HPA-Axis of Ciclesonide Nasal Spray When Administered Concomitantly With Orally Inhaled Beclomethasone Dipropionate (HFA-BDP) in Patients With Perennial Allergic Rhinitis (PAR),BY9010/M1-408; NCT00659048,AstraZeneca plc,13328,"DECEMBER , 31, 2004",Completed
1,17-alpha-hydroxyprogesterone; Androgens; Androstenedione; Testosterone,Congenital adrenal hyperplasia,null,Phase 3 Clinical,C3,"hydrocortisone (oral granules, adrenal insufficiency), Diurnal/Emerge Health/Medison Pharma",79146,18,Infacort,24,null,Extension Study for Patients Entered Into Study Infacort 003,2015-000458-40; INFACORT 004; NCT02733367,Diurnal Ltd,257842,"MARCH    , 04, 2016",Completed
2+,Diastolic blood pressure; Forced expiratory volume; Heart rate; Systolic blood pressure,Chronic obstructive pulmonary disease,null,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,620,"fluticasone furoate + vilanterol trifenatate (oral inhalant, asthma/COPD), GlaxoSmithKline; fluticasone furoate + vilanterol trifenatate (oral inhalant, asthma/COPD), GlaxoSmithKline; placebo + fluticasone furoate + vilanterol; umeclidinium; umeclidinium (125 microg) + fluticasone furoate + vilanterol; umeclidinium (62.5 microg) + fluticasone furoate + vilanterol",1238,null,"Study to Compare the Addition of Umeclidinium Bromide (UMEC) to Fluticasone Furoate (FF)/Vilanterol (VI), With Placebo Plus FF/VI in Subjects With Chronic Obstructive Pulmonary Disease (COPD): Study 2",077; 200110; 2013-002239-44; 479; 855; IND IDE 104; NCT02119286,GlaxoSmithKline plc,183041,"OCTOBER  , 31, 2013",Completed
2,cortisol,Asthma,null,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,52,"beclometasone; beclometasone (inhaled, CFC-free), Teva",52,null,"A Single-Center, Open-Label, Randomized, Two-Way Cross Over Study to Determine the Effects on the Short-Term Lower Leg Growth Rate Between Qvar 100 microg BD Delivered via a Metered Dose Inhaler (MDI) (TEVA UK Ltd) With a Reference Beclometasone Formulation via a Reference MDI in Children With Mild to Moderate Asthma",EudraCT 2007-007455-14; QV-001/2007-Pae,Teva Pharmaceutical Industries Ltd,151641,"APRIL    , 08, 2008",Completed
2,Fundus of eye; Intraocular pressure; Macula retinae,Macular edema,"dexamethasone (sustained release ophthalmic), Allergan/Sanwa",Phase 1/Phase 2 Clinical,C12,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,25,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate",25,null,"Open-Label, Multicenter, Phase Ib/IIa Clinical Trial Designed To Evaluate The Safety And Efficacy Of Iontophoretic Dexamethasone Phosphate Ophthalmic Solution In Patients With Macular Edema",EGP-437-007; NCT02485249,Eyegate Pharmaceuticals Inc,233505,"JULY     , 31, 2015",Terminated
1,Body height; Cortisol/Creatinine ratio; Hydrocortisone,Perennial allergic rhinitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,299,"loratadine; triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",299,null,"Study of Triamcinolone Acetonide on the Growth Velocity of Children, Ages 3 to 9, With Perennial Allergic Rhinitis (PAR)",2014-004645-27; NCT00449072; XRG5029C_3503,Sanofi SA,13825,"MARCH    , 31, 2007",Completed
2,null,Allergic rhinitis,null,Phase 2 Clinical,C2,"budesonide + azelastine (intranasal Captisol-enabled, allergic rhinitis), Sedor Pharmaceuticals",62431,65,CDX-313; Pulmicort,65,null,Compare Captisol-Enabled Budesonide Nasal Solution and Rhinocort Aqua in an Environmental Exposure Chamber (EEC) Study of Allergic Rhinitis,CDX947CT001; NCT00938613; P2DS06001,Ligand Pharmaceuticals Inc,59051,"FEBRUARY , 28, 2007",Completed
2,null,Osteoarthritis,prednisolone,Phase 2b Clinical,C2B,"prednisolone + dipyridamole (osteoarthritis, inflammation), Zalicus",50159,279,CRx-102,279,COMET-1,CRx-102 Osteoarthritis Multicenter Evaluation Trial,COMET-1; CRx-102-006; NCT00521989,Zalicus Inc,22235,"AUGUST   , 31, 2007",Terminated
4,Forced expiratory volume; Peak expiratory flow rate,Asthma,ciclesonide; formoterol fumarate,Phase 2 Clinical,C2,"ciclesonide + formoterol (inhaled, asthma), Altana/sanofi-aventis",48419,240,Ultrahaler; ciclesonide + formoterol,240,ADVICE,Safety and Tolerability of Ciclesonide and Formoterol Fumarate Inhaled Once Daily in Patients With Asthma (18 to 75 years),2004-004708-19; ADVICE; BY9010/M1-506; NCT00314509,"AstraZeneca plc, Takeda GmbH",21993,"JULY     , 31, 2005",Completed
2,Fovea centralis; Retina; Visual acuity,Macular edema,Eylea,Phase 3 Clinical,C3,"suprachoroidal triamcinolone acetonide + intravitreal aflibercept (diabetic macular edema), Clearside Biomedical",92483,460,CLS-1003,460,SAPPHIRE,Suprachoroidal Injection of Triamcinolone Acetonide With intravitreal Aflibercept in Subjects With Macular Edema Following RVO,2016-004648-12; 2017-CT0411; CLS1003-301; CLS1003-301 Amendment 1; CTRI/2017/11/010451; NCT02980874; PHRR170812-001654; SAPPHIRE,"Clearside Biomedical Inc, Syneos Health Inc",281144,"JANUARY  , 31, 2017",Terminated
1,Blood pressure; Cortisol; Heart rate; Pulse rate,Perennial allergic rhinitis,null,Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,736,"fluticasone furoate (nasal, allergic rhinitis), GSK",736,null,"A Randomized, Double-Blind, Placebo-Controlled, Parallel Group, Multicenter, Long-Term Study to Evaluate the Safety of Once-Daily, Intranasal Administration of GW685698X Aqueous Nasal Spray 100 microg for 52 Weeks in Adult and Adolescent Subjects With Perennial Allergic Rhinitis",EudraCT 2004-000091-14; FFR102123,GlaxoSmithKline plc,140891,"SEPTEMBER, 17, 2004",Recruiting
1,Intraocular pressure; Visual acuity,Diabetic macular edema,null,Phase 3 Clinical,C3,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,120,Iluvien,120,FAME,Fluocinolone Acetonide in Diabetic Macular Edema (FAME) Extension Study,C-01-11-008; FAME; NCT01304706,Alimera Sciences Inc,75048,"APRIL    , 30, 2011",Completed
3,Forced expiratory volume; Glucose; PR interval; Peak expiratory flow rate; QRS complex; QT interval,Asthma,fluticasone furoate,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,870,ELLIPTA dry powder inhaler; Ellipta,870,null,Safety and Efficacy Study of Fluticasone Furoate/Vilanterol (FF/VI) Fixed Dose Combination (FDC) Compared to FF Alone in Subjects With Asthma,107116; 2016-004086-87; CTR20181312; HZA107116; JapicCTI-183937; NCT03248128,"Glaxo Group Research Ltd, GlaxoSmithKline plc",308779,"OCTOBER  , 20, 2017",Recruiting
1,null,Rheumatoid arthritis,null,Phase 4 Clinical,C4,"prednisone (oral, delayed release), Vectura/Mundipharma/Merck KGaA",54733,147,"prednisone (oral, delayed release), Horizon/Mundipharma",147,K-IMPROvE,Efficacy of Lodotra (Prednisone) in Reduction of Morning Stiffness Duration,K-IMPROvE; LOD13-KR-401; NCT02072200,Mundipharma Korea Ltd,175309,"SEPTEMBER, 30, 2013",Completed
1,null,Ocular inflammation,null,Phase 2 Clinical,C2,"dexamethasone intraocular injection (controlled/sustained release/Verisome), EyePoint",65274,6,IBI-10090,6,null,Efficacy and Safety Study of IBI-10090 in Patients Undergoing Cataract Surgery,C09-01; NCT01048593,Icon Bioscience Inc,63370,"JANUARY  , 31, 2010",Terminated
2,null,Graft versus host disease,null,Phase 3 Clinical,C3,"beclomethasone dipropionate (oral, radiation enteritis), Soligenix",49161,130,orBec; orBec; prednisone,129,null,Randomized Study of Oral Beclomethasone Dipropionate With Ten Days of Prednisone for Treatment of Gastrointestinal GVHD,ENT 00-02; NCT00233896,Enteron Pharmaceuticals Inc,26921,"JULY     , 31, 2001",Completed
1,Forced expiratory volume,Asthma,null,Phase 2 Clinical,C2,"beclomethasone dipropionate, (CFC-free), Teva",44414,21,beclomethasone dipropionate,21,null,The Effect of HFA - Beclomethasone Dipropionate Qvar on Bronchial Hyperreactivity in Preschool Children,NCT01006655; qvar-adenosineCTIL,Rambam Health Care Campus,61615,"MARCH    , 31, 2009",Completed
2,Intraocular pressure; Retina; Visual acuity,Diabetic macular edema,null,Phase 3 Clinical,C3,"fluocinolone acetonide (intraocular implant), Alimera/pSivida",52822,956,Iluvien; standard of care laser photocoagulation,956,FAME,Fluocinolone Acetonide Implant Compared to Sham Injection in Patients with Diabetic Macular Edema,C-01-05-001; FAME; NCT00344968,Alimera Sciences Inc,4321,"SEPTEMBER, 30, 2007",Completed
2,C-reactive protein,Rheumatoid arthritis,DMARD therapy,Phase 2 Clinical,C2,"prednisolone + dipyridamole (osteoarthritis, inflammation), Zalicus",50159,59,CRx-102; DMARD therapy,59,null,A Study Comparing CRx-102 Plus Disease-modifying Anti-rheumatic Drug (DMARD) Therapy to Placebo Plus DMARD Therapy in RA,CRx-102-002; NCT00747214,Zalicus Inc,25682,"NOVEMBER , 30, 2004",Completed
2,null,Ulcerative colitis,Entocort EC,Phase 3 Clinical,C3,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,514,Budesonide-MMX,511,CORE II,"Randomized, placebo-controlled trial of budesonide-MMX 6 and 9 mg in patients with ulcerative colitis",CB-01-02/02; CORE II; NCT00679380,Salix Pharmaceuticals Ltd,18729,"JUNE     , 30, 2008",Completed
2,null,Otitis externa,Ciprodex,Phase 3 Clinical,C3,"dexamethasone + povidone iodine (otitis), Foresight Biotherapeutics",64095,70,FST-201,70,null,FST-201 in the Treatment of Acute Otitis Externa,FST201-AOE-AS; NCT00961675,Shire plc,59715,"AUGUST   , 31, 2009",Completed
2,null,Seasonal allergic rhinitis,"fluticasone furoate (nasal, allergic rhinitis), GSK",Phase 3 Clinical,C3,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,962,fluticasone furoate,962,null,A Study Comparing Two Fluticasone Furoate Nasal Sprays in the Relief of the Signs and Symptoms of Seasonal Allergic Rhinitis,71047201; LEK PROJECT NUMBER: 2010-02; NCT01279057,Sandoz Inc,176014,"DECEMBER , 31, 2010",Completed
1,Blood pressure; Body temperature; Diastolic blood pressure; Heart rate; Systolic blood pressure,Asthma,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,30,fluticasone furoate,30,null,Pharmacokinetic Profile of Four Formulations of Fluticasone Furoate (FF) Using Unit Dose Dry Powder Inhaler (UD-DPI) Compared With FF ELLIPTA Presentation,200939; NCT02218723,GlaxoSmithKline plc,208426,"OCTOBER  , 28, 2014",Completed
2,null,Allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,null,Patanase; Veramyst,null,null,An Allergen BioCube (ABC) Study Evaluating the Onset of Action of Fluticasone Furoate Nasal Spray and Olopatadine Nasal Spray Compared to Placebo,10-270-0006; NCT01076439,ORA Inc,64469,"FEBRUARY , 24, 2010",Terminated
2,null,Osteoarthritis,Kenalog-40,Phase 2a Clinical,C2A,"triamcinolone acetonide (sustained-release, pain), Flexion",72124,50,Zilretta,50,null,Study to Characterize the Local Duration of Exposure From FX-006 in Patients With Osteoarthritis of the Knee,FX006-2013-005; NCT02003365,Flexion Therapeutics Inc,163029,"NOVEMBER , 30, 2013",Completed
2,null,Ear disease,Ciprodex,Phase 3 Clinical,C3,"dexamethasone + povidone iodine (otitis), Foresight Biotherapeutics",64095,5,FST-201,5,null,FST-201 In The Treatment of Acute Otitis Externa,FST201-AOE-02; NCT00945802,Shire plc,59121,"JULY     , 31, 2009",Terminated
2,Forced expiratory flow ; Forced expiratory volume,Asthma,CHF-1535,Phase 3 Clinical,C3,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,1153,CHF-5993,1153,TRIMARAN,Triple in Asthma With Uncontrolled Patient on Medium Strength of ICS + LABA,2015-000716-18; CCD-05993AB1-03; NCT02676076; TRIMARAN,Chiesi Farmaceutici SpA,252805,"FEBRUARY , 17, 2016",Completed
2,null,Bronchospasm,fluticasone propionate,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,null,Relovair,null,null,A Study of a New Asthma Medicine in Asthmatics Whose Asthma Worsens With Exercise,106847; NCT01435902,GlaxoSmithKline plc,80962,"JANUARY  , 31, 2012",Terminated
1,null,Crohns disease,null,Phase 2 Clinical,C2,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,75,Entocort,75,null,Efficacy and Safety Study of D-9421-C 9 mg and 15 mg Versus Placebo in Japanese Patients With Active Crohn's Disease,D9421C00002; JapicCTI-080566; NCT00573469,AstraZeneca plc,18570,"OCTOBER  , 31, 2006",Completed
1,Forced Vital Capacity; Forced expiratory flow ; Forced expiratory volume; Peak expiratory flow rate,Asthma,null,Phase 2b Clinical,C2B,"budesonide (aerosol inhalant/MDI, asthma), Pearl Therapeutics",90863,150,"budesonide (aerosol inhalant/MDI, asthma), Pearl Therapeutics",150,null,Study to Assess the Efficacy and Safety of Budesonide (PT-008) in Adult Subjects With Mild to Moderate Persistent Asthmaa,NCT02105012; PT008001,Pearl Therapeutics Inc,180805,"APRIL    , 01, 2014",Completed
1,Peak nasal inspiratory flow; Peak nasal inspiratory flow,Allergic rhinitis,null,Phase 4 Clinical,C4,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,315,fluticasone furoate,315,null,A Clinical Study To Test A Nasal Spray (Fluticasone Furoate Nasal Spray) For The Treatment Of Perennial (Year-Round) Allergic Rhinitis,2007-006562-15; FFU111439; NCT00609674,GlaxoSmithKline plc,13885,"JANUARY  , 31, 2008",Completed
1,Forced expiratory volume (FEV1); Peak expiratory flow (PEF),Asthma,null,Phase 2 Clinical,C2,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,28,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",28,null,To Investigate the Effects of Altering the Time of Day of Dosing (Morning or Evening) With Fluticasone Furoate 100 microg Once-Daily Administered Via a Dry Powder Inhaler in Subjects With Asthma,117156; NCT01808339,GlaxoSmithKline plc,115209,"MARCH    , 31, 2013",Completed
2,null,Asthma,Advair; Symbicort,Phase 3b Clinical,C3B,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,423,Relovair,423,null,A Study to Compare the Efficacy of Fluticasone Furoate/Vilanterol Inhalation Powder With Usual Inhaled Corticosteroids (ICS)/Long Acting Beta Agonists (LABA) in Persistent Asthma,116492; NCT02446418,GlaxoSmithKline plc,229982,"JULY     , 09, 2015",Completed
1,Fovea centralis; Intraocular pressure; Macula retinae; Visual acuity,Uveitis,null,Phase 3 Clinical,C3,"triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical",75376,160,Zuprata,160,PEACHTREE,Suprachoroidal Injection of CLS-TA in Subjects With Macular Edema Associated With Non-infectious Uveitis,CLS1001-301; CLS1001-301 Version 3.2; CTRI/2016/09/007269; NCT02595398; PEACHTREE,Clearside Biomedical Inc,244835,"NOVEMBER , 17, 2015",Completed
2,null,Atopic dermatitis,null,Phase 3 Clinical,C3,"betamethasone valerate (topical emollient foam, psoriasis/dermatitis), Foamix",53978,170,"Prednisolone acetate cream; betamethasone valerate (topical emollient foam, psoriasis/dermatitis), Foamix",170,null,Efficacy and Tolerability of Prednisolone Acetate 0.5% Cream Versus Betamethasone Valerate 0.1% Cream in Cortisosensitive Dermatosis,NCT01011621; PRE/P/08-1,Mantecorp Industria Quimica e Farmaceutica Ltd,180987,"FEBRUARY , 28, 2010",Not yet recruiting
4,Intraocular Pressure,Glaucoma,null,Phase 1 Clinical,C1,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,60,dexamethasone; phacoemulsification; trabeculectomy; triamcinolone acetonide,60,null,"A phase I, randomized, parallel, control study to assess the safety and efficacy of intracameral triamcinolone acetonide in combination with phacoemulsification and trabeculectomy in glaucoma patients",ChiCTR-TRC-12002313,Beijing Shijitan Hospital,96132,"JANUARY  , 01, 2012",No longer recruiting
1,null,Meniere disease,null,Phase 2 Clinical,C2,"dexamethasone (sustained release/intratympanic injection, ear disorders), Otonomy",65289,128,dexamethasone,128,null,A One Year Safety Study of OTO-104 in Subjects With Unilateral Meniere's Disease Located in United Kingdom,104-201403; 2014-001337-86; NCT02265393,Otonomy Inc,213744,"OCTOBER  , 31, 2014",Completed
1,C-reactive protein; Serum amyloid A protein,Gout,null,Phase 3 Clinical,C3,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,226,canakinumab; triamcinolone acetonide,226,Beta-RELIEVED-II,Canakinumab in the Treatment of Acute Gout Flares and Prevention of New Flares in Patients Unable to Use Non-steroidal Anti-inflammatory Drugs (NSAIDs) and/or Colchicines Including a 12 Week Extension and a One Year Open-label Extension Study,2009-017802-35; 2010-018913-32; 2010-020060-38; Beta-RELIEVED-II; CACZ885H2357; CACZ885H2357E1; CACZ885H2357E2; H2357; NCT01080131; NCT01137344; NCT01194921,"Novartis AG, Novartis Pharma Services AG",202551,"MARCH    , 31, 2010",Completed
3,Forced expiratory volume; Forced expiratory volume or FEV1; Hydrocortisone; Peak expiratory flow rate; Peak expiratory flow rate (PEFR),Asthma,Aerobec Autohaler; Flixotide,Phase 2 Clinical,C2,"beclomethasone dipropionate, (CFC-free), Teva",44414,48,FlutiForm,48,null,"Knemometry Study to Compare the Systemic Safety of Flutiform pMDI, Fluticasone pMDI and Beclometasone Autohaler in Pediatric Subjects Aged 5 to < 12 Years",2013-004719-32; FLT2504; NCT02063139,Mundipharma Research Limited,173450,"FEBRUARY , 28, 2014",Completed
1,null,Macular edema,null,Phase 3 Clinical,C3,"triamcinolone acetonide (intravitreal injection, diabetic macular edema), Wakamoto/ Hanmi",81991,null,WP-0508ST,null,null,WP-0508ST (RVO) Phase III trial,JapicCTI-142694,Wakamoto Pharmaceutical Co Ltd,215368,"OCTOBER  , 31, 2014",Recruiting
3,Methacholine,Asthma,salbutamol,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,288,Combined beclomethasone dipropionate group; Daily beclomethasone dipropionate group; Qvar,288,TREXA,Childhood Asthma Research and Education (CARE) Network Trial - Treating Children to Prevent Exacerbations of Asthma,445; 5U10HL064287; 5U10HL064288; 5U10HL064295; 5U10HL064305; 5U10HL064307; 5U10HL064313; NCT00394329; TREXA,National Heart Lung and Blood Institute,22487,"NOVEMBER , 30, 2006",Completed
2,CRP; Total body mass,Rheumatoid arthritis,prednisone,Phase 2a Clinical,C2A,fosdagrocorat,59618,86,PF-04171327,86,null,A Study Of PF-04171327 In The Treatment Of The Signs And Symptoms Of Rheumatoid Arthritis,2009-013223-37; A9391005; NCT00938587,Pfizer Inc,58785,"OCTOBER  , 31, 2009",Completed
1,null,Duchenne dystrophy,null,Phase 1 Clinical,C1,"deflazacort (oral tablet/suspension, Duchenne muscular dystrophy), PCT Therapeutics",86985,24,deflazacort,24,null,A Pharmacokinetic Study of Oral Deflazacort in Children and Adolescent Subjects With Duchenne Muscular Dystrophy,MP-104-CL-005; NCT02251600,PTC Therapeutics Inc,211918,"DECEMBER , 31, 2014",Completed
2,null,Allergic rhinitis,null,Phase 4 Clinical,C4,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,48,mometasone (nasal); triamcinolone acetonide,48,null,"A phase IV, randomized, double-blind, single-dose, crossover pilot study to assess the safety and efficacy of Nasacort and Nasonex in patients with allergic rhinitis",XRG5029C_4006,Sanofi SA,89192,"SEPTEMBER, 09, 2002",No longer recruiting
2,null,Macular disease,null,Phase 1 Clinical,C1,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,10,EyeGate II drug delivery system; dexamethasone,10,null,PK Study of Iontophoretic Dexamethasone Phosphate Ophthalmic Solution in Patients Undergoing Vitrectomy,EGP-437-010; NCT02644694,Eyegate Pharmaceuticals Inc,250160,"MARCH    , 31, 2016",Completed
2,Eosinophils; Forced expiratory volume in 1 s,Chronic obstructive pulmonary disease,vilanterol,Phase 3 Clinical,C3,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,1635,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",1635,null,A Study to Evaluate Annual Rate of Exacerbations and Safety of Three Dosage Strengths of Fluticasone Furoate (FF)/GW-642444 Inhalation Powder in Subjects With Chronic Obstructive Pulmonary Disease (COPD),102970; 2009-013064-40; HZC102970; NCT01017952,GlaxoSmithKline plc,62127,"SEPTEMBER, 25, 2009",Completed
1+,null,Allergic rhinitis,null,Phase 4 Clinical,C4,"beclomethasone dipropionate, (CFC-free), Teva",44414,25,Alvesco; Beconase; Omnaris; Qvar,25,null,Sunovion Growth Study Pediatric Subjects With Mild Asthma and Allergic Rhinitis,NCT01550471; RC#5401,West Penn Allegheny Health System Inc,86234,"MARCH    , 31, 2012",Completed
1+,null,Asthma,null,Phase 4 Clinical,C4,"ciclesonide (metered dose inhaler), Teijin/Covis/AstraZeneca",12803,25,Alvesco; Beconase; Omnaris; Qvar,25,null,Sunovion Growth Study Pediatric Subjects With Mild Asthma and Allergic Rhinitis,NCT01550471; RC#5401,West Penn Allegheny Health System Inc,86234,"MARCH    , 31, 2012",Completed
3,null,Perennial allergic rhinitis,null,Phase 1 Clinical,C1,"fluticasone furoate (nasal, allergic rhinitis), GSK",42259,30,"fluticasone furoate (nasal, allergic rhinitis), GSK; fluticasone furoate + levocabastine; levocabastine hydrochloride",30,null,A Relative Bioavailability Study of Fluticasone Furoate and Levocabastine,200284; NCT01962467,GlaxoSmithKline plc,157921,"OCTOBER  , 31, 2013",Completed
1,null,Inflammatory disease,null,Phase 3 Clinical,C3,"difluprednate (ophthalmic emulsion, ocular inflammation/pain ), Alcon",55599,120,difluprednate,120,null,Study of Difluprednate in the Treatment of Inflammation Following Ocular Surgery,NCT00616070; ST-601-003,Sirion Therapeutics Inc,21689,"DECEMBER , 31, 2007",Completed
1,Hydrocortisone,Eosinophilic esophagitis,null,Phase 3 Clinical,C3,"budesonide (orodispersible tablet, eosinophilic esophagitis), Dr Falk Pharma/Salix",106967,88,Jorveza,88,EOS-1,Budesonide Orodispersible Tablet versus Placebo in Active Eosinophilic Esophagitis,2014-001484-12; BUL-1/EEA; EOS-1; EOS-1; NCT02434029,Dr Falk Pharma GmbH,228513,"NOVEMBER , 11, 2015",Completed
1,null,Asthma,null,Phase 2 Clinical,C2,"870086 (inhaled, asthma), GlaxoSmithKline",54598,37,"870086 (inhaled, asthma), GlaxoSmithKline",37,null,A Study to Evaluate the Effect of Repeat Doses of GW-870086-X in Mild to Moderate Asthmatics,112851; NCT00945932,GlaxoSmithKline plc,59095,"JULY     , 31, 2009",Completed
1,Intraocular pressure,Age related macular degeneration,null,Phase 1/Phase 2 Clinical,C12,"triamcinolone acetonide (controlled release/intravitreal injection/Verisome, diabetic macular edema), EyePoint",60951,10,IBI-20089; Lucentis,10,20089/Combo,IBI-20089 + Lucentis Combined Intravitreal Injections for Treatment of Neovascular Age-related Macular Degeneration (AMD),20089/Combo; 2009-1067; NCT01175395,University of Illinois,68844,"SEPTEMBER, 30, 2010",Completed
1,Diastolic blood pressure; Heart rate; QRS complex; Systolic blood pressure,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,42,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",49,TRIPLE10,"A Study to Investigate the Pharmacokinetics, Safety and Tolerability of CHF-5993 pMDI in Subjects With Renal Impairment",2013-002140-91; CCD-05993AA1-10; NCT02040597; TRIPLE10,Chiesi Farmaceutici SpA,168962,"JANUARY  , 31, 2014",Completed
2,Diastolic blood pressure; Glucose; Heart rate; Hydrocortisone; Potassium; Systolic blood pressure,Asthma,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",Phase 2 Clinical,C2,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,26,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",26,null,A study to see if it is safe to give a new asthma controller drug and a new asthma reliever drug together (called fluticasone furoate/vilanterol) to 5 to 11 year old children with asthma,2012-000754-55; HZA112777,GlaxoSmithKline plc,211035,null,Status not specified
2,null,Asthma,budesonide,Phase 2a Clinical,C2A,TPI-1020,29656,27,TPI-1020,27,null,Inhaled TPI-1020 versus inhaled budesonide in smokers with mild reversible asthma,NCT00327808; TPI 1020-202,Pharmaxis Ltd,22059,"MAY      , 31, 2006",Completed
2,Creatinine; Diastolic blood pressure; Forced Vital Capacity; Forced expiratory volume; Hydrocortisone; PR interval; Peak expiratory flow rate; QRS complex; QT interval; Systolic blood pressure,Asthma,Qvar,Phase 2 Clinical,C2,"beclomethasone dipropionate, (CFC-free), Teva",44414,619,CHF-781,619,BEAM,"An 8-week, Dose Ranging Study of CHF-718 pMDI in Asthmatic Subjects",BEAM; CCD-05993AA3-01; NCT03084718,Chiesi Farmaceutici SpA,295866,"JULY     , 28, 2017",Completed
1,null,Seborrheic dermatitis,null,Phase 3 Clinical,C3,"clobetasol propionate shampoo (psoriasis), Galderma/Maruho",96680,80,GK-664-S,80,null,"A Phase III, Randomized, Double-Blind, Placebo-Controlled, Multicenter, Parallel Group Study to Evaluate Efficacy and Safety of GK-664-S in Subjects With Moderate-to-Severe Scalp Seborrheic Dermatitis",JapicCTI-184246,Maruho Co Ltd,366907,"DECEMBER , 01, 2018",Not yet recruiting
1,"Blood pressure; Body Mass Index; Body height; Diastolic blood pressure; Eyelid; Glucose; Heart rate; Hemoglobin A, glycosylated; Insulin; Intraocular pressure; Respiratory frequency; Systolic blood pressure; Total body mass; Visual acuity; Waist to Hip Ratio",Thyroid associated ophthalmopathy,null,Phase 1/Phase 2 Clinical,C12,"prednisolone (injectable liposome formulation, rheumatoid arthritis/ulcerative colitis), Enceladus",59891,20,Nanocort,20,GO Nanocort,A pilot study towards a therapy with prednisolone encapsulated liposomes for the treatment of grave's orbitopathy with reduced systemic steroid exposure,GO Nanocort; NL61298.078.17 OZR-2016-34; NTR6579,Oogziekenhuis Rotterdam,307691,"SEPTEMBER, 01, 2017",Not yet recruiting
1,null,Allergic rhinitis,null,Phase 2 Clinical,C2,"SUN-0597 (nasal, inflammatory disorders), Sun Pharma",71455,159,SPARC-1203,159,null,Safety and Efficacy of SPARC-1203 in Allergic Rhinitis,2012-001613-16; CLR_12_03; NCT01614691; SPARC_Ltd._CLR_12_03,Sun Pharmaceutical Advanced Research Co Ltd,88219,"JUNE     , 30, 2012",Completed
2,Aspartate aminotransferase; Body Mass Index; Creatine kinase; Forced Vital Capacity; Lactate dehydrogenase; Muscle strength; Total body mass,Duchenne dystrophy,prednisone,Phase 3 Clinical,C3,"deflazacort (oral tablet/suspension, Duchenne muscular dystrophy), PCT Therapeutics",86985,196,Emflaza; prednisone,196,null,"A Phase III, Randomized, Double-blind, Placebo-controlled and Active-comparator Study to Evaluate the Safety and Efficacy of Deflazacort and Prednisone in Male Patients With Duchenne Muscular Dystrophy (DMD)",MP-104-NM-001,Marathon Pharmaceuticals LLC,262577,null,Status not specified
1,null,Myalgia,null,Phase not specified,NS,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,122,lidocaine; triamcinolone acetonide,120,null,Rotator Interval and Intra-articular Corticosteroid Injection for Frozen Shoulder,IT-avdelingen; Interne tjenester; NCT00840229; REK; Rikshospitalet HF; S-08546,Rikshospitalet University Hospital,44888,"FEBRUARY , 28, 2009",Completed
3,"Body Mass Index; Forced expiratory volume in 1 s (FEV1); Pulse wave velocity; Troponin I, cardiac muscle",Chronic obstructive pulmonary disease,null,Phase 3b Clinical,C3B,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,16568,Relovair; fluticasone furoate; vilanterol,16568,SUMMIT,Study to Evaluate the Effect of Fluticasone Furoate/Vilanterol on Survival in Subjects With Chronic Obstructive Pulmonary Disease,113782; 2010-021638-72; CCRN 593 (COPD); CTRI/2012/04/002563; HZC113782; HZC113782 14824; IND IDE 077855; NCT01313676; NMRR-13-59-14824; PHRR131025-000134; SUMMIT; UKCRN 10474,GlaxoSmithKline plc,75513,"JANUARY  , 25, 2011",Completed
3,"Body Mass Index; Forced expiratory volume in 1 s (FEV1); Pulse wave velocity; Troponin I, cardiac muscle",Chronic obstructive pulmonary disease,null,Phase 3b Clinical,C3B,"fluticasone furoate + vilanterol trifenatate  (oral inhalant, asthma/COPD), GlaxoSmithKline",59060,16568,Relovair; fluticasone furoate; vilanterol,16568,SUMMIT,Study to Evaluate the Effect of Fluticasone Furoate/Vilanterol on Survival in Subjects With Chronic Obstructive Pulmonary Disease,113782; 2010-021638-72; CCRN 593 (COPD); CTRI/2012/04/002563; HZC113782; HZC113782 14824; IND IDE 077855; NCT01313676; NMRR-13-59-14824; PHRR131025-000134; SUMMIT; UKCRN 10474,GlaxoSmithKline plc,75513,"JANUARY  , 25, 2011",Completed
1,Body height; Eosinophils; Total body mass,Eosinophilic esophagitis,null,Phase 2 Clinical,C2,"budesonide (oral, eosinophilic esophagitis), Shire",60523,93,budesonide,119,null,"OBS in Adolescent and Adults With EOE: A Phase II, Randomized, Double-Blind, Placebo-Controlled Study With an Open-Label Extension",MPI-101-06; NCT01642212,Shire plc,89242,"JULY     , 31, 2012",Completed
2,null,Psoriasis,Olux,Phase 4 Clinical,C4,"clobetasol propionate foam, Connetics",18168,78,Clobex,78,null,A Comparison Between Clobetasol Propionate 0.05% (Clobex) Spray and Clobetasol Propionate 0.05% (Olux) Foam,NCT00436540; US10013,Galderma Laboratories LP,171257,"MARCH    , 31, 2006",Completed
2,null,Asthma,null,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,243,fluticasone furoate; fluticasone furoate + GW-642444,243,null,A Long-term Safety Study of Fluticasone Furoate (FF)/GW-642444 and FF in Japanese Subjects With Asthma,113989; JapicCTI-101343; NCT01244984,GlaxoSmithKline plc,72445,"JULY     , 31, 2010",Completed
2,FEV1; Peak expiratory flow rate,Asthma,fluticasone propionate,Phase 3 Clinical,C3,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,351,fluticasone furoate,351,null,Clinical Study Evaluating Safety and Efficacy of Fluticasone Furoate and Fluticasone Propionate in People With Asthma,115285; NCT01436110,GlaxoSmithKline plc,80895,"SEPTEMBER, 30, 2011",Completed
2,FEV1; Hydrocortisone; PEF,Asthma,fluticasone,Phase 2b Clinical,C2B,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,597,fluticasone furoate,593,null,A Dose-ranging Study of Fluticasone Furoate (FF),106855; 2011-003338-15; HZA106855; JapicCTI-121885; NCT01563029,GlaxoSmithKline plc,85984,"MARCH    , 28, 2012",Completed
3,Blood pressure; Diastolic blood pressure; Heart rate; Systolic blood pressure,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,18,"fluticasone furoate; fluticasone furoate + umeclidinium (asthma, DPI), GlaxoSmithKline; umeclidinium",18,null,To Investigate the Pharmacokinetics and Safety of Fluticasone Furoate (FF/Umeclidinium (UMEC) Combination Compared With FF and UMEC Monotherapies in Adult Healthy Volunteers Using a Dry Powder Inhaler (DPI),116524; NCT01725685,GlaxoSmithKline plc,97979,"NOVEMBER , 08, 2012",Completed
3,Body temperature; Diastolic blood pressure; Forced Vital Capacity; Forced expiratory volume; Forced expiratory volume; Heart rate; Hydrocortisone; Peak expiratory flow rate; Respiratory frequency; Systolic blood pressure,Asthma,null,Phase 2a Clinical,C2A,"fluticasone furoate (inhaled, respiratory disorders), GlaxoSmithKline",57097,56,budesonide; fluticasone; fluticasone furoate,56,null,"Phase IIa, AMP Challenge, Dose-Escalation Study to Assess the Dose-Response for Topical Efficacy and Systemic Activity in Asthmatic Subjects",2016-003002-14; 203162; NCT02991859,"Glaxo Group Research Ltd, GlaxoSmithKline plc",282142,"FEBRUARY , 09, 2017",Completed
3,null,Osteoarthritis,Monovisc; triamcinolone hexacetonide,Phase 3 Clinical,C3,CINGAL,103224,526,CINGAL,526,null,Study of Cingal for the Relief of Knee Osteoarthritis Compared to Triamcinolone Hexacetonide at 39 Weeks Follow-up,2017-003205-18; CINGAL 17-02; NCT03390036,Anika Therapeutics Inc,324751,"DECEMBER , 07, 2017",Completed
1,null,Retinal venous occlusion,null,Phase 1/Phase 2 Clinical,C12,"beclomethasone dipropionate (intravitreal injection), Allergan",65121,121,AGN-208397,121,null,Safety and Efficacy of AGN-208397 in the Treatment of Macular Edema Associated With Retinal Vein Occlusion (RVO),208397-001; NCT01027650,Allergan Inc,62499,"MARCH    , 31, 2010",Completed
1,null,Adrenal gland hypofunction,null,Phase 4 Clinical,C4,"dual-release hydrocortisone (oral, adrenal insufficiency), ViroPharma",58174,60,Plenadren,60,null,Optimizing Steroid Replacement in Patients With Adrenal Insufficiency,2016/09/05; NCT03282487,"Adelaide and Meath Hospital, Tallaght Regional Hospital",312737,"SEPTEMBER, 05, 2017",Recruiting
2,Anterior chamber,Pain,null,Phase 2b Clinical,C2B,"dexamethasone (EyeGate II ocular inflammation therapy, iontophoresis delivery), EyeGate/ Bausch Health",54573,101,EyeGate; dexamethasone,101,null,Iontophoretic Delivery of EGP-437 in Patients Who Have Undergone Cataract Surgery,EGP-437-009; NCT03180255,Eyegate Pharmaceuticals Inc,301426,"JULY     , 26, 2017",Completed
1,null,Uveitis,null,Phase 3 Clinical,C3,"triamcinolone acetonide (suprachoroidal, macular edema/uveitis), Clearside Biomedical",75376,38,Zuprata,38,AZALEA,Suprachoroidal Injection of CLS-TA in Subjects Non-infectious Uveitis,AZALEA; CLS1001-302; NCT03097315,Clearside Biomedical Inc,292964,"APRIL    , 01, 2017",Completed
2,Forced expiratory volume,Chronic obstructive pulmonary disease,Symbicort Turbuhaler,Phase 3 Clinical,C3,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,990,Trimbow,990,TRIVERSYTI,Active-Controlled Trial of CHF-5993 Pressurized Metered-dose Inhaler (pMDI) Versus Symbicort Turbuhaler in Patients With Chronic Obstructive Pulmonary Disease (COPD),CCD-5993AA1-14; CHINA; NCT03197818; SOUTH KOREA; TAIWAN; TRIVERSYTI,Chiesi Farmaceutici SpA,303203,"DECEMBER , 13, 2016",Recruiting
1,null,Lung malformation,null,Phase 2 Clinical,C2,"beclomethasone dipropionate, (CFC-free), Teva",44414,60,"beclometasone (inhaled, CFC-free), Teva",60,null,Inhaled Extra-Fine Hydrofluoalkane-Beclomethasone (Qvar) in Premature Infants With Bronchopulmonary Dysplasia (BPD),0110-10; NCT01373008,B'nai Zion Medical Center,78295,"JUNE     , 30, 2011",Recruiting
2,Forced expiratory volume,Asthma,Qvar,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,1204,beclomethasone dipropionate,1204,null,"A BE Study to Compare Beclomethasone Dipropionate Inhalation Aerosol, 40 microg and QVAR 40 microg, Inhalation Aerosol",AI-BDP-001; NCT03562949,Amneal Ireland Limited,343764,"OCTOBER  , 31, 2018",Not yet recruiting
1,null,Diarrhea,null,Phase 2 Clinical,C2,"budesonide (oral capsule/enema, Crohn's disease/microsopic colitis/ulcerative colitis), AstraZeneca/ Tillotts Pharma/ Perrigo",55981,9,Entocort,9,null,Budesonide for Mycophenolic Acid-induced Diarrhea in Renal Transplant Recipients,IIT-BUDESONIDE-MPA; NCT02991768; STUDY00140436,University of Kansas Medical Center,282139,"JANUARY  , 27, 2017",Terminated
2,Airway resistance; Forced Vital Capacity; Forced expiratory flow ; Forced expiratory volume; Inspiratory capacity; Lung; Specific airway conductance ,Chronic obstructive pulmonary disease,Fostair,Phase 4 Clinical,C4,"beclomethasone dipropionate + formoterol fumarate + CHF-5992 (inhaled, COPD), Chiesi",73605,24,Trimbow,24,TRIFLOW,A Study Comparing the Effects of Trimbow to Fostair in COPD,2018-003113-17; MEU 17/361; NCT03842904; TRIFLOW,Medicines Evaluation Unit,370288,"DECEMBER , 13, 2018",Recruiting
1,null,Duchenne dystrophy,null,Phase Not Applicable,PNA,vamorolone,70712,null,vamorolone,null,null,Expanded Access Protocol for Boys With Duchenne Muscular Dystrophy,NCT03863119; VBP15-EAP,ReveraGen BioPharma Inc,372311,null,Recruiting
1,null,Rhinitis,null,Phase 3b Clinical,C3B,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,77,triamcinolone acetonide,48,RhiCNANI,Efficacy and safety study of Nasacort in chronic non-allergic and non-infectious rhinitis in adults,EudraCT #: 2006-000059-16; NCT00344942; RhiCNANI; TRICA_L_00872,Sanofi SA,13146,"APRIL    , 24, 2006",Terminated
2,Forced expiratory volume; Nitric oxide,Asthma,Qvar,Phase 3 Clinical,C3,"beclomethasone dipropionate, (CFC-free), Teva",44414,1550,beclomethasone dipropionate,1550,null,A Clinical Trial to Study The Effects of Beclomethasone Dipropionate Metered Dose Inhaler in Patients With Asthma,CR176-17; CTRI/2019/02/017719,"AXIS Clinicals Limited, Aurobindo Pharma Research Center II",371803,"FEBRUARY , 28, 2019",Not yet recruiting
1,blood pressure; heart rate,Chronic obstructive pulmonary disease,null,Phase 1 Clinical,C1,AZD-5423,64294,18,AZD-5423,18,null,A Study in Healthy Subjects to Investigate Pharmacokinetics of AZD-5423 When Administered in Different Ways,D2340C00012; Eudract 2012-002307-17; NCT01635985,AstraZeneca plc,96548,"AUGUST   , 31, 2012",Completed
1,null,Lower back pain,null,Phase 1/Phase 2 Clinical,C12,"reformulated dexamethasone acetate (epidural/sustained release, low back pain), SpineThera",113006,180,SX-600,180,SALIENT,Safety and Efficacy of SX-600 Administered by Lumbosacral Transforaminal Epidural Injection for Radicular Pain,CLIN-0012-STA19-01; NCT03952377; SALIENT,"SpineThera, SpineThera Australia PTY LTD",380882,"JULY     , 31, 2019",Not yet recruiting
1,null,Pain,null,Phase 3 Clinical,C3,"dexamethasone sodium phosphate (epidural steroid injectable gel, sciatia), Scilex Holding",106609,400,SP-102,400,CLEAR,Corticosteroid Lumbar Epidural Analgesia for Radiculopathy,CLEAR; NCT03372161; SP-102-02,Semnur Pharmaceuticals Inc,322493,"DECEMBER , 08, 2017",Recruiting
2,Forced expiratory volume; Peak expiratory flow rate,Asthma,null,Phase 3 Clinical,C3,"salmeterol xinafoate + fluticasone propionate (inhaled/Spiromax, asthma), Teva",95991,841,Aerivio Spiromax; fluticasone propionate RespiClick,841,null,Study of Fluticasone Propionate Multidose Dry Powder Inhaler Compared With Fluticasone Propionate/Salmeterol Multidose Dry Powder Inhaler,2016-003835-39; FSS-AS-30003; NCT02980133,Teva Pharmaceutical Industries Ltd,281056,"DECEMBER , 16, 2016",Completed
2,null,null,null,Phase 1 Clinical,C1,"beclomethasone dipropionate  (waterless nasal spray, allergic rhinitis), Teva",76229,30,"Qnaze; beclometasone (inhaled, CFC-free), Teva",30,null,Clinical Study to Evaluate the Pharmacokinetics and Safety of BDP HFA Nasal Aerosol,BDP-AR-101; NCT01537692,Teva Pharmaceutical Industries Ltd,85132,"MARCH    , 31, 2009",Completed
1,Blood pressure; Eye pressure; HbA1C,null,null,Phase 2 Clinical,C2,"triamcinolone acetonide (nasal spray, allergic rhinitis), Sanofi",12937,10,triamcinolone acetonide,10,null,Triamcinolone Acetonide Injections to Treat Diabetic Macular Edema,05-EI-0251; 050251; NCT00231023,National Eye Institute,166130,"SEPTEMBER, 30, 2005",Completed
2,null,null,"gatifloxacin (ophthalmic), Allergan; prednisolone acetate",Phase 3 Clinical,C3,"gatifloxacin + prednisolone acetate (ophthalmic, bacterial infection/inflammation), Allergan",79969,101,"gatifloxacin + prednisolone acetate (ophthalmic, bacterial infection/inflammation), Allergan",101,null,Non-Inferiority of Gatifloxacin/Prednisolone Association Versus Isolated Administration in Prevention of Ocular Infection/Inflammation,AG9890X-001; NCT01218737,Federal University of Sao Paulo,89902,"JANUARY  , 31, 2009",Completed
2,null,null,Rectabul,Phase 1 Clinical,C1,"budesonide (rectal foam, ulcerative colitis), Dr Falk Pharma/Salix/Ajinomoto/EA Pharma/Kissei/Meda",59670,null,budesonide,null,null,Bioequivalence Study of Budesonide Rectal Aerosol Foam and Uceris Rectal Aerosol Foam,NCT02800824; PRG-NY-16-007,Perrigo Co Ltd,263269,null,Completed</ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.AnalysisCsvResponse>