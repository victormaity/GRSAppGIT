<?xml version="1.0" ?><ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.QueryCsvResponse xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns2="local" xsi:type="xs:base64Binary">ArmCount,Biomarkers,Condition,Controls,DevStatus,DevStatusId,Drug,DrugId,EnrollmentCount,Interventions,Patients,ProtocolAcronym,ProtocolTitle,Reference,Sponsor,TrialId,TrialStartDate,TrialStatus
1,null,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,60,ID93,60,null,Phase IIa ID93 + GLA-SE Vaccine Trial in TB Patients After Treatment Completion,IDRI-TBVPX-203; NCT02465216,Infectious Disease Research Institute,231367,"JUNE     , 30, 2015",Completed
1,T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,"lamivudine + abacavir + zidovudine, GSK",26574,70,lamivudine + abacavir + zidovudine,70,THIRST,Tuberculosis and HIV Immune Reconstitution Syndrome Trial (THIRST),NCT00851630; Pro00013131; THIRST,Duke University,47398,"JUNE     , 30, 2004",Completed
2,null,Mycobacterium tuberculosis infection,rifampicin,Phase 2a Clinical,C2A,SQ-109,31010,90,SQ109,90,SQ109EBA,EBA of SQ-109 in Adult Subjects with Pulmonary TB,20100606; LMU-IMPH-SQ109-01; NCT01218217; PACTR201009000252144; SQ109EBA,Ludwig-Maximilians University of Munich,71188,"NOVEMBER , 30, 2010",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,midazolam hydrochloride,44303,37,midazolam; rifapentine,37,TBTC S29B,"Pharmacokinetics, Safety and Tolerability of Escalating Rifapentine Doses in Healthy Volunteers",CDC-NCHHSTP-5779; NCT01162486; TBTC S29B; TBTC S29B,Johns Hopkins University,68204,"APRIL    , 30, 2010",Completed
1,Alanine transaminase; Aspartate aminotransferase; Blood platelets; Body temperature; CD40 ligand; Creatinine; Erythrocytes; Hemoglobin; Interferon gamma; Interleukin-2; Leukocyte count; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,240,M-72,240,null,Safety and Immunogenicity Study of a Candidate Tuberculosis Vaccine in HIV-positive Adults,113935; NCT01262976,GlaxoSmithKline plc,73200,"JANUARY  , 17, 2011",Completed
3+,C-reactive protein,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,atorvastatin,2807,null,"atorvastatin; dexamethasone; dexamethasone (decadron); once-daily naproxen (oral controlled release, pain), Alvogen; once-daily naproxen (oral controlled release, pain), Alvogen",null,null,Paradoxical Tuberculosis Immune Reconstitution Inflammatory Syndrome (TB-IRIS) Treatment Trial,NCT01442428; WS967180,University of Minnesota - Clinical and Translational Science Institute,199754,"JANUARY  , 31, 2014",Terminated
1,Ag85B; CD4+; CD8+; IFN-alpha; IFN-gamma; IL-2; PPD,Mycobacterium tuberculosis infection,null,Phase 1b Clinical,C1B,VPM-1002,55569,24,VPM-1-002,24,null,Dose-Escalation Study on Safety and Immunogenicity of VPM-1-002 in Comparison to BCG in Healthy Volunteers in South Africa,DOH-27-0210-3083; NCT01113281; VPM1002-ZA-1.10TB,Vakzine Projekt Management GmbH,65984,"APRIL    , 30, 2010",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,moxifloxacin,12978,216,ethambutol; isoniazid; moxifloxacin; pyrazinamide; pyridoxine; rifampin; rifapentine,121,null,Rifapentine Plus Moxifloxacin for Treatment of Pulmonary Tuberculosis,06-0018; NCT00728507,Johns Hopkins University,23035,"NOVEMBER , 30, 2009",Terminated
2+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,efavirenz,10172,null,efavirenz; rifabutin,null,USPHS-23,Intensive Pharmacokinetics of the Nelfinavir-Rifabutin Interaction in Patients With HIV-Related Tuberculosis Treated With a Rifabutin-Based Regimen,NCRR-M01RR00030-0162; NCT00018083; USPHS-23,National Institutes of Health,10648,"JULY     , 02, 2001",Recruiting
4,T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,efavirenz,10172,809,efavirenz; emtricitabine; tenofovir disoproxil fumarate; tenofovir disoproxil fumarate + emtricitabine,780,STRIDE,Immediate Versus Deferred Start of Anti-HIV Therapy in HIV Infected Adults Being Treated for Tuberculosis,1U01AI068636; ACTG A5221; ACTG A5221; NCT00108862; STRIDE,AIDS Clinical Trials Group,10681,"AUGUST   , 31, 2006",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,12,MVA85A,12,null,A Phase I Study of the Safety and Immunogenicity of MVA85A in Healthy Gambian Volunteers,AFTBVAC; NCT00423839,University of Oxford,10872,"MARCH    , 31, 2003",Completed
2,QT interval,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,bedaquiline,51310,241,bedaquiline; bedaquiline; clofazimine,233,null,"To Evaluate the Safety, Tolerability, and Efficacy of TMC-207 as Part of an Individualized Multi-Drug Resistant Tuberculosis (MDR-TB) Treatment Regimen in Participants With Sputum Smear-Positive Pulmonary MDR-TB",2008-008444-25; CR012352; NCT00910871; NCT00980811; TMC207-TiDP13-C209,Johnson & Johnson,56974,"SEPTEMBER, 30, 2009",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"tenofovir disoproxil fumarate + emtricitabine + efavirenz, Gilead/BMS/Merck & Co",50038,30,tenofovir disoproxil fumarate + emtricitabine + efavirenz,30,PETE,Pharmacokinetics of Emtricitabine/Tenofovir + Efavirenz in HIV-Infected Patients With Tuberculosis,NCT00474435; PETE; UMCN-AKF 04.03,Poverty Related Infection Oriented Research,10945,"NOVEMBER , 30, 2008",Recruiting
1+,BMI; Complete blood count; Erythrocyte sedimentation rate; Fasting blood glucose; Height; Hemoglobin; Serum albumin; Serum uric acid; Total body mass; Weight,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,nevirapine,3700,135,"efavirenz; lamivudine + zidovudine, GlaxoSmithKline; nevirapine; rifampicin",135,"NVP",Efficacy and Safety of Concomitant Use of Nevirapine and Rifampicin With HIV-TB,"NVP"; NCT01805258; SKS/NACO-1/2006-07,All India Institute of Medical Sciences,114300,"JUNE     , 30, 2007",Completed
1+,Alanine transaminase; Aspartate aminotransferase; QT interval,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyraziminide; rifampicin,Phase 2b Clinical,C2B,moxifloxacin,12978,240,bedaquiline; moxifloxacin; pretomanid; pyraziminide,240,null,"A Phase II to Evaluate the Efficacy, Safety and Tolerability of Combinations of Bedaquiline, Moxifloxacin, PA-824 and Pyrazinamide in Adult Subjects With Drug-Sensitive or Multi Drug-Resistant Pulmonary Tuberculosis",NC-005; NC-005-(J-M-PA-Z); NCT02193776,TB Alliance,210646,"OCTOBER  , 23, 2014",Completed
3+,Alanine transaminase; Blood platelets; Body temperature; CD40 ligand; Creatinine; Cytotoxic T-Lymphocytes; Hemoglobin; Interferon gamma; Interleukin-2; Leukocyte count; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,Menjugate; Polio Sabin; Prevnar; Tritanrix HB,Phase 2 Clinical,C2,"meningococcal C/CRM-197 conjugate vaccine, Chiron",3612,302,GSK-692342; GSK-692342a; Polio Sabin; Prevnar; Tritanrix HB,302,null,Safety and Immunogenicity Study of a Candidate Tuberculosis Vaccine in Healthy Infants,112899; 2012-004380-44; NCT01098474; TUBERCULOSIS-013 PRI,GlaxoSmithKline plc,65639,"JULY     , 31, 2010",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,48,BCG; BCG; MVA-85A,48,null,"A BCG Challenge Model Study to Assess Anti-mycobacterial Immunity Induced by BCG and a Candidate TB Vaccine, MVA-85A",NCT01194180; TB023,University of Oxford,69926,"MAY      , 31, 2010",Completed
6,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,lopinavir + ritonavir,14681,200,ethambutol; isoniazid; lopinavir + ritonavir; nevirapine; pyrazinamide; rifampicin,39,DATiC,Optimal Dosing of First-Line Antituberculosis and Antiretroviral Drugs in Children (a Pharmacokinetic Study),DATiC; DATiC; NCT01637558,University of Cape Town,89135,"NOVEMBER , 30, 2012",Completed
1,Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-17A; Interleukin-2; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,MVA-85A,55317,650,MVA-85A,650,null,"Efficacy Against TB Disease, Safety, and Immunogenicity of MVA-85A/AERAS-485 in HIV-Infected Adults",C-030-485; NCT01151189,Aeras Global TB Vaccine Foundation,67841,"JULY     , 31, 2011",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,raltegravir,54488,140,Aluvia; raltegravir; rifabutin,140,null,EARNEST Rifabutin Pharmacokinetics (PK) Substudy,ISRCTN13074752; NCT01663168,"Joint Clinical Research Centre, Medical Research Council",90175,"MAY      , 03, 2012",Completed
5,Body Mass Index; C-reactive protein; MDR1; N-acetyltransferase  (NAT2); Solute carrier organic anion transporter family member 1B1; Total body mass; UDP-galactose translocator,Mycobacterium tuberculosis infection,isoniazid,Phase 2 Clinical,C2,moxifloxacin,12978,72,moxifloxacin; moxifloxacin; rifampin,72,TBTC-27/28 PK,TBTC Study 27/28 PK: Moxifloxacin Pharmacokinetics During TB Treatment,CDC-NCHSTP-4222; NCT00164463; TBTC-27/28 PK,Centers for Disease Control and Prevention,10847,"JULY     , 31, 2004",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"thalidomide, Celgene",8050,50,"thalidomide, Celgene",50,null,"Phase II, Placebo-Controlled Study of Thalidomide in Patients With Mycobacterial and HIV Infections",199/11682; NCT00004276; RU-0300395,National Center for Research Resources,92426,"SEPTEMBER, 30, 1990",Completed
1,HIV negative; T-Helper Lymphocytes; T-Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,SSI H56-IC31,74849,98,SSI H56-IC31,98,null,A Phase I/IIa Safety And Immunogenicity of AERAS-456 in HIV-Negative Adults With And Without Latent Tuberculosis Infection,C-035-456; NCT01865487,Aeras Global TB Vaccine Foundation,136263,"AUGUST   , 31, 2013",Completed
5,null,Mycobacterium tuberculosis infection,antiretroviral therapy; optimized background regimen therapy,Phase 3 Clinical,C3,delamanid,16545,511,antiretroviral therapy; delamanid; optimized background regimen therapy,511,null,Safety and Efficacy Trial of Delamanid for 6 Months in Participants With Multidrug Resistant Tuberculosis,2010-022271-59; 242-09-213; NCT01424670,Otsuka Pharmaceutical Development and Commercialization Inc,80386,"SEPTEMBER, 02, 2011",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,levofloxacin,3492,182,levofloxacin; moxifloxacin,182,null,Comparison of the Effect Between Levofloxacin and Moxifloxacin Among MDR-TB Patients,H-0911-068-301; NCT01055145,Seoul National University Hospital,63801,"MARCH    , 31, 2010",Terminated
2+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,nevirapine,3700,150,efavirenz; ethambutol; isoniazid; lamivudine; nevirapine; pyrazinamide; rifampicin; zidovudine,355,null,"Efficacy of Thrice Weekly Directly Observed Treatment, Short-course (DOTS) in HIV-associated Tuberculosis",NCT00698334; SKS/NACO/2006,All India Institute of Medical Sciences,161275,"APRIL    , 30, 2006",Completed
4,T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,emtricitabine,4728,809,efavirenz; emtricitabine; tenofovir disoproxil fumarate; tenofovir disoproxil fumarate + emtricitabine,780,STRIDE,Immediate Versus Deferred Start of Anti-HIV Therapy in HIV Infected Adults Being Treated for Tuberculosis,1U01AI068636; ACTG A5221; ACTG A5221; NCT00108862; STRIDE,AIDS Clinical Trials Group,10681,"AUGUST   , 31, 2006",Completed
4+,null,Mycobacterium tuberculosis infection,Rifafour e,Phase 2 Clinical,C2,bedaquiline,51310,105,PA-824; TMC-207; clofazimine; clofazimine; pyrazinamide; pyrazinamide,105,NC-003,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis With Clofazimine (C)-TMC-207 (J)-PA-824 (Pa)-Pyrazinamide (Z),NC-003; NC-003-(C-J-Pa-Z); NCT01691534,TB Alliance,92275,"OCTOBER  , 31, 2012",Completed
1+,BMI; Complete blood count; Erythrocyte sedimentation rate; Fasting blood glucose; Height; Hemoglobin; Serum albumin; Serum uric acid; Total body mass; Weight,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,efavirenz,10172,135,"efavirenz; lamivudine + zidovudine, GlaxoSmithKline; nevirapine; rifampicin",135,"NVP",Efficacy and Safety of Concomitant Use of Nevirapine and Rifampicin With HIV-TB,"NVP"; NCT01805258; SKS/NACO-1/2006-07,All India Institute of Medical Sciences,114300,"JUNE     , 30, 2007",Completed
1+,Anti-Meningitis C antibodies; C-C motif chemokine 2; C-C motif chemokine 3; C-C motif chemokine 4; Cytokines; IgG; Interferon gamma; Interferon-alpha; Interleukin-1 alpha; Interleukin-1 beta; Interleukin-10; Interleukin-12; Interleukin-13; Interleukin-2; Interleukin-6,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,NeisVac-C,10774,28,BCG; Infanrix; Menitorix; NeisVac-C; Pentacel; Prevnar 13; Priorix; Rotarix,28,BAM,A Study of the Interaction Between BCG And MenC Immunization,2013-003488-71; BAM; NCT02002156; OVG-2013/04; UKCRN 15722,University of Oxford,162886,"JUNE     , 20, 2014",Completed
1+,null,Mycobacterium tuberculosis infection,TMC-207; isoniazid; pyrazinamide,Phase 2a Clinical,C2A,bedaquiline,51310,60,TMC-207; isoniazid; pyrazinamide; rifampicin,60,null,"An Open-Label Study to Evaluate the Extended Early Bactericidal Activity, Safety, Tolerability and Pharmacokinetics of Multiple Doses (md) of TMC-207 Oral Solution (Os) and Isoniazid (JH), TMC-207 Os and Pyrazinamide (JZ), TMC-207 Os and Rifampin (JR) or TMC-207 Os and Isoniazid and Pyrazinamide (JHZ), Compared to the three Principle Drugs of Standard Anti-Tuberculosis Treatment (HRZ) in Treatment-Naive Subjects With Sputum-Smear Positive Pulmonary Tuberculosis",EudraCT 2004-005142-12; TMC207-C203,Janssen R&D (Ireland),131253,"JUNE     , 25, 2005",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,ritonavir,7310,20,indinavir; ritonavir,20,null,The Pharmacokinetics and Safety of indinavir/ritonavir With NRTIs in HIV/TB co-Infected Patients Receiving Rifampicin,HIV-NAT 044; NCT00411996,The HIV Netherlands Australia Thailand Research Collaboration,10871,"DECEMBER , 31, 2006",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,moxifloxacin,12978,69,ethambutol; isoniazid; moxifloxacin; pyrazinamide; rifampicin,69,null,Essentiality of INH in TB Therapy,1U01AI068636; ACTG A5307; NCT01589497,AIDS Clinical Trials Group,87091,"JUNE     , 30, 2015",Completed
2,null,Mycobacterium tuberculosis infection,isoniazid; rifampicin,Phase 3 Clinical,C3,rifapentine,15102,1000,isoniazid; rifapentine,1004,TBTC-22,TBTC Study 22: Efficacy of Once-Weekly Rifapentine and Isoniazid in Treatment of Tuberculosis,CDC-NCHSTP-1427; NCT00023335; TBTC Study 22; TBTC-22,Centers for Disease Control and Prevention,10650,"APRIL    , 30, 1995",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,stavudine,4481,44,lamivudine; nelfinavir mesylate; rifabutin; stavudine; zidovudine,44,null,Effectiveness of Anti-HIV Therapy (HAART) in HIV-Infected Patients With Tuberculosis,AACTG A5062; ACTG A5062; NCT00004736,National Institute of Allergy and Infectious Diseases,10646,"FEBRUARY , 25, 2000",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,lamivudine,3474,44,lamivudine; nelfinavir mesylate; rifabutin; stavudine; zidovudine,44,null,Effectiveness of Anti-HIV Therapy (HAART) in HIV-Infected Patients With Tuberculosis,AACTG A5062; ACTG A5062; NCT00004736,National Institute of Allergy and Infectious Diseases,10646,"FEBRUARY , 25, 2000",Completed
1+,CD4 + cell,Mycobacterium tuberculosis infection,null,Phase not specified,NS,efavirenz,10172,63,"efavirenz; isoniazid; tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",63,null,Simultaneous Versus Sequential Antiretroviral Therapy (ARV) Therapy and Mycobacterium Tuberculosis (MTB) Treatment,C43-06; NCT00737724,Instituto Nacional de Enfermedades Respiratorias,169697,"MARCH    , 31, 2008",Terminated
4,CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,stavudine,4481,142,efavirenz; nevirapine,145,N2R,Efavirenz-Based Versus Nevirapine-Based Antiretroviral Therapy Among HIV-Infected Patients Receiving Rifampin,210041000824904203; N2R; NCT00483054,Bamrasnaradura Infectious Diseases Institute,10947,"JANUARY  , 31, 2007",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,37,MVA-85A,37,null,"Study Evaluating Aerosol and Intradermal Administration of a Candidate Tuberculosis (TB) Vaccine, MVA-85A, as a Way to Increase Immune Response and Avoid Anti-Vector Immunity",13/SC/0329; 15209; 2013-002020-16; ISRCTN08234512; NCT01954563; TB035; UKCRN 15209,University of Oxford,156675,"OCTOBER  , 31, 2013",Completed
2,Lung,Mycobacterium tuberculosis infection,rifampin,Phase 2 Clinical,C2,rifapentine,15102,60,rifapentine,60,TBTC-29PK,"High-Dose Rifapentine Pharmacokinetics, Tolerability and Safety Dosage Rifapentine for Treatment of Tuberculosis",NCT01043575; TBTC Study 29PK; TBTC-29PK,Centers for Disease Control and Prevention,63261,"APRIL    , 30, 2009",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifabutin,4229,10,abacavir; lamivudine; raltegravir,10,null,Raltegravir + ABC/3TC in HIV/TB Co-Infected Patients,NCT01059422; RAL/ABC/3TC - HIV/TB,Central Research Institute of Epidemiology,63729,"OCTOBER  , 31, 2010",Recruiting
1,Cytokines,Mycobacterium tuberculosis infection,null,Phase 0 Clinical,C0,"BCG vaccine, Organon",13624,10,TiceBCG,10,null,Leukapheresis Sampling for Immune Responses After BCG Vaccination in BCG-naive Healthy Adults in the US,A-046; NCT02413502,Aeras Global TB Vaccine Foundation,227341,"MAY      , 31, 2015",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,meloxicam,3610,200,meloxicam,200,null,TB-IRIS NSAID Cox-2 Inhibitor Prevention Trial,NCT02060006; PRO13060453,University of Stellenbosch,172626,"APRIL    , 30, 2014",Recruiting
1+,CD4+,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,lamivudine,3474,180,didanosine; efavirenz; efavirenz +  didanosine + lamivudine; ethambutol; ethambutol + isoniazid + rifampicin + pyrazinamide; isoniazid; isoniazid + rifampicin; lamivudine; nevirapine; nevirapine + didanosine + lamivudine; pyrazinamide; rifampicin,116,null,Safety and Efficacy of Two Once Daily Anti Retroviral Treatment Regimens Along With Anti-Tuberculosis Treatment,NCT00332306; trc23,Tuberculosis Research Centre,10863,"JUNE     , 30, 2006",Suspended
1,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,181,GSK-692342,181,null,Safety and Immunogenicity Study of GSK Biologicals Tuberculosis Vaccines (692342) in Healthy Adults,110345; NCT00621322,GlaxoSmithKline plc,11263,"APRIL    , 30, 2008",Completed
2+,Hepatitis B large envelope protein; Hepatitis B virus external core antigen; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,"tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",49219,2073,"efavirenz; isoniazid; lopinavir + ritonavir; tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",1107,TEMPRANO,Early Antiretroviral Treatment and/or Early Isoniazid Prophylaxis Against Tuberculosis in HIV-Infected Adults,ANRS 12136 TEMPRANO; NCT00495651; TEMPRANO,French National Agency for Research on AIDS and Viral Hepatitis,195741,"MARCH    , 31, 2008",Completed
1,Arylamine N-acetyltransferase 2; Solute carrier organic anion transporter family member 1B1,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifapentine,15102,null,isoniazid; rifapentine,null,null,Pharmacokinetics of rifapentine and isoniazid and NAT2 and SLCO1B1 polymorphisms in pediatric Thai patients with latent tuberculosis infection,TCTR20190423002,Chulalongkorn University,379095,"JUNE     , 01, 2019",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,rifapentine,15102,2516,ethambutol; isoniazid; moxifloxacin; pyrazinamide; pyridoxine; rifampin; rifapentine,2516,null,Rifapentine-containing Tuberculosis Treatment Shortening Regimens,6655; ACTG Study A5349; CTRI/2017/09/009772; NCT02410772; S31/A5349; TBTC Study 31,Centers for Disease Control and Prevention,226815,"JANUARY  , 25, 2016",No longer recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,rifapentine,15102,566,isoniazid; rifapentine,566,null,Efficacy of Weekly Rifapentine and Isoniazid for Tuberculosis Prevention,81373064; NCT02430259,Huashan Hospital,228560,"MARCH    , 31, 2015",Recruiting
1+,BMI; Complete blood count; Erythrocyte sedimentation rate; Fasting blood glucose; Height; Hemoglobin; Serum albumin; Serum uric acid; Total body mass; Weight,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,"lamivudine + zidovudine, GlaxoSmithKline",16696,135,"efavirenz; lamivudine + zidovudine, GlaxoSmithKline; nevirapine; rifampicin",135,"NVP",Efficacy and Safety of Concomitant Use of Nevirapine and Rifampicin With HIV-TB,"NVP"; NCT01805258; SKS/NACO-1/2006-07,All India Institute of Medical Sciences,114300,"JUNE     , 30, 2007",Completed
1+,Blood platelets; Cytochrome P450 2B6,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,"tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",49219,35,efavirenz; lamivudine+ zidovudine; rifampicin + isoniazid (Rifinah); tenofovir disoproxil fumarate + emtricitabine; tenofovir+ lamivudine,26,null,Pharmacokinetics of Efavirenz in the Presence of Rifampicin and Isoniazid,2014-002608-26; NCT02832778; SSAT062,St Stephens Aids Trust,265766,"OCTOBER  , 21, 2016",Recruiting
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2/Phase 3 Clinical,C23,rifapentine,15102,900,bedaquiline; clofazimine; ethambutol; isoniazid; levofloxacin; linezolid; pyrazinamide; rifampicin; rifapentine,900,TRUNCATE-TB,A 2 Month Regimens Using Novel Combinations to Augment Treatment Effectiveness for Drug-Sensitive Tuberculosis,2016-CT0376; NCT03474198; PHRR170327-001522; TRUNCATE-TB; TRUNCATE-TB,"Syneos Health Inc, University College London",333435,"MARCH    , 21, 2018",Recruiting
2+,4 beta-Hydroxycholesterol/Cholesterol ratio,Mycobacterium tuberculosis infection,Lamprene; ethambutol (Myambutol); isoniazid (Nydrazid); kanamycin (Kantrex); moxifloxacin; prothionamide (Peteha); pyrazinamide (Zinamide),Phase 3 Clinical,C3,levofloxacin,3492,530,Lamprene; Regimen A locally-used WHO-approved MDR-TB regimen; bedaquiline; ethambutol (Myambutol); isoniazid (Nydrazid); kanamycin (Kantrex); levofloxacin; moxifloxacin; prothionamide (Peteha); pyrazinamide (Zinamide),530,STREAM,The Evaluation of a Standard Treatment Regimen of Anti-Tuberculosis Drugs for Patients With MDR-TB,18148631; 78372190; 78372190/18148631 (Stage 1/2); CTRI/2017/09/009693; ISRCTN78372190; NCT02409290; STREAM,International Union Against Tuberculosis and Lung Diseases,228190,"APRIL    , 30, 2016",Recruiting
6+,Chemokines; Cytokines,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,moxifloxacin,12978,262,ethambutol; ethambutol; isonizaid; isonizaid; moxifloxacin; moxifloxacin; pyrazindamide; pyrazindamide; rifampicin; rifampicin,262,null,NexGen EBA Radiological and Immunological Biomarkers of Sterilizing Drug Activity in Tuberculosis,15-I-N070; 999915070; NCT02371681,National Institute of Allergy and Infectious Diseases,222933,"FEBRUARY , 25, 2015",Completed
2+,null,Mycobacterium tuberculosis infection,kanamycin; moxifloxacin,Phase 2/Phase 3 Clinical,C23,levofloxacin,3492,300,bedaqualine; ethionamide; isoniazid; levofloxacin; linezolid; pyrazinamide; terizidone,300,NEXT,An Open-label RCT to Evaluate a New Treatment Regimen for Patients With Multidrug-resistant Tuberculosis,NCT02454205; NEXT; NEXT-5001,University of Cape Town,230529,"OCTOBER  , 31, 2015",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifapentine,15102,1500,isoniazid; rifapentine,1500,null,"Latent Mycobacterium tuberculosis infection treatment among individuals with a history of prior tuberculosis: a randomized, controlled trial",ChiCTR1800018224,Chinese Academy of Medical Sciences & Peking Union Medical College,352729,"SEPTEMBER, 01, 2018",Recruiting
2+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampin,Phase 2 Clinical,C2,nitazoxanide,11089,30,ethambutol; isoniazid; nitazoxanide; pyrazinamide; rifampin,30,null,A 14-Day Early Bactericidal Activity Study of Nitazoxanide for the Treatment of Tuberculosis,NCT02684240; NZT001,Weill Medical College of Cornell University,253491,"FEBRUARY , 29, 2016",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,levofloxacin,3492,1556,levofloxacin,1556,TB-CHAMP trial,Tuberculosis child multidrug-resistant preventive therapy,ISRCTN92634082; MR/M007340/1; TB-CHAMP trial,University of Stellenbosch,259562,"JANUARY  , 01, 2016",No longer recruiting
1+,QT interval,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,moxifloxacin,12978,630,Lamprene; bedaquiline; linezolid; moxifloxacin; pretomanid,630,TB-PRACTECAL,Pragmatic Clinical Trial for a More Effective Concise and Less Toxic MDR-TB Treatment Regimen(s),1541; NCT02589782; TB-PRACTECAL,Medecins Sans Frontieres,244304,"JANUARY  , 31, 2017",Recruiting
4,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,didanosine,2935,592,didanosine; efavirenz; lamivudine; standard TB therapy,592,null,Effectiveness of Directly Observed Therapy in Combined HIV and Tuberculosis Treatment in Resource-Limited Settings,CAPRISA 001; CAPRISA START; CIPRA; NCT00091936; START,National Institute of Allergy and Infectious Diseases,8820,"AUGUST   , 31, 2009",Completed
3+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,moxifloxacin,12978,null,clarithromycin; levofloxacin; moxifloxacin; moxifloxacin; rifabutin,null,null,The research of new regimen for multidrug-resistant tuberculosis treatment,ChiCTR-IOR-15007291,"Beijing Chest Hospital, Beijing Tuberculosis & Thoracic Tumor Research Institute, Capital Medical University",244777,"OCTOBER  , 01, 2008",No longer recruiting
1+,T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,lamivudine,3474,230,Viread; efavirenz; ethambutol; isoniazid; lamivudine; pyrazinamide; rifabutin; zidovudine,230,RRHT,Rifampicin versus Rifabutin in HIV/AIDS Patients Combined With Tuberculosis,2017ZX10202101-002; NCT03478033; RRHT,Shanghai Public Health Clinical Center,334027,"APRIL    , 15, 2018",Recruiting
2,null,Mycobacterium tuberculosis infection,Avelox,Phase 4 Clinical,C4,moxifloxacin,12978,32,"moxifloxacin, Synthesis",32,null,"Open-label, randomized, crossover study of the comparative pharmacokinetics and bioequivalence of drugs moxifloxacin film-coated tablets 400 mg (JSC ""Synthesis"", Russia) and Avelox tablets, film-coated 400 mg (Bayer Pharma AG, Germany) in healthy volunteers on an empty stomach",21092015-MoxSin-001,Joint Stock Company Kurganskoye medicines and medical products" Synthesis,255583,"MARCH    , 04, 2016",Status not specified
2,null,Mycobacterium tuberculosis infection,Avelox,Phase not specified,NS,moxifloxacin,12978,42,"moxifloxacin, Pharmasyntez",42,null,"Open, randomized, crossover study of comparative pharmacokinetics and bioequivalence of drugs Moxifloxacin tablets, film-coated, 400 mg (JSC ""Pharmasyntez"", Russia) and Avelox tablets, film-coated, 400 mg (""Bayer Pharma AG"", Germany)",P03 / 2015,Pharmasyntez,247038,"NOVEMBER , 23, 2015",Status not specified
1,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,Perchlozone,87251,120,Perchlozone,120,null,"An Open, Prospective, Comparative, Randomized, Controlled Clinical Trial Of Efficacy And Safety Perhlozone Capsules (JSC 'Pharmasyntez', Russia), Used In Doses Of 9.5 And 12.5 mg/kg Night In The Complex Treatment Of Pulmonary Tuberculosis",PERHL-02-2012,Pharmasyntez,169098,"JANUARY  , 28, 2013",Status not specified
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2b Clinical,C2B,metformin hydrochloride,6050,316,ethambutol; isoniazid; metformin; pyrazinamide; rifampicin,316,null,Metformin in tuberculosis,CTRI/2018/01/011176; Version 1.0,"Open Source Pharma Foundation, Tuberculosis Research Centre",325158,"NOVEMBER , 01, 2018",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,pravastatin,4155,40,ethambutol; isoniazid; pravastatin; pyrazinamide; rifampin,40,StAT-TB,Statin Adjunctive Therapy for TB,IRB00145353; NCT03456102; StAT-TB,Johns Hopkins University,331728,"AUGUST   , 15, 2019",Not yet recruiting
1,Cytokines; T-Lymphocytes,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,Ad5Ag85A,71323,28,Ad5Ag85A,28,null,Phase I Clinical Trial of the Safety and Immunogenicity of an Adenovirus-based TB Vaccine Administered by Aerosol,M002; NCT02337270,McMaster University,219950,"SEPTEMBER, 05, 2017",Recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,bedaquiline,51310,60,background regimen therapy; bedaquiline,60,null,Pharmacokinetic Study to Evaluate Anti-Mycobacterial Activity of TMC-207 in Combination With Background Regimen (BR) of Multidrug Resistant Tuberculosis (MDR-TB) Medications for Treatment of Children/Adolescents Pulmonary MDR-TB,2014-003372-23; 2016-CT0355; CR106371; CTRI/2018/03/012637; NCT02354014; PHRR160801-001314; TMC207-C211; TMC207-TIDP59-C211,"Janssen Research & Development LLC, Janssen-Cilag International NV (BE), Quintiles Philippines, Inc",221523,"MAY      , 03, 2016",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,rifabutin,4229,30,lopinavir+ritonavir; rifabutin,30,RIFLOPI,Rifabutin With Lopinavir/ritonavir in Patients Coinfected With Tuberculosis and HIV in Burkina Faso,PACTR201310000629390; RIFLOPI,"Institut de Recherche en Sciences de la Sante (IRSS), Burkina Faso",161441,"NOVEMBER , 28, 2013",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,gatifloxacin; levofloxacin; moxifloxacin; p-aminosalycilic acid; prothionamide,Phase 4 Clinical,C4,levofloxacin,3492,320,clofazimine; gatifloxacin; levofloxacin; moxifloxacin; p-aminosalycilic acid; prothionamide,140,null,"Multicenter, controlled clinical study of the safety, tolerability and efficacy of clofazimine in the treatment of drug-resistant tuberculosis",ChiCTR1800014800,Beijing Chest Hospital,328802,"DECEMBER , 01, 2009",No longer recruiting
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2/Phase 3 Clinical,C23,levofloxacin,3492,900,bedaquiline; clofazimine; ethambutol; isoniazid; levofloxacin; linezolid; pyrazinamide; rifampicin; rifapentine,900,TRUNCATE-TB,A 2 Month Regimens Using Novel Combinations to Augment Treatment Effectiveness for Drug-Sensitive Tuberculosis,2016-CT0376; NCT03474198; PHRR170327-001522; TRUNCATE-TB; TRUNCATE-TB,"Syneos Health Inc, University College London",333435,"MARCH    , 21, 2018",Recruiting
2,null,Mycobacterium tuberculosis infection,Rifafour e-275,Phase 2a Clinical,C2A,pretomanid,13323,69,PA-824,69,null,Phase IIa Evaluation of Early Bactericidal Activity of PA-824 in Pulmonary Tuberculosis,NCT00567840; PA-824-CL-007,TB Alliance,9381,"AUGUST   , 31, 2007",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,pretomanid,13323,6,PA-824,6,CL-004,"A Study of the Safety, Tolerability, and Absorption, Metabolism, and Excretion of PA-824 in Healthy Adult Male Subjects",CL-004; NCT03202693; PA 824-CL-004,TB Alliance,303299,"MARCH    , 31, 2006",Completed
2,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Calcium; Carbon dioxide; Chlorides; Creatine kinase; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; Glucose; Heart rate; Hematocrit; Hemoglobin; Leukocyte count; Lymphocytes; Mean corpuscular hemoglobin; Mean corpuscular volume; Monocytes; Neutrophils; Potassium; Reticulocytes; Sodium; Systolic blood pressure; Urea; gamma-Glutamyltransferase,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,rifabutin,4229,15,cabotegravir; cabotegravir; rifabutin,15,null,Effect of Rifabutin on the Pharmacokinetics of Oral Cabotegravir in Healthy Subjects,205712; NCT03149848,ViiV Healthcare Ltd,298711,"JUNE     , 06, 2017",Completed
1+,T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,rifabutin,4229,230,Viread; efavirenz; ethambutol; isoniazid; lamivudine; pyrazinamide; rifabutin; zidovudine,230,RRHT,Rifampicin versus Rifabutin in HIV/AIDS Patients Combined With Tuberculosis,2017ZX10202101-002; NCT03478033; RRHT,Shanghai Public Health Clinical Center,334027,"APRIL    , 15, 2018",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,telacebec,85970,70,"Q-203, Qurient / Infectex",70,null,"Open, phase I clinical trial to evaluate the safety, tolerability and pharmacokinetic parameters of Q-203 after single and multiple doses in healthy volunteers",INX-Q101,Infectex,255234,"JANUARY  , 12, 2016",Status not specified
1+,Total body mass,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,pretomanid,13323,180,bedaquiline; linezolid; pretomanid,180,ZeNiX,"Safety and Efficacy of Various Doses and Treatment Durations of Linezolid Plus Bedaquiline and Pretomanid in Participants With Pulmonary TB, XDR-TB, Pre-XDR-TB or Non-responsive/Intolerant MDR-TB",NC-007- (B-Pa-L); NCT03086486; ZENIX (B-PA-L) NC-007; ZeNiX,TB Alliance,293734,"OCTOBER  , 31, 2017",Recruiting
1+,null,Mycobacterium tuberculosis infection,clofazimine; ethambutol; isoniazid; kanamycin; moxifloxacin; prothionamide; pyrazinamide,Phase 1/Phase 2 Clinical,C12,moxifloxacin,12978,250,clofazimine; econazole; ethambutol; isoniazid; kanamycin; moxifloxacin; prothionamide; pyrazinamide,250,RESWMEN,Using econazole to attempt to shorten the duration of treatment in MDR tuberculosis,CTRI/2019/03/018237; PGI-MDR TB/01 version 2 dated 12.09.2018; RESWMEN,Indian Council of Medical Research,374838,"MAY      , 01, 2019",Not yet recruiting
1+,Total body mass,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2/Phase 3 Clinical,C23,bedaquiline,51310,450,bedaquiline; moxifloxacin; pretomanid; pyrazinamide,450,SIMPLICITB,"Trial to Evaluate the Efficacy, Safety and Tolerability of BPaMZ in Drug-Sensitive (DS-TB) Adult Patients and Drug-Resistant (DR-TB) Adult Patients",39186; B-Pa-M-Z; NC-008; NC-008 (B-Pa-M-Z); NC-008 (B-Pa-M-Z) 39186; NCT03338621; NMRR-17-2826-39186; PHRR180723-001867; SIMPLICITB; SIMPLICITB (B-PA-M-Z) NC-008,"PPD Pharmaceutical Development Philippines Corporation, TB Alliance",319125,"JULY     , 30, 2018",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,ofloxacin,52139,217,gatifloxacin; isoniazid; moxifloxacin; ofloxacin; pyrazinamide; rifampicin,217,null,"A Comparative Study of the Bactericidal and Sterilising Activity of Three Fluoroquinolones: Gatifloxacin, Moxifloxacin and Ofloxacin Substituted for Ethambutol in the Two Month Initial Phase of the Standard Anti-Tuberculosis Treatment Regimen Also Containing Rifampicin, Isoniazid and Pyrazinamide (South Africa)",ISRCTN13670619; RPC078,United Nations International Children's Fund,152200,"NOVEMBER , 25, 2004",Completed
1+,Alanine transaminase; Aspartate aminotransferase; Bilirubin; Blood cells; Creatine kinase; Creatinine; Estimated glomerular filtration rate; Lipase; Lipids,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,"darunavir + cobicistat (fixed dose, HIV infection), Janssen R&D/ Gilead",72148,75,Prezcobix; dolutegravir; isoniazid; rifapentine,75,null,Impact of Once-Weekly Rifapentine and Isoniazid on the Steady State Pharmacokinetics of Dolutegravir and Darunavir Boosted With Cobicistat in Healthy Volunteers,16-CC-0112; 160112; NCT02771249,National Institutes of Health Clinical Center,260814,"JUNE     , 03, 2016",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,pretomanid,13323,62,pretomanid,62,null,Phase I clinical trial of single-dose of PA-824,CTR20181897; LSF-157-SD-P-V1.2,"Shanghai Fosun Pharmaceutical (Group) Co Ltd, Shanghai Fosun Pharmaceutical Industry Development Co Ltd",362102,"MARCH    , 14, 2018",No longer recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,12,GSK-692342,12,null,Safety and Immunogenicity of a Candidate Tuberculosis (TB) Vaccine Given to PPD-Negative Adults,692342/001; CCTB001-01; NCT00730795,GlaxoSmithKline plc,23067,"JANUARY  , 31, 2004",Completed
5+,null,Mycobacterium tuberculosis infection,bedaquiline; bedaquiline; clofazimine; clofazimine; delamanid; delamanid; linezolid; linezolid,Phase 3 Clinical,C3,bedaquiline,51310,500,bedaquiline; clofazimine; delamanid; linezolid,500,endTB-Q,Evaluating Newly Approved Drugs in Combination Regimens for Multidrug-Resistant TB With Fluoroquinolone Resistance,MSF ERB-1761; NCT03896685; endTB-Q,Médecins Sans Frontières France,375499,"JUNE     , 30, 2019",Not yet recruiting
2,null,Mycobacterium tuberculosis infection,AS-02,Phase 1 Clinical,C1,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,50,Mtb72F/AS02A,50,null,Safety and Immunogenicity of GSK Biological's Candidate Tuberculosis Vaccine Mtb72F/AS02 in Healthy PPD-Negative Adults,102039; NCT00291889,GlaxoSmithKline plc,9540,"JULY     , 31, 2004",Completed
1+,T-Helper Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 3 Clinical,C3,ranitidine,44309,400,aspirin; isoniazid; levofloxacin; pyrazinamide; ranitidine; rifampicin,400,SURE,Short Intensive Treatment For Children With Tuberculous Meningitis,ISRCTN40829906; SURE; SURE,University College London,360104,"JANUARY  , 02, 2018",Not yet recruiting
1,Heart rate; PR interval; QRS complex; QT interval,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,"clofazimine (oral, tuberculosis), Novartis",91861,380,Lamprene,380,null,Clofazimine treatment of multidrug-resistant tuberculosis (MDRTB),2015-004440-19; CLAM320B2202,Novartis AG,284370,"MARCH    , 01, 2016",Terminated
1+,Intracranial pressure,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,linezolid,11036,36,Gabriox; ethambutol; isoniazid; pyrazinamide; rifampicin,36,SIMPLE,Pharmacokinetic Study of Linezolid for TB Meningitis,NCT03537495; SIMPLE; TB-201805.01,Universitas Padjadjaran,340851,"JUNE     , 30, 2019",Not yet recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,linezolid,11036,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,VPM-1002,55569,2000,VPM-1002,2000,null,Phase II/III Study To Check The Efficacy And Safety Of Recombinant BCG Vaccine In TB Patients In India,CTRI/2017/03/008266; VPM1002-IN-3.01TBR Version 2.0,Serum Institute of India Ltd,292836,"APRIL    , 01, 2017",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin; streptomycin,Phase 2 Clinical,C2,linezolid,11036,100,ethambutol; isoniazid; linezolid; pyrazinamide; rifampicin; streptomycin,100,ESCALATE,To observe if administration of drug namely linezolid along with standard four drug regimen in intensive(initial) phase of Tubercular meningitis will help reduce death and disability among patients when compared to standard four drug antitubercular drug therapy alone,CTRI/2019/06/019501; ESCALATE,All India Institute of Medical Sciences,383209,"JUNE     , 07, 2019",Not yet recruiting
1+,T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,zidovudine,44316,230,Viread; efavirenz; ethambutol; isoniazid; lamivudine; pyrazinamide; rifabutin; zidovudine,230,RRHT,Rifampicin versus Rifabutin in HIV/AIDS Patients Combined With Tuberculosis,2017ZX10202101-002; NCT03478033; RRHT,Shanghai Public Health Clinical Center,334027,"APRIL    , 15, 2018",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifapentine,15102,38,rifapentine,38,null,The safety and efficacy of high dose rifapentine in treatment of tuberculosis,ChiCTR1800019294,Shanghai Public Health Clinical Center,359664,"JANUARY  , 01, 2019",Not yet recruiting
2,CD4+,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,"lamivudine + abacavir + zidovudine, GSK",26574,350,lamivudine + abacavir + zidovudine,350,null,Anti-HIV Drugs for Ugandan Patients With HIV and Tuberculosis,1 R01 AI051219-01A2; 1R01AI051219-01A2; NCT00078247,National Institute of Allergy and Infectious Diseases,8801,"OCTOBER  , 31, 2004",Completed
1,Blood pressure; Body temperature; Heart rate; Respiratory frequency,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,ESAT-6CFP10,95442,96,ESAT-6CFP10; tuberculin purified protein derivative (AnHui Longcom Biologic Pharmacy Co Ltd),96,null,Clinical Study of Recombinant Mycobacterium Tuberculosis ESAT-6CFP10 Allergen for Children,LTAO-EC III-CHILDREN; NCT03027154,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,285889,"OCTOBER  , 31, 2016",Completed
3,Cytotoxic T-Lymphocytes; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,null,Phase 1b Clinical,C1B,H4:IC31,48499,84,BCG; H4 + IC31; SSI H56-IC31,84,A-042,"Phase Ib, Safety and Immunogenicity Trial of BCG Revaccination, H4:IC31 and H56:IC31 in Healthy, HIV-1-Uninfected Adolescents",A-042; HVTN 602 / AERAS A-042; NCT02378207,Aeras,223463,"MAY      , 31, 2015",Completed
1,Cytokines; Immunoglobulin G,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,SSI H56-IC31,74849,900,SSI H56-IC31,900,null,Study to Evaluate H56:IC31 in Preventing Rate of TB Recurrence,A-055; NCT03512249,Aeras,337957,"JANUARY  , 31, 2019",Recruiting
4+,null,Mycobacterium tuberculosis infection,delamanid; ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 1/Phase 2 Clinical,C12,OPC-167832,104447,125,OPC-167832; OPC-167832; delamanid,125,null,A Phase I/II Trial of Multiple Oral Doses of OPC-167832 for Uncomplicated Pulmonary Tuberculosis,323-201-00003; NCT03678688; OPP1178898,Otsuka Pharmaceutical Development and Commercialization Inc,353987,"OCTOBER  , 25, 2018",Recruiting
2,C-reactive protein,Mycobacterium tuberculosis infection,etanercept,Phase 4 Clinical,C4,etanercept,4567,174,tofacitinib,174,null,Risk of Tuberculosis and Other Infections in Patients of Spondyloarthritis Treated With Tofacitinib in Bangladesh,2018/547; NCT03504072,Bangabandhu Sheikh Mujib Medical University,337163,"JANUARY  , 16, 2018",Recruiting
2,T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,dolutegravir + lamivudine + tenofovir,Phase 2 Clinical,C2,dolutegravir,59062,108,dolutegravir; dolutegravir + lamivudine + tenofovir,108,RADIANT-TB,Standard Versus Double Dose Dolutegravir in Patients With HIV-associated Tuberculosis,CIDRI003; NCT03851588; RADIANT-TB,University of Cape Town,371202,"MAY      , 01, 2019",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,rifapentine,15102,11,doravirine; isoniazid; rifapentine,11,DORIIS,"Doravirine, Rifapentine and Isoniazid Interaction",12690; DORIIS; NCT03886701,Thomas Jefferson University,374387,"APRIL    , 30, 2019",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,cadi-05,55173,300,cadi-05,300,null,Efficacy and Safety of Immunomodulator as an Adjunct Therapy in New Pulmonary Tuberculosis (Category I) Patients,CR-01C-1/2003-10; NCT00341328; NI-894,"Ministry of Science and Technology, India",10866,"MARCH    , 31, 2007",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,lamivudine,3474,400,efavirenz; ethambutol; isoniazid; lamivudine; pyrazinamide; rifabutin; rifampicin; stavudine; zidovudine,400,null,Acquired Immunodeficiency Syndrome (AIDS) and Tuberculosis (TB) Co-Infection Treatment Strategies Study of China,2008ZX10001-008; NCT01344148,Shanghai Public Health Clinical Center,76946,"FEBRUARY , 28, 2009",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,lopinavir + ritonavir,14681,47,efavirenz; lopinavir + ritonavir; nevirapine; rifabutin,47,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV Co-Infection in Vietnam,ANRS12150b; NCT00651066,French National Agency for Research on AIDS and Viral Hepatitis,11188,"JUNE     , 30, 2010",Completed
1+,Matrix Metalloproteinases; Metalloproteinase inhibitor 1; Procollagen type III-N-terminal peptide,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; pyridoxine; rifampicin,Phase 2 Clinical,C2,doxycycline hyclate,46927,40,doxycycline hyclate; ethambutol; isoniazid; pyrazinamide; pyridoxine; rifampicin,40,Doxy-TB,Doxycycline in Human Pulmonary Tuberculosis,DOXY_TB; Doxy-TB; NCT02774993,National University Hospital (Singapore) Pte Ltd,261320,"SEPTEMBER, 30, 2015",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,levofloxacin,3492,111,levofloxacin; optimized background regimen therapy,101,Opti-Q,Efficacy and Safety of Levofloxacin for the Treatment of MDR-TB,1U01AI100805 - 01A1; H-32150; NCT01918397; Opti-Q; TBTC Study 32,Boston University,149562,"JANUARY  , 31, 2015",No longer recruiting
4+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,bedaquiline,51310,32,bedaquiline; bedaquiline; rifampicin; rifampicin; rifapentine; rifapentine,32,null,Pharmacokinetic Interaction Between Rifapentine or Rifampicin and a Single-dose of TMC-207 in Healthy Subjects,NCT02216331; TMC207-CL002,TB Alliance,208141,"MARCH    , 31, 2010",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,moxifloxacin,12978,410,isoniazid; moxifloxacin,410,TBTC/UITB Study 28,"Evaluation of a Moxifloxacin-Based, Isoniazid-Sparing Regimen for Tuberculosis Treatment TBTC/UITB Study 28",EudraCT 2005-003312-29; TBTC/UITB Study 28,Tuberculosis Investigation Unit of Barcelona,155451,"MAY      , 01, 2006",Recruiting
3,CD4+ T cell,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,efavirenz,10172,20,efavirenz; rifabutin; rifabutin,15,TBTC-23C,Pharmacokinetics of Intermittent Rifabutin and Isoniazid With Daily Efavirenz,23C; CDC-NCHSTP-2588; NCT00023413; TBTC-23C,Centers for Disease Control and Prevention,10657,"NOVEMBER , 30, 1999",Completed
4,CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,efavirenz,10172,142,efavirenz; nevirapine,145,N2R,Efavirenz-Based Versus Nevirapine-Based Antiretroviral Therapy Among HIV-Infected Patients Receiving Rifampin,210041000824904203; N2R; NCT00483054,Bamrasnaradura Infectious Diseases Institute,10947,"JANUARY  , 31, 2007",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,efavirenz,10172,130,efavirenz; isoniazid; lamivudine; pyrazinamide; rifampicin; zidovudine,130,IPEC-EFV,Randomized Clinical Trial to Assess the Efficacy and Safety of Concomitant Use of Rifampicin and Efavirenz 600 X  800 mg,CAAE-0017.1.009.000-03; IPEC-EFV; NCT00533390,Fundacao Oswaldo Cruz (Fiocruz),11181,"JANUARY  , 31, 2007",Terminated
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,214,MVA-85A,214,null,"Safety, Immunogenicity and Impact of MVA-85A, on the Immunogenicity of the EPI Vaccines",NCT00480454; TB012,University of Oxford,52375,"OCTOBER  , 31, 2006",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,moxifloxacin,12978,18,moxifloxacin; moxifloxacin (HiGlance Laboratories pvt.Ltd),18,null,"An Open-Label, Randomized, Crossover Study of Comparative Pharmacokinetics and Bioequivalence of Haynemoks, 400 mg (Hayglans Laboratories Pvt. Ltd., India) and Avelox, 400 mg (Bayer Healthcare AG, Germany) in Healthy Volunteers",CPM-09-2012,HiGlance Laboratories Pvt ltd,168898,"OCTOBER  , 29, 2012",Status not specified
1+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,zidovudine,44316,400,efavirenz; ethambutol; isoniazid; lamivudine; pyrazinamide; rifabutin; rifampicin; stavudine; zidovudine,400,null,Acquired Immunodeficiency Syndrome (AIDS) and Tuberculosis (TB) Co-Infection Treatment Strategies Study of China,2008ZX10001-008; NCT01344148,Shanghai Public Health Clinical Center,76946,"FEBRUARY , 28, 2009",Recruiting
5,null,Mycobacterium tuberculosis infection,isoniazid,Phase 1/Phase 2 Clinical,C12,gatifloxacin,7017,70,gatifloxacin; levofloxacin; linezolid; moxifloxacin,70,TBRU 10,"Early Bactericidal Activity of Linezolid, Gatifloxacin, Levofloxacin, Isoniazid (INH) and Moxifloxacin in HIV Negative Adults With Initial Episodes of Sputum Smear-Positive Pulmonary Tuberculosis",01-553; NCT00396084; TBRU 10; TBRU 10,National Institute of Allergy and Infectious Diseases,10869,"FEBRUARY , 29, 2004",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,bedaquiline,51310,16,TMC-207; nevirapine,16,null,TMC207-TiDP13-C117: Interaction Study in Human Immunodeficiency Virus-type 1 (HIV-1) Infected Patients With Nevirapine (NVP),CR015793; NCT00910806; NCT00980668; TMC207-TiDP13-C117,"Janssen Diagnostics BVBA, Johnson & Johnson",56959,"JUNE     , 30, 2009",Completed
2+,null,Mycobacterium tuberculosis infection,Rifafour,Phase 2 Clinical,C2,pretomanid,13323,85,PA-824; Rifafour; TMC-207; moxifloxacin; pyrazinamide,65,null,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis With,NC-001; NC-001-(J-M-Pa-Z); NCT01215851,TB Alliance,71107,"OCTOBER  , 31, 2010",Completed
3+,null,Mycobacterium tuberculosis infection,rifafour,Phase 2 Clinical,C2,pretomanid,13323,69,PA-824,60,null,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis,CL-010; NCT00944021; PA-824-CL-010,TB Alliance,59043,"AUGUST   , 31, 2009",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,bedaquiline,51310,28,TMC-207,28,null,"A Study to Determine the Relative Oral Bioavailability of Single Dose Administration of TMC207, Under Fed and Fasted Conditions in Healthy Participants",CR007504; NCT00946842; TMC207-TiDP13-C111,Janssen Diagnostics BVBA,59134,"AUGUST   , 31, 2009",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,24,MVA-85A,24,null,"Safety of Tuberculosis Vaccine, MVA-85A, Administered by the Intramuscular Route and the Intradermal Route",076943; 2009-015973-11; ISRCTN46804531; NCT01181856; TB022,University of Oxford,69212,"JANUARY  , 31, 2010",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,raltegravir,54488,18,raltegravir,18,RIFRAL,The Effect of Intermittent Rifampicin on Raltegravir,2010-021461-73; NCT01424826; RIFRAL; UKCRN 12695; UoL000643,The University of Liverpool,80394,"JANUARY  , 31, 2012",Completed
1,Cytokines; Interferon gamma; Interleukin-2; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,AERAS-402,53975,487,AERAS-402,487,null,Study of AERAS-402 in Healthy Infants,C-029-402; NCT01198366; PACTR201203000306280,Aeras Global TB Vaccine Foundation,70158,"SEPTEMBER, 30, 2010",Completed
2,Cytokine,Mycobacterium tuberculosis infection,TiceBCG,Phase 1 Clinical,C1,AERAS-407 rBCG,62397,24,AERAS-422,24,AERAS 422,Study of AERAS-422 in Healthy Adults,AERAS 422; C-007-422; NCT01340820,Aeras Global TB Vaccine Foundation,76756,"DECEMBER , 31, 2010",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,bedaquiline,51310,16,TMC-207,16,null,"A Study to Investigate Pharmacokinetics, Safety and Tolerability of TMC-207 in Patients With Moderately Impaired Hepatic Function",2009-016437-99; CR007501; NCT01012284; TMC207-TiDP13-C112,Janssen Diagnostics BVBA,61895,"JANUARY  , 31, 2010",Completed
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampin,Phase 2 Clinical,C2,moxifloxacin,12978,433,ethambutol; moxifloxacin; pyrazinamide; rifampin,433,null,TBTC Study 28: Moxifloxacin Versus Isoniazid for TB Treatment,CDC-NCHSTP-4448; NCT00144417,Centers for Disease Control and Prevention,10685,"FEBRUARY , 28, 2006",Completed
1,CD4; CD8,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,AERAS-402,53975,12,AERAS-402,12,null,A Study to Evaluate Safety and Immunogenicity of AERAS-402,C004-402; NCT01378312,Aeras Global TB Vaccine Foundation,78482,"FEBRUARY , 28, 2011",Completed
1+,Cytochrome (CYP) enzyme,Mycobacterium tuberculosis infection,null,Phase not specified,NS,losartan,3517,13,caffeine; dextromethorphan; losartan; midazolam; omeprazole; rifampicin,13,null,The Influence of Rifampicin Discontinuation on Rifampicin-Induced Cytochrome P450 Enzyme Activity,JPRN-UMIN000004083,Hamamatsu University School of Medicine,122291,"JULY     , 01, 2010",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,lopinavir + ritonavir,14681,90,"Rimactane, Rifadin, Tubocin, Benemycin; lopinavir+ritonavir",90,null,"An Open-Label, Sequential Non-Randomized Pharmacokinetics Study Comparing Lopinavir Plasma Exposure When Given as Lopinavir Superboosted With Ritonavir (1 : 1 Ratio) in the Presence of Rifampicin or Lopinavir Boosted With Ritonavir (4 : 1 Ratio) in the Absence of Rifampicin in HIV and TB Co-Infected Children in South Africa",PACTR201302000426554,Drugs for Neglected Diseases Initiative,142540,"DECEMBER , 01, 2012",Recruiting
3,CD4 T cells; CD8 T cells; IFN-gamma; IL-17; IL-2; TNF-alpha,Mycobacterium tuberculosis infection,Candin,Phase 2 Clinical,C2,MVA-85A,55317,248,MVA-85A,248,MVA(TB)029,Safety and Immunogenicity of MVA-85A Prime and Bacille Calmette-Guerin Boost Vaccination,G1100570; G1100570/1; MVA(TB)029; NCT01650389,University of Cape Town,89833,"OCTOBER  , 31, 2012",Completed
1+,Anti-Meningitis C antibodies; C-C motif chemokine 2; C-C motif chemokine 3; C-C motif chemokine 4; Cytokines; IgG; Interferon gamma; Interferon-alpha; Interleukin-1 alpha; Interleukin-1 beta; Interleukin-10; Interleukin-12; Interleukin-13; Interleukin-2; Interleukin-6,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,Rotarix,12813,28,BCG; Infanrix; Menitorix; NeisVac-C; Pentacel; Prevnar 13; Priorix; Rotarix,28,BAM,A Study of the Interaction Between BCG And MenC Immunization,2013-003488-71; BAM; NCT02002156; OVG-2013/04; UKCRN 15722,University of Oxford,162886,"JUNE     , 20, 2014",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,linezolid,11036,6,amikacin; amoxicillin-clavulanate; bedaquiline; clofazimine; cycloserine; enviomycin; ethambutol; ethionamide; fluoroquinolone therapy; kanamycin; levofloxacin; linezolid; para-aminosalicylic acid; pyrazinamide; streptomycin,6,null,An Exploratory Study of TMC-207 in Japanese Participants with Pulmonary Multi-Drug Resistant Tuberculosis (MDR-TB),CR105158; JapicCTI-163116; NCT02365623; TMC207TBC2001,Janssen Pharmaceutical KK,222400,"FEBRUARY , 18, 2015",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,nelfinavir,8255,44,lamivudine; nelfinavir mesylate; rifabutin; stavudine; zidovudine,44,null,Effectiveness of Anti-HIV Therapy (HAART) in HIV-Infected Patients With Tuberculosis,AACTG A5062; ACTG A5062; NCT00004736,National Institute of Allergy and Infectious Diseases,10646,"FEBRUARY , 25, 2000",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,efavirenz,10172,661,efavirenz; efavirenz + lamivudine + stavudine; lamivudine; stavudine,540,ANRS 1295 CAMELIA,Early versus Late Introduction of Antiretroviral Therapy in HIV-infected Patients With Tuberculosis,ANRS 1295 CAMELIA; ANRS 1295 CAMELIA; CIPRA KH 001; NCT00226434; NCT00498823,French National Agency for Research on AIDS and Viral Hepatitis,145651,"JANUARY  , 31, 2006",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,zidovudine,44316,150,efavirenz; ethambutol; isoniazid; lamivudine; nevirapine; pyrazinamide; rifampicin; zidovudine,355,null,"Efficacy of Thrice Weekly Directly Observed Treatment, Short-course (DOTS) in HIV-associated Tuberculosis",NCT00698334; SKS/NACO/2006,All India Institute of Medical Sciences,161275,"APRIL    , 30, 2006",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,linezolid,11036,26,linezolid,26,S30PK,Linezolid Pharmacokinetics (PK) in Multi-Drug Resistant (MDR)/Extensively-Drug Resistant (XDR) Tuberculosis (TB),NCT00691392; S30PK; TBTC Study 30PK,Centers for Disease Control and Prevention,48035,"APRIL    , 30, 2009",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,TB/FLU-04L,98373,36,TB/FLU-04L,36,null,"Reactogenicity, Safety and Immunogenicity of a TB/FLU-04L Tuberculosis Vaccine",NCT02501421; VPT-I-01/2013,National Center for Biotechnology of the Republic of Kazakhstan,235054,"OCTOBER  , 31, 2013",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,nevirapine,3700,42,nevirapine,42,null,Efficacy Safety Study Comparing two Doses of NVP After Initiating Rifampin-Containing TB Therapy,HIV-NAT 033; NCT00476853,The HIV Netherlands Australia Thailand Research Collaboration,10946,"OCTOBER  , 31, 2005",Completed
3,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,simeprevir,39069,21,TMC-435; TMC-435; rifampin; rifampin,21,null,"TMC-435350-TiDP16-C105:  Phase I, Three-Way Crossover, Drug-Drug Interaction Between TMC-435350 and Rifampin After Multiple Dosing",CR015412; NCT00741169; TMC-435350-TiDP16-C105,Janssen R&D (Ireland),25800,"JUNE     , 30, 2008",Completed
4,CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,lamivudine,3474,142,efavirenz; nevirapine,145,N2R,Efavirenz-Based Versus Nevirapine-Based Antiretroviral Therapy Among HIV-Infected Patients Receiving Rifampin,210041000824904203; N2R; NCT00483054,Bamrasnaradura Infectious Diseases Institute,10947,"JANUARY  , 31, 2007",Completed
1+,Solute carrier organic anion transporter family member 1B1,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,nevirapine,3700,48,efavirenz; isoniazid; lamivudine; lopinavir + ritonavir; nevirapine; rifabutin; stavudine,35,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,ANRS12150a; NCT00640887,French National Agency for Research on AIDS and Viral Hepatitis,11187,"FEBRUARY , 28, 2009",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,zidovudine,44316,44,lamivudine; nelfinavir mesylate; rifabutin; stavudine; zidovudine,44,null,Effectiveness of Anti-HIV Therapy (HAART) in HIV-Infected Patients With Tuberculosis,AACTG A5062; ACTG A5062; NCT00004736,National Institute of Allergy and Infectious Diseases,10646,"FEBRUARY , 25, 2000",Completed
1,T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,efavirenz,10172,44,efavirenz; pyridoxine,44,PrOMPT,Prevention of Early Mortality by Presumptive Tuberculosis (TB) Treatment,AIGHD_001; NCT01417988; PrOMPT,University of Amsterdam,182316,"AUGUST   , 31, 2011",Terminated
1,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,Perchlozone,87251,340,Perchlozone,340,null,"Multicenter, randomized, double-blind, placebo-controlled, parallel-group study of the efficacy and safety of the drug Perhlozone in the treatment of patients with pulmonary MDR MBT, including the presence of HIV infection",PERHL-03-2013,Pharmasyntez,183939,"APRIL    , 08, 2014",Status not specified
2+,Hepatitis B large envelope protein; Hepatitis B virus external core antigen; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,efavirenz,10172,2073,"efavirenz; isoniazid; lopinavir + ritonavir; tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",1107,TEMPRANO,Early Antiretroviral Treatment and/or Early Isoniazid Prophylaxis Against Tuberculosis in HIV-Infected Adults,ANRS 12136 TEMPRANO; NCT00495651; TEMPRANO,French National Agency for Research on AIDS and Viral Hepatitis,195741,"MARCH    , 31, 2008",Completed
1+,CD4 Positive T Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,didanosine,2935,642,didanosine; efavirenz; lamivudine; lamivudine + efavirenz + didanosine; trimethoprim + sulfamethoxazole,642,SAPIT,A Study to Compare Three Existing Starting Points of Antiretroviral Therapy (ART) Initiation in HIV/Tuberculosis (TB) Co-infected Patients,CAPRISA 003; NCT00398996; SAPIT,Centre for the AIDS Program of Research in South Africa,201474,"JUNE     , 30, 2005",Completed
4+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,rifapentine,15102,32,bedaquiline; bedaquiline; rifampicin; rifampicin; rifapentine; rifapentine,32,null,Pharmacokinetic Interaction Between Rifapentine or Rifampicin and a Single-dose of TMC-207 in Healthy Subjects,NCT02216331; TMC207-CL002,TB Alliance,208141,"MARCH    , 31, 2010",Completed
8,Body Mass Index; Body height; Interferon gamma; Regulatory T-Lymphocytes; Th1 cells; Th2 cells; Total body mass,Mycobacterium tuberculosis infection,albendazole; ivermectin; metronidazole,Phase 2 Clinical,C2,albendazole,12132,120,Nutritional Supplementation Meal; albendazole; ivermectin; metronidazole; multivitamin therapy,120,TB-LION,Tuberculosis - Learning the Impact of Nutrition,6005415; CTRI/2019/05/018968; H-37473; NCT03598842; TB-LION,Boston Medical Center Corp,347635,"JUNE     , 30, 2019",Not yet recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,rifapentine,15102,150,isoniazid; rifapentine,150,TBTC Study 25,TBTC Study 25: Study of the Tolerability of Higher Doses of Rifapentine in the Treatment of Tuberculosis,25; CDC-NCHSTP-2404; HCK45; NCT00023426; TBTC Study 25,Centers for Disease Control and Prevention,8751,"JULY     , 31, 1999",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,Perchlozone,87251,200,Perchlozone,200,null,"An international, multicenter, randomized, double-blind, placebo-controlled, parallel-group study of the efficacy and safety of Perchlozone in the treatment of patients with pulmonary tuberculosis with MDR-TB, including HIV",PERHL-03-2013-i,Pharmasyntez,291547,"MARCH    , 10, 2017",Status not specified
2+,Cytokines; Cytotoxic T-Lymphocytes; Immunoglobulin G; Interferon gamma; Interleukin-2; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Th1 cytokines; Th2 cytokines; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,70,AP10-602; GLA-SE; ID-93; ID-93,70,null,"Safety, Tolerability and Immunogenicity of the Vaccine Candidates ID-93 + AP10-602 and ID-93 + GLA-SE Administered Intramuscularly in Healthy Adult Subjects",12-0109; HHSN272201300020I; NCT02508376,National Institute of Allergy and Infectious Diseases,235751,"OCTOBER  , 22, 2015",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase Not Applicable,PNA,tedizolid phosphate,30819,null,rifampicin; torezolid,null,null,Evaluating Pharmacokinetics and Whole Blood Bactericidal Activity Against Mycobacterium Tuberculosis of Single-Doses of Tedizolid Plus Rifampicin in Healthy Volunteers,2017/00909,National University Hospital (Singapore) Pte Ltd,331225,null,Status not specified
1+,Alanine transaminase; Aspartate aminotransferase; Bilirubin; Blood cells; Creatine kinase; Creatinine; Estimated glomerular filtration rate; Lipase; Lipids,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,rifapentine,15102,75,Prezcobix; dolutegravir; isoniazid; rifapentine,75,null,Impact of Once-Weekly Rifapentine and Isoniazid on the Steady State Pharmacokinetics of Dolutegravir and Darunavir Boosted With Cobicistat in Healthy Volunteers,16-CC-0112; 160112; NCT02771249,National Institutes of Health Clinical Center,260814,"JUNE     , 03, 2016",Recruiting
2,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bicarbonates; Bilirubin; Blood platelets; Calcium; Chlorides; Creatine kinase; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; Glucose; Heart rate; Hematocrit; Hemoglobin; Leukocyte count; Lymphocytes; Monocytes; Neutrophils; Potassium; Sodium; Systolic blood pressure; Total protein; Urea; Uric acid,Mycobacterium tuberculosis infection,isoniazid; rifampicin,Phase 1 Clinical,C1,"rifampicin + isoniazid (fixed dose combination, tuberculosis), Pfizer",89460,28,"rifampicin + isoniazid (fixed dose combination, tuberculosis), Pfizer",28,null,"A Bioequivalence Study Comparing A Fixed Dose Combination Formulation, RIN-150 And Individual Reference Drugs In Healthy Volunteers",B3801003; NCT02014272,Pfizer Inc,164292,"SEPTEMBER, 30, 2012",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,rifapentine,15102,4027,isoniazid; isoniazid; rifapentine,4027,WHIP3TB,Evaluation of the Effect of 3HP versus Periodic 3HP versus 6H in HIV-Positive Individuals,3HP-AUR1-1-170; NCT02980016; WHIP3TB,Aurum Institute,281055,"NOVEMBER , 30, 2016",No longer recruiting
2+,null,Mycobacterium tuberculosis infection,isoniazid; rifampin; rifapentine,Phase 2/Phase 3 Clinical,C23,rifapentine,15102,3400,rifapentine,3400,ASTEROID,"Assessment of the Safety, Tolerability, and Effectiveness of Rifapentine Given Daily for LTBI",ASTEROID; CDC-NCHSTP-7024; NCT03474029,Centers for Disease Control and Prevention,333384,"JULY     , 31, 2019",Not yet recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,"ethambutol hydrochloride (250 mg) + pyrazinamide (400 mg) + rifampicin (120 mg) + isoniazid (120 mg) (fixed dose combination, tuberculosis), Shenyang Hongqi Pharmaceutical",82062,30,Double J stent; ethambutol hydrochloride + pyrazinamide + rifampicin + isoniazid,30,null,The Efficacy and Safety of Early Double J Stent Placement in Treatment of Renal Tuberculosis: A Novel Renal Function Protective Strategy,ACTRN12612001244897; U1111-1136-5967,Shanghai Changzheng Hospital,132105,"JUNE     , 06, 2012",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,moxifloxacin,12978,2516,ethambutol; isoniazid; moxifloxacin; pyrazinamide; pyridoxine; rifampin; rifapentine,2516,null,Rifapentine-containing Tuberculosis Treatment Shortening Regimens,6655; ACTG Study A5349; CTRI/2017/09/009772; NCT02410772; S31/A5349; TBTC Study 31,Centers for Disease Control and Prevention,226815,"JANUARY  , 25, 2016",No longer recruiting
2+,4 beta-Hydroxycholesterol/Cholesterol ratio,Mycobacterium tuberculosis infection,Lamprene; ethambutol (Myambutol); isoniazid (Nydrazid); kanamycin (Kantrex); moxifloxacin; prothionamide (Peteha); pyrazinamide (Zinamide),Phase 3 Clinical,C3,moxifloxacin,12978,530,Lamprene; Regimen A locally-used WHO-approved MDR-TB regimen; bedaquiline; ethambutol (Myambutol); isoniazid (Nydrazid); kanamycin (Kantrex); levofloxacin; moxifloxacin; prothionamide (Peteha); pyrazinamide (Zinamide),530,STREAM,The Evaluation of a Standard Treatment Regimen of Anti-Tuberculosis Drugs for Patients With MDR-TB,18148631; 78372190; 78372190/18148631 (Stage 1/2); CTRI/2017/09/009693; ISRCTN78372190; NCT02409290; STREAM,International Union Against Tuberculosis and Lung Diseases,228190,"APRIL    , 30, 2016",Recruiting
1+,Creatinine; Human immunodeficiency virus RNA; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 0 Clinical,C0,lamivudine,3474,419,efavirenz; emtricitabine; lamivudine; tenofovir,419,null,TasP in Correctional Facilities,15-1473; NCT02946762; Z 31501,University of North Carolina,280225,"FEBRUARY , 01, 2016",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,TBA-7371,107523,74,TBA-7371; TBA-7371; bupropion; midazolam,74,null,"A Phase I Study to Evaluate Safety, Tolerability, PK, and PK Interactions of TBA-7371",NCT03199339; TBA-7371-CL001,TB Alliance,303756,"AUGUST   , 29, 2017",Completed
3,null,Mycobacterium tuberculosis infection,levofloxacin,Phase 3 Clinical,C3,levofloxacin,3492,3000,isoniazid; rifampicin,3000,TriDoRe,Novel Triple-Dose Tuberculosis Retreatment Regimens: How to Overcome Resistance Without Creating More,NCT03862248; TRIDORE; TriDoRe,"Institute of Tropical Medicine, Belgium",372353,"SEPTEMBER, 30, 2019",Not yet recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,rifabutin,4229,15,lopinavir + ritonavir; rifabutin,15,null,A Bioavailability Study of Rifabutin and Lopinavir/Ritonavir in Healthy Adult Subjects,M10-457; NCT00743470,Abbott Laboratories,25327,"AUGUST   , 31, 2008",Terminated
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampin,Phase 2b Clinical,C2B,pretomanid,13323,183,isoniazid; pretomanid; pyrazinamide; rifabutin; rifampin,183,APT,Assessing PA-824 for Tuberculosis,#FD-R-004794-01; APT; NA_00093014; NCT02256696,Johns Hopkins Hospital,213394,"APRIL    , 29, 2015",Recruiting
1+,Total body mass,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2/Phase 3 Clinical,C23,moxifloxacin,12978,450,bedaquiline; moxifloxacin; pretomanid; pyrazinamide,450,SIMPLICITB,"Trial to Evaluate the Efficacy, Safety and Tolerability of BPaMZ in Drug-Sensitive (DS-TB) Adult Patients and Drug-Resistant (DR-TB) Adult Patients",39186; B-Pa-M-Z; NC-008; NC-008 (B-Pa-M-Z); NC-008 (B-Pa-M-Z) 39186; NCT03338621; NMRR-17-2826-39186; PHRR180723-001867; SIMPLICITB; SIMPLICITB (B-PA-M-Z) NC-008,"PPD Pharmaceutical Development Philippines Corporation, TB Alliance",319125,"JULY     , 30, 2018",Recruiting
1,Body height; Total body mass,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,pretomanid,13323,36,pretomanid,36,null,"Pharmacokinetics and Safety of PA-824 in Subjects With Mild, Moderate, and Severe Hepatic Impairment to Matched, Non-Hepatically Impaired Subjects",13-0053; HHSN272201300017I; NCT02422524,National Institute of Allergy and Infectious Diseases,227410,"DECEMBER , 11, 2017",Recruiting
2,null,Mycobacterium tuberculosis infection,BCG vaccine,Phase 3 Clinical,C3,GC-3107,108779,750,GC-3107,750,null,A Study of GC-3107(BCG Vaccine) in Healthy Infants,GC3107_P3; NCT03947138; TCTR20190325003,GC Pharma,380364,"JUNE     , 01, 2019",Not yet recruiting
2+,null,Mycobacterium tuberculosis infection,WHO approved regimen-based therapy,Phase 3 Clinical,C3,delamanid,16545,null,Deltyba; Levaquin; Zyvox; pyrazinamide,null,DAZZLE,"Efficacy and Tolerability of Delamanid, Linezolid, Pyrazinamide and Levofloxacin",DAZZLE; H-36160; NCT02975570,Boston University,280651,"AUGUST   , 31, 2017",Terminated
1,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,azithromycin,2587,null,azithromycin,null,null,A Study to Evaluate the Safety and Efficacy of Azithromycin in Individual Patients With Serious Nontuberculous Mycobacterial Disease Who Are Failing or Intolerant of Other Available Therapy,058D; 066-169; NCT00002085,Pfizer Inc,8647,"NOVEMBER , 02, 1999",Completed
1,Cytokines,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,2,MVA-85A,2,null,MVA-85A Aerosol Versus Intramuscular Vaccination in Adults With Latent Mycobacterium Tuberculosis (M tb) Infection,NCT02532036; TB040,University of Oxford,238674,"SEPTEMBER, 30, 2015",Terminated
1+,Total body mass,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2/Phase 3 Clinical,C23,pretomanid,13323,450,bedaquiline; moxifloxacin; pretomanid; pyrazinamide,450,SIMPLICITB,"Trial to Evaluate the Efficacy, Safety and Tolerability of BPaMZ in Drug-Sensitive (DS-TB) Adult Patients and Drug-Resistant (DR-TB) Adult Patients",39186; B-Pa-M-Z; NC-008; NC-008 (B-Pa-M-Z); NC-008 (B-Pa-M-Z) 39186; NCT03338621; NMRR-17-2826-39186; PHRR180723-001867; SIMPLICITB; SIMPLICITB (B-PA-M-Z) NC-008,"PPD Pharmaceutical Development Philippines Corporation, TB Alliance",319125,"JULY     , 30, 2018",Recruiting
2,null,Mycobacterium tuberculosis infection,standardized regimen,Phase 2 Clinical,C2,faropenem,4492,400,faropenem,400,null,"Prospective, Randomized Control, Non-inferiority Study of the Use of Faropenem for Patients with etiology Positive Pulmonary Tuberculosis",ChiCTR1800015959,Zhejiang University,338648,"MAY      , 15, 2018",Not yet recruiting
1+,Anti-Meningitis C antibodies; C-C motif chemokine 2; C-C motif chemokine 3; C-C motif chemokine 4; Cytokines; IgG; Interferon gamma; Interferon-alpha; Interleukin-1 alpha; Interleukin-1 beta; Interleukin-10; Interleukin-12; Interleukin-13; Interleukin-2; Interleukin-6,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,Infanrix,6229,28,BCG; Infanrix; Menitorix; NeisVac-C; Pentacel; Prevnar 13; Priorix; Rotarix,28,BAM,A Study of the Interaction Between BCG And MenC Immunization,2013-003488-71; BAM; NCT02002156; OVG-2013/04; UKCRN 15722,University of Oxford,162886,"JUNE     , 20, 2014",Completed
2,Cytokines; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,BCG vaccine,Phase 2a Clinical,C2A,MTBVAC,89744,99,MTBVAC,99,null,Dose-Defining Safety and Immunogenicity Study of MTBVAC in South African Neonates,MTBVAC-03; NCT03536117,Biofabri SL,340636,"FEBRUARY , 11, 2019",Recruiting
1,Cytokines; Immunoglobulin G; Interferon gamma,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,SSI H56-IC31,74849,22,SSI H56-IC31,22,null,A Phase I Study of Safety and Immunogenicity of AERAS-456 in HIV-Negative Adults Treated for Drug-susceptible Pulmonary TB,C-037-456; NCT02375698,Aeras,223291,"NOVEMBER , 21, 2014",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,TB/FLU-04L,98373,80,TB/FLU-04L,80,null,"A randomized, double-blind, placebo-controlled, phase II clinical trial of TB/FLU-04L TB vaccine in adult volunteers with signs of latent tuberculosis infection",VPT-II-01/2015,National Center for Biotechnology of the Republic of Kazakhstan,301908,"JUNE     , 05, 2017",Status not specified
3,Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-2; Interleukin-2 receptor alpha chain ; Monocytes; Myeloid-derived suppressor cells; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,SSI H56-IC31,74849,39,SSI H56-IC31; SSI H56-IC31; etoricoxib; etoricoxib,39,TBCOX2,Therapeutic Vaccination and Immune Modulation - New Treatment Strategies for the MDR Tuberculosis Pandemic,2014-004986-26; 2015/692; NCT02503839; TBCOX2,Oslo University Hospital,235355,"NOVEMBER , 30, 2015",No longer recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,delpazolid,76307,52,delpazolid,52,null,"Phase I study Evaluating the Safety, Tolerability and Pharmacokinetic Characteristics of RMX-2001",CTR20190843; RMX2001-101,"Nome West (Shanghai) Pharmaceutical Technology Co., Ltd",381962,null,Not yet recruiting
1+,Amyloid; C-reactive protein; Collagen type I; Collagen type III; Cytokines; Interferon gamma; Interleukin-10; Interleukin-17A; Interleukin-2; Interleukin-4; Interleukin-6; Interleukin-8; Leukocyte count; Leukocyte elastase; Matrix metalloproteinase-9; Myeloperoxidase; Neutrophil collagenase; Procalcitonin; Transforming Growth Factor beta; Tumor necrosis factor,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,azithromycin,2587,24,azithromycin; ethambutol; isoniazid; pyrazinamide; rifampicin,24,null,Azithromycin as Host-directed Therapy for Pulmonary Tuberculosis,2017-001929-40; AZT_DSTB_BB; NCT03160638,University Medical Center Groningen,298743,"FEBRUARY , 01, 2018",Recruiting
5+,null,Mycobacterium tuberculosis infection,bedaquiline; bedaquiline; clofazimine; clofazimine; delamanid; delamanid; linezolid; linezolid,Phase 3 Clinical,C3,delamanid,16545,500,bedaquiline; clofazimine; delamanid; linezolid,500,endTB-Q,Evaluating Newly Approved Drugs in Combination Regimens for Multidrug-Resistant TB With Fluoroquinolone Resistance,MSF ERB-1761; NCT03896685; endTB-Q,Médecins Sans Frontières France,375499,"JUNE     , 30, 2019",Not yet recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,VPM-1002,55569,2000,VPM-1002,2000,null,Study to Check the Efficacy and Safety of Recombinant BCG Vaccine in Prevention of TB Recurrence in India,NCT03152903; VPM1002-IN-3.01TBR,Serum Institute of India Ltd,298671,"DECEMBER , 15, 2017",Recruiting
3,null,Mycobacterium tuberculosis infection,Standard of care,Phase 3 Clinical,C3,amoxicillin,44279,1875,amoxicillin; azithromycin,1875,ACT-TB,Accuracy and Consequences of Using Trial-of-antibiotics for TB Diagnosis,15232; ACT-TB; NCT03545373,London School of Hygiene and Tropical Medicine,341686,"FEBRUARY , 25, 2019",Recruiting
1+,null,Mycobacterium tuberculosis infection,clofazimine; ethambutol; isoniazid; kanamycin; moxifloxacin; prothionamide; pyrazinamide,Phase 1/Phase 2 Clinical,C12,"clofazimine (oral, tuberculosis), Novartis",91861,250,clofazimine; econazole; ethambutol; isoniazid; kanamycin; moxifloxacin; prothionamide; pyrazinamide,250,RESWMEN,Using econazole to attempt to shorten the duration of treatment in MDR tuberculosis,CTRI/2019/03/018237; PGI-MDR TB/01 version 2 dated 12.09.2018; RESWMEN,Indian Council of Medical Research,374838,"MAY      , 01, 2019",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,amikacin; cycloserine; moxifloxacin; prothionamide; pyrazinamide,Phase 2 Clinical,C2,linezolid,11036,488,amikacin; clofazimine; cycloserine; ethambutol; linezolid; moxifloxacin; prothionamide; pyrazinamide,488,GRACE-TB,NGS-Guided(G) Regimens(R) of Anti-tuberculosis(A) Drugs for the Control(C) and Eradication(E) of MDR-TB,GRACE-TB; KY2018-291; NCT03604848,Huashan Hospital,348056,"AUGUST   , 05, 2018",Not yet recruiting
1+,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Carbon dioxide; Chlorine; Creatine kinase; Creatinine; Eosinophils; Erythrocytes; Estimated glomerular filtration rate; Glucose; Hematocrit; Hemoglobin; High-density lipoprotein cholesterol; High-density lipoprotein cholesterol; Human immunodeficiency virus RNA; Lactate dehydrogenase; Leukocyte count; Lipase; Lipids; Lymphocytes; Mean corpuscular volume; Monocytes; Neutrophils; Ox-LDL/ LDL-C ratio; Ox-LDL/ LDL-C ratio; Phosphate; Potassium; Sodium; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; Total cholesterol; Total cholesterol; Triglycerides; Triglycerides; Urea,Mycobacterium tuberculosis infection,efavirenz; ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 3b Clinical,C3B,dolutegravir,59062,113,Group 1; Group 2; dolutegravir; ethambutol; isoniazid; pyrazinamide; rifampicin,113,INSPIRING,Open-Label Study of Dolutegravir (DTG) or Efavirenz (EFV) for Human Immunodeficiency Virus (HIV)-Tuberculosis (TB) Co-infection,117175; ING117175; INSPIRING; NCT02178592,ViiV Healthcare Ltd,201302,"JANUARY  , 23, 2015",No longer recruiting
6,C-reactive protein; Forced expiratory volume; Neopterin; Programmed cell death protein 1; Standardized uptake value; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,rifabutin-modified TB therapy,Phase 2 Clinical,C2,CC-11050,59386,200,CC-11050; auranofin; everolimus; rifabutin-modified TB therapy; vitamin D3,200,TBHDT,TB Host Directed Therapy,NCT02968927; TBHDT; TBHDT-AUR1-8-178,Aurum Institute,279898,"NOVEMBER , 30, 2016",No longer recruiting
1+,Alanine transaminase; Aspartate aminotransferase; Bilirubin; Blood cells; Creatine kinase; Creatinine; Estimated glomerular filtration rate; Lipase; Lipids,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,dolutegravir,59062,75,Prezcobix; dolutegravir; isoniazid; rifapentine,75,null,Impact of Once-Weekly Rifapentine and Isoniazid on the Steady State Pharmacokinetics of Dolutegravir and Darunavir Boosted With Cobicistat in Healthy Volunteers,16-CC-0112; 160112; NCT02771249,National Institutes of Health Clinical Center,260814,"JUNE     , 03, 2016",Recruiting
3,Human immunodeficiency virus RNA; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,dolutegravir,59062,200,dolutegravir; food intake; nucleoside reverse transcriptase inhibitor therapy; rifampicin,200,null,"Efficacy, Safety and Pharmacokinetics of DTG With RIF",HIV-NAT 254; NCT03731559,The HIV Netherlands Australia Thailand Research Collaboration,359086,"MARCH    , 01, 2019",Not yet recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,SQ-109,31010,null,SQ-109,null,null,Evaluation of SQ-109 Plus PPI in Urea Breath Test-Positive Volunteers,NCT01252108; SQ109-H001,Sequella Inc,72716,"MARCH    , 31, 2012",Terminated
3+,C-reactive protein,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,"once-daily naproxen (oral controlled release, pain), Alvogen",12013,null,"atorvastatin; dexamethasone; dexamethasone (decadron); once-daily naproxen (oral controlled release, pain), Alvogen; once-daily naproxen (oral controlled release, pain), Alvogen",null,null,Paradoxical Tuberculosis Immune Reconstitution Inflammatory Syndrome (TB-IRIS) Treatment Trial,NCT01442428; WS967180,University of Minnesota - Clinical and Translational Science Institute,199754,"JANUARY  , 31, 2014",Terminated
4,T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,"tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",49219,809,efavirenz; emtricitabine; tenofovir disoproxil fumarate; tenofovir disoproxil fumarate + emtricitabine,780,STRIDE,Immediate Versus Deferred Start of Anti-HIV Therapy in HIV Infected Adults Being Treated for Tuberculosis,1U01AI068636; ACTG A5221; ACTG A5221; NCT00108862; STRIDE,AIDS Clinical Trials Group,10681,"AUGUST   , 31, 2006",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,moxifloxacin,12978,429,ethambutol; gatifloxacin; isoniazid; moxifloxacin; pyrazinamide; rifampicin,416,null,"Thrice-Weekly, 4- Months Moxifloxacin or Gatifloxacin Regimens for Pulmonary TB",CTRI/2012/10/003060,Indian Council of Medical Research,150332,"MAY      , 14, 2004",Terminated
1+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,ritonavir,7310,9,Kaletra; rifampin; ritonavir,9,null,Pharmacokinetic Study of Super-boosted Lopinavir/Ritonavir Given With Rifampin,20100325; NCT01700790,University of Miami,93494,"FEBRUARY , 29, 2016",Terminated
1,Body temperature; CD40 ligand; Interferon gamma; Interleukin-17A; Interleukin-2; T-Helper Lymphocytes; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,142,"MTB72F vaccine (tuberculosis), GSK/Aeras",142,null,Safety and Immunogenicity of a Candidate Tuberculosis (TB) Vaccine in Adults With Tuberculosis (TB) Disease,114886; NCT01424501,GlaxoSmithKline plc,80383,"NOVEMBER , 14, 2011",Terminated
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,12,MVA85A,12,null,Safety and Immunogenicity of MVA85A in Volunteers Latently Infected With TB,NCT00456183; TB007,University of Oxford,10941,"AUGUST   , 31, 2005",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,Fluzone,44409,301,Vaxigrip,301,TIV_HIV_TB,Effect of HIV and/or Active Tuberculosis on the Immune Responses to Trivalent Influenza Vaccine (TIV) in Adults,NCT01811823; TIV_HIV_TB; TIV_HIV_TB,University of Witwatersrand,116439,"MARCH    , 31, 2014",Completed
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; piperine; pyrazinamide; rifampicin,Phase 4 Clinical,C4,"rifampicin + isoniazid + piperine (fixed dose combination, tuberculosis), Cadila Pharmaceuticals",69440,144,Risorine; ethambutol; pyrazinamide,144,null,Clinical Trial for Comparing Safety and Efficacy of Bio-enhanced Rifampicin (Risorine) Capsule in newly diagnosed Pulmonary Tuberculosis in Adult Patients,CTRI/2017/04/008329,All India Institute of Medical Sciences,295037,"APRIL    , 17, 2017",Not yet recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,12,MVA-85A,12,null,T−Cell Turnover Following Vaccination With MVA-85A,EudraCT number: 2007−001293-8; NCT00548444; TB018,University of Oxford,11182,"OCTOBER  , 31, 2007",Completed
1+,Glucose,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,levofloxacin,3492,100,amikacin; clarithromycin; isoniazid; levofloxacin; prothionamide; pyrazinamide,152,null,Optimization of MDR-TB Treatment Regimen Based on the Molecular Drug Susceptibility Results of Pyrazinamide,2013ZX10003008-003; KY2013-260; NCT02120638,Huashan Hospital,183613,"APRIL    , 30, 2014",Recruiting
2,Alanine transaminase; QT interval,Mycobacterium tuberculosis infection,Rifafour e275,Phase 2a Clinical,C2A,sutezolid,11088,59,PNU-100480,59,null,"PNU-100480 In Newly Diagnosed, Treatment Sensitive Patients With Pulmonary TB; Early Bactericidal Activity; Whole Blood Assay",B1171003; NCT01225640,Sequella Inc,71511,"AUGUST   , 31, 2011",Completed
3,CD4+ T cell,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,rifabutin,4229,20,efavirenz; rifabutin; rifabutin,15,TBTC-23C,Pharmacokinetics of Intermittent Rifabutin and Isoniazid With Daily Efavirenz,23C; CDC-NCHSTP-2588; NCT00023413; TBTC-23C,Centers for Disease Control and Prevention,10657,"NOVEMBER , 30, 1999",Completed
4+,CD4,Mycobacterium tuberculosis infection,null,Phase not specified,NS,nevirapine,3700,100,efavirenz; lamivudine; nevirapine; nevirapine,100,null,Once-Daily Dose of Nevirapine (400 mg) Versus Twice Daily Dose (200 mg) of Nevirapine in HIV and Tuberculosis Infection,CTRI/2012/08/002923,National AIDS Control Organization,126486,"SEPTEMBER, 01, 2012",Not yet recruiting
1,CD4/CD8 ratio; CD40 ligand; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-2; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,37,GSK-692342,37,null,Safety and Immunogenicity of a Candidate Tuberculosis (TB) Vaccine in HIV-Positive Adults,111517; NCT00707967,GlaxoSmithKline plc,19230,"JUNE     , 30, 2008",Completed
2+,null,Mycobacterium tuberculosis infection,Mycocox-4; ethambutol; pyrazinamide,Phase 4 Clinical,C4,"rifampicin + isoniazid + piperine (fixed dose combination, tuberculosis), Cadila Pharmaceuticals",69440,144,Risorine,144,null,Comparative Evaluation of the Effect of Risorine in Patients With Newly Diagnosed Sputum Smear Positive Pulmonary Tuberculosis,CTRI/2012/06/002742,Cadila Pharmaceuticals Ltd,118547,"FEBRUARY , 10, 2011",Completed
1+,CD4; albumin,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,tenofovir disoproxil fumarate,14493,156,efavirenz; lamivudine; lamivudine + efavirenz + tenofovir disoproxil fumarate; tenofovir disoproxil fumarate,156,TIME,Appropriate Timing of HAART in Co-infected HIV/TB Patients,0435.3/1551; NCT01014481; TIME,Bamrasnaradura Infectious Diseases Institute,61991,"OCTOBER  , 31, 2009",Terminated
5,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,moxifloxacin,12978,150,capreomycin; isoniazid; moxifloxacin; rifabutin; rifampicin,150,BBA,Brief Bactericidal Activity of Anti-Tuberculosis Drugs,BBA; CDC-NCHHSTP-6435; NCT02236078,Centers for Disease Control and Prevention,210083,"NOVEMBER , 30, 2015",Recruiting
2,Blood cells; Creatine phosphokinase; fbpB; hspX; icl1; rrnA-p1,Mycobacterium tuberculosis infection,Rifafour,Phase 2a Clinical,C2A,posizolid,26493,75,AZD-5847,75,null,Phase IIa EBA Trial of AZD-5847,11-0006; N01AI70022C; NCT01516203,National Institute of Allergy and Infectious Diseases,84246,"DECEMBER , 05, 2012",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,"rifampicin + isoniazid + piperine (fixed dose combination, tuberculosis), Cadila Pharmaceuticals",69440,50,Risorine,50,null,A Risorine Study in Sputum Positive Patients After 8 Weeks of Conventional Treatment,CRSC12005 Version. 01; CTRI/2012/11/003096,Cadila Pharmaceuticals Ltd,138715,"JUNE     , 10, 2012",Recruiting
4+,CD4,Mycobacterium tuberculosis infection,null,Phase not specified,NS,lamivudine,3474,100,efavirenz; lamivudine; nevirapine; nevirapine,100,null,Once-Daily Dose of Nevirapine (400 mg) Versus Twice Daily Dose (200 mg) of Nevirapine in HIV and Tuberculosis Infection,CTRI/2012/08/002923,National AIDS Control Organization,126486,"SEPTEMBER, 01, 2012",Not yet recruiting
5,null,Mycobacterium tuberculosis infection,isoniazid,Phase 1/Phase 2 Clinical,C12,levofloxacin,3492,70,gatifloxacin; levofloxacin; linezolid; moxifloxacin,70,TBRU 10,"Early Bactericidal Activity of Linezolid, Gatifloxacin, Levofloxacin, Isoniazid (INH) and Moxifloxacin in HIV Negative Adults With Initial Episodes of Sputum Smear-Positive Pulmonary Tuberculosis",01-553; NCT00396084; TBRU 10; TBRU 10,National Institute of Allergy and Infectious Diseases,10869,"FEBRUARY , 29, 2004",Completed
1+,Lung,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampin,Phase 2 Clinical,C2,rifapentine,15102,865,ethambutol; isoniazid; pyrazinamide; rifapentine,529,TBTC Study 29,Rifapentine During Intensive Phase Tuberculosis (TB) Treatment,2008-003633-24; CDC-NCHSTP-5399; NCT00694629; TBTC Study 29; UITB-Study-29,"Centers for Disease Control and Prevention, Tuberculosis Investigation Unit of Barcelona",17237,"DECEMBER , 31, 2008",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,nevirapine,3700,53,nevirapine; rifampicin,53,null,Population Pharmacokinetics of Nevirapine in Combination With Rifampicin-Based Short Course Chemotherapy in HIV- and Tuberculosis-Infected South African Patients,PMID:18751690,Uppsala University,149504,null,Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,moxifloxacin,12978,15,moxifloxacin; moxifloxacin; rifapentine,15,null,Pharmacokinetic Issues of Moxifloxacin Plus Rifapentine,06-0050; NA_00007322; NCT00460759,National Institute of Allergy and Infectious Diseases,10943,"JUNE     , 30, 2007",Terminated
1+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,"artenimol + piperaquine (malaria), Sigma-Tau",53724,36,artesunate; artesunate + amodiaquine; desethylamodiaquine; dihydroartemisinin; dihydroartemisinin + piperaquine; piperaquine,36,ARTEM-TB STUDY,Evaluating Pharmacokinetic Interactions Between Artemisinin-Based Therapies and Rifampacin-Based Tuberculosis Treatment in African Patients,ARTEM-TB STUDY; HS1294; PACTR201302000483287,Infectious Diseases Institute of Makerer University,142485,"JANUARY  , 31, 2013",Not yet recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,moxifloxacin,12978,182,levofloxacin; moxifloxacin,182,null,Comparison of the Effect Between Levofloxacin and Moxifloxacin Among MDR-TB Patients,H-0911-068-301; NCT01055145,Seoul National University Hospital,63801,"MARCH    , 31, 2010",Terminated
1+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,pretomanid,13323,52,PA-824; efavirenz; lopinavir + ritonavir; rifampin,52,null,"Evaluating the Safety and Drug Interaction of PA-824, an Investigational Tuberculosis Medication, Together With Efavirenz, Ritonavir-Boosted Lopinavir or Rifampin",11829; A5306; ACTG5306; NCT01571414,National Institute of Allergy and Infectious Diseases,86312,"MAY      , 31, 2012",Completed
2,Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-2; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,40,AERAS-402; AERAS-402; MVA-85A,40,null,Safety Study of Tuberculosis Vaccines AERAS-402 and MVA-85A,2012-002007-18; NCT01683773; TB032; UKCRN 13671,University of Oxford,91280,"SEPTEMBER, 30, 2012",Completed
2,Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-2; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,AERAS-402,53975,40,AERAS-402; AERAS-402; MVA-85A,40,null,Safety Study of Tuberculosis Vaccines AERAS-402 and MVA-85A,2012-002007-18; NCT01683773; TB032; UKCRN 13671,University of Oxford,91280,"SEPTEMBER, 30, 2012",Completed
2,null,Mycobacterium tuberculosis infection,moxifloxacin,Phase 1 Clinical,C1,moxifloxacin,12978,88,TMC-207,88,null,TMC207TBC1003 - A Study in Healthy Volunteers Investigating the Effect of Single-Dose TMC-207 on the QT/QTc Interval Under Fed Conditions,CR017167; NCT01291563; TMC-207-TBC1003,Janssen Diagnostics BVBA,74529,"FEBRUARY , 28, 2011",Completed
1+,Anti-Meningitis C antibodies; C-C motif chemokine 2; C-C motif chemokine 3; C-C motif chemokine 4; Cytokines; IgG; Interferon gamma; Interferon-alpha; Interleukin-1 alpha; Interleukin-1 beta; Interleukin-10; Interleukin-12; Interleukin-13; Interleukin-2; Interleukin-6,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,Priorix,11457,28,BCG; Infanrix; Menitorix; NeisVac-C; Pentacel; Prevnar 13; Priorix; Rotarix,28,BAM,A Study of the Interaction Between BCG And MenC Immunization,2013-003488-71; BAM; NCT02002156; OVG-2013/04; UKCRN 15722,University of Oxford,162886,"JUNE     , 20, 2014",Completed
3+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,efavirenz,10172,200,efavirenz; emtricitabine; emtricitabine; lopinavir + ritonavir; rifabutin; rifampicin; tenofovir disoproxil fumarate; tenofovir disoproxil fumarate,200,RIFART,RIFART,EudraCT 2007-007935-14; MI2-RIFART-2005; RIFART,Azienda Ospedaliera Spedali Civili di Brescia,131240,"MARCH    , 15, 2005",Terminated
1,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,rifabutin,4229,215,rifabutin,215,TBTC-23,Treatment of HIV-Related Tuberculosis Using a Rifabutin-Based Regimen,CDC-NCHSTP-2174; NCT00023361; TBTC STUDY 23; TBTC-23,Centers for Disease Control and Prevention,10653,"FEBRUARY , 28, 1999",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,nevirapine,3700,18,nevirapine; rifampicin,18,null,Nevirapine Drug Levels in HIV Positive Patients Also Receiving Rifampicin for Tuberculosis,CPR 004; NCT00617643,Makerere University,11184,"MAY      , 31, 2008",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,nevirapine,3700,47,efavirenz; lopinavir + ritonavir; nevirapine; rifabutin,47,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV Co-Infection in Vietnam,ANRS12150b; NCT00651066,French National Agency for Research on AIDS and Viral Hepatitis,11188,"JUNE     , 30, 2010",Completed
2+,Alanine transaminase; Bilirubin; C-reactive protein; Glucose; Hemoglobin; Leukocyte count; Serum potassium; Serum sodium; White blood cell,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,efavirenz,10172,240,prednisone,240,Pred-ART,"Preventing TB-IRIS in High-risk Patients: a Randomized, Placebo-controlled Trial of Prednisone",CIDRI_001; DOH-27-0813-4336; NCT01924286; PACTR201304000511413; Pred-ART; SP.2011.41304.074,University of Cape Town,150793,"AUGUST   , 30, 2013",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,pretomanid,13323,16,pretomanid,16,null,Food Effect Study on the Bioavailability and PK of PA-824 Tablets in Healthy Adult Subjects,CL-003; NCT01828827; PA-824 CL-003,TB Alliance,120522,"MARCH    , 31, 2007",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,H4:IC31,48499,243,H4+IC31,243,null,"Phase I/II, Safety and Immunogenicity Study of AERAS-404 in BCG-Primed Infants",C-015-404; C-015-404/ IMPAACT P1113; NCT01861730; U01AI068632,Aeras Global TB Vaccine Foundation,134374,"JULY     , 01, 2013",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,lopinavir + ritonavir,14681,16,bedaquiline; lopinavir + ritonavir,16,null,TMC207-TiDP13-C110: Interaction Study With Lopinavir/Ritonavir in Healthy Volunteer,CR002545; NCT00828529; NCT00980291,Janssen Diagnostics BVBA,42128,"FEBRUARY , 28, 2009",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,lamivudine,3474,130,efavirenz; isoniazid; lamivudine; pyrazinamide; rifampicin; zidovudine,130,IPEC-EFV,Randomized Clinical Trial to Assess the Efficacy and Safety of Concomitant Use of Rifampicin and Efavirenz 600 X  800 mg,CAAE-0017.1.009.000-03; IPEC-EFV; NCT00533390,Fundacao Oswaldo Cruz (Fiocruz),11181,"JANUARY  , 31, 2007",Terminated
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,nevirapine,3700,16,TMC-207; nevirapine,16,null,TMC207-TiDP13-C117: Interaction Study in Human Immunodeficiency Virus-type 1 (HIV-1) Infected Patients With Nevirapine (NVP),CR015793; NCT00910806; NCT00980668; TMC207-TiDP13-C117,"Janssen Diagnostics BVBA, Johnson & Johnson",56959,"JUNE     , 30, 2009",Completed
2+,Hepatitis B large envelope protein; Hepatitis B virus external core antigen; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,lopinavir + ritonavir,14681,2073,"efavirenz; isoniazid; lopinavir + ritonavir; tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",1107,TEMPRANO,Early Antiretroviral Treatment and/or Early Isoniazid Prophylaxis Against Tuberculosis in HIV-Infected Adults,ANRS 12136 TEMPRANO; NCT00495651; TEMPRANO,French National Agency for Research on AIDS and Viral Hepatitis,195741,"MARCH    , 31, 2008",Completed
1,Alanine transaminase; Aspartate aminotransferase; Cluster of differentiation 4; Hepatitis C virus RNA; Hepatitis C virus-RNA,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,ribavirin,5369,550,peg-interferon alpha-2a; ribavirin,550,null,"Antivirus Therapy for Population with HIV, HCV and TB Co-infection Clinical Trial",ChiCTR-TRC-00000407; ChiCTR-TRC-09000407,Guangzhou eighth People's Hospital,162528,"MAY      , 01, 2009",Recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,rifapentine,15102,15,moxifloxacin; moxifloxacin; rifapentine,15,null,Pharmacokinetic Issues of Moxifloxacin Plus Rifapentine,06-0050; NA_00007322; NCT00460759,National Institute of Allergy and Infectious Diseases,10943,"JUNE     , 30, 2007",Terminated
1+,Anti-Meningitis C antibodies; C-C motif chemokine 2; C-C motif chemokine 3; C-C motif chemokine 4; Cytokines; IgG; Interferon gamma; Interferon-alpha; Interleukin-1 alpha; Interleukin-1 beta; Interleukin-10; Interleukin-12; Interleukin-13; Interleukin-2; Interleukin-6,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,Prevnar 13,34281,28,BCG; Infanrix; Menitorix; NeisVac-C; Pentacel; Prevnar 13; Priorix; Rotarix,28,BAM,A Study of the Interaction Between BCG And MenC Immunization,2013-003488-71; BAM; NCT02002156; OVG-2013/04; UKCRN 15722,University of Oxford,162886,"JUNE     , 20, 2014",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,rifapentine,15102,216,ethambutol; isoniazid; moxifloxacin; pyrazinamide; pyridoxine; rifampin; rifapentine,121,null,Rifapentine Plus Moxifloxacin for Treatment of Pulmonary Tuberculosis,06-0018; NCT00728507,Johns Hopkins University,23035,"NOVEMBER , 30, 2009",Terminated
1,Blood pressure; Body temperature; Cytokines; Heart rate; Interferon gamma; Respiratory frequency,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,AEC/BC02,81363,135,AEC/BC02,135,null,A Phase I Study of the Recombinant Mycobacterium Tuberculosis Vaccine Freeze-dried,AEC/BCO2; LTAO; LTAO-AEC/BCO2-Ⅰ-HEALTHY; NCT03026972,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,285854,"APRIL    , 16, 2018",Recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,rifapentine,15102,1148,isoniazid; isoniazid; rifampin; rifapentine,1148,null,Tuberculosis Prevention for HIV Infected Adults,1R01AI48526-01A1; 5RO1AI048526-02; NCT00057122,National Institute of Allergy and Infectious Diseases,8790,"SEPTEMBER, 30, 2002",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,AEC/BC02,81363,175,AEC/BC02; BC02,175,null,Clinical study of freeze - dried recombinant tuberculosis vaccine (AEC/BC02),201601; CTR20150383,Chongqing Zhifei Biological Products Co Ltd,291253,null,Not yet recruiting
1+,Interferon gamma; Total body mass,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,rifapentine,15102,2927,isoniazid; pyridoxine; rifapentine,2927,CORTIS,The Correlate of Risk Targeted Intervention Study,CORTIS; CORTIS-01; NCT02735590,University of Cape Town,258043,"SEPTEMBER, 20, 2016",No longer recruiting
4,Alanine transaminase; Aspartate aminotransferase; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifapentine,15102,500,isoniazid; isoniazid; methadone; naltrexone; rifapentine,500,HARAPAN II,"Addiction, HIV and Tuberculosis in Malaysian Criminal Justice Settings",1R01DA041271; 2000020053; 33974; HARAPAN II; MECID.NO:201696-4220; NCT03089983; NMRR-17-19-33974,"National Institutes of Health, Yale University",294801,"AUGUST   , 21, 2017",Recruiting
1+,Alanine transaminase; Arylacetamide deacetylase; Bilirubin; Blood cells; Creatinine; Nuclear receptor subfamily 1 group I member 2; Nuclear receptor subfamily 1 group I member 3; Solute carrier organic anion transporter family member 1B1,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampin,Phase 2 Clinical,C2,rifapentine,15102,153,ethambutol; isoniazid; pyrazinamide; rifapentine,153,null,Study of Daily Rifapentine for Pulmonary Tuberculosis,3524; NA_00019095; NCT00814671,Johns Hopkins University,39550,"APRIL    , 30, 2010",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,levofloxacin,3492,6,amikacin; amoxicillin-clavulanate; bedaquiline; clofazimine; cycloserine; enviomycin; ethambutol; ethionamide; fluoroquinolone therapy; kanamycin; levofloxacin; linezolid; para-aminosalicylic acid; pyrazinamide; streptomycin,6,null,An Exploratory Study of TMC-207 in Japanese Participants with Pulmonary Multi-Drug Resistant Tuberculosis (MDR-TB),CR105158; JapicCTI-163116; NCT02365623; TMC207TBC2001,Janssen Pharmaceutical KK,222400,"FEBRUARY , 18, 2015",Completed
1+,Human immunodeficiency virus RNA; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; tenofovir disoproxil fumarate,Phase 3 Clinical,C3,lamivudine,3474,460,lamivudine; raltegravir; rifampin; tenofovir disoproxil fumarate,460,REFLATE TB2,Raltegravir Versus Efavirenz in Naive HIV-1-infected Patients Receiving Rifampin for Active Tuberculosis,ANRS 12300 REFLATE TB2; NCT02273765; REFLATE TB2,INSERM,214156,"SEPTEMBER, 30, 2015",Recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,rifapentine,15102,500,isoniazid; isoniazid; rifapentine,500,null,"A 9-Month Isoniazid versus 3-Month Isoniazid plus Rifapentine for Treatment of Tuberculosis Infection in Rheumatic Patients: a Randomized, Controlled Trial",ChiCTR1800018242,Peking Union Medical College Hospital,352748,"SEPTEMBER, 01, 2017",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; pyridoxine; rifampin,Phase 3 Clinical,C3,moxifloxacin,12978,60,ethambutol; isoniazid; moxifloxacin; pyrazinamide; pyridoxine; rifampin; rifapentine,60,S31PK/PD,Pharmacokinetic and Pharmacodynamic Study of High-Dose Rifapentine and Moxifloxacin for Treatment of Tuberculosis,CDC-NCHHSTP-6719; NCT02563327; S31PK/PD,Centers for Disease Control and Prevention,242269,"MAY      , 30, 2016",Recruiting
2+,QT interval,Mycobacterium tuberculosis infection,pryrazinamide,Phase 3 Clinical,C3,levofloxacin,3492,750,Lamprene; bedaquiline; delamanid; levofloxacin; linezolid; moxifloxacin; pryrazinamide,750,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,MSF ERB-1555; NCT02754765; endTB,Médecins Sans Frontières France,259506,"DECEMBER , 31, 2016",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 2b Clinical,C2B,macozinone,90085,192,PBTZ-169,192,null,"International, multicenter, double-blind, placebo-controlled, randomized trial to evaluate the efficacy, safety and pharmacokinetics of PBTZ-169 when used in combination therapy in patients with tuberculosis of respiratory organs with bacterial excretion and drug resistance",PBTZ169-A15-C2b-1,Nearmedic Plus,316145,"AUGUST   , 17, 2017",Status not specified
2+,QT interval,Mycobacterium tuberculosis infection,WHO regimen therapy,Phase 3 Clinical,C3,levofloxacin,3492,null,Deltyba; Lamprene; Levaquin; Sirturo; Zyvox,null,DRAMATIC,"Efficacy and Tolerability of Bedaquiline, Delamanid, Levofloxacin, Linezolid, and Clofazimine for Treatment of Patients With MDR-TB",DRAMATIC; H38212; NCT03828201,Boston University,368916,"JANUARY  , 31, 2020",Terminated
2+,null,Mycobacterium tuberculosis infection,ethambutol; rifampicin,Phase 1/Phase 2 Clinical,C12,levofloxacin,3492,120,ethambutol; isoniazid; levofloxacin; pyrazinamide; rifampicin,120,TBM-KIDS,Optimizing Treatment to Improve TBM Outcomes in Children,CTRI/2017/03/008004; IRB00051196; NCT02958709; TBM-KIDS,Johns Hopkins University,278847,"FEBRUARY , 22, 2017",Recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,bedaquiline,51310,109,bedaquiline; bedaquiline; linezolid; pretomanid,109,null,A Phase III Study Assessing the Safety and Efficacy of Bedaquiline Plus PA-824 Plus Linezolid in Subjects With Drug-Resistant Pulmonary Tuberculosis,NCT02333799; NIX-TB-(B-L-PA),TB Alliance,219499,"MARCH    , 31, 2015",No longer recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,imipenem + cilastatin,44406,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
1+,Cytokines,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 1 Clinical,C1,moxifloxacin,12978,75,ethambutol; isoniazid; moxifloxacin; pyrazinamide; rifampicin,75,null,A Comparative study of different treatment regimes for brain tuberculosis,CTRI/2019/05/019222,Department of Science & Technology,382387,"MAY      , 27, 2019",Not yet recruiting
5,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,rifabutin,4229,150,capreomycin; isoniazid; moxifloxacin; rifabutin; rifampicin,150,BBA,Brief Bactericidal Activity of Anti-Tuberculosis Drugs,BBA; CDC-NCHHSTP-6435; NCT02236078,Centers for Disease Control and Prevention,210083,"NOVEMBER , 30, 2015",Recruiting
2+,QT interval,Mycobacterium tuberculosis infection,WHO regimen therapy,Phase 3 Clinical,C3,delamanid,16545,null,Deltyba; Lamprene; Levaquin; Sirturo; Zyvox,null,DRAMATIC,"Efficacy and Tolerability of Bedaquiline, Delamanid, Levofloxacin, Linezolid, and Clofazimine for Treatment of Patients With MDR-TB",DRAMATIC; H38212; NCT03828201,Boston University,368916,"JANUARY  , 31, 2020",Terminated
2+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,bedaquiline,51310,6,amikacin; amoxicillin-clavulanate; bedaquiline; clofazimine; cycloserine; enviomycin; ethambutol; ethionamide; fluoroquinolone therapy; kanamycin; levofloxacin; linezolid; para-aminosalicylic acid; pyrazinamide; streptomycin,6,null,An Exploratory Study of TMC-207 in Japanese Participants with Pulmonary Multi-Drug Resistant Tuberculosis (MDR-TB),CR105158; JapicCTI-163116; NCT02365623; TMC207TBC2001,Janssen Pharmaceutical KK,222400,"FEBRUARY , 18, 2015",Completed
1,Blood pressure; Body temperature; Heart rate; Hydrocortisone; Partial Thromboplastin Time; Prothrombin time; Total body mass; Visual acuity,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,delamanid,16545,213,delamanid,213,null,"A Phase II, Multicenter, Uncontrolled, Open-label Trial to Evaluate Safety, Tolerability, and Efficacy of Orally Administered OPC-67683",242-07-208; EudraCT 2008-005107-26; NCT02573350,Otsuka Pharmaceutical Development and Commercialization Inc,242789,"MARCH    , 31, 2009",Completed
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin; streptomycin,Phase 4 Clinical,C4,rifabutin,4229,864,ethambutol; isoniazid aminosalicylate; moxifloxacin; pyrazinamide; rifabutin,80,null,Research on New Regimens for Retreatment Pulmonary Tuberculosis,2013ZX10003009; NCT02331823,Shanghai Pulmonary Hospital,220243,"JUNE     , 30, 2013",Recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,SQ-109,31010,170,SQ-109; chemotherapy,140,null,"A phase IIb/III, international, multicenter, prospective, randomized, double-blind, placebo-controlled study to evaluate the efficacy and tolerability of chemotherapy regimens, including drug SQ-109 in patients with pulmonary multidrug-resistant mycobacterium tuberculosis",MOSQ-109,Infectex,168785,"JUNE     , 27, 2012",Completed
3,null,Mycobacterium tuberculosis infection,isoniazid; rifampin,Phase 2a Clinical,C2A,bedaquiline,51310,75,TMC-207,75,null,TMC207-C202: Study to Evaluate Bactericidal Activity of Multiple Oral Doses of TMC207 in Subjects With Sputum-Smear Positive Tuberculosis,CR002725; NCT00523926; TMC207-C202,Janssen R&D (Ireland),9315,"MAY      , 31, 2005",Completed
1+,QT interval,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,linezolid,11036,630,Lamprene; bedaquiline; linezolid; moxifloxacin; pretomanid,630,TB-PRACTECAL,Pragmatic Clinical Trial for a More Effective Concise and Less Toxic MDR-TB Treatment Regimen(s),1541; NCT02589782; TB-PRACTECAL,Medecins Sans Frontieres,244304,"JANUARY  , 31, 2017",Recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,levofloxacin,3492,44,isoniazid; levofloxacin; pyridoxine,44,null,"A Pilot Study of Methodology to Rapidly Evaluate Drugs for Bactericidal Activity, Tolerance and Pharmacokinetics in the Treatment of Pulmonary Tuberculosis Using Isoniazid and Levofloxacin",DATRI 008; NCT00000778,National Institute of Allergy and Infectious Diseases,8780,"NOVEMBER , 01, 1999",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,linezolid,11036,31,linezolid,31,LINEZOLIDE,Pharmacokinetic and Therapeutic Adaptation of Linezolid in the Treatment of Multi-Resistant Tuberculosis,LINEZOLIDE; LINEZOLIDE; NCT02778828,Groupe Hospitalier Paris Saint-Joseph,261481,"NOVEMBER , 04, 2015",Completed
1+,Human immunodeficiency virus RNA,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,tenofovir disoproxil fumarate,14493,60,dolutegravir; emtricitabine; isoniazid; rifapentine; tenofovir disoproxil fumarate,60,IMPAACT4TB,"Safety, Tolerability DDI Short Course Treatment of LTBI Infection With High-dose Rifapentine Isoniazid in HIV+ Patients",3HP DTG AUR1-6-212 IMPAACT4TB; IMPAACT4TB; NCT03435146,Aurum Institute,329251,"JANUARY  , 18, 2018",Recruiting
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2/Phase 3 Clinical,C23,bedaquiline,51310,900,bedaquiline; clofazimine; ethambutol; isoniazid; levofloxacin; linezolid; pyrazinamide; rifampicin; rifapentine,900,TRUNCATE-TB,A 2 Month Regimens Using Novel Combinations to Augment Treatment Effectiveness for Drug-Sensitive Tuberculosis,2016-CT0376; NCT03474198; PHRR170327-001522; TRUNCATE-TB; TRUNCATE-TB,"Syneos Health Inc, University College London",333435,"MARCH    , 21, 2018",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,rifapentine,15102,72,isoniazid; rifapentine,72,null,Tuberculosis Clinical Trials Consortium Study 35,6993; NCT03730181,Centers for Disease Control and Prevention,359122,"SEPTEMBER, 30, 2019",Not yet recruiting
2,Blood pressure; Body temperature; Heart rate; Interferon gamma,Mycobacterium tuberculosis infection,null,Phase 2b Clinical,C2B,ESAT-6CFP10,95442,192,ESAT-6-CFP-10; TB-PPD,192,null,Phase IIb Clinical Study of Recombinant Mycobacterium Tuberculosis Allergen ESAT-6-CFP-10,LTao-IIb-patient; NCT02336542,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,219931,"NOVEMBER , 30, 2014",Completed
2+,QT interval,Mycobacterium tuberculosis infection,pryrazinamide,Phase 3 Clinical,C3,"clofazimine (oral, tuberculosis), Novartis",91861,750,Lamprene; bedaquiline; delamanid; levofloxacin; linezolid; moxifloxacin; pryrazinamide,750,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,MSF ERB-1555; NCT02754765; endTB,Médecins Sans Frontières France,259506,"DECEMBER , 31, 2016",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,"clofazimine (oral, tuberculosis), Novartis",91861,144,"clofazimine (oral, tuberculosis), Novartis",144,null,"A randomized, multicenter, controlled trial for clofazimine-containing protocol in the treatment of newly diagnosed multidrug-resistant tuberculosis",ChiCTR1800020391,"Beijing Chest Hospital, Capital Medical University",365020,"DECEMBER , 01, 2012",No longer recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,pafuramidine,16755,100,pafuramidine,175,null,"Randomized, double-blind, phase I safety and tolerability study of pafuramidine maleate (DB-289) in healthy subjects",C05-013; NCT00619346,Immtech Pharmaceuticals Inc,17432,"NOVEMBER , 30, 2007",Terminated
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampin,Phase 2 Clinical,C2,"clofazimine (oral, tuberculosis), Novartis",91861,320,clofazimine; isoniazid; pyrazinamide; rifampin,320,CORTAIL,Evaluation of clofazimine as a part of TB treatment in order to shorten the duration of treatment,CORTAIL; CTRI/2019/03/018102,Indian Council of Medical Research,373668,"APRIL    , 01, 2019",Not yet recruiting
2,null,Mycobacterium tuberculosis infection,isoniazid,Phase 3 Clinical,C3,rifapentine,15102,3000,isoniazid; rifapentine,3000,null,Study for latent tuberculosis infection intervention among close contacts of pulmonary tuberculosis patients,ChiCTR1800019658,The Chinese Centre for Disease Control and Prevention,361821,"JUNE     , 10, 2018",Recruiting
1+,null,Mycobacterium tuberculosis infection,bedaquiline; delamanid; moxifloxacin,Phase 2b Clinical,C2B,bedaquiline,51310,75,bedaquiline; delamanid; midazolam; moxifloxacin; sutezolid,75,SUDOCU,PanACEA Sutezolid Dose-finding and Combination Evaluation,NCT03959566; PANACEA-SUDOCU-01; SUDOCU,Ludwig-Maximilians University of Munich,381674,"AUGUST   , 31, 2019",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,bedaquiline,51310,500,amikacin; bedaquiline; clarithromycin; clofazimine; cycloserine; ethambutol; linezolid; moxifloxacin; prothionamide; pyrazinamide; sodium para-aminosalicylate,500,null,The Effect of 18-month Regimen Containing Six Anti-tuberculosis Drugs for Patients With MDR-TB,2018ZX10722301-001; NCT03830671,Beijing Chest Hospital,369109,"MARCH    , 08, 2019",Recruiting
5+,null,Mycobacterium tuberculosis infection,bedaquiline; bedaquiline; clofazimine; clofazimine; delamanid; delamanid; linezolid; linezolid,Phase 3 Clinical,C3,linezolid,11036,500,bedaquiline; clofazimine; delamanid; linezolid,500,endTB-Q,Evaluating Newly Approved Drugs in Combination Regimens for Multidrug-Resistant TB With Fluoroquinolone Resistance,MSF ERB-1761; NCT03896685; endTB-Q,Médecins Sans Frontières France,375499,"JUNE     , 30, 2019",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2/Phase 3 Clinical,C23,linezolid,11036,900,bedaquiline; clofazimine; ethambutol; isoniazid; levofloxacin; linezolid; pyrazinamide; rifampicin; rifapentine,900,TRUNCATE-TB,A 2 Month Regimens Using Novel Combinations to Augment Treatment Effectiveness for Drug-Sensitive Tuberculosis,2016-CT0376; NCT03474198; PHRR170327-001522; TRUNCATE-TB; TRUNCATE-TB,"Syneos Health Inc, University College London",333435,"MARCH    , 21, 2018",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,DAR-901,90231,650,DAR-901,650,DAR-PIA,DAR-901 TB Booster Vaccine to Prevent TB in Adolescents,29001; DAR-PIA; NCT02712424,Dartmouth-Hitchcock Medical Center,256110,"MARCH    , 31, 2016",No longer recruiting
2,Th1 cytokines,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,"doxycycline (once-daily, oral controlled release), CollaGenex",48140,200,"doxycycline (once-daily, oral controlled release), CollaGenex; doxycycline hyclate",200,Map2Co,Concomitant Infections of Mansonella Perstans in Tuberculosis and Buruli Ulcer Disease Patients From Ghana,GZ:JA 1479/5-1; Map2Co; NCT02281643,kwame Nkrumah University of Science and Technology,214864,"OCTOBER  , 31, 2014",Completed
2,Cytokines; Cytotoxic T-Lymphocytes; T-Helper Lymphocytes,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,H4:IC31,48499,70,"BCG SSI; HyVac4/IC-31 vaccine (tuberculosis), SSI/Aeras/Intercell",70,null,"A Study for Safety and Immunogenicity of BCG and AERAS-404 in HIV-negative, TB-negative, BCG-naive Adults",C-013-404; NCT02420444,Aeras Global TB Vaccine Foundation,227111,"JANUARY  , 31, 2011",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,clarithromycin,2829,500,amikacin; bedaquiline; clarithromycin; clofazimine; cycloserine; ethambutol; linezolid; moxifloxacin; prothionamide; pyrazinamide; sodium para-aminosalicylate,500,null,The Effect of 18-month Regimen Containing Six Anti-tuberculosis Drugs for Patients With MDR-TB,2018ZX10722301-001; NCT03830671,Beijing Chest Hospital,369109,"MARCH    , 08, 2019",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,dolutegravir,59062,16,dolutegravir; rifampicin,16,RADIO,A Clinical Study Investigating Rifampicin and Dolutegravir in Combination in Healthy Volunteers,NCT03199690; RADIO; SSCR103,ST STEPHEN'S CLINICAL RESEARCH LIMITED,303292,"OCTOBER  , 31, 2017",Not yet recruiting
1+,Human immunodeficiency virus RNA,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,dolutegravir,59062,60,dolutegravir; emtricitabine; isoniazid; rifapentine; tenofovir disoproxil fumarate,60,IMPAACT4TB,"Safety, Tolerability DDI Short Course Treatment of LTBI Infection With High-dose Rifapentine Isoniazid in HIV+ Patients",3HP DTG AUR1-6-212 IMPAACT4TB; IMPAACT4TB; NCT03435146,Aurum Institute,329251,"JANUARY  , 18, 2018",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,clarithromycin,2829,7,clarithromycin; linezolid; linezolid + clarithromycin,7,null,Drug Interaction Study Between Linezolid and Clarithromycin in Tuberculosis Patients,2011-000513-39; NCT01521364; NL35534.042.11; NTR3260,University Medical Center Groningen,182646,"DECEMBER , 31, 2011",Completed
1,B cells; CD4+; CD8+; Cytotoxic T-Lymphocytes; Interferon-gamma; Interleukin-2; T-Helper Lymphocytes; Tumor necrosis factor-alpha (TNF),Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,VPM-1002,55569,80,VPM-1-002,80,null,Dose-Escalation Study on Safety and Immunogenicity of VPM-1-002 in Comparison With BCG in Healthy Male Volunteers,EudraCT 2007-002789-37; NCT00749034; VPM1002-GE-1.01TB,Vakzine Projekt Management GmbH,48943,"SEPTEMBER, 30, 2008",Completed
1,CD4-count; Eosinophils; IFN-gamma; IL5; IgE; Interleukin-10; TGF-beta; Total body mass,Mycobacterium tuberculosis infection,null,Phase not specified,NS,albendazole,12132,140,albendazole,140,null,Deworming Against Tuberculosis,ALBP; HLF-20060245; NCT00857116,Linkoping University,48176,"MARCH    , 31, 2009",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase Not Applicable,PNA,moxifloxacin,12978,40,moxifloxacin,39,null,The Effect of Ethnic on Moxifloxacin Induced QT Interval Prolongation in Korean and Japanese Healthy Subjects,12-166; NCT01876316,Inje University,139433,"NOVEMBER , 30, 2011",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,24,MVA-85A,24,null,"A phase I study of a new tuberculosis (TB) vaccine, MVA-85A, in healthy volunteers with HIV",NCT00731471; TB019,University of Oxford,23059,"AUGUST   , 31, 2008",Completed
1+,CD4+,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,efavirenz,10172,180,didanosine; efavirenz; efavirenz +  didanosine + lamivudine; ethambutol; ethambutol + isoniazid + rifampicin + pyrazinamide; isoniazid; isoniazid + rifampicin; lamivudine; nevirapine; nevirapine + didanosine + lamivudine; pyrazinamide; rifampicin,116,null,Safety and Efficacy of Two Once Daily Anti Retroviral Treatment Regimens Along With Anti-Tuberculosis Treatment,NCT00332306; trc23,Tuberculosis Research Centre,10863,"JUNE     , 30, 2006",Suspended
1+,Solute carrier organic anion transporter family member 1B1,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,efavirenz,10172,48,efavirenz; isoniazid; lamivudine; lopinavir + ritonavir; nevirapine; rifabutin; stavudine,35,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,ANRS12150a; NCT00640887,French National Agency for Research on AIDS and Viral Hepatitis,11187,"FEBRUARY , 28, 2009",Completed
2,null,Mycobacterium tuberculosis infection,Primflo,Phase not specified,NS,moxifloxacin,12978,24,moxifloxacin,24,null,"A randomized, open, balanced, two-component, two-period, crossover, with a single-dose study of comparative pharmacokinetics and bioequivalence of Primflo (moxifloxacin) 400 mg (Dr Reddy's Laboratories Ltd, India) and Avilox  (moxifloxacin) 400 mg (Bayer Healthcare AG, Germany), when taken orally on an empty stomach in healthy adult volunteers",DRL_RUS/MD/2012rmox1,Dr Reddy's Laboratories Ltd,167750,"OCTOBER  , 10, 2012",Status not specified
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,sutezolid,11088,59,PNU-100480,59,null,"Safety, Tolerability, Pharmacokinetics And Measurement Of Whole Blood Activity (WBA) Of PNU-100480 After Multiple Oral Doses In Healthy Adult Volunteers",B1171002; NCT00990990,Sequella Inc,60906,"OCTOBER  , 31, 2009",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,moxifloxacin,12978,19,isoniazid; kanamycin; moxifloxacin; pyrazinamide; rifampicin,19,null,Measurement of Anti-TB Drugs in Lung Tissue From Patients Having Surgery to Treat Tuberculosis,09-I-N061; 999909061; NCT00816426,National Institute of Allergy and Infectious Diseases,192117,"DECEMBER , 29, 2008",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,moxifloxacin,12978,197,ethambutol; isoniazid; moxifloxacin; pyrazinamide; rifampicin,58,IMPRESS,Improving Retreatment Success,CAP 011; IMPRESS; NCT02114684,Centre for the AIDS Program of Research in South Africa,182040,"NOVEMBER , 30, 2013",Completed
1,Mitochondria,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,linezolid,11036,41,linezolid,41,null,Linezolid to Treat Extensively-Drug Resistant Tuberculosis,08-I-N167; 999908167; NCT00727844,National Institute of Allergy and Infectious Diseases,23143,"JULY     , 31, 2008",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,delamanid,16545,20,OPC-67683,20,null,Safety and Pharmacokinetics (PK) in Multidrug-Resistant (MDR) Refractive Tuberculosis,2009-014944-13; 242-08-210; NCT01131351,Otsuka Holdings Co Ltd,66735,"FEBRUARY , 28, 2010",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,indinavir,5321,20,indinavir; ritonavir,20,null,The Pharmacokinetics and Safety of indinavir/ritonavir With NRTIs in HIV/TB co-Infected Patients Receiving Rifampicin,HIV-NAT 044; NCT00411996,The HIV Netherlands Australia Thailand Research Collaboration,10871,"DECEMBER , 31, 2006",Completed
1+,CD4; Cytotoxic T-Lymphocytes; HIV viral load; Human immunodeficiency virus RNA; T-Helper Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,Kaletra; ethambutol; isoniazid; pyrazinamide; pyridoxine; rifampin,Phase 2b Clinical,C2B,lopinavir + ritonavir,14681,71,Kaletra; ethambutol; isoniazid; pyrazinamide; pyridoxine; raltegravir; rifabutin,71,null,Rifampin-Based Tuberculosis Treatment Versus Rifabutin-Based Tuberculosis Treatment in Persons With HIV,1U01AI068636; ACTG A5290; NCT01601626,AIDS Clinical Trials Group,87585,"JULY     , 13, 2013",Terminated
2+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,lamivudine,3474,120,Rifafour; Rifafour; efavirenz; lamivudine; zidovudine,120,PK-TB-HAART,"Bioavailability of the Fixed Dose Formulation Rifafour Containing Isoniazid, Rifampicin, Pyrazinamide, Ethambutol and the World Health Organization (WHO) Recommended First Line Antiretroviral Drugs Zidovudine, Lamivudine, Efavirenz Administered to New Tuberculosis (TB) Patients at Different Levels of Immunosuppression",A40607; ISRCTN83323477; PK-TB-HAART,World Health Organization,136052,"MAY      , 29, 2006",Completed
3,Albumin; Orosomucoid; Total body mass,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,clindamycin,44370,63,clindamycin; rifampin; ticarcillin-clavulanate,62,Staph,Pharmacokinetics of Antistaphylococcal Antibiotics in Infants,NCT01728363; NICHD-2012-02-Staph Trio; Pro00037820; Staph,Duke University,98566,"JANUARY  , 31, 2013",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,stavudine,4481,661,efavirenz; efavirenz + lamivudine + stavudine; lamivudine; stavudine,540,ANRS 1295 CAMELIA,Early versus Late Introduction of Antiretroviral Therapy in HIV-infected Patients With Tuberculosis,ANRS 1295 CAMELIA; ANRS 1295 CAMELIA; CIPRA KH 001; NCT00226434; NCT00498823,French National Agency for Research on AIDS and Viral Hepatitis,145651,"JANUARY  , 31, 2006",Completed
1+,Alanine aminotransferase; CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; stavudine,Phase 2/Phase 3 Clinical,C23,lamivudine,3474,570,Arm A; Arm B; Triomune; ethambutol; ethambutol; isoniazid; isoniazid; lamivudine; nevirapine; pyrazinamide; pyrazinamide; rifampicin; rifampicin; stavudine,570,CARINEMO,Comparison of Nevirapine and Efavirenz for the Treatment of HIV-TB Co-infected Patients,ANRS 12146 CARINEMO; ANRS 12146/12214; ANRS 12214; CARINEMO; NCT00495326,French National Agency for Research on AIDS and Viral Hepatitis,10948,"DECEMBER , 31, 2007",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,moxifloxacin,12978,200,ethambutol; isoniazid; moxifloxacin; pyrazinamide; rifampicin,200,null,Latency in Pulmonary Tuberculosis,LTB01; NCT01154959,Tuberculosis Research Centre,67984,"FEBRUARY , 28, 2010",Recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,zidovudine,44316,120,Rifafour; Rifafour; efavirenz; lamivudine; zidovudine,120,PK-TB-HAART,"Bioavailability of the Fixed Dose Formulation Rifafour Containing Isoniazid, Rifampicin, Pyrazinamide, Ethambutol and the World Health Organization (WHO) Recommended First Line Antiretroviral Drugs Zidovudine, Lamivudine, Efavirenz Administered to New Tuberculosis (TB) Patients at Different Levels of Immunosuppression",A40607; ISRCTN83323477; PK-TB-HAART,World Health Organization,136052,"MAY      , 29, 2006",Completed
2+,QT interval,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,pretomanid,13323,207,DRMPa200Z regimen; HRZE regimen; MPa100Z regimen; MPa200Z regimen; PA-824; Rifafour; ethambutol; isoniazid; moxifloxacin; pyrazinamide; pyrazinamide; rifampicin,207,null,"Evaluation of 8 Weeks of Treatment With the Combination of Moxifloxacin, PA-824 and Pyrazinamide in Patients With Drug Sensitive and Multi Drug-Resistant Pulmonary Tuberculosis (TB)",NC-002-(M-Pa-Z); NCT01498419,TB Alliance,83489,"MARCH    , 31, 2012",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,lopinavir + ritonavir,14681,30,lopinavir+ritonavir; rifabutin,30,RIFLOPI,Rifabutin With Lopinavir/ritonavir in Patients Coinfected With Tuberculosis and HIV in Burkina Faso,PACTR201310000629390; RIFLOPI,"Institut de Recherche en Sciences de la Sante (IRSS), Burkina Faso",161441,"NOVEMBER , 28, 2013",Not yet recruiting
2,T-Lymphocytes,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,42,ChAdOx1-85A; ChAdOx1-85A; MVA-85A,42,null,Safety Study of ChAdOx1-85A Vaccination With and Without MVA-85A Boost in Healthy Adults,NCT01829490; TB034; UKCRN 14241,University of Oxford,120744,"JULY     , 31, 2013",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,"BCG vaccine, Organon",13624,120,"BCG vaccine, Organon",120,null,Challenge Model for Assessment of Human TB Immunity,11-0033; HHSN272200800003C; N01AI80003C; NCT01868464,National Institute of Allergy and Infectious Diseases,149358,"JUNE     , 30, 2014",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,pretomanid,13323,74,PA-824; moxifloxacin,74,null,Effect of PA-824 and of PA-824 Plus Moxifloxacin on the QTc Interval in Healthy Volunteers,10-0058; N01AI80024C; NCT01674218,National Institute of Allergy and Infectious Diseases,90512,"SEPTEMBER, 30, 2012",Completed
2,Blood pressure; Body temperature; Heart rate; QT interval; Total body mass,Mycobacterium tuberculosis infection,null,Phase 2b Clinical,C2B,delamanid,16545,481,Optimized background regimen; delamanid,481,null,"A Placebo-Controlled, Phase II Trial to Evaluate OPC-67683 in Patients With Pulmonary Sputum Culture-Positive, Multidrug-Resistant Tuberculosis (TB)",2007-005229-31; 242-07-204; NCT00685360; Trial 204,Otsuka Pharmaceutical Development and Commercialization Inc,15754,"APRIL    , 30, 2008",Completed
2+,null,Mycobacterium tuberculosis infection,kanamycin; moxifloxacin,Phase 2/Phase 3 Clinical,C23,linezolid,11036,300,bedaqualine; ethionamide; isoniazid; levofloxacin; linezolid; pyrazinamide; terizidone,300,NEXT,An Open-label RCT to Evaluate a New Treatment Regimen for Patients With Multidrug-resistant Tuberculosis,NCT02454205; NEXT; NEXT-5001,University of Cape Town,230529,"OCTOBER  , 31, 2015",Recruiting
2,ABCB1; CD4; CYP2B6; CYP3A5; Cytochrome P450 2B6; Cytochrome P450 3A5; Multidrug resistance protein 1; SLCO1B1; Solute carrier organic anion transporter family member 1B1; Total body mass; UDP-glucuronosyltransferase 2B7; UGT2B7; body mass index; plasma HIV-1 RNA load,Mycobacterium tuberculosis infection,efavirenz,Phase 3 Clinical,C3,efavirenz,10172,800,efavirenz; rifampicin,493,HIV-TB Pharmagene,Optimization of Tuberculosis and HIV Co-treatment in Africa,HIV-TB Pharmagene; PACTR2009040001261177,Karolinska Institutet,131419,"JANUARY  , 09, 2008",Recruiting
1+,CD4 Positive T Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,lamivudine,3474,642,didanosine; efavirenz; lamivudine; lamivudine + efavirenz + didanosine; trimethoprim + sulfamethoxazole,642,SAPIT,A Study to Compare Three Existing Starting Points of Antiretroviral Therapy (ART) Initiation in HIV/Tuberculosis (TB) Co-infected Patients,CAPRISA 003; NCT00398996; SAPIT,Centre for the AIDS Program of Research in South Africa,201474,"JUNE     , 30, 2005",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,bedaquiline,51310,36,bedaquiline,36,null,A Study to Assess the Relative Bioavailability of TMC-207 Following Single-dose Administrations of Two Pediatric Formulations in Healthy Adult Participants,2012-005492-13; CR100987; NCT01803373; TMC207TBC1002,Janssen Research & Development LLC,114087,"APRIL    , 30, 2013",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,gatifloxacin,7017,429,ethambutol; gatifloxacin; isoniazid; moxifloxacin; pyrazinamide; rifampicin,416,null,"Thrice-Weekly, 4- Months Moxifloxacin or Gatifloxacin Regimens for Pulmonary TB",CTRI/2012/10/003060,Indian Council of Medical Research,150332,"MAY      , 14, 2004",Terminated
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,moxifloxacin,12978,74,PA-824; moxifloxacin,74,null,Effect of PA-824 and of PA-824 Plus Moxifloxacin on the QTc Interval in Healthy Volunteers,10-0058; N01AI80024C; NCT01674218,National Institute of Allergy and Infectious Diseases,90512,"SEPTEMBER, 30, 2012",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,levofloxacin,3492,120,ethambutol; isoniazid; levofloxacin; pyrazinamide; rifampicin,114,null,Efficacy and Safety of Modified Anti-tubercular Regimens in Treatment of Tuberculosis in Patients With Underlying Compensated and Decompensated Chronic Liver Disease,ILBS-ATT-01; NCT01677871,"Institute of Liver and Biliary Sciences, India",90788,"SEPTEMBER, 30, 2012",Recruiting
1,Blood pressure; Body temperature; Heart rate; Respiratory frequency,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,ESAT-6CFP10,95442,32,ESAT-6CFP10,24,null,Phase I Clinical Human Tolerability Study of Recombinant Mycobacterium Tuberculosis Allergen ESAT6-CFP10,LTAO; LTAO-EC; NCT01999231,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,163196,"SEPTEMBER, 30, 2013",Completed
1,Antigen KI-67; CD4 T cells; Cytotoxic T-Lymphocytes; Interleukin 17; Ki67(+) T cells; T-Helper Lymphocytes; T-Lymphocytes; T-cell surface glycoprotein CD8 alpha chain; Th1 cytokine,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,45,GSK-692342,45,null,Immunogenicity and Safety of a Candidate Tuberculosis (TB) Vaccine Given to Healthy Adults in a TB-Endemic Region,110347; NCT00600782,GlaxoSmithKline plc,11563,"FEBRUARY , 29, 2008",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,lamivudine,3474,10,abacavir; lamivudine; raltegravir,10,null,Raltegravir + ABC/3TC in HIV/TB Co-Infected Patients,NCT01059422; RAL/ABC/3TC - HIV/TB,Central Research Institute of Epidemiology,63729,"OCTOBER  , 31, 2010",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,cadi-05,55173,1020,Mycobacterium w,1020,null,Efficacy and Safety Study of Immunomodulator as an Adjunct Therapy in Pulmonary Tuberculosis (TB) Retreatment Patients,CR-01A/2003-10; NCT00265226; NI-705,Indian Government Department of Biotechnology,10057,"MARCH    , 31, 2005",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,Wei Ka,81037,10000,Vaccae,10000,null,Phase III Clinical Study of Efficacy and Safety of Vaccae to Prevent Tuberculosis,ChiCTR-PRC-13003741; LTAO; NCT01979900; U1111-1149-6525,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,160177,"OCTOBER  , 31, 2013",Completed
2,Alanine transaminase; Alkaline phosphatase; Bilirubin; Blood platelets; Hemoglobin; International Normalized Ratio; Leukocyte count,Mycobacterium tuberculosis infection,isoniazid,Phase 4 Clinical,C4,rifapentine,15102,150,isoniazid; rifapentine,150,DOT-LTBI,Treatment of Latent Tuberculosis in Socially Marginalised Citizens,2016-003567-20; A101A; DOT-LTBI; NCT03266991,Aarhus University Hospital,310930,"OCTOBER  , 27, 2017",Recruiting
2,Alanine transaminase; Aspartate aminotransferase,Mycobacterium tuberculosis infection,isoniazid,Phase 3 Clinical,C3,rifapentine,15102,283,isoniazid; rifapentine,283,null,"Toward a Safe and Reachable Preventive Therapy for LTBI: a Multicenter, Randomized, Controlled Study in Taiwan",201309055MINC; NCT02208427,National Taiwan University Hospital,207608,"AUGUST   , 31, 2014",No longer recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,AEC/BC02,81363,135,AEC/BC02,135,null,Freeze-dried recombinant tuberculosis vaccine (AEC/BC02) phase I clinical human tolerance test,201601; CTR20180066,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,329497,null,Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; pyridoxine; rifampin,Phase 3 Clinical,C3,rifapentine,15102,60,ethambutol; isoniazid; moxifloxacin; pyrazinamide; pyridoxine; rifampin; rifapentine,60,S31PK/PD,Pharmacokinetic and Pharmacodynamic Study of High-Dose Rifapentine and Moxifloxacin for Treatment of Tuberculosis,CDC-NCHHSTP-6719; NCT02563327; S31PK/PD,Centers for Disease Control and Prevention,242269,"MAY      , 30, 2016",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,sutezolid,11088,32,sutezolid,32,null,"Study to Evaluate the Safety, Tolerability, and Pharmacokinetics of Sutezolid",NCT03199313; SUTEZOLID - CL001,TB Alliance,303595,"SEPTEMBER, 26, 2017",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,rifapentine,15102,92,rifapentine,92,null,"Randomized, Open-label, Comparative Study to Evaluate the Rifapentine in the Treatment of Patients Newly Diagnosed with Pulmonary Tuberculosis Negative and Smear-with Preserved Sensitivity of Mycobacteria",1/11,S.P.Inkomed Pvt. Ltd,168261,"SEPTEMBER, 27, 2011",Status not specified
1,Immunoglobulin G,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,GamTBvac,107803,60,GamTBvac,60,GamTBvac,Evaluation of the Safety and Immunogenicity of the Recombinant Subunit Vaccine 'GamTBvac' Against the Tuberculosis,GAMTBVAC PH1; GamTBvac; NCT03255278,"Gamalei Institute of Epidemiology and Microbiology, Health Ministry of the Russian Federation Collaborator",309614,"JANUARY  , 15, 2017",Completed
2,null,Mycobacterium tuberculosis infection,levofloxacin,Phase 1 Clinical,C1,levofloxacin,3492,14,levofloxacin [Laboratorios Serral(MX)],14,null,"Study to assess the bioequivalence of two oral formulations of levofloxacin tablets: FLEVOX (SERRAL, SA de CV), versus TAVANIC (Sanofi-Aventis of Mexico, SA de CV), after administration of a single dose- 500 mg to healthy adult subjects of both genders, in the fasting state",LVFL-SRRL-03,Laboratorios Serral,227604,null,No longer recruiting
1+,Solute carrier organic anion transporter family member 1B1,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,lamivudine,3474,48,efavirenz; isoniazid; lamivudine; lopinavir + ritonavir; nevirapine; rifabutin; stavudine,35,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,ANRS12150a; NCT00640887,French National Agency for Research on AIDS and Viral Hepatitis,11187,"FEBRUARY , 28, 2009",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,"amoxicillin + clavulanate potassium, GSK",44284,43,Augmentin; faropenem; rifampicin; rifampicin,36,null,Whole Blood Bactericidal Activity (WBA) Against Mycobacterium Tuberculosis of Faropenem Plus Amoxicillin/Clavulanic Acid in Healthy Volunteers,Faro-WBA; NCT02393586,National University Hospital (Singapore) Pte Ltd,224811,"FEBRUARY , 28, 2015",Completed
1+,Alanine transaminase; Alkaline phosphatase; Aspartate aminotransferase; Bilirubin; Blood cells; Creatinine; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,rifapentine,15102,2500,isoniazid; pyridoxine; rifapentine,2500,null,Tuberculosis Preventive Therapy Among Latent Tuberculosis Infection in HIV-infected Individuals,HIV-NAT 255; NCT03785106,The HIV Netherlands Australia Thailand Research Collaboration,364544,"MARCH    , 31, 2019",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,bedaquiline; delamanid; moxifloxacin,Phase 2b Clinical,C2B,midazolam hydrochloride,44303,75,bedaquiline; delamanid; midazolam; moxifloxacin; sutezolid,75,SUDOCU,PanACEA Sutezolid Dose-finding and Combination Evaluation,NCT03959566; PANACEA-SUDOCU-01; SUDOCU,Ludwig-Maximilians University of Munich,381674,"AUGUST   , 31, 2019",Not yet recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,107,ID-93,107,null,Phase IIa Clinical Trial of ID93 + GLA-SE Vaccine in BCG-vaccinated Healthy Healthcare Workers,CT-QTP101-001; NCT03806686,Quratis Co Ltd,366580,"MAY      , 31, 2018",No longer recruiting
2+,4 beta-Hydroxycholesterol/Cholesterol ratio,Mycobacterium tuberculosis infection,Lamprene; ethambutol (Myambutol); isoniazid (Nydrazid); kanamycin (Kantrex); moxifloxacin; prothionamide (Peteha); pyrazinamide (Zinamide),Phase 3 Clinical,C3,bedaquiline,51310,530,Lamprene; Regimen A locally-used WHO-approved MDR-TB regimen; bedaquiline; ethambutol (Myambutol); isoniazid (Nydrazid); kanamycin (Kantrex); levofloxacin; moxifloxacin; prothionamide (Peteha); pyrazinamide (Zinamide),530,STREAM,The Evaluation of a Standard Treatment Regimen of Anti-Tuberculosis Drugs for Patients With MDR-TB,18148631; 78372190; 78372190/18148631 (Stage 1/2); CTRI/2017/09/009693; ISRCTN78372190; NCT02409290; STREAM,International Union Against Tuberculosis and Lung Diseases,228190,"APRIL    , 30, 2016",Recruiting
1+,Creatinine; Human immunodeficiency virus RNA; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 0 Clinical,C0,efavirenz,10172,419,efavirenz; emtricitabine; lamivudine; tenofovir,419,null,TasP in Correctional Facilities,15-1473; NCT02946762; Z 31501,University of North Carolina,280225,"FEBRUARY , 01, 2016",Completed
3+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifabutin,4229,200,efavirenz; emtricitabine; emtricitabine; lopinavir + ritonavir; rifabutin; rifampicin; tenofovir disoproxil fumarate; tenofovir disoproxil fumarate,200,RIFART,RIFART,EudraCT 2007-007935-14; MI2-RIFART-2005; RIFART,Azienda Ospedaliera Spedali Civili di Brescia,131240,"MARCH    , 15, 2005",Terminated
1,Interferon gamma,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,RUTI,57308,27,RUTI,27,null,Safety of RUTI Vaccination in MDR-TB Patients,201600136; NCT02711735,Archivel Farma SL,256039,"JANUARY  , 01, 2019",Not yet recruiting
3+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,rifabutin,4229,null,clarithromycin; levofloxacin; moxifloxacin; moxifloxacin; rifabutin,null,null,The research of new regimen for multidrug-resistant tuberculosis treatment,ChiCTR-IOR-15007291,"Beijing Chest Hospital, Beijing Tuberculosis & Thoracic Tumor Research Institute, Capital Medical University",244777,"OCTOBER  , 01, 2008",No longer recruiting
2+,QT interval,Mycobacterium tuberculosis infection,WHO regimen therapy,Phase 3 Clinical,C3,bedaquiline,51310,null,Deltyba; Lamprene; Levaquin; Sirturo; Zyvox,null,DRAMATIC,"Efficacy and Tolerability of Bedaquiline, Delamanid, Levofloxacin, Linezolid, and Clofazimine for Treatment of Patients With MDR-TB",DRAMATIC; H38212; NCT03828201,Boston University,368916,"JANUARY  , 31, 2020",Terminated
5+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,faropenem,4492,45,Augmentin; cefadroxil; cefadroxil; ethambutol; faropenem; faropenem; isoniazid; pyrazinamide; rifampicin,45,null,Trial of Faropenem and Cefadroxil (in Combination With Amoxicillin/Clavulanic Acid and Standard TB Drugs) in Patients With Pulmonary Tuberculosis: Measurement of Early Bactericidal Activity and Effects on Novel Biomarkers,2015-CT0284; FAROPENEM_TB; NCT02381470; PHRR160323-001194,"National University Hospital (Singapore) Pte Ltd, Syneos Health Inc",224111,"DECEMBER , 31, 2018",Not yet recruiting
1+,Human immunodeficiency virus DNA; Human immunodeficiency virus RNA; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; tenofovir disoproxil fumarate,Phase 2 Clinical,C2,efavirenz,10172,155,lamivudine; raltegravir; tenofovir disoproxil fumarate,155,REFLATE TB,Efficacy and Safety of Two Raltegravir Doses in Naive HIV-1-Infected Patients Receiving Rifampin for Active Tuberculosis,2008-004970-41; ANRS 12 180; ANRS 12180 REFLATE TB; NCT00822315; REFLATE TB,French National Agency for Research on AIDS and Viral Hepatitis,40948,"JULY     , 31, 2009",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,faropenem,4492,43,Augmentin; faropenem; rifampicin; rifampicin,36,null,Whole Blood Bactericidal Activity (WBA) Against Mycobacterium Tuberculosis of Faropenem Plus Amoxicillin/Clavulanic Acid in Healthy Volunteers,Faro-WBA; NCT02393586,National University Hospital (Singapore) Pte Ltd,224811,"FEBRUARY , 28, 2015",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,verapamil,44437,69,Verapamil; isoniazid; rifampicin,69,null,Verapamil Dose-finding Study in Adult Patients with Tuberculosis,CTRI/2016/05/006928,Indian Government Department of Biotechnology,261260,"JUNE     , 15, 2016",Not yet recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,metformin hydrochloride,6050,60,metformin,60,null,Effect of metformin on sputum smear conversion in pulmonary tuberculosis with type 2 diabetes mellitus,TCTR20190128004,Khonkaen Hospital,370128,"MARCH    , 01, 2019",Not yet recruiting
1+,Creatinine; Human immunodeficiency virus RNA; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 0 Clinical,C0,tenofovir disoproxil fumarate,14493,419,efavirenz; emtricitabine; lamivudine; tenofovir,419,null,TasP in Correctional Facilities,15-1473; NCT02946762; Z 31501,University of North Carolina,280225,"FEBRUARY , 01, 2016",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2b Clinical,C2B,pravastatin,4155,30,Vitamin B6; ethambutol; isoniazid; pravastatin; pyrazinamide; rifampin,30,Stat-TB,Statin Adjunctive Therapy for TB: A Phase IIb Dose-finding Study of Pravastatin in Adults With Tuberculosis,38558; NCT03882177; Stat-TB,National Institute of Allergy and Infectious Diseases,374083,"JUNE     , 15, 2019",Not yet recruiting
2,Total body mass,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,FS-1,104087,480,FS-1; Standard DOTS,480,FS-1,FS-1 Drug for Treatment of Multiple Drug-resistant Tuberculosis,FS-1; NCT02607449; TP-004 V 1.0,"Scientific Center for Anti-infectious Drugs, Kazakhstan",246553,"DECEMBER , 31, 2013",Recruiting
1,Carbon monoxide diffusing capacity; Cytotoxic T-Lymphocytes; Forced Vital Capacity; Forced expiratory volume; Interferon gamma; Interleukin-2; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,AERAS-402,53975,72,AERAS-402,72,null,A Study to Evaluate the Safety of AERAS-402 in Adults Recently Treated for Pulmonary TB,C-010-402; NCT02414828,Aeras Global TB Vaccine Foundation,226801,"OCTOBER  , 31, 2008",Completed
4+,null,Mycobacterium tuberculosis infection,Standard of Care; ampicillin; benzylpenicillin; ceftriaxone; cotrimoxazole; gentamicin; prednisolone; sulfamethoxazole; trimethoprim,Phase 2/Phase 3 Clinical,C23,valganciclovir,25182,624,Standard or Care; rifampicin + isoniazid + ethambutol; rifampicin + isoniazid + pyrazinamide; valganciclovir; valganciclovir,624,EMPIRICAL,Empirical Treatment Against Cytomegalovirus and Tuberculosis in HIV-infected Infants With Severe Pneumonia,19/096; 2019-001749-42; EDCTP RIA2017MC-2013EMPIRICAL; EMPIRICAL; NCT03915366; PACTR201904797961340; U1111-1231-4736,Hospital Universitario 12 de Octubre,377163,"JANUARY  , 01, 2020",Not yet recruiting
2+,QT interval,Mycobacterium tuberculosis infection,pryrazinamide,Phase 3 Clinical,C3,linezolid,11036,750,Lamprene; bedaquiline; delamanid; levofloxacin; linezolid; moxifloxacin; pryrazinamide,750,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,MSF ERB-1555; NCT02754765; endTB,Médecins Sans Frontières France,259506,"DECEMBER , 31, 2016",Recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,meropenem,3616,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
1+,null,Mycobacterium tuberculosis infection,bedaquiline; delamanid; moxifloxacin,Phase 2b Clinical,C2B,moxifloxacin,12978,75,bedaquiline; delamanid; midazolam; moxifloxacin; sutezolid,75,SUDOCU,PanACEA Sutezolid Dose-finding and Combination Evaluation,NCT03959566; PANACEA-SUDOCU-01; SUDOCU,Ludwig-Maximilians University of Munich,381674,"AUGUST   , 31, 2019",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,moxifloxacin,12978,500,amikacin; bedaquiline; clarithromycin; clofazimine; cycloserine; ethambutol; linezolid; moxifloxacin; prothionamide; pyrazinamide; sodium para-aminosalicylate,500,null,The Effect of 18-month Regimen Containing Six Anti-tuberculosis Drugs for Patients With MDR-TB,2018ZX10722301-001; NCT03830671,Beijing Chest Hospital,369109,"MARCH    , 08, 2019",Recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,bedaquiline,51310,16,bedaquiline; lopinavir + ritonavir,16,null,TMC207-TiDP13-C110: Interaction Study With Lopinavir/Ritonavir in Healthy Volunteer,CR002545; NCT00828529; NCT00980291,Janssen Diagnostics BVBA,42128,"FEBRUARY , 28, 2009",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,delamanid,16545,5610,delamanid; isoniazid; pyridoxine,5610,PHOENIx MDR-TB,Protecting Households On Exposure to Newly Diagnosed Index Multidrug-Resistant Tuberculosis Patients,12041; A5300B/I2003B/PHOENIX; NCT03568383; PHOENIx MDR-TB,National Institute of Allergy and Infectious Diseases,344335,"JUNE     , 03, 2019",Recruiting
2,C-reactive protein; Cytokines; IFN-gamma; Total IgE; anti-Mtb72F-T-cell; anti-Mtb72F-antibody,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,38,"AS02; MTB72F vaccine (tuberculosis), GSK/Aeras",38,null,Safety and Immunogenicity of GSK Biological's Candidate Tuberculosis Vaccine Mtb72F/AS02A in Healthy PPD-Positive Adults,102374; NCT00146744,GlaxoSmithKline plc,9528,"JULY     , 31, 2005",Completed
1,Dinoprostone; Interferon beta; Interferon-alpha; Interleukin-1 receptor antagonist protein; Prostaglandin G/H synthase 2,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,zileuton,4718,90,Zyflo,90,null,Optimization of Clinical Treatment Schemes for Multidrug - Resistant Pulmonary Tuberculosis Based on Host - Mediate,ChiCTR-OPN-16009545,Shanghai Public Health Clinical Center,276708,"OCTOBER  , 20, 2016",Recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,azithromycin,2587,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
1+,Total body mass,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,linezolid,11036,180,bedaquiline; linezolid; pretomanid,180,ZeNiX,"Safety and Efficacy of Various Doses and Treatment Durations of Linezolid Plus Bedaquiline and Pretomanid in Participants With Pulmonary TB, XDR-TB, Pre-XDR-TB or Non-responsive/Intolerant MDR-TB",NC-007- (B-Pa-L); NCT03086486; ZENIX (B-PA-L) NC-007; ZeNiX,TB Alliance,293734,"OCTOBER  , 31, 2017",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,14,MVA-85A,14,null,A Phase I Study of the Safety and Immunogenicity of a Recombinant MVA-85A Vaccine in Healthy Volunteers,NCT00423566; TB002,University of Oxford,9320,"SEPTEMBER, 30, 2002",Completed
4+,Leukotriene A-4 hydrolase,Mycobacterium tuberculosis infection,Standard of care anti-tubercular therapy; Standard of care anti-tubercular therapy; dexamethasone; isoniazid; rifampicin; rifampicin + isoniazid + ethambutol + pyrazinamide,Phase 2a Clinical,C2A,linezolid,11036,100,Intensified anti-tubercular therapy; aspirin; dexamethasone; linezolid; rifampicin,100,LASER-TBM,"Linezolid, Aspirin and Enhanced Dose Rifampicin in HIV-TBM",LASER-TBM; LASER-TBM; NCT03927313,University of Cape Town,378146,"JUNE     , 01, 2019",Not yet recruiting
2,Blood pressure; Body temperature; Heart rate; Interferon-alpha; Respiratory frequency,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,ESAT-6CFP10,95442,1090,ESAT-6CFP10; tuberculin purified protein derivative (TB-PPD),1090,null,Clinical Study of Recombinant Mycobacterium Tuberculosis ESAT-6CFP10 Allergen,ChiCTR-DID-16007837; LTAO-EC III-PATIENT; NCT02623556,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,247763,"DECEMBER , 31, 2015",Completed
1+,Human immunodeficiency virus RNA; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; tenofovir disoproxil fumarate,Phase 3 Clinical,C3,raltegravir,54488,460,lamivudine; raltegravir; rifampin; tenofovir disoproxil fumarate,460,REFLATE TB2,Raltegravir Versus Efavirenz in Naive HIV-1-infected Patients Receiving Rifampin for Active Tuberculosis,ANRS 12300 REFLATE TB2; NCT02273765; REFLATE TB2,INSERM,214156,"SEPTEMBER, 30, 2015",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,simvastatin,44313,321,simvastatin,321,null,"Simvastatin and sputum conversion in pulmonary tuberculosis: a double-blinded, randomized, controlled trial",TCTR20180219002,Khonkaen Hospital,330023,"APRIL    , 01, 2018",Not yet recruiting
1+,Human immunodeficiency virus RNA,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,emtricitabine,4728,60,dolutegravir; emtricitabine; isoniazid; rifapentine; tenofovir disoproxil fumarate,60,IMPAACT4TB,"Safety, Tolerability DDI Short Course Treatment of LTBI Infection With High-dose Rifapentine Isoniazid in HIV+ Patients",3HP DTG AUR1-6-212 IMPAACT4TB; IMPAACT4TB; NCT03435146,Aurum Institute,329251,"JANUARY  , 18, 2018",Recruiting
3+,Alanine transaminase; Blood platelets; Body temperature; CD40 ligand; Creatinine; Cytotoxic T-Lymphocytes; Hemoglobin; Interferon gamma; Interleukin-2; Leukocyte count; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,Menjugate; Polio Sabin; Prevnar; Tritanrix HB,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,302,GSK-692342; GSK-692342a; Polio Sabin; Prevnar; Tritanrix HB,302,null,Safety and Immunogenicity Study of a Candidate Tuberculosis Vaccine in Healthy Infants,112899; 2012-004380-44; NCT01098474; TUBERCULOSIS-013 PRI,GlaxoSmithKline plc,65639,"JULY     , 31, 2010",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,rifabutin,4229,400,efavirenz; ethambutol; isoniazid; lamivudine; pyrazinamide; rifabutin; rifampicin; stavudine; zidovudine,400,null,Acquired Immunodeficiency Syndrome (AIDS) and Tuberculosis (TB) Co-Infection Treatment Strategies Study of China,2008ZX10001-008; NCT01344148,Shanghai Public Health Clinical Center,76946,"FEBRUARY , 28, 2009",Recruiting
1+,Arylacetamide deacetylase; Nuclear receptor subfamily 1 group I member 2; Nuclear receptor subfamily 1 group I member 3; Solute carrier organic anion transporter family member 1B1,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,moxifloxacin,12978,1250,ethambutol; isoniazid; moxifloxacin; pyrazinamide; rifampicin; rifapentine,827,RIFAQUIN,"An International, Multicenter, Controlled Clinical Trial to Evaluate High-Dose Rifapentine and a Quinolone in the Treatment of Pulmonary Tuberculosis",10.1186/ISRCTN44153044; ISRCTN44153044; RIFAQUIN,St Georges University of London,153990,"AUGUST   , 15, 2008",Completed
1+,Human immunodeficiency virus DNA; Human immunodeficiency virus RNA; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; tenofovir disoproxil fumarate,Phase 2 Clinical,C2,lamivudine,3474,155,lamivudine; raltegravir; tenofovir disoproxil fumarate,155,REFLATE TB,Efficacy and Safety of Two Raltegravir Doses in Naive HIV-1-Infected Patients Receiving Rifampin for Active Tuberculosis,2008-004970-41; ANRS 12 180; ANRS 12180 REFLATE TB; NCT00822315; REFLATE TB,French National Agency for Research on AIDS and Viral Hepatitis,40948,"JULY     , 31, 2009",Completed
1,CD4; Human immunodeficiency virus ribonucleic acid,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,20,MVA85A,20,null,"The Safety and Immunogenicity of a TB Vaccine; MVA85A, in Healthy Volunteers Who Are Infected With HIV",NCT00395720; TB010,University of Oxford,10868,"NOVEMBER , 30, 2006",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,efavirenz,10172,47,efavirenz; lopinavir + ritonavir; nevirapine; rifabutin,47,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV Co-Infection in Vietnam,ANRS12150b; NCT00651066,French National Agency for Research on AIDS and Viral Hepatitis,11188,"JUNE     , 30, 2010",Completed
3+,Alanine transaminase; Blood platelets; Body temperature; CD40 ligand; Creatinine; Cytotoxic T-Lymphocytes; Hemoglobin; Interferon gamma; Interleukin-2; Leukocyte count; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,Menjugate; Polio Sabin; Prevnar; Tritanrix HB,Phase 2 Clinical,C2,Prevnar,4144,302,GSK-692342; GSK-692342a; Polio Sabin; Prevnar; Tritanrix HB,302,null,Safety and Immunogenicity Study of a Candidate Tuberculosis Vaccine in Healthy Infants,112899; 2012-004380-44; NCT01098474; TUBERCULOSIS-013 PRI,GlaxoSmithKline plc,65639,"JULY     , 31, 2010",Completed
1,CD4; Human immunodeficiency virus RNA; T-Helper Lymphocytes,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,lopinavir + ritonavir,14681,40,lopinavir + ritonavir; rifampicin,40,null,Pharmacokinetics (PK) and Safety of Two Different Doses of Lopinavir/Ritonavir in HIV/Tuberculosis (TB) Co-Infected Patients Receiving Rifampicin Containing Anti-Tuberculosis Therapy,HIV-NAT 104; NCT01138202,The HIV Netherlands Australia Thailand Research Collaboration,67098,"NOVEMBER , 30, 2010",Completed
1+,CD4; albumin,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,efavirenz,10172,156,efavirenz; lamivudine; lamivudine + efavirenz + tenofovir disoproxil fumarate; tenofovir disoproxil fumarate,156,TIME,Appropriate Timing of HAART in Co-infected HIV/TB Patients,0435.3/1551; NCT01014481; TIME,Bamrasnaradura Infectious Diseases Institute,61991,"OCTOBER  , 31, 2009",Terminated
4,T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,tenofovir disoproxil fumarate,14493,809,efavirenz; emtricitabine; tenofovir disoproxil fumarate; tenofovir disoproxil fumarate + emtricitabine,780,STRIDE,Immediate Versus Deferred Start of Anti-HIV Therapy in HIV Infected Adults Being Treated for Tuberculosis,1U01AI068636; ACTG A5221; ACTG A5221; NCT00108862; STRIDE,AIDS Clinical Trials Group,10681,"AUGUST   , 31, 2006",Completed
2,Cytokine,Mycobacterium tuberculosis infection,TiceBCG,Phase 1 Clinical,C1,"BCG vaccine, Organon",13624,24,AERAS-422,24,AERAS 422,Study of AERAS-422 in Healthy Adults,AERAS 422; C-007-422; NCT01340820,Aeras Global TB Vaccine Foundation,76756,"DECEMBER , 31, 2010",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,rifabutin,4229,140,Aluvia; raltegravir; rifabutin,140,null,EARNEST Rifabutin Pharmacokinetics (PK) Substudy,ISRCTN13074752; NCT01663168,"Joint Clinical Research Centre, Medical Research Council",90175,"MAY      , 03, 2012",Completed
1,CD40 ligand; Cytotoxic T-Lymphocytes; IFN-gamma; Interleukin-13; Interleukin-17A; Interleukin-2; Mononuclear leukocytes; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,20,GSK-692342,20,null,Study in Healthy Adults to Evaluate Gene Activation After Vaccination With GlaxoSmithKline (GSK) Biologicals Candidate Tuberculosis (TB) Vaccine GSK-692342,116777; 2012-002541-37; NCT01669096,GlaxoSmithKline plc,90314,"AUGUST   , 21, 2012",Completed
2,null,Mycobacterium tuberculosis infection,Rifafour,Phase 2 Clinical,C2,bedaquiline,51310,68,bedaquiline,68,null,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis,NCT01215110; TMC207-CL001,TB Alliance,71046,"APRIL    , 30, 2010",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,rifabutin,4229,47,efavirenz; lopinavir + ritonavir; nevirapine; rifabutin,47,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV Co-Infection in Vietnam,ANRS12150b; NCT00651066,French National Agency for Research on AIDS and Viral Hepatitis,11188,"JUNE     , 30, 2010",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,moxifloxacin,12978,24,moxifloxacin,24,null,"Bioavailability, Food Effect and Safety, Tolerability of a New Oral Suspension in Comparison to the Marketed Moxifloxacin Tablet in Healthy Adults",14413; 2009-017070-21; NCT01073891,Bayer AG,198748,"MAY      , 31, 2010",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,lopinavir + ritonavir,14681,52,PA-824; efavirenz; lopinavir + ritonavir; rifampin,52,null,"Evaluating the Safety and Drug Interaction of PA-824, an Investigational Tuberculosis Medication, Together With Efavirenz, Ritonavir-Boosted Lopinavir or Rifampin",11829; A5306; ACTG5306; NCT01571414,National Institute of Allergy and Infectious Diseases,86312,"MAY      , 31, 2012",Completed
1,Body temperature; Diastolic blood pressure; Heart rate; Peripheral mononuclear cells; Respiratory frequency; Systolic blood pressure; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,RUTI,57308,95,RUTI,90,RUTISAPH2,"Clinical Trial to Investigate the Safety, Tolerability, and Immunogenicity of the Novel Antituberculous Vaccine RUTI Following 1 Month of Isoniazid Treatment in Subjects With Latent Tuberculosis Infection",NCT01136161; RUTISAPH2; RUTISAPH2,Archivel Farma SL,67014,"JUNE     , 30, 2010",Completed
1+,Cytochrome (CYP) enzyme,Mycobacterium tuberculosis infection,null,Phase not specified,NS,midazolam hydrochloride,44303,13,caffeine; dextromethorphan; losartan; midazolam; omeprazole; rifampicin,13,null,The Influence of Rifampicin Discontinuation on Rifampicin-Induced Cytochrome P450 Enzyme Activity,JPRN-UMIN000004083,Hamamatsu University School of Medicine,122291,"JULY     , 01, 2010",Completed
1+,Cytochrome (CYP) enzyme,Mycobacterium tuberculosis infection,null,Phase not specified,NS,omeprazole,44305,13,caffeine; dextromethorphan; losartan; midazolam; omeprazole; rifampicin,13,null,The Influence of Rifampicin Discontinuation on Rifampicin-Induced Cytochrome P450 Enzyme Activity,JPRN-UMIN000004083,Hamamatsu University School of Medicine,122291,"JULY     , 01, 2010",Completed
2+,Alanine transaminase; Bilirubin; C-reactive protein; Glucose; Hemoglobin; Leukocyte count; Serum potassium; Serum sodium; White blood cell,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,lamivudine,3474,240,prednisone,240,Pred-ART,"Preventing TB-IRIS in High-risk Patients: a Randomized, Placebo-controlled Trial of Prednisone",CIDRI_001; DOH-27-0813-4336; NCT01924286; PACTR201304000511413; Pred-ART; SP.2011.41304.074,University of Cape Town,150793,"AUGUST   , 30, 2013",Completed
2+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,linezolid,11036,113,linezolid,113,null,A Phase II Trial to Evaluate the Efficacy and Safety of Linezolid in Tuberculosis Patients,LIN-CL001; NCT02279875,TB Alliance,215072,"NOVEMBER , 30, 2014",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,SSI H56-IC31,74849,25,SSI H56-IC31,25,null,Safety and Immunogenicity Study of AERAS-456 Vaccine for Tuberculosis,C-032-456; NCT01967134,Aeras Global TB Vaccine Foundation,158535,"NOVEMBER , 30, 2011",Completed
3+,null,Mycobacterium tuberculosis infection,ethambutol hydrochloride; isoniazid; linezolid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,linezolid,11036,64,LCB01-0371,64,null,"A Phase II Clinical Study of LCB01-0371 to Evaluate the EBA, Safety and PK",2016-0642; KCT0003975; LCB01-0371-15-2-01; NCT02836483,LegoChem Bioscience Inc,265899,"DECEMBER , 10, 2016",Recruiting
4+,CD4,Mycobacterium tuberculosis infection,null,Phase not specified,NS,efavirenz,10172,100,efavirenz; lamivudine; nevirapine; nevirapine,100,null,Once-Daily Dose of Nevirapine (400 mg) Versus Twice Daily Dose (200 mg) of Nevirapine in HIV and Tuberculosis Infection,CTRI/2012/08/002923,National AIDS Control Organization,126486,"SEPTEMBER, 01, 2012",Not yet recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,linezolid,11036,109,bedaquiline; bedaquiline; linezolid; pretomanid,109,null,A Phase III Study Assessing the Safety and Efficacy of Bedaquiline Plus PA-824 Plus Linezolid in Subjects With Drug-Resistant Pulmonary Tuberculosis,NCT02333799; NIX-TB-(B-L-PA),TB Alliance,219499,"MARCH    , 31, 2015",No longer recruiting
2+,null,Mycobacterium tuberculosis infection,Rifafour,Phase 2 Clinical,C2,moxifloxacin,12978,85,PA-824; Rifafour; TMC-207; moxifloxacin; pyrazinamide,65,null,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis With,NC-001; NC-001-(J-M-Pa-Z); NCT01215851,TB Alliance,71107,"OCTOBER  , 31, 2010",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,lamivudine,3474,150,efavirenz; ethambutol; isoniazid; lamivudine; nevirapine; pyrazinamide; rifampicin; zidovudine,355,null,"Efficacy of Thrice Weekly Directly Observed Treatment, Short-course (DOTS) in HIV-associated Tuberculosis",NCT00698334; SKS/NACO/2006,All India Institute of Medical Sciences,161275,"APRIL    , 30, 2006",Completed
2,C24; MDR1; N-acetyltransferase; P-glycoprotein,Mycobacterium tuberculosis infection,isoniazid,Phase 2 Clinical,C2,rifapentine,15102,230,isoniazid; rifapentine,230,TBTC-26 PK,Rifapentine Pharmacokinetics in Children During Treatment of Latent TB Infection,CDC-NCHSTP-4679; NCT00164450; TBTC-26 PK,Centers for Disease Control and Prevention,10687,"SEPTEMBER, 30, 2005",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,rifabutin,4229,150,isoniazid; rifabutin,102,TBTC-23A,Pharmacokinetics of Intermittent Isoniazid and Rifabutin in HIV-TB,23A; CDC-NCHSTP-2173; NCT00023348; TBTC-23A,Centers for Disease Control and Prevention,10652,"JULY     , 31, 1999",Completed
1+,CD4+,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,nevirapine,3700,180,didanosine; efavirenz; efavirenz +  didanosine + lamivudine; ethambutol; ethambutol + isoniazid + rifampicin + pyrazinamide; isoniazid; isoniazid + rifampicin; lamivudine; nevirapine; nevirapine + didanosine + lamivudine; pyrazinamide; rifampicin,116,null,Safety and Efficacy of Two Once Daily Anti Retroviral Treatment Regimens Along With Anti-Tuberculosis Treatment,NCT00332306; trc23,Tuberculosis Research Centre,10863,"JUNE     , 30, 2006",Suspended
4,CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,nevirapine,3700,142,efavirenz; nevirapine,145,N2R,Efavirenz-Based Versus Nevirapine-Based Antiretroviral Therapy Among HIV-Infected Patients Receiving Rifampin,210041000824904203; N2R; NCT00483054,Bamrasnaradura Infectious Diseases Institute,10947,"JANUARY  , 31, 2007",Completed
2+,null,Mycobacterium tuberculosis infection,isoniazid,Phase 3 Clinical,C3,rifapentine,15102,8053,isoniazid; rifapentine; rifapentine+isoniazid,7731,PREVENT TB,A 3 Months of Weekly Rifapentine and Isoniazid for M Tuberculosis Infection,CDC TBTC Study 26; CDC-NCHSTP-3041; NCT00023452; PREVENT TB; TBTC Study 26; TBTC Study 26/ACTG 5259,Centers for Disease Control and Prevention,10659,"JUNE     , 30, 2001",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,moxifloxacin,12978,36,moxifloxacin,36,null,Moxifloxacin_QT Study in Chinese Healthy Volunteer,DCTC_2012001; NCT01653990,Peking University Third Hospital,89715,"JULY     , 31, 2012",Recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,delamanid,16545,37,delamanid; optimized background regimen therapy,13,null,Pharmacokinetic and Safety Trial to Determine the Appropriate Dose for Pediatric Patients With Multidrug Resistant Tuberculosis,2012-004473-25; 242-12-232; CTR# 2012-CT0060; NCT01856634; PHRR160526-001027,Otsuka Pharmaceutical Development and Commercialization Inc,132087,"JUNE     , 14, 2013",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,gatifloxacin,7017,217,gatifloxacin; isoniazid; moxifloxacin; ofloxacin; pyrazinamide; rifampicin,217,null,"A Comparative Study of the Bactericidal and Sterilising Activity of Three Fluoroquinolones: Gatifloxacin, Moxifloxacin and Ofloxacin Substituted for Ethambutol in the Two Month Initial Phase of the Standard Anti-Tuberculosis Treatment Regimen Also Containing Rifampicin, Isoniazid and Pyrazinamide (South Africa)",ISRCTN13670619; RPC078,United Nations International Children's Fund,152200,"NOVEMBER , 25, 2004",Completed
3,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,bedaquiline,51310,75,bedaquiline; isoniazid; rifampin,75,null,Early Bactericidal Activity and Pharmacokinetics of the Diarylquinoline TMC-207 in Treatment of Pulmonary Tuberculosis,PMID:18505852,Johnson & Johnson,150059,null,Completed
2,Interferon gamma,Mycobacterium tuberculosis infection,MVA-85A,Phase 1 Clinical,C1,MVA-85A,55317,30,IMX-461,30,null,Phase I Trial Evaluating Safety and Immunogenicity of MVA-85A-IMX3-13 Compared to MVA-85A in BCG Vaccinated Adults,NCT01879163; TB028; UKCRN 15787,University of Oxford,142322,"JULY     , 31, 2013",Completed
2+,Alanine transaminase; Bilirubin; C-reactive protein; Glucose; Hemoglobin; Leukocyte count; Serum potassium; Serum sodium; White blood cell,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,tenofovir disoproxil fumarate,14493,240,prednisone,240,Pred-ART,"Preventing TB-IRIS in High-risk Patients: a Randomized, Placebo-controlled Trial of Prednisone",CIDRI_001; DOH-27-0813-4336; NCT01924286; PACTR201304000511413; Pred-ART; SP.2011.41304.074,University of Cape Town,150793,"AUGUST   , 30, 2013",Completed
1+,CD4 + cell,Mycobacterium tuberculosis infection,null,Phase not specified,NS,"tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",49219,63,"efavirenz; isoniazid; tenofovir disoproxil fumarate + emtricitabine (fixed dose), Gilead Sciences",63,null,Simultaneous Versus Sequential Antiretroviral Therapy (ARV) Therapy and Mycobacterium Tuberculosis (MTB) Treatment,C43-06; NCT00737724,Instituto Nacional de Enfermedades Respiratorias,169697,"MARCH    , 31, 2008",Terminated
2,T-Lymphocytes,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,ChAdOx1-85A,84564,42,ChAdOx1-85A; ChAdOx1-85A; MVA-85A,42,null,Safety Study of ChAdOx1-85A Vaccination With and Without MVA-85A Boost in Healthy Adults,NCT01829490; TB034; UKCRN 14241,University of Oxford,120744,"JULY     , 31, 2013",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,moxifloxacin,12978,1650,moxifloxacin,1650,null,A Clinical Trial to Study the Effectiveness and Safety of 3- and 4-Month Regimens as Compared to the Standard 6-Month Regimen for the Treatment of Infectious Pulmonary Tuberculosis Patients,CTRI/2008/091/000024,Indian Council of Medical Research,121916,"MAY      , 30, 2007",Recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MTBVAC,89744,36,BCG; MTBVAC,36,MTBVAC,Dose-Escalation Study to Evaluate the Safety and Immunogenicity of MTBVAC Vaccine in Comparison With BCG Vaccine,MTBVAC; MTBVAC-01; NCT02013245,Biofabri SL,164024,"JANUARY  , 31, 2013",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,picroliv,9354,260,picroliv,260,null,Evaluation of Hepatoprotective Effect of Picroliv in Patients Receiving Multi Drug Therapy of Tuberculosis,CTRI/2012/08/002850; KGMC-CDRI,Central Drug Research Institute,127798,"MARCH    , 01, 2005",Completed
1+,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Carbon dioxide; Chlorine; Creatine kinase; Creatinine; Eosinophils; Erythrocytes; Estimated glomerular filtration rate; Glucose; Hematocrit; Hemoglobin; High-density lipoprotein cholesterol; High-density lipoprotein cholesterol; Human immunodeficiency virus RNA; Lactate dehydrogenase; Leukocyte count; Lipase; Lipids; Lymphocytes; Mean corpuscular volume; Monocytes; Neutrophils; Ox-LDL/ LDL-C ratio; Ox-LDL/ LDL-C ratio; Phosphate; Potassium; Sodium; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; Total cholesterol; Total cholesterol; Triglycerides; Triglycerides; Urea,Mycobacterium tuberculosis infection,efavirenz; ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 3b Clinical,C3B,efavirenz,10172,113,Group 1; Group 2; dolutegravir; ethambutol; isoniazid; pyrazinamide; rifampicin,113,INSPIRING,Open-Label Study of Dolutegravir (DTG) or Efavirenz (EFV) for Human Immunodeficiency Virus (HIV)-Tuberculosis (TB) Co-infection,117175; ING117175; INSPIRING; NCT02178592,ViiV Healthcare Ltd,201302,"JANUARY  , 23, 2015",No longer recruiting
3,C-C motif chemokine 2; C-C motif chemokine 3; C-C motif chemokine 4; C-X-C motif chemokine 9; Cytokines; Interferon gamma; Interleukin 1 beta; Interleukin-10; Interleukin-6; Interleukin-8; Macrophage migration inhibitory factor; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,Recombivax HB,6748,185,BCG Vaccine; BCG Vaccine; Recombivax HB; Recombivax HB,185,ELVIS,A Trial Investigating the Influence of BCG and Hepatitis B Immunization at Birth on Neonatal Immune Responses: The Early Life Vaccines and Immunity Study,ELVIS; NCT02444611; VAC/01 ELVIS,Murdoch Childrens Research Institute,229498,"MARCH    , 31, 2015",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifapentine,15102,1002,isoniazid; rifapentine,1002,iAdhere,Adherence to Latent Tuberculosis Infection Treatment 3HP SAT Versus 3HP DOT,2012-002094-58; CDC-NCHHSTP 6222; NCT01582711; Study 33; TBTC STUDY 33; UITB-TBTC-Estudio33; iAdhere,"Centers for Disease Control and Prevention, Tuberculosis Investigation Unit of Barcelona",177457,"SEPTEMBER, 30, 2012",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,Perchlozone,87251,40,Perchlozone,40,null,"An open, phase I study to study the pharmacokinetics, safety and tolerability of Perhlozone (400 mg capsules) in healthy volunteers after a single dose",PERHL-11-2011,Pharmasyntez,167779,"MARCH    , 20, 2012",Status not specified
1,Immunoglobulin G; Interferon gamma; Interleukin-2; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,GamTBvac,107803,180,GamTBvac,180,null,Phase II Clinical Trial of Safety and Immunogenicity of Recombinant Subunit Tuberculosis Vaccine GamTBvac,01-GAMTBVAC-2018; NCT03878004,"Gamalei Institute of Epidemiology and Microbiology, Health Ministry of the Russian Federation Collaborator",373676,"DECEMBER , 01, 2018",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,"artesunate + amodiaquine combination tablet (malaria), DNDi/sanofi-aventis",53041,36,artesunate; artesunate + amodiaquine; desethylamodiaquine; dihydroartemisinin; dihydroartemisinin + piperaquine; piperaquine,36,ARTEM-TB STUDY,Evaluating Pharmacokinetic Interactions Between Artemisinin-Based Therapies and Rifampacin-Based Tuberculosis Treatment in African Patients,ARTEM-TB STUDY; HS1294; PACTR201302000483287,Infectious Diseases Institute of Makerer University,142485,"JANUARY  , 31, 2013",Not yet recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1a Clinical,C1A,"small molecule therapeutic, Beijing Union Pharmaceutical Factory/Institute of Materia Medica",101474,58,pyrifazimine,58,null,The phase Ia clinical trial of pyrifazimine,BUSPF-1801; CTR20181736; ChiCTR1800018780,"Beijing Union Pharmaceutical Factory, Xiyuan Hospital China Academy Of Chinese Medical Sciences",356451,"OCTOBER  , 01, 2018",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 3 Clinical,C3,moxifloxacin,12978,284,moxifloxacin; pretomanid; pyrazinamide,284,STAND,Shortening Treatment by Advancing Novel Drugs,2014-CT0249; NC-006-(M-PA-Z); NC-006-(M-Pa-Z); NC-006-(M-Pa-Z) 21522; NCT02342886; NMRR-14-702-21522; PHRR150114-000899; STAND,TB Alliance,221844,"FEBRUARY , 28, 2015",Completed
5+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,cefadroxil,46931,45,Augmentin; cefadroxil; cefadroxil; ethambutol; faropenem; faropenem; isoniazid; pyrazinamide; rifampicin,45,null,Trial of Faropenem and Cefadroxil (in Combination With Amoxicillin/Clavulanic Acid and Standard TB Drugs) in Patients With Pulmonary Tuberculosis: Measurement of Early Bactericidal Activity and Effects on Novel Biomarkers,2015-CT0284; FAROPENEM_TB; NCT02381470; PHRR160323-001194,"National University Hospital (Singapore) Pte Ltd, Syneos Health Inc",224111,"DECEMBER , 31, 2018",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,bedaquiline; delamanid; moxifloxacin,Phase 2b Clinical,C2B,sutezolid,11088,75,bedaquiline; delamanid; midazolam; moxifloxacin; sutezolid,75,SUDOCU,PanACEA Sutezolid Dose-finding and Combination Evaluation,NCT03959566; PANACEA-SUDOCU-01; SUDOCU,Ludwig-Maximilians University of Munich,381674,"AUGUST   , 31, 2019",Not yet recruiting
3+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,levofloxacin,3492,null,clarithromycin; levofloxacin; moxifloxacin; moxifloxacin; rifabutin,null,null,The research of new regimen for multidrug-resistant tuberculosis treatment,ChiCTR-IOR-15007291,"Beijing Chest Hospital, Beijing Tuberculosis & Thoracic Tumor Research Institute, Capital Medical University",244777,"OCTOBER  , 01, 2008",No longer recruiting
4,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,lamivudine,3474,592,didanosine; efavirenz; lamivudine; standard TB therapy,592,null,Effectiveness of Directly Observed Therapy in Combined HIV and Tuberculosis Treatment in Resource-Limited Settings,CAPRISA 001; CAPRISA START; CIPRA; NCT00091936; START,National Institute of Allergy and Infectious Diseases,8820,"AUGUST   , 31, 2009",Completed
2+,null,Mycobacterium tuberculosis infection,pyrazinamide,Phase 2/Phase 3 Clinical,C23,levofloxacin,3492,238,delamanid; levofloxacin; linezolid; pyrazinamide,238,MDR-END,Treatment Shortening of MDR-TB Using Existing and New Drugs,MDR-END; NCT02619994,Seoul National University Hospital,247456,"JANUARY  , 31, 2016",Recruiting
2,Cytokines; Cytotoxic T-Lymphocytes; T-Helper Lymphocytes; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,BCG vaccine,Phase 1/Phase 2 Clinical,C12,MTBVAC,89744,120,MTBVAC,120,null,MTBVAC Study in Adults With and Without Latent Tuberculosis Infection in South Africa,A-050; NCT02933281,International AIDS Vaccine Initiative,275657,"JANUARY  , 24, 2019",Recruiting
2+,Bilirubin; International Normalized Ratio; Leukotriene A-4 hydrolase; Transaminases,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,levofloxacin,3492,640,dexamethasone,640,LAST ACT,Leukotriene A4 Hydrolase Stratified Trial of Adjunctive Corticosteroids for HIV-uninfected Adults With Tuberculous Meningitis,27TB; LAST ACT; NCT03100786,"Oxford University Clinical Research Unit, Vietnam",293087,"FEBRUARY , 08, 2018",Recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,pretomanid,13323,109,bedaquiline; bedaquiline; linezolid; pretomanid,109,null,A Phase III Study Assessing the Safety and Efficacy of Bedaquiline Plus PA-824 Plus Linezolid in Subjects With Drug-Resistant Pulmonary Tuberculosis,NCT02333799; NIX-TB-(B-L-PA),TB Alliance,219499,"MARCH    , 31, 2015",No longer recruiting
2+,null,Mycobacterium tuberculosis infection,WHO approved regimen-based therapy,Phase 3 Clinical,C3,levofloxacin,3492,null,Deltyba; Levaquin; Zyvox; pyrazinamide,null,DAZZLE,"Efficacy and Tolerability of Delamanid, Linezolid, Pyrazinamide and Levofloxacin",DAZZLE; H-36160; NCT02975570,Boston University,280651,"AUGUST   , 31, 2017",Terminated
1+,Human immunodeficiency virus RNA; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; tenofovir disoproxil fumarate,Phase 3 Clinical,C3,efavirenz,10172,460,lamivudine; raltegravir; rifampin; tenofovir disoproxil fumarate,460,REFLATE TB2,Raltegravir Versus Efavirenz in Naive HIV-1-infected Patients Receiving Rifampin for Active Tuberculosis,ANRS 12300 REFLATE TB2; NCT02273765; REFLATE TB2,INSERM,214156,"SEPTEMBER, 30, 2015",Recruiting
1+,QT interval,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,bedaquiline,51310,630,Lamprene; bedaquiline; linezolid; moxifloxacin; pretomanid,630,TB-PRACTECAL,Pragmatic Clinical Trial for a More Effective Concise and Less Toxic MDR-TB Treatment Regimen(s),1541; NCT02589782; TB-PRACTECAL,Medecins Sans Frontieres,244304,"JANUARY  , 31, 2017",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,levofloxacin,3492,2006,levofloxacin,2006,The V-QUIN MDR Trial,"A randomized, controlled trial of 6 months of daily levofloxacin for the prevention of tuberculosis among household contacts of patients with multi-drug resistant tuberculosis",2014/929; 4040/QD-BYT; ACTRN12616000215426; ANZCTR369817; NHMRC APP#1081443; The V-QUIN MDR Trial; U1111-1177-9052,University of Sydney,269403,"MARCH    , 14, 2016",Recruiting
1,Alanine transaminase; Aspartate aminotransferase; Creatinine,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,levofloxacin,3492,20,levofloxacin,20,null,Pharmacokinetic study and safety of levofloxacin in pediatric tuberculosis treatment,IRB 607/61; TCTR20190515001,Center of Excellence for Pediatric Infectious Diseases and Vaccines,381490,"MAY      , 12, 2019",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,bedaquiline,51310,24,Sirturo,24,BDQ Crush,TASK-002: Bioequivalence of Bedaquiline 400 mg Administered in Crushed Form Compared to Tablet Form in Healthy Male and Female Adults Under Fed Conditions,BDQ Crush; NCT03032367; TASK-002,International Maternal Pediatric Adolescent AIDS Clinical Trials Group,286376,"NOVEMBER , 10, 2016",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,gatifloxacin,7017,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
1,C-reactive protein; Erythrocyte sedimentation rate; T-Helper Lymphocytes; T-Lymphocytes; T-cell surface glycoprotein CD4; Total body mass; Vitamin D,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,rosuvastatin,12420,50,rosuvastatin,50,null,Effect of rosuvastatin on HIV TB coinfection,CTRI/2017/03/008171,Armed Forces Medical College,292154,"APRIL    , 01, 2017",Not yet recruiting
2,QT interval,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,delamanid,16545,48,delamanid; optimized multidrug background regimen therapy,48,null,"Evaluating the Pharmacokinetics, Safety and Tolerability of Delamanid in Combination With Optimized Multidrug Background Regimen (OBR) for Multidrug-Resistant Tuberculosis (MDR-TB) in HIV-Infected and HIV-Uninfected Children With MDR-TB",20721; CTRI/2018/01/011298; IMPAACT 2005; NCT03141060,"National Institute of Allergy and Infectious Diseases, National Institutes of Health",297373,"JANUARY  , 30, 2018",Recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,pretomanid,13323,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,ofloxacin,52139,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
2+,4 beta-Hydroxycholesterol/Cholesterol ratio,Mycobacterium tuberculosis infection,Lamprene; ethambutol (Myambutol); isoniazid (Nydrazid); kanamycin (Kantrex); moxifloxacin; prothionamide (Peteha); pyrazinamide (Zinamide),Phase 3 Clinical,C3,"clofazimine (oral, tuberculosis), Novartis",91861,530,Lamprene; Regimen A locally-used WHO-approved MDR-TB regimen; bedaquiline; ethambutol (Myambutol); isoniazid (Nydrazid); kanamycin (Kantrex); levofloxacin; moxifloxacin; prothionamide (Peteha); pyrazinamide (Zinamide),530,STREAM,The Evaluation of a Standard Treatment Regimen of Anti-Tuberculosis Drugs for Patients With MDR-TB,18148631; 78372190; 78372190/18148631 (Stage 1/2); CTRI/2017/09/009693; ISRCTN78372190; NCT02409290; STREAM,International Union Against Tuberculosis and Lung Diseases,228190,"APRIL    , 30, 2016",Recruiting
2+,null,Mycobacterium tuberculosis infection,Directly observed therapy,Phase 2/Phase 3 Clinical,C23,pretomanid,13323,54,bedaquiline; clofazimine; linezolid; moxifloxacin; pretomanid,54,PRACTECAL-PRO,Patient-reported Experiences and Quality of Life Outcomes in the TB-PRACTECAL Clinical Trial,NCT03942354; PRACTECAL-PRO; PRACTECAL-PRO,"Medecins Sans Frontieres, Netherlands",379769,"JULY     , 01, 2019",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,linezolid,11036,165,Zyvox; bedaquiline; clofazimine; delamanid,165,null,Study on Tuberculosis Resistant to Treatment,CTRI/2019/01/017310; Version Number: 3.1,"Indian Council of Medical Research, Tuberculosis Research Centre",369747,"FEBRUARY , 01, 2019",Not yet recruiting
2+,null,Mycobacterium tuberculosis infection,Directly observed therapy,Phase 2/Phase 3 Clinical,C23,linezolid,11036,54,bedaquiline; clofazimine; linezolid; moxifloxacin; pretomanid,54,PRACTECAL-PRO,Patient-reported Experiences and Quality of Life Outcomes in the TB-PRACTECAL Clinical Trial,NCT03942354; PRACTECAL-PRO; PRACTECAL-PRO,"Medecins Sans Frontieres, Netherlands",379769,"JULY     , 01, 2019",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,amoxicillin,44279,45,amoxicillin; cefadroxil; clavulanic acid; ethambutol; faropenem; isoniazid; pyrazinamide; rifampicin,45,null,Trial of faropenem and cefadroxil (in combination with amoxicillin/clavulanic acid and standard TB drugs) in patients with pulmonary tuberculosis: measurement of early bactericidal activity and effects on novel biomarkers,2018-CT0454; 20180710115454; Faropenem_TB; PHRR181108-001980,National University Hospital (Singapore) Pte Ltd,360329,"NOVEMBER , 30, 2018",Not yet recruiting
1,Interferon gamma; Interleukin-2; T-Helper Lymphocytes; T-Lymphocytes; T-cell surface glycoprotein CD4; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"Ag85B-ESAT-6 vaccine (IC31 adjuvant, tuberculosis), SSI/ Valneva",53784,240,"Ag85B-ESAT-6 vaccine (tuberculosis), SSI/Aeras/sanofi pasteur/Valneva",240,THYB-04,THYB-04,DoH-27-0612-3947; PACTR201403000646306; THYB-04,Statens Serum Institut,285704,"AUGUST   , 27, 2012",No longer recruiting
2,Interferon gamma,Mycobacterium tuberculosis infection,MVA-85A,Phase 1 Clinical,C1,IMX-461,66409,30,IMX-461,30,null,Phase I Trial Evaluating Safety and Immunogenicity of MVA-85A-IMX3-13 Compared to MVA-85A in BCG Vaccinated Adults,NCT01879163; TB028; UKCRN 15787,University of Oxford,142322,"JULY     , 31, 2013",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,clarithromycin,2829,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
1,Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-2; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,SSI H56-IC31,74849,null,SSI H56-IC31,null,null,A Phase II Study of H56:IC31 in Healthy Adolescents,A-043; NCT03265977; PACTR201704002006214,"Aeras, Aeras Global TB Vaccine Foundation",310653,"JUNE     , 30, 2018",Terminated
3+,QT interval,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,dolutegravir,59062,84,bedaquiline; bedaquiline; delamanid; delamanid; dolutegravir,84,null,"Evaluating the Safety, Tolerability and Pharmacokinetics of Bedaquiline and Delamanid, Alone and in Combination, For Drug-Resistant Pulmonary Tuberculosis",12005; A5343; NCT02583048,National Institute of Allergy and Infectious Diseases,243619,"AUGUST   , 31, 2016",No longer recruiting
2,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Calcium; Carbon dioxide; Chlorides; Creatine kinase; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; Glucose; Heart rate; Hematocrit; Hemoglobin; Leukocyte count; Lymphocytes; Mean corpuscular hemoglobin; Mean corpuscular volume; Monocytes; Neutrophils; Potassium; Reticulocytes; Sodium; Systolic blood pressure; Urea; gamma-Glutamyltransferase,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,cabotegravir,69974,15,cabotegravir; cabotegravir; rifabutin,15,null,Effect of Rifabutin on the Pharmacokinetics of Oral Cabotegravir in Healthy Subjects,205712; NCT03149848,ViiV Healthcare Ltd,298711,"JUNE     , 06, 2017",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,"interferon gamma follow-on biologic, PHARMACLON LLC",81264,90,Ingaron,90,null,"Randomized, comparative, controlled, open-label clinical study of efficacy and safety of Ingaron (recombinant human interferon gamma) production of ""NPP"" FARMAKLON, Russia in the treatment of patients with pulmonary tuberculosis",ING-08-12,PHARMACLON LLC,194177,"MAY      , 26, 2014",Status not specified
1,Cytokines,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,MVA-85A,55317,36,MVA-85A,36,TB036,Trial to Investigate the Effect of Schistosoma Mansoni Infection on the Response to Vaccination With MVA-85A in BCG-vaccinated African Adolescents,NCT02178748; TB036; TB036,University of Oxford,201409,"JUNE     , 30, 2014",Completed
3+,Alanine transaminase; Aspartate aminotransferase; Bilirubin; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,isoniazid; isoniazid; pyridoxine,Phase 3 Clinical,C3,rifapentine,15102,3000,efavirenz; isoniazid; pyridoxine; rifapentine,3000,BRIEF TB,Brief Rifapentine-Isoniazid Evaluation for TB Prevention,10848; A5279; ACTG A5279; BRIEF TB; BRIEF TB/A5279; NCT01404312,National Institute of Allergy and Infectious Diseases,79741,"MAY      , 23, 2012",Completed
1,CPK,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,sutezolid,11088,19,PNU-100480,19,null,"Safety, Tolerability And Pharmacokinetics Study Of Single-Doses Of PNU-100480 In Healthy Adults",B1171001; NCT00871949,Sequella Inc,50188,"APRIL    , 30, 2009",Completed
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 3 Clinical,C3,ofloxacin,52139,420,isoniazid; ofloxacin; pyrazinamide; rifampicin,420,null,Randomized Clinical Trial to Study the Efficacy and Tolerability of a 4-Month Regimen Containing Ofloxacin Compared to the Standard 6-Month Regimen in the Treatment of Patients with Superficial Lymphnode Tuberculosis,CTRI/2013/03/003481,Indian Council of Medical Research,142516,"OCTOBER  , 20, 2012",Recruiting
1+,Alanine transaminase; Aspartate aminotransferase; QT interval,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyraziminide; rifampicin,Phase 2b Clinical,C2B,bedaquiline,51310,240,bedaquiline; moxifloxacin; pretomanid; pyraziminide,240,null,"A Phase II to Evaluate the Efficacy, Safety and Tolerability of Combinations of Bedaquiline, Moxifloxacin, PA-824 and Pyrazinamide in Adult Subjects With Drug-Sensitive or Multi Drug-Resistant Pulmonary Tuberculosis",NC-005; NC-005-(J-M-PA-Z); NCT02193776,TB Alliance,210646,"OCTOBER  , 23, 2014",Completed
2+,Alanine transaminase; Bilirubin; C-reactive protein; Glucose; Hemoglobin; Leukocyte count; Serum potassium; Serum sodium; White blood cell,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,emtricitabine,4728,240,prednisone,240,Pred-ART,"Preventing TB-IRIS in High-risk Patients: a Randomized, Placebo-controlled Trial of Prednisone",CIDRI_001; DOH-27-0813-4336; NCT01924286; PACTR201304000511413; Pred-ART; SP.2011.41304.074,University of Cape Town,150793,"AUGUST   , 30, 2013",Completed
2,CD4,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,efavirenz,10172,5,efavirenz; nevirapine,5,OPTI-NNRTI,A Study to Determine the Best Dose of Antivirals in Patients With Both TB and HIV,NCT00523458; OPTI-NNRTI; Stanford Protocol ID: 95564,Stanford University,11177,"JULY     , 31, 2007",Terminated
1,85A; 85B; CD4; CD8; Cytotoxic T-Lymphocytes; IFN-gamma; IL-2; T-Helper Lymphocytes; T-Lymphocytes; TB10.4; TNF-alpha,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,AERAS-402,53975,26,AERAS-402,26,null,"Safety and Immunogenicity of AERAS-402 in HIV-infected, Bacillus Calmette-Guerin (BCG)-Vaccinated Adults",C-017-402; NCT01017536,Aeras Global TB Vaccine Foundation,62096,"DECEMBER , 31, 2009",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,linezolid,11036,19,linezolid,19,null,Pharmacokinetics of Linezolid in Adults with Pulmonary Tuberculosis,PMC2737850; PMID:19564361,null,150522,null,Completed
1+,Solute carrier organic anion transporter family member 1B1,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,lopinavir + ritonavir,14681,48,efavirenz; isoniazid; lamivudine; lopinavir + ritonavir; nevirapine; rifabutin; stavudine,35,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,ANRS12150a; NCT00640887,French National Agency for Research on AIDS and Viral Hepatitis,11187,"FEBRUARY , 28, 2009",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,raltegravir,54488,10,abacavir; lamivudine; raltegravir,10,null,Raltegravir + ABC/3TC in HIV/TB Co-Infected Patients,NCT01059422; RAL/ABC/3TC - HIV/TB,Central Research Institute of Epidemiology,63729,"OCTOBER  , 31, 2010",Recruiting
1+,CD4+,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,didanosine,2935,180,didanosine; efavirenz; efavirenz +  didanosine + lamivudine; ethambutol; ethambutol + isoniazid + rifampicin + pyrazinamide; isoniazid; isoniazid + rifampicin; lamivudine; nevirapine; nevirapine + didanosine + lamivudine; pyrazinamide; rifampicin,116,null,Safety and Efficacy of Two Once Daily Anti Retroviral Treatment Regimens Along With Anti-Tuberculosis Treatment,NCT00332306; trc23,Tuberculosis Research Centre,10863,"JUNE     , 30, 2006",Suspended
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,levofloxacin,3492,650,ethambutol hydrochloride; isoniazid; levofloxacin; pyrazinamide; pyridoxine hydrochloride; rifampin,650,null,The Treatment of Tuberculosis in HIV-Infected Patients,11199; ACTG 222; CPCRA 019; NCT00001033,National Institute of Allergy and Infectious Diseases,10643,null,Completed
2+,Cyp 450,Mycobacterium tuberculosis infection,Mycocox-4,Phase 4 Clinical,C4,"rifampicin + isoniazid + piperine (fixed dose combination, tuberculosis), Cadila Pharmaceuticals",69440,100,Risorine; ethambutol; pyrazinamide,100,null,"Comparison of Sputum Conversion Rates, Plasma Rifampicin Levels and Cyp 450 Activity Pulmonary Tuberculosis Patients Have Received 8 Weeks of Intensive Phase Therapy With Standard Dose Regimen Versus Risorine Kit",CRSC12004; CTRI/2012/11/003097,Cadila Pharmaceuticals Ltd,142231,"JUNE     , 10, 2012",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,48,MVA-85A,48,null,"A Study of MVA-85A, in Asymptomatic Volunteers Infected With TB, HIV or Both",NCT00480558; TB011,University of Oxford,14589,"JULY     , 31, 2007",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,abacavir,6242,10,abacavir; lamivudine; raltegravir,10,null,Raltegravir + ABC/3TC in HIV/TB Co-Infected Patients,NCT01059422; RAL/ABC/3TC - HIV/TB,Central Research Institute of Epidemiology,63729,"OCTOBER  , 31, 2010",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,linezolid,11036,7,clarithromycin; linezolid; linezolid + clarithromycin,7,null,Drug Interaction Study Between Linezolid and Clarithromycin in Tuberculosis Patients,2011-000513-39; NCT01521364; NL35534.042.11; NTR3260,University Medical Center Groningen,182646,"DECEMBER , 31, 2011",Completed
1+,Alanine aminotransferase; CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; stavudine,Phase 2/Phase 3 Clinical,C23,stavudine,4481,570,Arm A; Arm B; Triomune; ethambutol; ethambutol; isoniazid; isoniazid; lamivudine; nevirapine; pyrazinamide; pyrazinamide; rifampicin; rifampicin; stavudine,570,CARINEMO,Comparison of Nevirapine and Efavirenz for the Treatment of HIV-TB Co-infected Patients,ANRS 12146 CARINEMO; ANRS 12146/12214; ANRS 12214; CARINEMO; NCT00495326,French National Agency for Research on AIDS and Viral Hepatitis,10948,"DECEMBER , 31, 2007",Completed
1+,Visual acuity,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,SQ-109,31010,365,SQ-109; ethambutol; isoniazid; moxifloxacin; pyrazinamide; pyridoxine; rifampicin,365,null,"Evaluation of SQ-109, High-dose Rifampicin, and Moxifloxacin in Adults With Smear-positive Pulmonary TB in a MAMS Design",NCT01785186; PACTR201205000383208; PanACEA-MAMS-TB-01,Ludwig-Maximilians University of Munich,109063,"APRIL    , 30, 2013",Completed
1+,Human immunodeficiency virus DNA; Human immunodeficiency virus RNA; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; tenofovir disoproxil fumarate,Phase 2 Clinical,C2,tenofovir disoproxil fumarate,14493,155,lamivudine; raltegravir; tenofovir disoproxil fumarate,155,REFLATE TB,Efficacy and Safety of Two Raltegravir Doses in Naive HIV-1-Infected Patients Receiving Rifampin for Active Tuberculosis,2008-004970-41; ANRS 12 180; ANRS 12180 REFLATE TB; NCT00822315; REFLATE TB,French National Agency for Research on AIDS and Viral Hepatitis,40948,"JULY     , 31, 2009",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,lamivudine,3474,661,efavirenz; efavirenz + lamivudine + stavudine; lamivudine; stavudine,540,ANRS 1295 CAMELIA,Early versus Late Introduction of Antiretroviral Therapy in HIV-infected Patients With Tuberculosis,ANRS 1295 CAMELIA; ANRS 1295 CAMELIA; CIPRA KH 001; NCT00226434; NCT00498823,French National Agency for Research on AIDS and Viral Hepatitis,145651,"JANUARY  , 31, 2006",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,bedaquiline,51310,295,bedaquiline,295,null,Early Access of TMC-207 in Patients With Extensively Drug Resistant or Pre-XDR Pulmonary Tuberculosis,2010-021125-12; CR017233; NCT01464762; TMC207TBC3001,Janssen Diagnostics BVBA,82132,"SEPTEMBER, 16, 2011",Completed
4+,null,Mycobacterium tuberculosis infection,Rifafour e,Phase 2 Clinical,C2,pretomanid,13323,105,PA-824; TMC-207; clofazimine; clofazimine; pyrazinamide; pyrazinamide,105,NC-003,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis With Clofazimine (C)-TMC-207 (J)-PA-824 (Pa)-Pyrazinamide (Z),NC-003; NC-003-(C-J-Pa-Z); NCT01691534,TB Alliance,92275,"OCTOBER  , 31, 2012",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1b Clinical,C1B,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,66,ID-93,66,null,"Phase I, ID93 + GLA-SE Vaccine Trial in BCG-vaccinated Healthy Adult Volunteers",IDRI-TBVPX-114; NCT01927159,Infectious Disease Research Institute,151743,"SEPTEMBER, 30, 2013",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,levofloxacin,3492,750,ethambutol; isoniazid; levofloxacin; pyrazinamide; rifampicin; streptomycin,817,05TB,"A randomized, double-blind, placebo-controlled trial to investigate the effect of intensified treatment with high dose rifampicin and levofloxacin for adult patients with tuberculous meningitis",05TB; 084253; 084253; ISRCTN61649292; OXTREC No 33/09,University of Oxford,75317,"APRIL    , 18, 2011",Completed
1+,Anti-Meningitis C antibodies; C-C motif chemokine 2; C-C motif chemokine 3; C-C motif chemokine 4; Cytokines; IgG; Interferon gamma; Interferon-alpha; Interleukin-1 alpha; Interleukin-1 beta; Interleukin-10; Interleukin-12; Interleukin-13; Interleukin-2; Interleukin-6,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,Pentacel,15298,28,BCG; Infanrix; Menitorix; NeisVac-C; Pentacel; Prevnar 13; Priorix; Rotarix,28,BAM,A Study of the Interaction Between BCG And MenC Immunization,2013-003488-71; BAM; NCT02002156; OVG-2013/04; UKCRN 15722,University of Oxford,162886,"JUNE     , 20, 2014",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,rifabutin,4229,null,efavirenz; rifabutin,null,USPHS-23,Intensive Pharmacokinetics of the Nelfinavir-Rifabutin Interaction in Patients With HIV-Related Tuberculosis Treated With a Rifabutin-Based Regimen,NCRR-M01RR00030-0162; NCT00018083; USPHS-23,National Institutes of Health,10648,"JULY     , 02, 2001",Recruiting
1+,Alanine aminotransferase; CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; stavudine,Phase 2/Phase 3 Clinical,C23,efavirenz,10172,570,Arm A; Arm B; Triomune; ethambutol; ethambutol; isoniazid; isoniazid; lamivudine; nevirapine; pyrazinamide; pyrazinamide; rifampicin; rifampicin; stavudine,570,CARINEMO,Comparison of Nevirapine and Efavirenz for the Treatment of HIV-TB Co-infected Patients,ANRS 12146 CARINEMO; ANRS 12146/12214; ANRS 12214; CARINEMO; NCT00495326,French National Agency for Research on AIDS and Viral Hepatitis,10948,"DECEMBER , 31, 2007",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,Glutoxim,28379,54,Glutoxim,54,null,Glutoxim in the Surgical Treatment of Patients With Pulmonary Tuberculosis,PMID:17598458,null,149224,null,Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,LL-3858,49162,40,LL-3858,40,null,A phase IIa clinical trial for a novel molecule (LL-3858) developed by Lupin Limited which has the potential of treating the Pulmonary tuberculosis patients effectively,CTRI/2009/091/000741; LRP/CTP/022/3858/II/01,Lupin Ltd,103573,"DECEMBER , 02, 2009",No longer recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,lopinavir + ritonavir,14681,15,lopinavir + ritonavir; rifabutin,15,null,A Bioavailability Study of Rifabutin and Lopinavir/Ritonavir in Healthy Adult Subjects,M10-457; NCT00743470,Abbott Laboratories,25327,"AUGUST   , 31, 2008",Terminated
2+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,efavirenz,10172,120,Rifafour; Rifafour; efavirenz; lamivudine; zidovudine,120,PK-TB-HAART,"Bioavailability of the Fixed Dose Formulation Rifafour Containing Isoniazid, Rifampicin, Pyrazinamide, Ethambutol and the World Health Organization (WHO) Recommended First Line Antiretroviral Drugs Zidovudine, Lamivudine, Efavirenz Administered to New Tuberculosis (TB) Patients at Different Levels of Immunosuppression",A40607; ISRCTN83323477; PK-TB-HAART,World Health Organization,136052,"MAY      , 29, 2006",Completed
1+,Solute carrier organic anion transporter family member 1B1,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,rifabutin,4229,48,efavirenz; isoniazid; lamivudine; lopinavir + ritonavir; nevirapine; rifabutin; stavudine,35,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,ANRS12150a; NCT00640887,French National Agency for Research on AIDS and Viral Hepatitis,11187,"FEBRUARY , 28, 2009",Completed
2+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 4 Clinical,C4,"rifampicin + isoniazid + piperine (fixed dose combination, tuberculosis), Cadila Pharmaceuticals",69440,60,Risorine,60,null,Combination of Two Drugs in Tuberculosis Treatment,CTRI/2015/01/005475,SRM University,224091,null,Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,zidovudine,44316,130,efavirenz; isoniazid; lamivudine; pyrazinamide; rifampicin; zidovudine,130,IPEC-EFV,Randomized Clinical Trial to Assess the Efficacy and Safety of Concomitant Use of Rifampicin and Efavirenz 600 X  800 mg,CAAE-0017.1.009.000-03; IPEC-EFV; NCT00533390,Fundacao Oswaldo Cruz (Fiocruz),11181,"JANUARY  , 31, 2007",Terminated
1+,CD4; albumin,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,lamivudine,3474,156,efavirenz; lamivudine; lamivudine + efavirenz + tenofovir disoproxil fumarate; tenofovir disoproxil fumarate,156,TIME,Appropriate Timing of HAART in Co-infected HIV/TB Patients,0435.3/1551; NCT01014481; TIME,Bamrasnaradura Infectious Diseases Institute,61991,"OCTOBER  , 31, 2009",Terminated
2,Th1 cytokines,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,doxycycline hyclate,46927,200,"doxycycline (once-daily, oral controlled release), CollaGenex; doxycycline hyclate",200,Map2Co,Concomitant Infections of Mansonella Perstans in Tuberculosis and Buruli Ulcer Disease Patients From Ghana,GZ:JA 1479/5-1; Map2Co; NCT02281643,kwame Nkrumah University of Science and Technology,214864,"OCTOBER  , 31, 2014",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifapentine,15102,3900,isoniazid; rifapentine,3738,null,Intervention study in rural residents (50 to 70 years old) with latent Mycobacterium tuberculosis infection,ChiCTR-IOR-15007202,Chinese Academy of Medical Sciences & Peking Union Medical College,243294,"JANUARY  , 01, 2014",No longer recruiting
1,Heart rate; PR interval; QRS complex; QT interval; T-wave,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,TBA-354,71742,48,TBA-354,48,null,"A Phase I Study to Evaluate the Safety, Tolerability and Pharmacokinetics of TBA-354 in Healthy Adult Subjects",NCT02288481; TBA-354-CL-001,TB Alliance,215600,"JANUARY  , 31, 2015",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1b Clinical,C1B,macozinone,90085,32,PBTZ-169,32,null,"Study to Evaluate the Safety, Tolerability and Pharmacokinetics of PBTZ-169 in Multiple Dosing",IM-006-13; NCT03776500,Innovative Medicines for Tuberculosis,363587,"FEBRUARY , 21, 2019",Recruiting
3,B-lymphocytes; Neutrophils; T-Lymphocytes,Mycobacterium tuberculosis infection,BCG vaccine,Phase 1/Phase 2 Clinical,C12,ChAdOx1-85A,84564,72,ChAdOx1-85A; ChAdOx1-85A; MVA-85A,72,null,EMaBS TB Vaccine Study,NCT03681860; TB042,University of Oxford,354327,"DECEMBER , 01, 2018",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,"amoxicillin + clavulanate potassium, GSK",44284,88,Augmentin; Merrem; rifampin,88,null,Early Bactericidal Activity of Rifampin + Meropenem + Amoxicillin/Clavulanate in Adults With Pulmonary TB,FD-R-05724; IRB00119017; NCT03174184,Johns Hopkins University,300655,"AUGUST   , 23, 2017",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,levofloxacin,3492,45,levofloxacin,45,null,Population Pharmacokinetics and Pharmacodynamics Modeling to Optimize Dosage Regimen of Levofloxacin,LEVO-57-356141; NCT02699658,Prince of Songkla University,254949,"OCTOBER  , 31, 2013",Completed
1,Alanine transaminase,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,"superboosted lopinavir + ritonavir (pediatric oral formulation, HIV infection), DNDi",105321,96,"rifampicin; superboosted lopinavir + ritonavir (pediatric oral formulation, HIV infection), DNDi",96,null,Pharmacokinetics of Lopinavir/Ritonavir Superboosting in Infants and Young Children Co-infected With HIV and TB,DNDiHIVPed001; NCT02348177,Drugs for Neglected Diseases Initiative,220686,"JANUARY  , 31, 2013",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,levofloxacin,3492,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,efavirenz,10172,62,depot medroxyprogesterone acetate; efavirenz; isoniazid; rifampicin,62,PRIDE-HT,PK Study of Rifampicin Interactions With DMPA and Efaviranz in TB,ACTG A5338; NCT02412436; PRIDE-HT; UM1AI068636,AIDS Clinical Trials Group,227340,"NOVEMBER , 03, 2015",Completed
1+,null,Mycobacterium tuberculosis infection,amikacin; cycloserine; moxifloxacin; prothionamide; pyrazinamide,Phase 2 Clinical,C2,moxifloxacin,12978,488,amikacin; clofazimine; cycloserine; ethambutol; linezolid; moxifloxacin; prothionamide; pyrazinamide,488,GRACE-TB,NGS-Guided(G) Regimens(R) of Anti-tuberculosis(A) Drugs for the Control(C) and Eradication(E) of MDR-TB,GRACE-TB; KY2018-291; NCT03604848,Huashan Hospital,348056,"AUGUST   , 05, 2018",Not yet recruiting
2+,null,Mycobacterium tuberculosis infection,Rifafour e275; ethambutol; isoniazid; pyrazinamide; rifampin,Phase 2 Clinical,C2,faropenem,4492,46,"amoxicillin + clavulanate potassium, GSK; faropenem; meropenem",30,null,"Phase II Trial to Evaluate the Early Bactericidal Activity, Safety and Tolerability of Meropenem Plus Amoxycillin/CA and Faropenem Plus Amoxycillin/CA in Adult Patients With Newly Diagnosed Pulmonary Tuberculosis",NCT02349841; TASK-001,Task Foundation NPC,220739,"SEPTEMBER, 30, 2014",Completed
2+,null,Mycobacterium tuberculosis infection,Rifafour e275; ethambutol; isoniazid; pyrazinamide; rifampin,Phase 2 Clinical,C2,meropenem,3616,46,"amoxicillin + clavulanate potassium, GSK; faropenem; meropenem",30,null,"Phase II Trial to Evaluate the Early Bactericidal Activity, Safety and Tolerability of Meropenem Plus Amoxycillin/CA and Faropenem Plus Amoxycillin/CA in Adult Patients With Newly Diagnosed Pulmonary Tuberculosis",NCT02349841; TASK-001,Task Foundation NPC,220739,"SEPTEMBER, 30, 2014",Completed
3,Cytochrome P450 2B6,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,efavirenz,10172,155,efavirenz; neucleotide reverse transcriptase inhibitors; rifampin,155,null,Efavirenz (EFV) in HIV-Infected and HIV/Tuberculosis (TB) Coinfected Children,10633; IMPAACT P1070; NCT00802802; P1070,National Institute of Allergy and Infectious Diseases,37985,"OCTOBER  , 31, 2009",Completed
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 3 Clinical,C3,pretomanid,13323,284,moxifloxacin; pretomanid; pyrazinamide,284,STAND,Shortening Treatment by Advancing Novel Drugs,2014-CT0249; NC-006-(M-PA-Z); NC-006-(M-Pa-Z); NC-006-(M-Pa-Z) 21522; NCT02342886; NMRR-14-702-21522; PHRR150114-000899; STAND,TB Alliance,221844,"FEBRUARY , 28, 2015",Completed
3+,QT interval,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,bedaquiline,51310,84,bedaquiline; bedaquiline; delamanid; delamanid; dolutegravir,84,null,"Evaluating the Safety, Tolerability and Pharmacokinetics of Bedaquiline and Delamanid, Alone and in Combination, For Drug-Resistant Pulmonary Tuberculosis",12005; A5343; NCT02583048,National Institute of Allergy and Infectious Diseases,243619,"AUGUST   , 31, 2016",No longer recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 2b Clinical,C2B,bedaquiline,51310,208,bedaquiline,160,null,"Anti-bacterial Activity, Safety, and Tolerability of TMC-207 in Participants With Multi-drug Resistant Mycobacterium Tuberculosis (MDR-TB)",2007-004462-40; CR011929; NCT00449644; NCT00614627; NCT00980265; TMC207-TIDP13-C208,Janssen R&D (Ireland),9302,"JUNE     , 30, 2007",Completed
2+,null,Mycobacterium tuberculosis infection,pyrazinamide,Phase 2/Phase 3 Clinical,C23,linezolid,11036,238,delamanid; levofloxacin; linezolid; pyrazinamide,238,MDR-END,Treatment Shortening of MDR-TB Using Existing and New Drugs,MDR-END; NCT02619994,Seoul National University Hospital,247456,"JANUARY  , 31, 2016",Recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,VPM-1002,55569,12000,Immuvac; VPM-1002,12000,null,To Study Effect of Two Vaccines in Preventing Spread of Tuberculosis in Persons Living With New Tuberculosis Patients,"CTRI/2019/01/017026; ICMR/ITRC/VAC/001/2018, Version 1.5, dated 3rd october 2018",Indian Council of Medical Research,366261,"JANUARY  , 25, 2019",Not yet recruiting
2+,null,Mycobacterium tuberculosis infection,WHO approved regimen-based therapy,Phase 3 Clinical,C3,linezolid,11036,null,Deltyba; Levaquin; Zyvox; pyrazinamide,null,DAZZLE,"Efficacy and Tolerability of Delamanid, Linezolid, Pyrazinamide and Levofloxacin",DAZZLE; H-36160; NCT02975570,Boston University,280651,"AUGUST   , 31, 2017",Terminated
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,BTZ-043,70901,30,BTZ-043,30,null,A Single Ascending Dose Study Of BTZ-043,LMU-IMPH-BTZ043-01; NCT03590600,Ludwig-Maximilians University of Munich,346718,"JUNE     , 07, 2018",Completed
2+,null,Mycobacterium tuberculosis infection,Directly observed therapy,Phase 2/Phase 3 Clinical,C23,moxifloxacin,12978,54,bedaquiline; clofazimine; linezolid; moxifloxacin; pretomanid,54,PRACTECAL-PRO,Patient-reported Experiences and Quality of Life Outcomes in the TB-PRACTECAL Clinical Trial,NCT03942354; PRACTECAL-PRO; PRACTECAL-PRO,"Medecins Sans Frontieres, Netherlands",379769,"JULY     , 01, 2019",Not yet recruiting
1+,Total body mass,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,bedaquiline,51310,180,bedaquiline; linezolid; pretomanid,180,ZeNiX,"Safety and Efficacy of Various Doses and Treatment Durations of Linezolid Plus Bedaquiline and Pretomanid in Participants With Pulmonary TB, XDR-TB, Pre-XDR-TB or Non-responsive/Intolerant MDR-TB",NC-007- (B-Pa-L); NCT03086486; ZENIX (B-PA-L) NC-007; ZeNiX,TB Alliance,293734,"OCTOBER  , 31, 2017",Recruiting
2,null,Mycobacterium tuberculosis infection,ethambutol,Phase 2 Clinical,C2,moxifloxacin,12978,170,moxifloxacin,146,null,Moxifloxacin As Part of a Multi-Drug Regimen For Tuberculosis,FD-R-002135-01; NCT00082173,"Food and Drug Administration, Johns Hopkins University",8791,"OCTOBER  , 31, 2004",Completed
1,"Cytochrome P450 3A4; Hemoglobin A, glycosylated; Total body mass; Urinary albumin to creatinine ratio",Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,bedaquiline,51310,36,bedaquiline,36,PANDEMIC,"A study on the uptake, distribution and excretion of bedaquiline, a medicine against tuberculosis, in people with type 2 diabetes",2017-004490-14; 2017-004490-14 201700787; NTR7045; PANDEMIC,University Medical Center Groningen,331962,"JUNE     , 01, 2018",Not yet recruiting
1,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Body temperature; Calcium; Creatinine; Diastolic blood pressure; Eosinophils; Glucose; Heart rate; Heart rate; Hematocrit; Hemoglobin; Ketones; Lymphocytes; Mean corpuscular hemoglobin; Monocytes; Neutrophils; PR interval; Potassium; QRS complex; QT interval; Reticulocytes; Sodium; Systolic blood pressure; Total cholesterol; Total protein; Triglycerides; Troponin; Urea nitrogen,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,GSK-3036656,70581,30,GSK-3036656,30,null,First Time in Human (FTIH) Safety and Pharmacokinetics (PK) Study of GSK-3036656 in Healthy Subjects,201040; 2015-003654-41; NCT03075410,GlaxoSmithKline plc,290705,"APRIL    , 02, 2017",Completed
4+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,celecoxib,12135,18,celecoxib; celecoxib; pyrazinamide; pyrazinamide; rifampicin; rifampicin,18,null,Evaluating Celecoxib Activity in Mycobacterium Tuberculosis: A Whole Blood Bactericidal Activity Study in Healthy Volunteers,CELECOXIB_WBA; NCT02602509,National University Hospital (Singapore) Pte Ltd,245694,"NOVEMBER , 30, 2015",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,RUTI,57308,24,RUTI,24,null,Clinical Trial to Study Four Different Doses of the Vaccine RUTI in Healthy Volunteers,EudraCT Number: 2006-000690-29; FA/MI/01; NCT00546273,Germans Trias i Pujol Hospital,8888,"APRIL    , 30, 2007",Completed
1,Alanine transaminase; Aspartate aminotransferase; Bilirubin; Blood pressure; Body temperature; Creatinine; Estimated glomerular filtration rate; Heart rate; Hemoglobin; Magnesium; Potassium; QT interval; Urea nitrogen,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,pretomanid,13323,48,pretomanid,48,null,Single-Dose Study to Evaluate the PKs of Pretomanid in Subjects With Renal Impairment Compared to Subjects With Normal Renal Function,15-0037; HHSN272201300021I; NCT03896750,National Institute of Allergy and Infectious Diseases,375406,"MAY      , 09, 2019",Not yet recruiting
2+,QT interval,Mycobacterium tuberculosis infection,WHO regimen therapy,Phase 3 Clinical,C3,"clofazimine (oral, tuberculosis), Novartis",91861,null,Deltyba; Lamprene; Levaquin; Sirturo; Zyvox,null,DRAMATIC,"Efficacy and Tolerability of Bedaquiline, Delamanid, Levofloxacin, Linezolid, and Clofazimine for Treatment of Patients With MDR-TB",DRAMATIC; H38212; NCT03828201,Boston University,368916,"JANUARY  , 31, 2020",Terminated
2,null,Mycobacterium tuberculosis infection,null,Phase 2b Clinical,C2B,ESAT-6CFP10,95442,1044,BCG; ESAT6-CFP10,1044,null,Phase IIb Clinical Study of Recombinant Mycobacterium Tuberculosis Allergen ESAT6-CFP10 on Healthy People Aged 18 to 65,EC-IIB-HEALTHY; NCT02389322,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,224675,"MARCH    , 31, 2015",Completed
2,Alanine transaminase; Albumin; Alkaline phosphatase; Aspartate aminotransferase; Basophils; Bilirubin; Blood platelets; Body temperature; Calcium; Chlorides; Creatinine; Diastolic blood pressure; Eosinophils; Erythrocytes; Glucose; Heart rate; Hematocrit; Hemoglobin; Ketones; Lactate dehydrogenase; Leukocyte count; Lymphocytes; Mean corpuscular hemoglobin; Mean corpuscular volume; Monocytes; Neutrophils; Nitrite; Potassium; QT interval; Respiratory frequency; Reticulocytes; Sodium; Systolic blood pressure; Total protein; Urea nitrogen; Urobilinogen; gamma-Glutamyltransferase,Mycobacterium tuberculosis infection,Rifafour e-275,Phase 2a Clinical,C2A,GSK-3036656,70581,80,GSK-3036656,80,null,"An Early Bactericidal Activity, Safety and Tolerability of GSK-3036656 in Subjects With Drug-sensitive Pulmonary Tuberculosis",201214; NCT03557281,GlaxoSmithKline plc,343050,"MARCH    , 27, 2019",Recruiting
3+,null,Mycobacterium tuberculosis infection,standard of care treatment,Phase 2 Clinical,C2,faropenem,4492,56,clavulanate; faropenem; rifampicin; standard of care treatment,56,null,Synergistically acting Rifampicin and Faropenem in Tuberculosis,CTRI/2019/04/018577,Indian Council of Medical Research,377088,"MAY      , 31, 2019",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,bedaquiline; delamanid; moxifloxacin,Phase 2b Clinical,C2B,delamanid,16545,75,bedaquiline; delamanid; midazolam; moxifloxacin; sutezolid,75,SUDOCU,PanACEA Sutezolid Dose-finding and Combination Evaluation,NCT03959566; PANACEA-SUDOCU-01; SUDOCU,Ludwig-Maximilians University of Munich,381674,"AUGUST   , 31, 2019",Not yet recruiting
1,Interferon gamma,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,ESAT-6CFP10,95442,null,ESAT-6CFP10,null,null,"Recombinant Mycobacterium tuberculosis allergen ESAT6-CFP10 for 18 to 65 years old healthy people: randomized, blinded, parallel-group phase III clinical trial",ChiCTR-IIR-16007904,Jiangsu Provincial Academy Of Environmental Science,252783,"FEBRUARY , 17, 2016",Not yet recruiting
1+,Glucose,Mycobacterium tuberculosis infection,amikacin; clofazimine; cycloserine; ethambutol; isoniazid; kanamycin; levofloxacin; prothionamide; pyrazinamide,Phase 2 Clinical,C2,linezolid,11036,220,clofazimine; cycloserine; levofloxacin; linezolid; prothionamide; pyrazinamide,220,TB-TRUST,Refining MDR-TB Treatment Regimens for Ultra Short Therapy,KY2018-331; NCT03867136; TB-TRUST,Huashan Hospital,372676,"MAY      , 01, 2019",Not yet recruiting
1+,Human immunodeficiency virus DNA; Human immunodeficiency virus RNA; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; tenofovir disoproxil fumarate,Phase 2 Clinical,C2,raltegravir,54488,155,lamivudine; raltegravir; tenofovir disoproxil fumarate,155,REFLATE TB,Efficacy and Safety of Two Raltegravir Doses in Naive HIV-1-Infected Patients Receiving Rifampin for Active Tuberculosis,2008-004970-41; ANRS 12 180; ANRS 12180 REFLATE TB; NCT00822315; REFLATE TB,French National Agency for Research on AIDS and Viral Hepatitis,40948,"JULY     , 31, 2009",Completed
3+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,clarithromycin,2829,null,clarithromycin; levofloxacin; moxifloxacin; moxifloxacin; rifabutin,null,null,The research of new regimen for multidrug-resistant tuberculosis treatment,ChiCTR-IOR-15007291,"Beijing Chest Hospital, Beijing Tuberculosis & Thoracic Tumor Research Institute, Capital Medical University",244777,"OCTOBER  , 01, 2008",No longer recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,midazolam hydrochloride,44303,74,TBA-7371; TBA-7371; bupropion; midazolam,74,null,"A Phase I Study to Evaluate Safety, Tolerability, PK, and PK Interactions of TBA-7371",NCT03199339; TBA-7371-CL001,TB Alliance,303756,"AUGUST   , 29, 2017",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,doravirine,74480,11,doravirine; isoniazid; rifapentine,11,DORIIS,"Doravirine, Rifapentine and Isoniazid Interaction",12690; DORIIS; NCT03886701,Thomas Jefferson University,374387,"APRIL    , 30, 2019",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,trimethoprim + sulphamethoxazole,44363,1354,isoniazid; trimethoprim + sulphamethoxazole,1354,null,Daily Isoniazid to Prevent Tuberculosis in Infants Born to Mothers With HIV,IMPAACT P1041; NCT00080119; PACTG P1041; U01AI068632,International Maternal Pediatric Adolescent AIDS Clinical Trials Group,187839,"FEBRUARY , 29, 2004",Terminated
1+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,stavudine,4481,400,efavirenz; ethambutol; isoniazid; lamivudine; pyrazinamide; rifabutin; rifampicin; stavudine; zidovudine,400,null,Acquired Immunodeficiency Syndrome (AIDS) and Tuberculosis (TB) Co-Infection Treatment Strategies Study of China,2008ZX10001-008; NCT01344148,Shanghai Public Health Clinical Center,76946,"FEBRUARY , 28, 2009",Recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,rifabutin,4229,33,TMC-207; TMC-207; rifabutin; rifampin,33,null,TMC-207 +/- Rifabutin/Rifampin,10-0043; HHSN272201500007I; N01AI80026C; NCT01341184,National Institute of Allergy and Infectious Diseases,76765,"OCTOBER  , 21, 2011",Completed
1+,Blood platelets; Cytochrome P450 2B6,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,efavirenz,10172,35,efavirenz; lamivudine+ zidovudine; rifampicin + isoniazid (Rifinah); tenofovir disoproxil fumarate + emtricitabine; tenofovir+ lamivudine,26,null,Pharmacokinetics of Efavirenz in the Presence of Rifampicin and Isoniazid,2014-002608-26; NCT02832778; SSAT062,St Stephens Aids Trust,265766,"OCTOBER  , 21, 2016",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,SQ-109,31010,10,SQ-109,10,null,Phase Ic Study of Safety and PK of SQ-109 300 mg Daily,09-0111; N01AI80024C; NCT01358162,National Institute of Allergy and Infectious Diseases,77682,"NOVEMBER , 30, 2010",Completed
3+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,emtricitabine,4728,200,efavirenz; emtricitabine; emtricitabine; lopinavir + ritonavir; rifabutin; rifampicin; tenofovir disoproxil fumarate; tenofovir disoproxil fumarate,200,RIFART,RIFART,EudraCT 2007-007935-14; MI2-RIFART-2005; RIFART,Azienda Ospedaliera Spedali Civili di Brescia,131240,"MARCH    , 15, 2005",Terminated
1+,CD4 Positive T Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,trimethoprim + sulphamethoxazole,44363,642,didanosine; efavirenz; lamivudine; lamivudine + efavirenz + didanosine; trimethoprim + sulfamethoxazole,642,SAPIT,A Study to Compare Three Existing Starting Points of Antiretroviral Therapy (ART) Initiation in HIV/Tuberculosis (TB) Co-infected Patients,CAPRISA 003; NCT00398996; SAPIT,Centre for the AIDS Program of Research in South Africa,201474,"JUNE     , 30, 2005",Completed
1+,Alanine transaminase; Aspartate aminotransferase; QT interval,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyraziminide; rifampicin,Phase 2b Clinical,C2B,pretomanid,13323,240,bedaquiline; moxifloxacin; pretomanid; pyraziminide,240,null,"A Phase II to Evaluate the Efficacy, Safety and Tolerability of Combinations of Bedaquiline, Moxifloxacin, PA-824 and Pyrazinamide in Adult Subjects With Drug-Sensitive or Multi Drug-Resistant Pulmonary Tuberculosis",NC-005; NC-005-(J-M-PA-Z); NCT02193776,TB Alliance,210646,"OCTOBER  , 23, 2014",Completed
1+,CD4; Cytotoxic T-Lymphocytes; HIV viral load; Human immunodeficiency virus RNA; T-Helper Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,Kaletra; ethambutol; isoniazid; pyrazinamide; pyridoxine; rifampin,Phase 2b Clinical,C2B,rifabutin,4229,71,Kaletra; ethambutol; isoniazid; pyrazinamide; pyridoxine; raltegravir; rifabutin,71,null,Rifampin-Based Tuberculosis Treatment Versus Rifabutin-Based Tuberculosis Treatment in Persons With HIV,1U01AI068636; ACTG A5290; NCT01601626,AIDS Clinical Trials Group,87585,"JULY     , 13, 2013",Terminated
1,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,itraconazole,3411,60,itraconazole,60,null,A Comparative Study of Itraconazole in Various Doses Schedule in the Treatment of Pulmonary Aspergilloma in Treated  with the Patients of Pulmonary Tuberculosis,CTRI/2013/02/003374,Sawai ManSingh Medical College,131456,"JULY     , 31, 2012",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,12,MVA85A,12,null,"A Phase I Study of the Safety and Immunogenicity of a Recombinant MVA Vaccine Encoding a Secreted Antigen From M Tuberculosis, Antigen 85A, Delivered Intradermally by a Needle Injection in Healthy Volunteers Who Have Received BCG Immunisation 1 Month Previously",NCT00427453; TB004,University of Oxford,10873,"JUNE     , 30, 2003",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,16,MVA85A,16,null,"A Phase I Study of the Safety and Immunogenicity of a Recombinant MVA Vaccine Encoding a Secreted Antigen From M Tuberculosis, Antigen 85A, Delivered Intradermally by a Needle Injection in Healthy Volunteers Who Have Previously Received BCG",NCT00427830; TB005,University of Oxford,10874,"MAY      , 31, 2003",Completed
3+,Alanine transaminase; Blood platelets; Body temperature; CD40 ligand; Creatinine; Cytotoxic T-Lymphocytes; Hemoglobin; Interferon gamma; Interleukin-2; Leukocyte count; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,Menjugate; Polio Sabin; Prevnar; Tritanrix HB,Phase 2 Clinical,C2,Tritanrix HB,12862,302,GSK-692342; GSK-692342a; Polio Sabin; Prevnar; Tritanrix HB,302,null,Safety and Immunogenicity Study of a Candidate Tuberculosis Vaccine in Healthy Infants,112899; 2012-004380-44; NCT01098474; TUBERCULOSIS-013 PRI,GlaxoSmithKline plc,65639,"JULY     , 31, 2010",Completed
4,25(OH)D3; Calcium; LL-37; Macrophages; Total body mass; Weight; cough clearance,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,VP-101,12014,288,chemotherapy; cholecalciferol (Vigantol oil); cholecalciferol (Vigantol oil); sodium phenylbutyrate; sodium phenylbutyrate,288,null,Clinical Trial of Phenylbutyrate and Vitamin D in Tuberculosis (TB),NCT01580007; PR-09068,"International Centre For Diarrhoeal Disease Research, Bangladesh",142323,"DECEMBER , 31, 2010",Completed
3+,Body Mass Index; Glucose,Mycobacterium tuberculosis infection,ethambutol; gatifloxacin,Phase 3 Clinical,C3,gatifloxacin,7017,2070,gatifloxacin; isoniazid; rifampin,1836,OFLOTUB,A Controlled Trial of a 4-Month Quinolone-Containing Regimen for the Treatment of Pulmonary Tuberculosis,ICA4-CT 2002-10057; NCT00216385; OFLOTUB,Institut de Recherche pour le Developpement (IRD),10855,"JANUARY  , 31, 2005",Recruiting
2,CD4+ T-lymphocytes; CD8+ T-lymphocytes; CD8-Positive T-Lymphocytes; Interferon-gamma; Interleukin-17A; Interleukin-2; Interlukenin-2; T-Helper Lymphocytes; TNF-alpha,Mycobacterium tuberculosis infection,BCG,Phase 2 Clinical,C2,VPM-1002,55569,48,VPM-1-002,48,null,Study to Evaluate Safety and Immunogenicity of VPM-1-002 in Comparison With BCG in Newborn Infants in South Africa,DOH-27-0911-3677; NCT01479972; VPM1002-ZA-2.12TB,Vakzine Projekt Management GmbH,82764,"NOVEMBER , 30, 2011",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,rifapentine,15102,44,rifapentine,44,null,Evaluating the Pharmacokinetics of High-Dose Rifapentine When Given as a Single-Dose or in Divided Doses to Healthy Adults,11859; A5311; ACTG 5311; NCT01574638,National Institute of Allergy and Infectious Diseases,86389,"JUNE     , 30, 2012",Terminated
3+,null,Mycobacterium tuberculosis infection,ethambutol hydrochloride; isoniazid; linezolid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,delpazolid,76307,64,LCB01-0371,64,null,"A Phase II Clinical Study of LCB01-0371 to Evaluate the EBA, Safety and PK",2016-0642; KCT0003975; LCB01-0371-15-2-01; NCT02836483,LegoChem Bioscience Inc,265899,"DECEMBER , 10, 2016",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,"Ag85B-ESAT-6 vaccine (IC31 adjuvant, tuberculosis), SSI/ Valneva",53784,20,"Ag85B-ESAT-6 vaccine (tuberculosis), SSI/Aeras/sanofi pasteur/Valneva",20,THYB-02,A Safety and Immunogenicity Trial With an Adjuvanted Tuberculosis (TB) Subunit Vaccine in Purified Protein Derivative (PPD) Positive Volunteers,NCT00929396; THYB-02; THYB-02,Statens Serum Institut,58503,"SEPTEMBER, 30, 2007",Completed
1,Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-2; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,MVA-85A,55317,2797,MVA-85A,2797,null,A Study of MVA-85A in Healthy Infants,084785; C-020-485; ISRCTN39705371; NCT00953927; Oxford TB020,Aeras Global TB Vaccine Foundation,59405,"JULY     , 31, 2009",Completed
2+,null,Mycobacterium tuberculosis infection,Rifafour,Phase 2 Clinical,C2,bedaquiline,51310,85,PA-824; Rifafour; TMC-207; moxifloxacin; pyrazinamide,65,null,Evaluation of Early Bactericidal Activity in Pulmonary Tuberculosis With,NC-001; NC-001-(J-M-Pa-Z); NCT01215851,TB Alliance,71107,"OCTOBER  , 31, 2010",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,lopinavir + ritonavir,14681,9,Kaletra; rifampin; ritonavir,9,null,Pharmacokinetic Study of Super-boosted Lopinavir/Ritonavir Given With Rifampin,20100325; NCT01700790,University of Miami,93494,"FEBRUARY , 29, 2016",Terminated
2,Immunoglobulin G; T-Lymphocytes,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,60,ID-93; ID-93 + GLA-SE,60,null,Phase I ID-93 + GLA-SE Vaccine Trial in Healthy Adult Volunteers,IDRI-TBVPX-113; NCT01599897,Infectious Disease Research Institute,87507,"AUGUST   , 31, 2012",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,linezolid,11036,429,ethambutol; isoniazid; linezolid; pyrazinamide; rifampicin,428,null,Linezolid Instead of Ethambutol in Treatment of Drug-susceptible Tuberculosis,J-1310-026-523; NCT01994460,Seoul National University Hospital,161831,"JANUARY  , 31, 2014",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,efavirenz,10172,400,efavirenz; ethambutol; isoniazid; lamivudine; pyrazinamide; rifabutin; rifampicin; stavudine; zidovudine,400,null,Acquired Immunodeficiency Syndrome (AIDS) and Tuberculosis (TB) Co-Infection Treatment Strategies Study of China,2008ZX10001-008; NCT01344148,Shanghai Public Health Clinical Center,76946,"FEBRUARY , 28, 2009",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,lopinavir + ritonavir,14681,140,Aluvia; raltegravir; rifabutin,140,null,EARNEST Rifabutin Pharmacokinetics (PK) Substudy,ISRCTN13074752; NCT01663168,"Joint Clinical Research Centre, Medical Research Council",90175,"MAY      , 03, 2012",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,moxifloxacin,12978,350,ethambutol; isoniazid; moxifloxacin; pyrazinamide; rifampin,350,TBTC-27,TBTC Study 27: Moxifloxacin versus Ethambutol for TB Treatment,CDC-NCHSTP-3716; NCT00140309; TBTC-27,Centers for Disease Control and Prevention,10684,"JULY     , 31, 2003",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,efavirenz,10172,52,PA-824; efavirenz; lopinavir + ritonavir; rifampin,52,null,"Evaluating the Safety and Drug Interaction of PA-824, an Investigational Tuberculosis Medication, Together With Efavirenz, Ritonavir-Boosted Lopinavir or Rifampin",11829; A5306; ACTG5306; NCT01571414,National Institute of Allergy and Infectious Diseases,86312,"MAY      , 31, 2012",Completed
1,Human immunodeficiency virus RNA,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,raltegravir,54488,108,raltegravir; rifampicin,108,null,"Evaluating the Safety, Tolerance, and Pharmacokinetics of a Raltegravir-containing Antiretroviral Therapy (ART) Regimen in Infants and Children Infected With HIV and TB",11831; IMPAACT P1101; NCT01751568; P1101,National Institute of Allergy and Infectious Diseases,102102,"MAY      , 31, 2014",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,moxifloxacin,12978,1931,ethambutol; isoniazid; moxifloxacin; pyrazinamide; rifampicin,1931,REMoxTB,Controlled Comparison of Two Moxifloxacin Containing Treatment Shortening Regimens in Pulmonary Tuberculosis,10.1186/ISRCTN85595810; CTR20140130; CTRI/2011/05/001745; ISRCTN85595810; NCT00864383; NMRR-09-963-4872; PACTR201110000124315; REMoxTB; REMoxTB,TB Alliance,49258,"JANUARY  , 01, 2008",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,bedaquiline,51310,33,TMC-207; TMC-207; rifabutin; rifampin,33,null,TMC-207 +/- Rifabutin/Rifampin,10-0043; HHSN272201500007I; N01AI80026C; NCT01341184,National Institute of Allergy and Infectious Diseases,76765,"OCTOBER  , 21, 2011",Completed
1,T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,24,MVA-85A,24,null,"Safety of Tuberculosis Vaccine, MVA-85A, Administered by the Aerosol Route and the Intradermal Route",NCT01497769; TB026,University of Oxford,83464,"SEPTEMBER, 30, 2011",Completed
2,null,Mycobacterium tuberculosis infection,moxifloxacin,Phase 1 Clinical,C1,bedaquiline,51310,88,TMC-207,88,null,TMC207TBC1003 - A Study in Healthy Volunteers Investigating the Effect of Single-Dose TMC-207 on the QT/QTc Interval Under Fed Conditions,CR017167; NCT01291563; TMC-207-TBC1003,Janssen Diagnostics BVBA,74529,"FEBRUARY , 28, 2011",Completed
1,Albumin,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,bedaquiline,51310,null,bedaquiline,null,null,A Study to Evaluate the Efficacy and Safety of TMC-207 in Patients With Pulmonary Infection With Multi-drug Resistant Mycobacterium Tuberculosis,2011-000653-23; CR100807; NCT01600963; PHRR130402-000059; TMC207-TIDP13-C210; U1111-1135-7013,Janssen Research & Development LLC,87533,"MARCH    , 31, 2014",Terminated
1,QT interval,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,moxifloxacin,12978,9,moxifloxacin,9,null,Pharmacokinetics and Safety of Moxifloxacin,2010-023491-25; MFX468; NCT01329250,University Medical Center Groningen,76086,"MAY      , 31, 2011",Terminated
1,T-Lymphocytes,Mycobacterium tuberculosis infection,null,Phase not specified,NS,interferon alfa-2b,45998,70,interferon alfa-2b,70,null,Interferon Alpha-2b in the Complex Therapy of Patients With Pulmonary Tuberculosis Concurrent With Broncho-obstructive Syndrome,PMID:20095375,null,149989,"JANUARY  , 01, 2007",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,rifabutin,4229,44,lamivudine; nelfinavir mesylate; rifabutin; stavudine; zidovudine,44,null,Effectiveness of Anti-HIV Therapy (HAART) in HIV-Infected Patients With Tuberculosis,AACTG A5062; ACTG A5062; NCT00004736,National Institute of Allergy and Infectious Diseases,10646,"FEBRUARY , 25, 2000",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifabutin,4229,20,nelfinavir; rifabutin,20,TBTC-23B,Intensive PK of the Nelfinavir Rifabutin Interaction in Patients With HIV-TB,23B; CDC-NCHSTP-2587; NCT00023400; TBTC-23B,Centers for Disease Control and Prevention,10656,"FEBRUARY , 29, 2000",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,linezolid,11036,36,linezolid,36,LiMiT,Pilot Study Examining the Safety and Tolerability of Low Dose Linezolid in the Treatment of Multi-Drug Resistant Tuberculosis,CDC-NCHHSTP-5356; LiMiT; NCT00664313,"Centers for Disease Control and Prevention, Pfizer Inc",11219,"APRIL    , 30, 2009",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,nelfinavir,8255,20,nelfinavir; rifabutin,20,TBTC-23B,Intensive PK of the Nelfinavir Rifabutin Interaction in Patients With HIV-TB,23B; CDC-NCHSTP-2587; NCT00023400; TBTC-23B,Centers for Disease Control and Prevention,10656,"FEBRUARY , 29, 2000",Completed
1+,CYP 2B6 516GG; CYP 2B6 516TT; CYP2B6 516G>T; CYP2B6 516GT; Cytochrome P450 2B6,Mycobacterium tuberculosis infection,null,Phase not specified,NS,efavirenz,10172,312,efavirenz; ethambutol; isoniazide; pyrazinamide; rifampin; stavudine + lamivudine,312,ANRS 12154 PECAN,Pharmacokinetics of efavirenz in combination of rimfampin in HIV-infected adults,ANRS 12154 PECAN,"INSERM, Institut Pasteur Du Cambodge",145595,null,Completed
2,CD4,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,nevirapine,3700,5,efavirenz; nevirapine,5,OPTI-NNRTI,A Study to Determine the Best Dose of Antivirals in Patients With Both TB and HIV,NCT00523458; OPTI-NNRTI; Stanford Protocol ID: 95564,Stanford University,11177,"JULY     , 31, 2007",Terminated
5,null,Mycobacterium tuberculosis infection,isoniazid,Phase 1/Phase 2 Clinical,C12,linezolid,11036,70,gatifloxacin; levofloxacin; linezolid; moxifloxacin,70,TBRU 10,"Early Bactericidal Activity of Linezolid, Gatifloxacin, Levofloxacin, Isoniazid (INH) and Moxifloxacin in HIV Negative Adults With Initial Episodes of Sputum Smear-Positive Pulmonary Tuberculosis",01-553; NCT00396084; TBRU 10; TBRU 10,National Institute of Allergy and Infectious Diseases,10869,"FEBRUARY , 29, 2004",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,Glutoxim,28379,42,Glutoxim,42,null,Glutoxim in the Complex Treatment of Tuberculosis,PMID:12087719,IM Sechenov Moscow Medical Academy,149460,null,Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,bedaquiline,51310,36,bedaquiline,36,null,"An Open-Label Study to Evaluate the Effects on Mycobacterium Tuberculosis, Safety, Tolerability and Pharmacokinetics of Single Doses of R-207910, in Treatment Naive Patients With Mycobacterium Tuberculosis Infection",BAC2001; EudraCT 2004-002202-30; R207910BAC2001,"Janssen Diagnostics BVBA, Johnson & Johnson",129536,"OCTOBER  , 18, 2004",Recruiting
1,Albumin,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,rifapentine,15102,36,isoniazid; rifapentine,35,TBTC-25,Intensive Pharmacokinetic Study of Three Doses of Rifapentine and 25-Desacetyl Rifapentine,CDC-NCHSTP-2558; NCT00023387; TBTC Study 25PK; TBTC-25,Centers for Disease Control and Prevention,10655,"MARCH    , 31, 2000",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,linezolid,11036,59,PNU-100480,59,null,"Safety, Tolerability, Pharmacokinetics And Measurement Of Whole Blood Activity (WBA) Of PNU-100480 After Multiple Oral Doses In Healthy Adult Volunteers",B1171002; NCT00990990,Sequella Inc,60906,"OCTOBER  , 31, 2009",Completed
1,Body height; QT interval; Total body mass,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,delamanid,16545,37,delamanid,37,null,"A 6-Month Safety, Efficacy and PK Trial of Delamanid in Pediatric Patients With Multidrug Resistant Tuberculosis",2012-004620-38; 2012-CT0079; 242-12-233; NCT01859923; P/281/2014; PHRR160526-001029,Otsuka Pharmaceutical Development and Commercialization Inc,133567,"JULY     , 20, 2013",No longer recruiting
2,CD107a; CD154; CD4+ T cells; Cytotoxic T-Lymphocytes; Interferon-gamma; Interleukin-17; Interleukin-2; Interleukin-22; T-Helper Lymphocytes; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,Bacillus Calmette-Guerin vaccine,Phase 2 Clinical,C2,H4:IC31,48499,990,H4+IC31,990,null,"A Randomized, Placebo-Controlled, Partially-Blinded, Phase II Study to Evaluate Safety, Immunogenicity, and Prevention of Infection With Mycobacterium Tuberculosis of AERAS-404 and BCG Revaccination in Healthy Adolescents",C-040-404; NCT02075203,Aeras Global TB Vaccine Foundation,176219,"FEBRUARY , 28, 2014",Completed
3+,Alanine transaminase; Aspartate aminotransferase; Bilirubin; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,isoniazid; isoniazid; pyridoxine,Phase 3 Clinical,C3,efavirenz,10172,3000,efavirenz; isoniazid; pyridoxine; rifapentine,3000,BRIEF TB,Brief Rifapentine-Isoniazid Evaluation for TB Prevention,10848; A5279; ACTG A5279; BRIEF TB; BRIEF TB/A5279; NCT01404312,National Institute of Allergy and Infectious Diseases,79741,"MAY      , 23, 2012",Completed
1+,CD4 Positive T Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,efavirenz,10172,642,didanosine; efavirenz; lamivudine; lamivudine + efavirenz + didanosine; trimethoprim + sulfamethoxazole,642,SAPIT,A Study to Compare Three Existing Starting Points of Antiretroviral Therapy (ART) Initiation in HIV/Tuberculosis (TB) Co-infected Patients,CAPRISA 003; NCT00398996; SAPIT,Centre for the AIDS Program of Research in South Africa,201474,"JUNE     , 30, 2005",Completed
4,null,Mycobacterium tuberculosis infection,isoniazid + rifampicin + pyrazinamide + ethambutol,Phase 3 Clinical,C3,isoniazid + rifampicin + pyrazinamide + ethambutol,98013,300,FLOW e-monitor box; isoniazid + rifampicin + pyrazinamide + ethambutol; smartphone app,300,null,"Using electronic monitors and a smartphone app to improve treatment adherence of new pulmonary tuberculosis patients in Tibet, China","ISRCTN52132803; TB REACH, GRANT NUMBER: STBP/TBREACH/GSA/W6-5",The Chinese Centre for Disease Control and Prevention,359917,"SEPTEMBER, 01, 2018",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,rifapentine,15102,50,isoniazid; pyridoxine; rifapentine,50,null,"Evaluating the Pharmacokinetics, Tolerability, and Safety of Once-Weekly Rifapentine and Isoniazid in HIV-1-Infected and HIV-1-Uninfected Pregnant and Postpartum Women With Latent Tuberculosis Infection",12026; IMPAACT 2001; NCT02651259,National Institute of Allergy and Infectious Diseases,250483,"FEBRUARY , 15, 2017",Completed
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin; streptomycin,Phase 4 Clinical,C4,moxifloxacin,12978,864,ethambutol; isoniazid aminosalicylate; moxifloxacin; pyrazinamide; rifabutin,80,null,Research on New Regimens for Retreatment Pulmonary Tuberculosis,2013ZX10003009; NCT02331823,Shanghai Pulmonary Hospital,220243,"JUNE     , 30, 2013",Recruiting
3,B-lymphocytes; Neutrophils; T-Lymphocytes,Mycobacterium tuberculosis infection,BCG vaccine,Phase 1/Phase 2 Clinical,C12,MVA-85A,55317,72,ChAdOx1-85A; ChAdOx1-85A; MVA-85A,72,null,EMaBS TB Vaccine Study,NCT03681860; TB042,University of Oxford,354327,"DECEMBER , 01, 2018",Not yet recruiting
5+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,"amoxicillin + clavulanate potassium, GSK",44284,45,Augmentin; cefadroxil; cefadroxil; ethambutol; faropenem; faropenem; isoniazid; pyrazinamide; rifampicin,45,null,Trial of Faropenem and Cefadroxil (in Combination With Amoxicillin/Clavulanic Acid and Standard TB Drugs) in Patients With Pulmonary Tuberculosis: Measurement of Early Bactericidal Activity and Effects on Novel Biomarkers,2015-CT0284; FAROPENEM_TB; NCT02381470; PHRR160323-001194,"National University Hospital (Singapore) Pte Ltd, Syneos Health Inc",224111,"DECEMBER , 31, 2018",Not yet recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,macozinone,90085,35,PBTZ-169,35,null,Phase I Study of PBTZ-169,NCT03036163; PBTZ169-Z00-C01-1,Nearmedic Plus,286724,"JANUARY  , 31, 2016",Completed
1+,Solute carrier organic anion transporter family member 1B1,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,stavudine,4481,48,efavirenz; isoniazid; lamivudine; lopinavir + ritonavir; nevirapine; rifabutin; stavudine,35,null,Pharmacokinetics of Rifabutin Combined With Antiretroviral Therapy in Patients With TB/HIV co-Infection in South Africa,ANRS12150a; NCT00640887,French National Agency for Research on AIDS and Viral Hepatitis,11187,"FEBRUARY , 28, 2009",Completed
2,null,Mycobacterium tuberculosis infection,isoniazid,Phase 2a Clinical,C2A,macozinone,90085,16,PBTZ-169,16,null,Phase IIa Study of PBTZ-169,NCT03334734; PBTZ169-A15-C2A-1,Nearmedic Plus,318771,"DECEMBER , 16, 2016",Terminated
3,null,Mycobacterium tuberculosis infection,conventional TB treatment,Phase 2 Clinical,C2,moxifloxacin,12978,131,conventional TB treatment; moxifloxacin,131,null,A clinical trial to study the effects of moxifloxacin with regular anti-tuberculosis drugs in Tuberculosis patients,CTRI/2016/03/006713,Vels University,255644,"SEPTEMBER, 09, 2015",Recruiting
1,T-Lymphocytes; T-cell surface glycoprotein CD4; Total body mass,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,rifabutin,4229,40,Kaletra; rifabutin,40,null,Pharmacokinetics and Safety of Rifabutin 150 mg qd Versus Rifabutin 300 mg tiw,HIV-NAT 116; NCT02415985,The HIV Netherlands Australia Thailand Research Collaboration,226826,"JUNE     , 30, 2015",Recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,moxifloxacin,12978,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
4,null,Mycobacterium tuberculosis infection,null,Phase not specified,NS,efavirenz,10172,592,didanosine; efavirenz; lamivudine; standard TB therapy,592,null,Effectiveness of Directly Observed Therapy in Combined HIV and Tuberculosis Treatment in Resource-Limited Settings,CAPRISA 001; CAPRISA START; CIPRA; NCT00091936; START,National Institute of Allergy and Infectious Diseases,8820,"AUGUST   , 31, 2009",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2b Clinical,C2B,dolutegravir,59062,120,dolutegravir; efavirenz; isoniazid + ethambutol + pyrazinamide; rifampin,120,SAEFRIF,Safety and Efficacy of High Dose Rifampicin in Tuberculosis (TB)-HIV Co-infected Patients on Efavirenz- or Dolutegravir-based Antiretroviral Therapy,NCT03982277; SAEFRIF; ST/224/219,Makerere University,384080,"APRIL    , 30, 2019",Recruiting
1,Interferon gamma; SL cytokine,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,GX-70,53019,null,GX-70,null,null,Safety and Immunogenicity Study of GX-70 in TB Patient,4-2016-1144; NCT03159975,Yonsei University,298965,"MARCH    , 31, 2018",Terminated
3+,QT interval,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,delamanid,16545,84,bedaquiline; bedaquiline; delamanid; delamanid; dolutegravir,84,null,"Evaluating the Safety, Tolerability and Pharmacokinetics of Bedaquiline and Delamanid, Alone and in Combination, For Drug-Resistant Pulmonary Tuberculosis",12005; A5343; NCT02583048,National Institute of Allergy and Infectious Diseases,243619,"AUGUST   , 31, 2016",No longer recruiting
6,C-reactive protein; Forced expiratory volume; Neopterin; Programmed cell death protein 1; Standardized uptake value; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,rifabutin-modified TB therapy,Phase 2 Clinical,C2,everolimus,13340,200,CC-11050; auranofin; everolimus; rifabutin-modified TB therapy; vitamin D3,200,TBHDT,TB Host Directed Therapy,NCT02968927; TBHDT; TBHDT-AUR1-8-178,Aurum Institute,279898,"NOVEMBER , 30, 2016",No longer recruiting
2+,QT interval,Mycobacterium tuberculosis infection,pryrazinamide,Phase 3 Clinical,C3,delamanid,16545,750,Lamprene; bedaquiline; delamanid; levofloxacin; linezolid; moxifloxacin; pryrazinamide,750,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,MSF ERB-1555; NCT02754765; endTB,Médecins Sans Frontières France,259506,"DECEMBER , 31, 2016",Recruiting
1+,T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,efavirenz,10172,230,Viread; efavirenz; ethambutol; isoniazid; lamivudine; pyrazinamide; rifabutin; zidovudine,230,RRHT,Rifampicin versus Rifabutin in HIV/AIDS Patients Combined With Tuberculosis,2017ZX10202101-002; NCT03478033; RRHT,Shanghai Public Health Clinical Center,334027,"APRIL    , 15, 2018",Recruiting
2+,null,Mycobacterium tuberculosis infection,pyrazinamide,Phase 2/Phase 3 Clinical,C23,delamanid,16545,238,delamanid; levofloxacin; linezolid; pyrazinamide,238,MDR-END,Treatment Shortening of MDR-TB Using Existing and New Drugs,MDR-END; NCT02619994,Seoul National University Hospital,247456,"JANUARY  , 31, 2016",Recruiting
1+,Human immunodeficiency virus RNA; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; tenofovir disoproxil fumarate,Phase 3 Clinical,C3,tenofovir disoproxil fumarate,14493,460,lamivudine; raltegravir; rifampin; tenofovir disoproxil fumarate,460,REFLATE TB2,Raltegravir Versus Efavirenz in Naive HIV-1-infected Patients Receiving Rifampin for Active Tuberculosis,ANRS 12300 REFLATE TB2; NCT02273765; REFLATE TB2,INSERM,214156,"SEPTEMBER, 30, 2015",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,meropenem,3616,88,Augmentin; Merrem; rifampin,88,null,Early Bactericidal Activity of Rifampin + Meropenem + Amoxicillin/Clavulanate in Adults With Pulmonary TB,FD-R-05724; IRB00119017; NCT03174184,Johns Hopkins University,300655,"AUGUST   , 23, 2017",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,levofloxacin,3492,100,levofloxacin,100,LEVOF,"MDR TB, Levofloxacin, Multi-Drug-Resistant Pulmonary Tuberculosis",LEVOF; LEVOF_L_00972; NCT00495339,Sanofi SA,8644,"JUNE     , 30, 2007",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2b Clinical,C2B,efavirenz,10172,120,dolutegravir; efavirenz; isoniazid + ethambutol + pyrazinamide; rifampin,120,SAEFRIF,Safety and Efficacy of High Dose Rifampicin in Tuberculosis (TB)-HIV Co-infected Patients on Efavirenz- or Dolutegravir-based Antiretroviral Therapy,NCT03982277; SAEFRIF; ST/224/219,Makerere University,384080,"APRIL    , 30, 2019",Recruiting
1+,T-Helper Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 3 Clinical,C3,levofloxacin,3492,400,aspirin; isoniazid; levofloxacin; pyrazinamide; ranitidine; rifampicin,400,SURE,Short Intensive Treatment For Children With Tuberculous Meningitis,ISRCTN40829906; SURE; SURE,University College London,360104,"JANUARY  , 02, 2018",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,gatifloxacin; levofloxacin; moxifloxacin; p-aminosalycilic acid; prothionamide,Phase 4 Clinical,C4,gatifloxacin,7017,320,clofazimine; gatifloxacin; levofloxacin; moxifloxacin; p-aminosalycilic acid; prothionamide,140,null,"Multicenter, controlled clinical study of the safety, tolerability and efficacy of clofazimine in the treatment of drug-resistant tuberculosis",ChiCTR1800014800,Beijing Chest Hospital,328802,"DECEMBER , 01, 2009",No longer recruiting
13,CD4 cells,Mycobacterium tuberculosis infection,null,Phase not specified,NS,levofloxacin,3492,525,amikacin sulfate; aminosalicylic acid; capreomycin sulfate; clofazimine; cycloserine; ethambutol hydrochloride; ethionamide; isoniazid; levofloxacin; pyrazinamide; pyridoxine hydrochloride; rifampin; streptomycin sulfate,156,null,A Prospective Study of Multidrug Resistance and a Pilot Study of the Safety of and Clinical and Microbiological Response to Levofloxacin in Combination With Other Antimycobacterial Drugs for Treatment of Multidrug-Resistant Pulmonary Tuberculosis (MDRTB) in HIV-Infected Patients,11215; ACTG 238; CPCRA 026; NCT00000796,National Institute of Allergy and Infectious Diseases,8776,"OCTOBER  , 31, 1998",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,moxifloxacin,12978,2500,moxifloxacin; rifapentine,2500,null,Rifapentine-containing tuberculosis treatment shortening regimens (S31/A5349),CTRI/2018/07/014966,Centers for Disease Control and Prevention,347338,"JULY     , 20, 2018",Not yet recruiting
1+,Glucose,Mycobacterium tuberculosis infection,amikacin; clofazimine; cycloserine; ethambutol; isoniazid; kanamycin; levofloxacin; prothionamide; pyrazinamide,Phase 2 Clinical,C2,levofloxacin,3492,220,clofazimine; cycloserine; levofloxacin; linezolid; prothionamide; pyrazinamide,220,TB-TRUST,Refining MDR-TB Treatment Regimens for Ultra Short Therapy,KY2018-331; NCT03867136; TB-TRUST,Huashan Hospital,372676,"MAY      , 01, 2019",Not yet recruiting
1+,T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,tenofovir disoproxil fumarate,14493,230,Viread; efavirenz; ethambutol; isoniazid; lamivudine; pyrazinamide; rifabutin; zidovudine,230,RRHT,Rifampicin versus Rifabutin in HIV/AIDS Patients Combined With Tuberculosis,2017ZX10202101-002; NCT03478033; RRHT,Shanghai Public Health Clinical Center,334027,"APRIL    , 15, 2018",Recruiting
4+,null,Mycobacterium tuberculosis infection,delamanid; ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 1/Phase 2 Clinical,C12,delamanid,16545,125,OPC-167832; OPC-167832; delamanid,125,null,A Phase I/II Trial of Multiple Oral Doses of OPC-167832 for Uncomplicated Pulmonary Tuberculosis,323-201-00003; NCT03678688; OPP1178898,Otsuka Pharmaceutical Development and Commercialization Inc,353987,"OCTOBER  , 25, 2018",Recruiting
1,Creatine kinase; Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-2; Regulatory T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,AERAS-402,53975,20,AERAS-402,20,null,"A Study to Evaluate Safety and Immunogenicity of AERAS-402 Administered in HIV-negative, BCG-vaccinated, QFT (+) and (-) Adults Without Evidence of TB",C-012-402; NCT02430506,Aeras Global TB Vaccine Foundation,228651,"SEPTEMBER, 30, 2008",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,bedaquiline,51310,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
2+,QT interval,Mycobacterium tuberculosis infection,WHO regimen therapy,Phase 3 Clinical,C3,linezolid,11036,null,Deltyba; Lamprene; Levaquin; Sirturo; Zyvox,null,DRAMATIC,"Efficacy and Tolerability of Bedaquiline, Delamanid, Levofloxacin, Linezolid, and Clofazimine for Treatment of Patients With MDR-TB",DRAMATIC; H38212; NCT03828201,Boston University,368916,"JANUARY  , 31, 2020",Terminated
3,null,Mycobacterium tuberculosis infection,Standard of care,Phase 3 Clinical,C3,azithromycin,2587,1875,amoxicillin; azithromycin,1875,ACT-TB,Accuracy and Consequences of Using Trial-of-antibiotics for TB Diagnosis,15232; ACT-TB; NCT03545373,London School of Hygiene and Tropical Medicine,341686,"FEBRUARY , 25, 2019",Recruiting
3,Cytotoxic T-Lymphocytes; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,null,Phase 1b Clinical,C1B,SSI H56-IC31,74849,84,BCG; H4 + IC31; SSI H56-IC31,84,A-042,"Phase Ib, Safety and Immunogenicity Trial of BCG Revaccination, H4:IC31 and H56:IC31 in Healthy, HIV-1-Uninfected Adolescents",A-042; HVTN 602 / AERAS A-042; NCT02378207,Aeras,223463,"MAY      , 31, 2015",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,delamanid,16545,165,Zyvox; bedaquiline; clofazimine; delamanid,165,null,Study on Tuberculosis Resistant to Treatment,CTRI/2019/01/017310; Version Number: 3.1,"Indian Council of Medical Research, Tuberculosis Research Centre",369747,"FEBRUARY , 01, 2019",Not yet recruiting
8,Body Mass Index; Body height; Interferon gamma; Regulatory T-Lymphocytes; Th1 cells; Th2 cells; Total body mass,Mycobacterium tuberculosis infection,albendazole; ivermectin; metronidazole,Phase 2 Clinical,C2,ivermectin,3412,120,Nutritional Supplementation Meal; albendazole; ivermectin; metronidazole; multivitamin therapy,120,TB-LION,Tuberculosis - Learning the Impact of Nutrition,6005415; CTRI/2019/05/018968; H-37473; NCT03598842; TB-LION,Boston Medical Center Corp,347635,"JUNE     , 30, 2019",Not yet recruiting
1,Alanine transaminase; Aspartate aminotransferase; Blood cells; C-reactive protein; Erythrocyte sedimentation rate; FEV / FVC ratio; QT interval; Six-minute walk distance,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"clofazimine (oral, tuberculosis), Novartis",91861,102,Lamprene,102,null,Clofazimine in the Treatment of Pulmonary Mycobacterium Avium Complex (MAC),FD-R-5401; NCT02968212,Oregon Health Sciences University,279727,"APRIL    , 11, 2017",Recruiting
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,faropenem,4492,45,amoxicillin; cefadroxil; clavulanic acid; ethambutol; faropenem; isoniazid; pyrazinamide; rifampicin,45,null,Trial of faropenem and cefadroxil (in combination with amoxicillin/clavulanic acid and standard TB drugs) in patients with pulmonary tuberculosis: measurement of early bactericidal activity and effects on novel biomarkers,2018-CT0454; 20180710115454; Faropenem_TB; PHRR181108-001980,National University Hospital (Singapore) Pte Ltd,360329,"NOVEMBER , 30, 2018",Not yet recruiting
1+,Blood pressure; Interferon gamma,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,ESAT-6CFP10,95442,1802,Bacillus Calmette-Guerin (BCG) vaccine; ESAT-6CFP10; Tuberculin purified protein derivative (TB-PPD),1802,null,Clinical Study of Recombinant Mycobacterium Tuberculosis Allergen ESAT6-CFP10 on Healthy People Aged 18 to 65 years (III-healthy),EC-III-HEALTHY; NCT02795260,Anhui Zhifei Longcom Biopharmaceutical Co Ltd,262931,"MAY      , 31, 2016",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,linezolid,11036,500,amikacin; bedaquiline; clarithromycin; clofazimine; cycloserine; ethambutol; linezolid; moxifloxacin; prothionamide; pyrazinamide; sodium para-aminosalicylate,500,null,The Effect of 18-month Regimen Containing Six Anti-tuberculosis Drugs for Patients With MDR-TB,2018ZX10722301-001; NCT03830671,Beijing Chest Hospital,369109,"MARCH    , 08, 2019",Recruiting
1+,Creatinine; Human immunodeficiency virus RNA; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 0 Clinical,C0,emtricitabine,4728,419,efavirenz; emtricitabine; lamivudine; tenofovir,419,null,TasP in Correctional Facilities,15-1473; NCT02946762; Z 31501,University of North Carolina,280225,"FEBRUARY , 01, 2016",Completed
1+,Glucose,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,clarithromycin,2829,100,amikacin; clarithromycin; isoniazid; levofloxacin; prothionamide; pyrazinamide,152,null,Optimization of MDR-TB Treatment Regimen Based on the Molecular Drug Susceptibility Results of Pyrazinamide,2013ZX10003008-003; KY2013-260; NCT02120638,Huashan Hospital,183613,"APRIL    , 30, 2014",Recruiting
2,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,levofloxacin,3492,160,levofloxacin; rifampicin,160,null,"Is Levofloxacin Better Than Rifampicin in the Treatment of Tuberculous Meningitis- a Randomized, Control Study",CTRI/2012/11/003155,Sanjay Gandhi Postgraduate Institute of Medical Sciences,129005,"OCTOBER  , 01, 2009",Recruiting
6,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,nevirapine,3700,200,ethambutol; isoniazid; lopinavir + ritonavir; nevirapine; pyrazinamide; rifampicin,39,DATiC,Optimal Dosing of First-Line Antituberculosis and Antiretroviral Drugs in Children (a Pharmacokinetic Study),DATiC; DATiC; NCT01637558,University of Cape Town,89135,"NOVEMBER , 30, 2012",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,MVA-85A,55317,24,MVA85A,24,null,"A Study of two Doses of a New TB Vaccine, MVA85A, in Healthy Volunteers Previously Vaccinated With BCG",NCT00465465; TB009,University of Oxford,10944,"OCTOBER  , 31, 2005",Completed
1,CD4/CD8 ratio; CD40; CD40 ligand; IL-2; Interferon gamma; M72-specific CD4+ cells; M72-specific CD8+ cells; TNF-alpha,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,3595,GSK-692342,3573,null,Study to Evaluate the Efficacy of GlaxoSmithKline (GSK) Biologicals' Candidate Tuberculosis (TB) Vaccine in Healthy Adults,115616; NCT01755598; PACTR201311000639144,"GlaxoSmithKline Biologicals, GlaxoSmithKline plc",102580,"AUGUST   , 19, 2014",Completed
1,CD4+ T-cell; Cytotoxic T-Lymphocytes; T-Helper Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,Ad5Ag85A,71323,24,Ad5Ag85A,24,null,Study of the Safety and Immunogenicity of an Adenovirus-based Tuberculosis Vaccine,NCT00800670; REB 09-001,McMaster University,77668,"JUNE     , 30, 2009",Terminated
1+,CD4; Cytotoxic T-Lymphocytes; HIV viral load; Human immunodeficiency virus RNA; T-Helper Lymphocytes; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,Kaletra; ethambutol; isoniazid; pyrazinamide; pyridoxine; rifampin,Phase 2b Clinical,C2B,raltegravir,54488,71,Kaletra; ethambutol; isoniazid; pyrazinamide; pyridoxine; raltegravir; rifabutin,71,null,Rifampin-Based Tuberculosis Treatment Versus Rifabutin-Based Tuberculosis Treatment in Persons With HIV,1U01AI068636; ACTG A5290; NCT01601626,AIDS Clinical Trials Group,87585,"JULY     , 13, 2013",Terminated
3,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,moxifloxacin,12978,23,isoniazid; moxifloxacin; rifampicin,23,null,Pharmacokinetic Interaction Study in Indonesian Tuberculosis Patients Indonesia,NCT00306319; Primo study; UMCN-AKF 05.02,Radboud University,10860,"JANUARY  , 31, 2006",Completed
5,null,Mycobacterium tuberculosis infection,isoniazid,Phase 1/Phase 2 Clinical,C12,moxifloxacin,12978,70,gatifloxacin; levofloxacin; linezolid; moxifloxacin,70,TBRU 10,"Early Bactericidal Activity of Linezolid, Gatifloxacin, Levofloxacin, Isoniazid (INH) and Moxifloxacin in HIV Negative Adults With Initial Episodes of Sputum Smear-Positive Pulmonary Tuberculosis",01-553; NCT00396084; TBRU 10; TBRU 10,National Institute of Allergy and Infectious Diseases,10869,"FEBRUARY , 29, 2004",Completed
3+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,lopinavir + ritonavir,14681,200,efavirenz; emtricitabine; emtricitabine; lopinavir + ritonavir; rifabutin; rifampicin; tenofovir disoproxil fumarate; tenofovir disoproxil fumarate,200,RIFART,RIFART,EudraCT 2007-007935-14; MI2-RIFART-2005; RIFART,Azienda Ospedaliera Spedali Civili di Brescia,131240,"MARCH    , 15, 2005",Terminated
2+,null,Mycobacterium tuberculosis infection,null,Phase 2a Clinical,C2A,moxifloxacin,12978,60,moxifloxacin; rifampicin,60,null,"Intensified Treatment Regimens for TB Meningitis: PK, PD and Tolerability Study",NCT01158755; TB-201006.01,Universitas Padjadjaran,67996,"OCTOBER  , 31, 2010",Completed
1,Alanine aminotransferase (ALAT); Aspartate aminotransferase (ASAT); Estimated glomerular filtration rate,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,ertapenem,12543,12,ertapenem,12,null,PK/PD of Ertapenem in Patients with TB,ETB/V0.2; NCT01730664,University Medical Center Groningen,98848,"JANUARY  , 26, 2017",Completed
1+,Alanine aminotransferase; CD4,Mycobacterium tuberculosis infection,efavirenz; lamivudine; stavudine,Phase 2/Phase 3 Clinical,C23,nevirapine,3700,570,Arm A; Arm B; Triomune; ethambutol; ethambutol; isoniazid; isoniazid; lamivudine; nevirapine; pyrazinamide; pyrazinamide; rifampicin; rifampicin; stavudine,570,CARINEMO,Comparison of Nevirapine and Efavirenz for the Treatment of HIV-TB Co-infected Patients,ANRS 12146 CARINEMO; ANRS 12146/12214; ANRS 12214; CARINEMO; NCT00495326,French National Agency for Research on AIDS and Viral Hepatitis,10948,"DECEMBER , 31, 2007",Completed
2,null,Mycobacterium tuberculosis infection,BCG,Phase 2 Clinical,C2,VPM-1002,55569,416,VPM-1002,416,null,Study to Evaluate the Safety and Immunogenicity of VPM-1002 in Comparison With BCG in HIV-exposed/-Unexposed Newborn Infants in South Africa,DOH-27-1114-4798; NCT02391415; VPM1002-ZA-2.13TB,Serum Institute of India Ltd,224781,"JUNE     , 30, 2015",Completed
3+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,tenofovir disoproxil fumarate,14493,200,efavirenz; emtricitabine; emtricitabine; lopinavir + ritonavir; rifabutin; rifampicin; tenofovir disoproxil fumarate; tenofovir disoproxil fumarate,200,RIFART,RIFART,EudraCT 2007-007935-14; MI2-RIFART-2005; RIFART,Azienda Ospedaliera Spedali Civili di Brescia,131240,"MARCH    , 15, 2005",Terminated
1+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,lopinavir + ritonavir,14681,30,isoniazide; lopinavir + ritonavir; pirazinamide; rifampin,30,null,An Evaluation of the Pharmacological Interaction of Lopinavir/ritonavir and Rifampin,A06-295; NCT00771498,Fundacao Oswaldo Cruz (Fiocruz),171009,"NOVEMBER , 30, 2008",Completed
2,null,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,"BCG vaccine, Organon",13624,52,BCG SSI; TiceBCG,52,null,A Clinical Challenge Study of BCG in Healthy Volunteers,IRAS ID 146214; NCT02088892; TB031,University of Oxford,177982,"MARCH    , 31, 2014",Completed
1,IL-4,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,pascolizumab,17132,32,pascolizumab,32,null,Safety and Efficacy of Blocking IL-4 With Pascolizumab in Patients Receiving Standard Therapy for Pulmonary Tuberculosis,2015-CT0301; DSRB 2012/02212; NCT01638520; PHRR160722-001308,"National University Hospital (Singapore) Pte Ltd, Syneos Health Inc",89066,"JUNE     , 30, 2012",No longer recruiting
2+,QT interval,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,moxifloxacin,12978,207,DRMPa200Z regimen; HRZE regimen; MPa100Z regimen; MPa200Z regimen; PA-824; Rifafour; ethambutol; isoniazid; moxifloxacin; pyrazinamide; pyrazinamide; rifampicin,207,null,"Evaluation of 8 Weeks of Treatment With the Combination of Moxifloxacin, PA-824 and Pyrazinamide in Patients With Drug Sensitive and Multi Drug-Resistant Pulmonary Tuberculosis (TB)",NC-002-(M-Pa-Z); NCT01498419,TB Alliance,83489,"MARCH    , 31, 2012",Completed
1+,Anti-Meningitis C antibodies; C-C motif chemokine 2; C-C motif chemokine 3; C-C motif chemokine 4; Cytokines; IgG; Interferon gamma; Interferon-alpha; Interleukin-1 alpha; Interleukin-1 beta; Interleukin-10; Interleukin-12; Interleukin-13; Interleukin-2; Interleukin-6,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,Menitorix,11458,28,BCG; Infanrix; Menitorix; NeisVac-C; Pentacel; Prevnar 13; Priorix; Rotarix,28,BAM,A Study of the Interaction Between BCG And MenC Immunization,2013-003488-71; BAM; NCT02002156; OVG-2013/04; UKCRN 15722,University of Oxford,162886,"JUNE     , 20, 2014",Completed
2+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase not specified,NS,"ethambutol hydrochloride (150 mg) + pyrazinamide (300 mg) + rifampicin (90 mg) + isoniazid (60 mg) (oral tablet, tuberculosis), Shenyang Hongqi Pharmaceutical/Liaoning Hongwuxing Pharmaceutical",88505,24,ethambutol hydrochloride + pyrazinamide + rifampicin + isoniazid,24,null,Ethylamine pyrazine Lifestyle Isonicotinic piece IV bioequivalence trials,CTR20131379; SYY-YQ-2013-0405,Shenyang Hongqi Pharmaceutical Co Ltd,177165,"NOVEMBER , 30, 2013",Not yet recruiting
1+,Blood cells; HIV-1 RNA; Human immunodeficiency virus RNA; T-Helper Lymphocytes; T-cell surface glycoprotein CD4,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,efavirenz,10172,105,efavirenz; ethambutol; isoniazid; pyrazinamide; rifampicin; tenofovir+lamivudine,105,RIFAVIRENZ,Interaction Between High-Dose Rifampicine and Efavirenz in Pulmonary Tuberculosis and HIV Co-infection,ANRS 12292 RIFAVIRENZ; NCT01986543; RIFAVIRENZ,INSERM,161096,"DECEMBER , 31, 2013",No longer recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,efavirenz,10172,150,efavirenz; ethambutol; isoniazid; lamivudine; nevirapine; pyrazinamide; rifampicin; zidovudine,355,null,"Efficacy of Thrice Weekly Directly Observed Treatment, Short-course (DOTS) in HIV-associated Tuberculosis",NCT00698334; SKS/NACO/2006,All India Institute of Medical Sciences,161275,"APRIL    , 30, 2006",Completed
1,T-Lymphocytes; T-cell surface glycoprotein CD4; Total body mass,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,lopinavir + ritonavir,14681,40,Kaletra; rifabutin,40,null,Pharmacokinetics and Safety of Rifabutin 150 mg qd Versus Rifabutin 300 mg tiw,HIV-NAT 116; NCT02415985,The HIV Netherlands Australia Thailand Research Collaboration,226826,"JUNE     , 30, 2015",Recruiting
1+,Visual acuity,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,moxifloxacin,12978,365,SQ-109; ethambutol; isoniazid; moxifloxacin; pyrazinamide; pyridoxine; rifampicin,365,null,"Evaluation of SQ-109, High-dose Rifampicin, and Moxifloxacin in Adults With Smear-positive Pulmonary TB in a MAMS Design",NCT01785186; PACTR201205000383208; PanACEA-MAMS-TB-01,Ludwig-Maximilians University of Munich,109063,"APRIL    , 30, 2013",Completed
2,Cytokines; Interferon gamma; Interleukin-2; T helper 17 cells; T-Helper 22 cells; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,DAR-901,90231,59,BCG; DAR-901,59,null,Phase I Trial of DAR-901,DAR-901-MDES; NCT02063555,Dartmouth-Hitchcock Medical Center,173446,"FEBRUARY , 28, 2014",Completed
1,Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-17A; T-Helper Lymphocytes; T-Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Th1 cytokines,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,60,GSK-692342,60,null,Safety and Immunogenicity of a Candidate Tuberculosis Vaccine in Healthy HIV Negative Adolescents,112898; NCT00950612,GlaxoSmithKline plc,59304,"DECEMBER , 31, 2009",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,rifapentine,15102,37,midazolam; rifapentine,37,TBTC S29B,"Pharmacokinetics, Safety and Tolerability of Escalating Rifapentine Doses in Healthy Volunteers",CDC-NCHHSTP-5779; NCT01162486; TBTC S29B; TBTC S29B,Johns Hopkins University,68204,"APRIL    , 30, 2010",Completed
1+,Arylacetamide deacetylase; Nuclear receptor subfamily 1 group I member 2; Nuclear receptor subfamily 1 group I member 3; Solute carrier organic anion transporter family member 1B1,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifapentine,15102,1250,ethambutol; isoniazid; moxifloxacin; pyrazinamide; rifampicin; rifapentine,827,RIFAQUIN,"An International, Multicenter, Controlled Clinical Trial to Evaluate High-Dose Rifapentine and a Quinolone in the Treatment of Pulmonary Tuberculosis",10.1186/ISRCTN44153044; ISRCTN44153044; RIFAQUIN,St Georges University of London,153990,"AUGUST   , 15, 2008",Completed
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,sutezolid,11088,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifapentine,15102,450,isoniazid; rifapentine,450,null,Taima TB: 3-HP Study,20160044-01H; NCT02689089,Ottawa Hospital Research Institute,254050,"APRIL    , 30, 2016",Recruiting
2,null,Mycobacterium tuberculosis infection,"Rimactane (rifampicin 300 mg, Novartis Sandoz)",Phase 1 Clinical,C1,"rifampicin + isoniazid (fixed dose combination, tuberculosis), Pfizer",89460,21,"rifampicin + isoniazid (fixed dose combination, tuberculosis), Pfizer",21,null,"Bioequivalence Study Comparing Rifampicin In A Fixed-dose Combination (Rifampicin + Isoniazid, Myrin 2) And The Reference Drug (Rifampicin, Rimactane)",B3801001; NCT01311505,Pfizer Inc,164313,"APRIL    , 30, 2011",Completed
1+,Human immunodeficiency virus RNA,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,rifapentine,15102,60,dolutegravir; emtricitabine; isoniazid; rifapentine; tenofovir disoproxil fumarate,60,IMPAACT4TB,"Safety, Tolerability DDI Short Course Treatment of LTBI Infection With High-dose Rifapentine Isoniazid in HIV+ Patients",3HP DTG AUR1-6-212 IMPAACT4TB; IMPAACT4TB; NCT03435146,Aurum Institute,329251,"JANUARY  , 18, 2018",Recruiting
1,QT interval,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,TBA-354,71742,18,TBA-354,18,null,"A Multiple Ascending Dose Study With a Dose Formulation Comparison Cohort to Evaluate the Safety, Tolerability, and Pharmacokinetics of TBA-354 in Healthy Adult Subjects",NCT02606214; TBA-354-CL-002,TB Alliance,246089,"NOVEMBER , 30, 2015",Terminated
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,cefadroxil,46931,45,amoxicillin; cefadroxil; clavulanic acid; ethambutol; faropenem; isoniazid; pyrazinamide; rifampicin,45,null,Trial of faropenem and cefadroxil (in combination with amoxicillin/clavulanic acid and standard TB drugs) in patients with pulmonary tuberculosis: measurement of early bactericidal activity and effects on novel biomarkers,2018-CT0454; 20180710115454; Faropenem_TB; PHRR181108-001980,National University Hospital (Singapore) Pte Ltd,360329,"NOVEMBER , 30, 2018",Not yet recruiting
2+,null,Mycobacterium tuberculosis infection,Rifafour e275; ethambutol; isoniazid; pyrazinamide; rifampin,Phase 2 Clinical,C2,"amoxicillin + clavulanate potassium, GSK",44284,46,"amoxicillin + clavulanate potassium, GSK; faropenem; meropenem",30,null,"Phase II Trial to Evaluate the Early Bactericidal Activity, Safety and Tolerability of Meropenem Plus Amoxycillin/CA and Faropenem Plus Amoxycillin/CA in Adult Patients With Newly Diagnosed Pulmonary Tuberculosis",NCT02349841; TASK-001,Task Foundation NPC,220739,"SEPTEMBER, 30, 2014",Completed
2+,null,Mycobacterium tuberculosis infection,kanamycin; moxifloxacin,Phase 2/Phase 3 Clinical,C23,moxifloxacin,12978,300,bedaqualine; ethionamide; isoniazid; levofloxacin; linezolid; pyrazinamide; terizidone,300,NEXT,An Open-label RCT to Evaluate a New Treatment Regimen for Patients With Multidrug-resistant Tuberculosis,NCT02454205; NEXT; NEXT-5001,University of Cape Town,230529,"OCTOBER  , 31, 2015",Recruiting
2,null,Mycobacterium tuberculosis infection,Avelox,Phase 1 Clinical,C1,moxifloxacin,12978,26,moxifloxacin (Dr Reddy's Laboratories Limited),26,null,"Bioequivalency Study of Moxifloxacin Tablets, 400 mg Under Fasting Conditions",054-12; NCT02322619,Dr Reddy's Laboratories Ltd,218651,"NOVEMBER , 30, 2012",Completed
1,null,Mycobacterium tuberculosis infection,null,Phase 1a Clinical,C1A,macozinone,90085,32,macozinone,32,null,"Study to Evaluate the Safety, Tolerability, Pharmacokinetics and Ex-vivo Antitubercular Activity of PBTZ-169 Formulation",IM-006-11; NCT03423030,Innovative Medicines for Tuberculosis,328144,"DECEMBER , 05, 2017",Completed
2+,QT interval,Mycobacterium tuberculosis infection,pryrazinamide,Phase 3 Clinical,C3,moxifloxacin,12978,750,Lamprene; bedaquiline; delamanid; levofloxacin; linezolid; moxifloxacin; pryrazinamide,750,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,MSF ERB-1555; NCT02754765; endTB,Médecins Sans Frontières France,259506,"DECEMBER , 31, 2016",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,"ID93 vaccine (GLA-SE adjuvant, TB), IDRI/ Quratis",68617,36,ID-93,36,null,Phase I Clinical Trial of ID93 + GLA-SE Vaccine in BCG-vaccinated Healthy Adolescent,CT-QTP101-002; NCT03806699,Quratis Co Ltd,366672,"APRIL    , 02, 2019",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,GC-3107,108779,20,GC-3107,20,null,Study to Investigate the Safety and Efficacy of GC-3107 (BCG Vaccine) in Healthy Adults,GC3107_P1; NCT03363178,GC Pharma,321760,"DECEMBER , 14, 2017",Recruiting
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampin,Phase 2b Clinical,C2B,rifabutin,4229,183,isoniazid; pretomanid; pyrazinamide; rifabutin; rifampin,183,APT,Assessing PA-824 for Tuberculosis,#FD-R-004794-01; APT; NA_00093014; NCT02256696,Johns Hopkins Hospital,213394,"APRIL    , 29, 2015",Recruiting
2,Cytokines; Cytotoxic T-Lymphocytes; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain,Mycobacterium tuberculosis infection,BCG vaccine SSI,Phase 1/Phase 2 Clinical,C12,MTBVAC,89744,54,MTBVAC,54,MTBVAC-Ph1b,"Dose-escalation, Safety and Immunogenicity Study to Compare MTBVAC to BCG in Newborns With a Safety Arm in Adults",MTBVAC-02; MTBVAC-Ph1b; NCT02729571,Biofabri SL,257534,"SEPTEMBER, 30, 2015",Completed
1+,Alanine transaminase; Blood urea nitrogen to creatinine ratio; Calcium; Magnesium; Potassium; Thyroid-stimulating hormone,Mycobacterium tuberculosis infection,amikacin; capreomycin; kanamycin; levofloxacin; para-aminosalicylic acid; pasiniazid; prothionamide; pyrazinamide,Phase 2/Phase 3 Clinical,C23,levofloxacin,3492,500,RhIL-2; amikacin; capreomycin; kanamycin; levofloxacin; para-aminosalicylic acid; pasiniazid; prothionamide; pyrazinamide,500,null,Study of Adjunctive Recombinant Human Interleukin-2 Therapy in Patients With MDR-TB (rhIL-2),NCT03069534; RHIL-2 THERAPY ON MDR-TB,Jiangsu Provincial People’s Hospital,289837,"JUNE     , 01, 2009",Recruiting
2+,QT interval,Mycobacterium tuberculosis infection,pryrazinamide,Phase 3 Clinical,C3,bedaquiline,51310,750,Lamprene; bedaquiline; delamanid; levofloxacin; linezolid; moxifloxacin; pryrazinamide,750,endTB,Evaluating Newly Approved Drugs for Multidrug-resistant TB,MSF ERB-1555; NCT02754765; endTB,Médecins Sans Frontières France,259506,"DECEMBER , 31, 2016",Recruiting
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampin,Phase 4 Clinical,C4,levofloxacin,3492,3900,ethambutol; isoniazid; levofloxacin; pyrazinamide; rifampin,3900,null,Shortened Regimens for Drug-susceptible Pulmonary Tuberculosis,2015ZX10003001; NCT02901288,Beijing Chest Hospital,271641,"AUGUST   , 31, 2016",Recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 3 Clinical,C3,rifapentine,15102,2500,moxifloxacin; rifapentine,2500,null,Rifapentine-containing tuberculosis treatment shortening regimens (S31/A5349),CTRI/2018/07/014966,Centers for Disease Control and Prevention,347338,"JULY     , 20, 2018",Not yet recruiting
1+,QT interval,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,pretomanid,13323,630,Lamprene; bedaquiline; linezolid; moxifloxacin; pretomanid,630,TB-PRACTECAL,Pragmatic Clinical Trial for a More Effective Concise and Less Toxic MDR-TB Treatment Regimen(s),1541; NCT02589782; TB-PRACTECAL,Medecins Sans Frontieres,244304,"JANUARY  , 31, 2017",Recruiting
1+,null,Mycobacterium tuberculosis infection,gatifloxacin; levofloxacin; moxifloxacin; p-aminosalycilic acid; prothionamide,Phase 4 Clinical,C4,moxifloxacin,12978,320,clofazimine; gatifloxacin; levofloxacin; moxifloxacin; p-aminosalycilic acid; prothionamide,140,null,"Multicenter, controlled clinical study of the safety, tolerability and efficacy of clofazimine in the treatment of drug-resistant tuberculosis",ChiCTR1800014800,Beijing Chest Hospital,328802,"DECEMBER , 01, 2009",No longer recruiting
1+,null,Mycobacterium tuberculosis infection,ethambutol; isoniazid; pyrazinamide; rifampicin,Phase 2 Clinical,C2,metformin hydrochloride,6050,150,ethambutol; isoniazid; metformin hydrochloride; pyrazinamide; rifampicin,150,null,Effect of metformin in treatment of non-diabetic pulmonary tuberculosis patients,CTRI/2019/03/017926,Veer Surendra Sai Institute of Medical Sciences and Research,372893,"MARCH    , 07, 2019",Not yet recruiting
2+,null,Mycobacterium tuberculosis infection,null,Phase 4 Clinical,C4,rifabutin,4229,448,amikacin; amoxicillin + clavulanate; azithromycin; bedaquiline; capreomycin; clarithromycin; clofazimine; cycloserine; delaminid; ethambutol; ethionamide; gatifloxacin; imipenem/cilastatin; isoniazid; kanamycin; levofloxacin; linezolid; meropenem; moxifloxacin; ofloxacin; para-aminosalicylic acid; pretomanid; prothionamide; pyrazinamide; rifabutin; rifampicin; streptomycin; sutezolid; terizidone; thioacetazone; whole genome sequencing,448,InDEX,The Individualized M(X) Drug-resistant TB Treatment Strategy Study,CAP 020; InDEX; NCT03237182,Centre for the AIDS Program of Research in South Africa,307654,"JUNE     , 14, 2017",Recruiting
1,QT interval,Mycobacterium tuberculosis infection,null,Phase 1/Phase 2 Clinical,C12,bedaquiline,51310,72,bedaquiline,72,null,"Evaluating the Pharmacokinetics, Safety, and Tolerability of Bedaquiline in HIV-Infected and HIV-Uninfected Infants, Children, and Adolescents With Multidrug-Resistant Tuberculosis",11884; CTRI/2017/12/010751; IMPAACT P1108; NCT02906007; P1108,"B. J. Medical College, Pune, National Institute of Allergy and Infectious Diseases",272021,"AUGUST   , 18, 2017",Recruiting
2,null,Mycobacterium tuberculosis infection,Rifafour e-275,Phase 2a Clinical,C2A,telacebec,85970,60,telacebec,60,null,"A Phase II Study to Evaluate Early Bactericidal Activity, Safety, Tolerability, and Pharmacokinetics of Multiple Oral Doses of Telacebec (Q-203)",NCT03563599; Q203-TB-P2-ZA001,Qurient Therapeutics,343604,"JULY     , 23, 2018",No longer recruiting
4+,null,Mycobacterium tuberculosis infection,Standard of Care; ampicillin; benzylpenicillin; ceftriaxone; cotrimoxazole; gentamicin; prednisolone; sulfamethoxazole; trimethoprim,Phase 2/Phase 3 Clinical,C23,ceftriaxone,44384,624,Standard or Care; rifampicin + isoniazid + ethambutol; rifampicin + isoniazid + pyrazinamide; valganciclovir; valganciclovir,624,EMPIRICAL,Empirical Treatment Against Cytomegalovirus and Tuberculosis in HIV-infected Infants With Severe Pneumonia,19/096; 2019-001749-42; EDCTP RIA2017MC-2013EMPIRICAL; EMPIRICAL; NCT03915366; PACTR201904797961340; U1111-1231-4736,Hospital Universitario 12 de Octubre,377163,"JANUARY  , 01, 2020",Not yet recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,rifapentine,15102,566,isoniazid; rifapentine,566,SCRIPT-TB,Short Course Rifapentine and Isoniazid for the Preventive Treatment of Tuberculosis,2017ZX10201302-004; NCT03900858; SCRIPT-TB,Huashan Hospital,375813,"DECEMBER , 01, 2018",Recruiting
4,null,Mycobacterium tuberculosis infection,An Si Nuo Kang; isoniazid + rifampin + pyrazinamide + ethambutol,Phase 2 Clinical,C2,"ethambutol hydrochloride + rifampicin + isoniazid (fixed dose combination, tuberculosis), Shenyang Hongqi Pharmaceutical",82091,474,An Si Nuo Kang; isoniazid + rifampin + pyrazinamide + ethambutol,474,null,Appropriate course of the treatment of tuberculous pleurisy,ChiCTR-IOR-15006408,Capital Medical University,309137,"JUNE     , 01, 2015",Not yet recruiting
1+,null,Mycobacterium tuberculosis infection,gatifloxacin; levofloxacin; moxifloxacin; p-aminosalycilic acid; prothionamide,Phase 4 Clinical,C4,"clofazimine (oral, tuberculosis), Novartis",91861,320,clofazimine; gatifloxacin; levofloxacin; moxifloxacin; p-aminosalycilic acid; prothionamide,140,null,"Multicenter, controlled clinical study of the safety, tolerability and efficacy of clofazimine in the treatment of drug-resistant tuberculosis",ChiCTR1800014800,Beijing Chest Hospital,328802,"DECEMBER , 01, 2009",No longer recruiting
1+,QT interval,Mycobacterium tuberculosis infection,null,Phase 2/Phase 3 Clinical,C23,"clofazimine (oral, tuberculosis), Novartis",91861,630,Lamprene; bedaquiline; linezolid; moxifloxacin; pretomanid,630,TB-PRACTECAL,Pragmatic Clinical Trial for a More Effective Concise and Less Toxic MDR-TB Treatment Regimen(s),1541; NCT02589782; TB-PRACTECAL,Medecins Sans Frontieres,244304,"JANUARY  , 31, 2017",Recruiting
1,Follicle-stimulating hormone; Gait; Heart rate; Respiratory frequency,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,TBI-223,107010,48,TBI-223,48,null,"A Phase 1 Study to Evaluate Safety, Tolerability, and PK of TBI-223 in Healthy Adults",NCT03758612; TBI-223-CL-001,TB Alliance,362067,"JANUARY  , 16, 2019",Recruiting
2,null,Mycobacterium tuberculosis infection,rifafour e-275,Phase 2 Clinical,C2,delamanid,16545,54,OPC-67683,54,null,"Safety, Efficacy and Pharmacokinetics of OPC-67683 in Patients With Pulmonary Tuberculosis",242-06-101; NCT00401271,Otsuka Pharmaceutical Co Ltd,8842,"NOVEMBER , 30, 2006",Completed
1+,null,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,bedaquiline,51310,165,Zyvox; bedaquiline; clofazimine; delamanid,165,null,Study on Tuberculosis Resistant to Treatment,CTRI/2019/01/017310; Version Number: 3.1,"Indian Council of Medical Research, Tuberculosis Research Centre",369747,"FEBRUARY , 01, 2019",Not yet recruiting
1,IFN-gamma; TNF-alpha,Mycobacterium tuberculosis infection,null,Phase 2 Clinical,C2,"MTB72F vaccine (tuberculosis), GSK/ IAVI",9490,110,GSK-692342,110,null,"Safety and Immunogenicity of Two Formulations of Tuberculosis Vaccines GSK-692342 Given at 0, 1 Months to Healthy Adults",106227; 106228; 108736; 108738; NCT00397943,GlaxoSmithKline plc,9520,"NOVEMBER , 30, 2006",Completed
2+,null,Mycobacterium tuberculosis infection,Directly observed therapy,Phase 2/Phase 3 Clinical,C23,bedaquiline,51310,54,bedaquiline; clofazimine; linezolid; moxifloxacin; pretomanid,54,PRACTECAL-PRO,Patient-reported Experiences and Quality of Life Outcomes in the TB-PRACTECAL Clinical Trial,NCT03942354; PRACTECAL-PRO; PRACTECAL-PRO,"Medecins Sans Frontieres, Netherlands",379769,"JULY     , 01, 2019",Not yet recruiting
3,Cytotoxic T-Lymphocytes; Interferon gamma; Interleukin-2; Interleukin-2 receptor alpha chain ; Monocytes; Myeloid-derived suppressor cells; T-Helper Lymphocytes; T-cell surface glycoprotein CD4; T-cell surface glycoprotein CD8 alpha chain; Tumor necrosis factor,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,etoricoxib,22216,39,SSI H56-IC31; SSI H56-IC31; etoricoxib; etoricoxib,39,TBCOX2,Therapeutic Vaccination and Immune Modulation - New Treatment Strategies for the MDR Tuberculosis Pandemic,2014-004986-26; 2015/692; NCT02503839; TBCOX2,Oslo University Hospital,235355,"NOVEMBER , 30, 2015",No longer recruiting
1,null,Mycobacterium tuberculosis infection,null,Phase 1 Clinical,C1,bortezomib,15954,null,bortezomib,null,null,Evaluating Whole Blood Bactericidal Activity of Bortezomib Against Mycobacterium Tuberculosis in Healthy Volunteers,2015/00743,National University Hospital (Singapore) Pte Ltd,263359,null,Status not specified</ns2:com.thomsonreuters.ls.service.contract.analytics.v2.soap.QueryCsvResponse>