//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GlobalReportingSystem.Data.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using GlobalReportingSystem.Core.Models.Entities;
    
    public partial class GRSDataBaseEntities : DbContext
    {
        public GRSDataBaseEntities()
            : base("name=GRSDataBaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Access> Accesses { get; set; }
        public virtual DbSet<AccountForTestRun> AccountForTestRuns { get; set; }
        public virtual DbSet<Analyser> Analysers { get; set; }
        public virtual DbSet<Analysis> Analyses { get; set; }
        public virtual DbSet<AnalysisHistory> AnalysisHistories { get; set; }
        public virtual DbSet<AutoAnalysisCache> AutoAnalysisCaches { get; set; }
        public virtual DbSet<BaseProject> BaseProjects { get; set; }
        public virtual DbSet<Bugracker> Bugrackers { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientsInformation> ClientsInformations { get; set; }
        public virtual DbSet<Defect> Defects { get; set; }
        public virtual DbSet<DistributedTest> DistributedTests { get; set; }
        public virtual DbSet<DistributionShedule> DistributionShedules { get; set; }
        public virtual DbSet<ExecutionConfiguration> ExecutionConfigurations { get; set; }
        public virtual DbSet<Feature> Features { get; set; }
        public virtual DbSet<FeatureTag> FeatureTags { get; set; }
        public virtual DbSet<FilesStorage> FilesStorages { get; set; }
        public virtual DbSet<GrpExecutionInfo> GrpExecutionInfoes { get; set; }
        public virtual DbSet<Guest> Guests { get; set; }
        public virtual DbSet<HostsConfiguration> HostsConfigurations { get; set; }
        public virtual DbSet<Issue> Issues { get; set; }
        public virtual DbSet<LoadBalanced> LoadBalanceds { get; set; }
        public virtual DbSet<LoadBalancedMachine> LoadBalancedMachines { get; set; }
        public virtual DbSet<LoadBalancedTest> LoadBalancedTests { get; set; }
        public virtual DbSet<LoginPageMonitor> LoginPageMonitors { get; set; }
        public virtual DbSet<NewLoadBalanced> NewLoadBalanceds { get; set; }
        public virtual DbSet<ExecutionGroup> ExecutionGroups { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectType> ProjectTypes { get; set; }
        public virtual DbSet<QCExportAssignment> QCExportAssignments { get; set; }
        public virtual DbSet<ReleaseInfo> ReleaseInfoes { get; set; }
        public virtual DbSet<RelExecutionStatu> RelExecutionStatus { get; set; }
        public virtual DbSet<RelExecutionStatusLog> RelExecutionStatusLogs { get; set; }
        public virtual DbSet<RelFrom> RelFroms { get; set; }
        public virtual DbSet<RelLog> RelLogs { get; set; }
        public virtual DbSet<Scenario> Scenarios { get; set; }
        public virtual DbSet<SikuliObject> SikuliObjects { get; set; }
        public virtual DbSet<SubStep> SubSteps { get; set; }
        public virtual DbSet<TeamInfo> TeamInfoes { get; set; }
        public virtual DbSet<TestCase> TestCases { get; set; }
        public virtual DbSet<TestCycle> TestCycles { get; set; }
        public virtual DbSet<TestsExecution> TestsExecutions { get; set; }
        public virtual DbSet<TestStep> TestSteps { get; set; }
        public virtual DbSet<TestSuit> TestSuits { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserSession> UserSessions { get; set; }
        public virtual DbSet<vw_ActualTestSuites> vw_ActualTestSuites { get; set; }
        public virtual DbSet<vw_AnalyzedSubSteps> vw_AnalyzedSubSteps { get; set; }
        public virtual DbSet<vw_Defects> vw_Defects { get; set; }
        public virtual DbSet<vw_FilesStorage> vw_FilesStorage { get; set; }
    
        public virtual int removeFramework(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("removeFramework", idParameter);
        }
    
        public virtual int removeTestSuite(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("removeTestSuite", idParameter);
        }
    
        public virtual int updateClient(Nullable<int> clientId, string ff, string ie, string ch, string win)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            var ffParameter = ff != null ?
                new ObjectParameter("ff", ff) :
                new ObjectParameter("ff", typeof(string));
    
            var ieParameter = ie != null ?
                new ObjectParameter("ie", ie) :
                new ObjectParameter("ie", typeof(string));
    
            var chParameter = ch != null ?
                new ObjectParameter("ch", ch) :
                new ObjectParameter("ch", typeof(string));
    
            var winParameter = win != null ?
                new ObjectParameter("win", win) :
                new ObjectParameter("win", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateClient", clientIdParameter, ffParameter, ieParameter, chParameter, winParameter);
        }
    }
}
