//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GlobalReportingSystem.Web.UI.Linear {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Linear.LinearSoap")]
    public interface LinearSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RunTests", ReplyAction="*")]
        void RunTests(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RunTests", ReplyAction="*")]
        System.Threading.Tasks.Task RunTestsAsync(int id);
        
        // CODEGEN: Generating message contract since element name WaitForRelResultsResult from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WaitForRelResults", ReplyAction="*")]
        GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsResponse WaitForRelResults(GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WaitForRelResults", ReplyAction="*")]
        System.Threading.Tasks.Task<GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsResponse> WaitForRelResultsAsync(GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ReRunTest", ReplyAction="*")]
        void ReRunTest(int tcId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ReRunTest", ReplyAction="*")]
        System.Threading.Tasks.Task ReRunTestAsync(int tcId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class WaitForRelResultsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="WaitForRelResults", Namespace="http://tempuri.org/", Order=0)]
        public GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequestBody Body;
        
        public WaitForRelResultsRequest() {
        }
        
        public WaitForRelResultsRequest(GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class WaitForRelResultsRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public int executionId;
        
        public WaitForRelResultsRequestBody() {
        }
        
        public WaitForRelResultsRequestBody(int executionId) {
            this.executionId = executionId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class WaitForRelResultsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="WaitForRelResultsResponse", Namespace="http://tempuri.org/", Order=0)]
        public GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsResponseBody Body;
        
        public WaitForRelResultsResponse() {
        }
        
        public WaitForRelResultsResponse(GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class WaitForRelResultsResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string WaitForRelResultsResult;
        
        public WaitForRelResultsResponseBody() {
        }
        
        public WaitForRelResultsResponseBody(string WaitForRelResultsResult) {
            this.WaitForRelResultsResult = WaitForRelResultsResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LinearSoapChannel : GlobalReportingSystem.Web.UI.Linear.LinearSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LinearSoapClient : System.ServiceModel.ClientBase<GlobalReportingSystem.Web.UI.Linear.LinearSoap>, GlobalReportingSystem.Web.UI.Linear.LinearSoap {
        
        public LinearSoapClient() {
        }
        
        public LinearSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LinearSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LinearSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LinearSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RunTests(int id) {
            base.Channel.RunTests(id);
        }
        
        public System.Threading.Tasks.Task RunTestsAsync(int id) {
            return base.Channel.RunTestsAsync(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsResponse GlobalReportingSystem.Web.UI.Linear.LinearSoap.WaitForRelResults(GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequest request) {
            return base.Channel.WaitForRelResults(request);
        }
        
        public string WaitForRelResults(int executionId) {
            GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequest inValue = new GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequest();
            inValue.Body = new GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequestBody();
            inValue.Body.executionId = executionId;
            GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsResponse retVal = ((GlobalReportingSystem.Web.UI.Linear.LinearSoap)(this)).WaitForRelResults(inValue);
            return retVal.Body.WaitForRelResultsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsResponse> GlobalReportingSystem.Web.UI.Linear.LinearSoap.WaitForRelResultsAsync(GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequest request) {
            return base.Channel.WaitForRelResultsAsync(request);
        }
        
        public System.Threading.Tasks.Task<GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsResponse> WaitForRelResultsAsync(int executionId) {
            GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequest inValue = new GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequest();
            inValue.Body = new GlobalReportingSystem.Web.UI.Linear.WaitForRelResultsRequestBody();
            inValue.Body.executionId = executionId;
            return ((GlobalReportingSystem.Web.UI.Linear.LinearSoap)(this)).WaitForRelResultsAsync(inValue);
        }
        
        public void ReRunTest(int tcId) {
            base.Channel.ReRunTest(tcId);
        }
        
        public System.Threading.Tasks.Task ReRunTestAsync(int tcId) {
            return base.Channel.ReRunTestAsync(tcId);
        }
    }
}
